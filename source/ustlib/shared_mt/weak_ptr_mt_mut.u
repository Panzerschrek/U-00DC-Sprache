import "shared_ptr_mt_mut.u"
import "shared_ptr_mt_nullable_mut.u"

namespace ust
{

template</ type T />
class weak_ptr_mt_mut
{
public:
	fn constructor()= default;

	fn constructor( mut this, shared_ptr_mt_mut</T/> & ptr )
	{
		unsafe{  impl_= weak_ptr_mt_base</ T />( ptr.get_impl() );  }
	}

	fn constructor( mut this, shared_ptr_mt_nullable_mut</T/> & ptr )
	{
		unsafe{  impl_= weak_ptr_mt_base</ T />( ptr.get_impl() );  }
	}

	template</ type U />
	fn enable_if( !is_same_type</T, U/>() && is_ancestor_for</T, U/>() )
	conversion_constructor( mut this, weak_ptr_mt_mut</U/>& ptr )
	{
		unsafe{  impl_= ptr.get_impl();  }
	}

	fn constructor( mut this, this_type &imut other )= default;
	op=( mut this, this_type &imut other )= default;

	fn reset( mut this )
	{
		impl_.reset();
	}

	fn lock( this ) : shared_ptr_mt_nullable_mut</T/>
	{
		unsafe{  return shared_ptr_mt_nullable_mut</T/>( impl_.lock() );  }
	}

public: // Methods for internal usage
	fn get_impl( this ) unsafe : weak_ptr_mt_base</ T />
	{
		return impl_;
	}

private:
	type this_type= weak_ptr_mt_mut</T/>;

private:
	weak_ptr_mt_base</ T /> impl_;
}

} // namespace ust
