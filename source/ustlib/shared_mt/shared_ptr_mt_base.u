import "../atomic.u"
import "../container_utils.u"
import "../memory.u"
import "../polymorph.u"
import "../pthread.u"
import "../type_traits.u"

namespace ust
{

template</ type T />
class shared_ptr_mt_base
{
	// Forbid shared pointers for structs with references inside.
	static_assert( typeinfo</T/>.references_tags_count == size_type(0) );

	// It's have no sence to use multithreaded shared pointer for types, with singlethreaded shared pointers inside.
	// Use singlethreaded shared pointer instead.
	static_assert( !have_shared_state</T/>() );

	type hasher= shared_ptr_mt_base_hasher;

public:
	fn constructor()= default;

	fn constructor( T mut value )
	{
		unsafe
		{
			value_= $<( cast_ref_unsafe</T/>( memory_allocate( typeinfo</T/>.size_of ) ) );
			move_unsafe( $>(value_), move(value) );

			counter_= $<( cast_ref_unsafe</ shared_ptr_mt_impl::counter />( memory_allocate( typeinfo</ shared_ptr_mt_impl::counter />.size_of ) ) );
			$>(counter_).use_count_total = 1u;
			$>(counter_).use_count_strong= 1u;

			var pthread_rwlockattr_t mut attr= uninitialized;
			halt if( pthread_rwlockattr_init( attr ) != 0 );
			halt if( pthread_rwlock_init( $>(counter_).rwlock, attr ) != 0 );
			halt if( pthread_rwlockattr_destroy( attr ) != 0 );
		}
	}

	template</ type U />
	fn enable_if( !is_same_type</T, U/>() && is_ancestor_for</T, U/>() )
	conversion_constructor( mut this, shared_ptr_mt_base</U/>& ptr )
	{
		if( !ptr.empty() )
		{
			unsafe
			{
				value_= $<( cast_ref</T/>( $>( ptr.get_value_ptr() ) ) );
				counter_= ptr.get_counter_ptr();
				// It's almost impossible to get counter owerflow here - so, ignore such possibility.
				atomic_inc( $>(counter_).use_count_total  );
				atomic_inc( $>(counter_).use_count_strong );
			}
		}
	}

	fn constructor( mut this, this_type &imut other )
	{
		this= other;
	}

	fn destructor()
	{
		reset();
	}

	op=( mut this, this_type &imut other )
	{
		reset();
		unsafe
		{
			if( other.counter_ != nullptr</shared_ptr_mt_impl::counter/>() )
			{
				value_= other.value_;
				counter_= other.counter_;
				// It's almost impossible to get counter owerflow here - so, ignore such possibility.
				atomic_inc( $>(counter_).use_count_total  );
				atomic_inc( $>(counter_).use_count_strong );
			}
		}
	}

	fn reset( mut this )
	{
		if( empty() ) { return; }
		unsafe
		{
			if( atomic_dec( $>(counter_).use_count_strong ) == 1u )
			{
				call_destructor( $>(value_) );
				memory_free( cast_ref_unsafe</void/>( polymorph_restore_original_ref( $>(value_) ) ) );
			}
			if( atomic_dec( $>(counter_).use_count_total ) == 1u )
			{
				halt if( pthread_rwlock_destroy( $>(counter_).rwlock ) != 0 );
				memory_free( cast_ref_unsafe</void/>( $>(counter_) ) );
			}
			value_= nullptr</T/>();
			counter_= nullptr</shared_ptr_mt_impl::counter/>();
		}
	}

	fn reset( mut this, T mut value )
	{
		this= this_type( move(value) );
	}

	fn empty( this ) : bool
	{
		return value_ == nullptr</T/>();
	}

	fn lock_mut ( this ) : lock_mut_t 'this'
	{
		halt if( empty() );
		unsafe{  return lock_mut_t ( $>(value_), counter_ );  }
	}

	fn lock_imut( this ) : lock_imut_t'this'
	{
		halt if( empty() );
		unsafe{  return lock_imut_t( $>(value_), counter_ );  }
	}

	op==( this_type& l, this_type& r ) : bool
	{
		return l.value_ == r.value_;
	}

	op!=( this_type& l, this_type& r ) : bool
	{
		return l.value_ != r.value_;
	}

public: // Methods for internal usage.

	fn get_value_ptr( this ) unsafe : $(T)
	{
		return value_;
	}

	fn get_counter_ptr( this ) unsafe : $(shared_ptr_mt_impl::counter)
	{
		return counter_;
	}

	// Counter must be incremented before this constructor call.
	fn constructor( $(T) value_ptr, $(shared_ptr_mt_impl::counter) counter_ptr ) unsafe
	( value_(value_ptr), counter_(counter_ptr) )
	{}

private:
	type this_type= shared_ptr_mt_base</ T />;
	type lock_mut_t = shared_ptr_mt_impl::lock_mut </T/>;
	type lock_imut_t= shared_ptr_mt_impl::lock_imut</T/>;

private:
	$(T) value_= zero_init;
	$(shared_ptr_mt_impl::counter) counter_ = zero_init;
}

struct shared_ptr_mt_base_hasher
{
	template</type T/>
	fn hash( shared_ptr_mt_base</T/>& ptr ) : size_type
	{
		unsafe
		{
			return ust::ref_to_int( cast_ref_unsafe</void/>( $>( ptr.get_value_ptr() ) ) );
		}
	}
}

struct shared_ptr_mt_hasher
{
	template</type PtrT/>
	fn hash( PtrT& ptr ) : size_type
	{
		unsafe{ return shared_ptr_mt_base_hasher::hash( ptr.get_impl() ); }
	}
}

template</ type T />
class weak_ptr_mt_base
{
public:
	fn constructor()= default;

	fn constructor( shared_ptr_mt_base</T/>& ptr )
	{
		unsafe
		{
			value_= ptr.get_value_ptr();
			counter_= ptr.get_counter_ptr();
			if( counter_ != nullptr</shared_ptr_mt_impl::counter/>() )
			{
				// It's almost impossible to get counter owerflow here - so, ignore such possibility.
				atomic_inc( $>(counter_).use_count_total );
			}
		}
	}

	template</ type U />
	fn enable_if( !is_same_type</T, U/>() && is_ancestor_for</T, U/>() )
	conversion_constructor( mut this, weak_ptr_mt_base</U/>& ptr )
	{
		unsafe
		{
			if( ptr.get_value_ptr() != nullptr</U/>() )
			{
				value_= $<( cast_ref</T/>( $>( ptr.get_value_ptr() ) ) );
				counter_= ptr.get_counter_ptr();
				// It's almost impossible to get counter owerflow here - so, ignore such possibility.
				atomic_inc( $>(counter_).use_count_total );
			}
		}
	}

	fn constructor( mut this, this_type &imut other )
	{
		this= other;
	}

	fn destructor()
	{
		reset();
	}

	op=( mut this, this_type &imut other )
	{
		reset();
		unsafe
		{
			if( other.counter_ != nullptr</shared_ptr_mt_impl::counter/>() )
			{
				value_= other.value_;
				counter_= other.counter_;
				// It's almost impossible to get counter owerflow here - so, ignore such possibility.
				atomic_inc( $>(counter_).use_count_total );
			}
		}
	}

	fn reset( mut this )
	{
		unsafe
		{
			if( counter_ != nullptr</shared_ptr_mt_impl::counter/>() )
			{
				if( atomic_dec( $>(counter_).use_count_total ) == 1u )
				{
					halt if( pthread_rwlock_destroy( $>(counter_).rwlock ) != 0 );
					memory_free( cast_ref_unsafe</void/>( $>(counter_) ) );
					value_= nullptr</T/>();
				}
				counter_= nullptr</shared_ptr_mt_impl::counter/>();
			}
		}
	}

	fn lock( this ) : shared_ptr_mt_base</T/>
	{
		unsafe
		{
			if( counter_ == nullptr</shared_ptr_mt_impl::counter/>() )
			{
				return shared_ptr_mt_base</T/>();
			}

			// It's almost impossible to get counter owerflow here - so, ignore such possibility.
			atomic_inc( $>(counter_).use_count_total );

			var u32 mut count= atomic_read( $>(counter_).use_count_strong );
			while(true)
			{
				if( count == 0u )
				{
					atomic_dec( $>(counter_).use_count_total );
					return shared_ptr_mt_base</T/>();
				}

				if( atomic_compare_exchange_weak(
						$>(counter_).use_count_strong,
						count,
						count + 1u ) )
				{
					break;
				}
			}

			return shared_ptr_mt_base</T/>( value_, counter_ );
		}
	}

public: // Methods for internal usage.
	fn get_value_ptr( this ) unsafe : $(T)
	{
		return value_;
	}

	fn get_counter_ptr( this ) unsafe : $(shared_ptr_mt_impl::counter)
	{
		return counter_;
	}

private:
	type this_type= weak_ptr_mt_base</ T />;
	type lock_mut_t = shared_ptr_mt_impl::lock_mut </T/>;
	type lock_imut_t= shared_ptr_mt_impl::lock_imut</T/>;

private:
	$(T) value_= zero_init;
	$(shared_ptr_mt_impl::counter) counter_= zero_init;
}

namespace shared_ptr_mt_impl
{

struct counter
{
	u32 use_count_total;
	u32 use_count_strong; // always <= use_count_total
	pthread_rwlock_t rwlock;
}

template</ type T />
class lock_mut
{
public:
	fn constructor( mut this'a', T &'b  mut value, $(counter) c ) ' a <- b ' unsafe
		( value_(value), counter_(c) )
	{
		unsafe{  halt if( pthread_rwlock_wrlock( $>(counter_).rwlock ) != 0 );  }
	}

	fn destructor()
	{
		unsafe{  halt if( pthread_rwlock_unlock( $>(counter_).rwlock ) != 0 );  }
	}

	// Mark reference by "this" tag, instead of inner tag, for prevention of "lock" destruction.
	fn get_ref( mut this ) : T &'this  mut
	{
		unsafe
		{
			return $>( $<(value_) );
		}
	}

private:
	T & mut value_;
	$(counter) counter_= zero_init;
}

template</ type T />
class lock_imut
{
public:
	fn constructor( mut this'a', T &'b imut value, $(counter) c) ' a <- b ' unsafe
		( value_(value), counter_(c) )
	{
		unsafe{  halt if( pthread_rwlock_rdlock( $>(counter_).rwlock ) != 0 );  }
	}

	fn destructor()
	{
		unsafe{  halt if( pthread_rwlock_unlock( $>(counter_).rwlock ) != 0 );  }
	}

	// Mark reference by "this" tag, instead of inner tag, for prevention of "lock" destruction.
	fn get_ref( this ) : T &'this imut
	{
		unsafe
		{
			return cast_ref_unsafe</T/>( int_to_ref( ref_to_int( cast_ref_unsafe</void/>( value_ ) ) ) );
		}
	}

private:
	T &imut value_;
	$(counter) counter_= zero_init;
}

} // namespace shared_ptr_mt_impl

} // namespace ust
