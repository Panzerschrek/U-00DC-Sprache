import "../atomic.u"
import "../container_utils.u"
import "../memory.u"
import "../type_traits.u"

namespace ust
{

template</ type T />
class shared_ptr_mt_final_base
{
	// Forbid shared pointers for structs with references inside.
	static_assert( typeinfo</T/>.references_tags_count == size_type(0) );

	// It's have no sence to use multithreaded shared pointer for types, with singlethreaded shared pointers inside.
	// Use singlethreaded shared pointer instead.
	static_assert( !have_shared_state</T/>() );

	type hasher= shared_ptr_mt_final_base_hasher;

public:
	fn constructor()= default;

	fn constructor( T mut value )
	{
		unsafe
		{
			ptr_= $<( cast_ref_unsafe</storage/>( memory_allocate( typeinfo</storage/>.size_of ) ) );
			move_unsafe( $>(ptr_).value, move(value) );
			$>(ptr_).counter= 1u;
		}
	}

	fn constructor( mut this, this_type &imut other )
	{
		this= other;
	}

	fn destructor()
	{
		reset();
	}

	op=( mut this, this_type &imut other )
	{
		reset();
		unsafe
		{
			if( other.ptr_ != nullptr</storage/>() )
			{
				ptr_= other.ptr_;
				ust::atomic_inc( $>(ptr_).counter );
			}
		}
	}

	fn reset( mut this )
	{
		if( empty() ) { return; }
		unsafe
		{
			if( ust::atomic_dec( $>(ptr_).counter ) == 1u )
			{
				call_destructor( $>(ptr_).value );
				memory_free( $>(ptr_) );
			}
			ptr_= nullptr</storage/>();
		}
	}

	fn reset( mut this, T mut value )
	{
		this= this_type( move(value) );
	}

	fn empty( this ) : bool
	{
		return ptr_ == nullptr</storage/>();
	}

	fn get_ref_unsafe( this ) unsafe : T &imut
	{
		unsafe
		{
			return $>(ptr_).value;
		}
	}

	op==( this_type& l, this_type& r ) : bool
	{
		return l.ptr_ == r.ptr_;
	}

	op!=( this_type& l, this_type& r ) : bool
	{
		return l.ptr_ != r.ptr_;
	}

private:
	type this_type= shared_ptr_mt_final_base</T/>;

	struct storage
	{
		u32 counter;
		T value;
	}

private:
	$(storage) ptr_= zero_init;
}

struct shared_ptr_mt_final_base_hasher
{
	template</type T/>
	fn hash( shared_ptr_mt_final_base</T/>& ptr ) : size_type
	{
		unsafe
		{
			return ust::ref_to_int( ptr.get_ref_unsafe() );
		}
	}
}

struct shared_ptr_mt_final_hasher
{
	template</type PtrT/>
	fn hash( PtrT& ptr ) : size_type
	{
		unsafe{ return shared_ptr_mt_final_base_hasher::hash( ptr.get_impl() ); }
	}
}

} // namespace ust
