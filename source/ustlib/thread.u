import "box.u"
import "memory.u"

namespace ust
{

// Implementation of thread class, using "pthreads" library.

template</ type Func />
fn thread_create( Func mut func'a...' ) : thread</ Func />'a...'
{
	return thread</ Func />( move(func) );
}

template</ type Func />
class thread
{
public:
	fn constructor( mut this'a...', Func mut func'b...' ) ' a <- b '
	( func_(move(func)) )
	{
		unsafe
		{
			var pthread_attr_t mut attr= zero_init;
			var pthread_start_function fn_ptr(thread_function);
			var pthread_t mut thread_id(0);

			halt if( pthread_attr_init( attr ) != 0 );
			halt if( pthread_create( thread_id, attr, fn_ptr, func_.get_ref() ) != 0 );
			halt if( pthread_attr_destroy( attr ) != 0 );

			thread_id_= thread_id;
		}
	}

	fn constructor( mut this, this_type &imut other )= delete;
	op=( mut this, this_type &imut other )= delete;

	fn destructor()
	{
		unsafe
		{
			halt if( pthread_join( thread_id_, cast_mut( int_to_ref( size_type(0) ) ) ) != 0 );
		}
	}

private:
	type this_type= ust::thread</Func/>;
	type FuncBox= box</Func/>;

	fn thread_function( void& mut func_ptr ) : void& mut
	{
		unsafe
		{
			var Func &mut func= cast_ref_unsafe</Func/>(func_ptr);
			func();
			return cast_mut( int_to_ref( size_type(0) ) );
		}
	}

private:
	// Store function inside box, because we send raw pointer to it to thread function.
	FuncBox func_;
	pthread_t thread_id_(0);
}

} // namespace ust

type pthread_t= size_type;
type pthread_attr_t= [ u64, 8 ]; // pthread_attr_t have different size on diffrerent platforms. Use maximum size and maximum alignment.
type pthread_start_function= fn( void&mut arg ) : void& mut;

fn nomangle pthread_attr_init( pthread_attr_t& mut thread_attr ) unsafe : i32;
fn nomangle pthread_attr_destroy( pthread_attr_t& mut thread_attr ) unsafe : i32;

fn nomangle pthread_create(
	pthread_t& mut thread_id,
	pthread_attr_t& mut thread_attr,
	pthread_start_function start_function,
	void& mut arg ) unsafe : i32;

fn nomangle  pthread_join(
	pthread_t thread_id,
	void& mut ret_val ) unsafe : i32;
