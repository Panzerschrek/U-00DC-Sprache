import "box_nullable.u"
import "container_utils.u"
import "optional.u"
import "pthread.u"

namespace ust
{

// Implementation of thread class, using "pthreads" library.

template</ type Func, type ResultType />
class thread
{
	static_assert( !non_sync</Func/>, "passing non_sync functor into another thread" );

public:
	fn constructor( mut this, Func mut func )
	( impl_( Impl(move(func)) ) )
	{
		unsafe
		{
			var pthread_attr_t mut attr= zero_init;
			var pthread_start_function fn_ptr(thread_function);
			var pthread_t mut thread_id(0);

			auto &mut impl= impl_.try_deref();

			halt if( pthread_attr_init( attr ) != 0 );
			halt if( pthread_create( thread_id, attr, fn_ptr, $<( cast_ref_unsafe</byte8/>(impl) ) ) != 0 );
			halt if( pthread_attr_destroy( attr ) != 0 );

			impl.thread_id= thread_id;
		}
	}

	fn constructor( mut this, this_type &imut other )= delete;
	op=( mut this, this_type &imut other )= delete;

	// Implement "join" as byval this-call method to enforce user to move thread to join it and avoid calling "join" again.
	fn join( byval mut this ) : ResultType
	{
		join_impl();
		auto res= impl_.try_deref().result.try_take();
		impl_.reset();
		return res;
	}

	fn destructor()
	{
		if( !impl_.empty() )
		{
			join_impl();
		}
	}

private:
	type this_type= thread</ Func, ResultType />;
	struct Impl
	{
		Func func;
		optional</ResultType/> result;
		pthread_t thread_id(0);

		fn constructor( Func mut in_func ) ( func(move(in_func)) ) {}
	}

	fn thread_function( $(byte8) impl_ptr ) : $(byte8)
	{
		unsafe
		{
			auto &mut impl= cast_ref_unsafe</Impl/>( $>(impl_ptr) );

			auto mut res= impl.func();
			impl.result.reset( move(res) );

			return nullptr</byte8/>();
		}
	}

	fn join_impl( mut this )
	{
		halt if( unsafe( pthread_join( impl_.try_deref().thread_id, nullptr</$(byte8)/>() ) ) != 0 );
	}

private:
	// Store content inside box, because we send raw pointer to it to thread function.
	box_nullable</Impl/> impl_;
}

template</ type Func />
type thread_void= thread</ Func, void />;

template</ type Func />
fn make_thread_void( Func mut func ) : thread_void</Func/>
{
	return thread_void</Func/>( move(func) );
}

template</ type ReturnType, type Func />
fn make_thread( Func mut func ) : thread</ Func, ReturnType />
{
	return thread</ Func, ReturnType />( move(func) );
}

} // namespace ust
