import "alloc.u"
import "container_utils.u"
import "optional.u"
import "pthread.u"

namespace ust
{

// Implementation of thread class, using "pthreads" library.
// Given functor should be callable via ().
// It supports function-like objects returning values (references for now are not supported).
// Functors storing references inside are supported.

template</ type Func, type ResultType />
class thread
{
	static_assert( !non_sync</Func/>, "passing non_sync functor into another thread" );

public:
	fn constructor( mut this, Func mut func ) @(c_constructor_pollution)
	( impl_= nullptr</Impl/>() )
	{
		unsafe
		{
			// Allocate and initialize Impl.
			impl_= $<( cast_ref_unsafe</Impl/>( memory_allocate( typeinfo</Impl/>.size_of ) ) );
			var Impl &mut impl= $>(impl_);
			move_into_uninitialized( impl, Impl( move(func) ) );

			// Create system thread.
			var pthread_attr_t mut attr= zero_init;
			var pthread_t mut thread_id(0);

			halt if( pthread_attr_init( attr ) != 0 );
			halt if( pthread_create( thread_id, attr, thread_function, $<( cast_ref_unsafe</byte8/>(impl) ) ) != 0 );
			halt if( pthread_attr_destroy( attr ) != 0 );

			impl.thread_id= thread_id;
		}
	}

	// Thread class is obviously non-copyable.
	fn constructor( mut this, this_type &imut other )= delete;
	op=( mut this, this_type &imut other )= delete;

	// Implement "join" as byval this-call method to enforce user to move thread to join it and avoid calling "join" again.
	fn join( byval mut this ) : ResultType
	{
		halt if( unsafe( pthread_join( $>(impl_).thread_id, nullptr</$(byte8)/>() ) ) != 0 );

		auto res= unsafe( $>(impl_) ).result.try_take();

		// Free and zero Impl in order to avoid doing this in destructor.
		unsafe( memory_free( cast_ref_unsafe</byte8/>( $>(impl_) ) ) );
		impl_= nullptr</Impl/>();

		return res;
	}

	fn destructor()
	{
		if( impl_ != nullptr</Impl/>() )
		{
			// Join it and free Impl if it wasn't done previously.
			halt if( unsafe( pthread_join( $>(impl_).thread_id, nullptr</$(byte8)/>() ) ) != 0 );
			unsafe( memory_free( cast_ref_unsafe</byte8/>( $>(impl_) ) ) );
		}
	}

private:
	type this_type= thread</ Func, ResultType />;
	struct Impl
	{
		Func func;
		optional</ResultType/> result;
		pthread_t thread_id(0);

		fn constructor( Func mut in_func ) @(c_constructor_pollution)
			( func(move(in_func)) )
		{}
	}

	auto constexpr c_reference_tag_count= typeinfo</Func/>.reference_tag_count;
	static_assert( typeinfo</Func/>.reference_tag_count == typeinfo</Impl/>.reference_tag_count );

	auto c_constructor_pollution= reference_notation::pollution::param0_param1_all_inner_references</ c_reference_tag_count />();

private:
	fn thread_function( $(byte8) impl_ptr ) : $(byte8)
	{
		var Impl &mut impl= unsafe( cast_ref_unsafe</Impl/>( $>(impl_ptr) ) );

		impl.result.reset( impl.func() );

		return nullptr</byte8/>();
	}

private:
	ContainerTag</Impl/> container_tag_;

	// Store content indirectly, because we send raw pointer to it to thread function.
	$(Impl) impl_;
}

// Thread creation helper.
// Return type is deduced based on given function.
template</ type Func />
fn make_thread( Func mut func ) : auto
{
	type ReturnType= typeof( func() );
	return thread</ Func, ReturnType />( move(func) );
}

} // namespace ust
