import "aligned_storage.u"
import "memory.u"
import "type_traits.u"

namespace ust
{


template</ type Func />
fn thread_create( Func mut func ) : thread</ Func />
{
	return thread</ Func />( move(func) );
}

template</ type Func />
class thread
{
public:
	fn constructor( Func mut runnable )
	( runnable_(move(runnable)) )
	{
		unsafe
		{
			var pthread_attr_t mut attr= zero_init;
			var pthread_start_function fn_ptr(thread_function);
			var pthread_t mut thread_id(0);

			halt if( pthread_attr_init( attr ) != 0 );
			halt if( pthread_create( thread_id, attr, fn_ptr, this ) != 0 );
			halt if( pthread_attr_destroy( attr ) != 0 );

			thread_id_= thread_id;
		}
	}

	fn destructor()
	{
		join_impl();
	}

private:
	type this_type= ust::thread</Func/>;

	fn thread_function( void& mut this_as_void ) : void& mut
	{
		unsafe
		{
			var this_type &mut this_= cast_ref_unsafe</this_type/>(this_as_void);
			this_.runnable_();
			return cast_mut( int_to_ref( size_type(0) ) );
		}
	}

	fn join_impl( mut this )
	{
		unsafe
		{
			halt if( pthread_join( thread_id_, cast_mut( int_to_ref( size_type(0) ) ) ) != 0 );
		}
	}

private:
	Func runnable_;
	pthread_t thread_id_(0);
}

} // namespace ust

type pthread_t= u64;
type pthread_attr_t= [ u64, 8 ]; // pthread_attr_t have different size on diffrerent platforms. Use maximum size and maximum alignment.
type pthread_start_function= fn( void&mut arg ) : void& mut;

fn nomangle pthread_attr_init( pthread_attr_t& mut thread_attr ) unsafe : i32;
fn nomangle pthread_attr_destroy( pthread_attr_t& mut thread_attr ) unsafe : i32;

fn nomangle pthread_create(
	pthread_t& mut thread_id,
	pthread_attr_t& mut thread_attr,
	pthread_start_function start_function,
	void& mut arg ) unsafe : i32;

fn nomangle  pthread_join(
	pthread_t thread_id,
	void& mut ret_val ) unsafe : i32;
