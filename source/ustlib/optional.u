import "aligned_storage.u"
import "container_utils.u"
import "optional_ref.u"
import "hash.u"

namespace ust
{

struct null_optional_type{}
var null_optional_type constexpr null_optional{};

template</ type T />
class optional
{
public:
	type hasher= optional_hasher;

public:
	fn constructor()
	( storage_= zero_init, has_value_= false ) // TODO - initialize with unsafe
	{}

	// Use this conversion constructor in order to use simple "ust::null_optional" to pass/return empty optional, without specifying exact optional type.
	fn conversion_constructor( null_optional_type n )
	( storage_= zero_init, has_value_= false ) // TODO - initialize with unsafe
	{
		ignore_unused(n);
	}
	
	// Construct with value.
	fn conversion_constructor( mut this, T mut val ) @(c_param1_pollution)
	( storage_= zero_init, has_value_= true  ) // TODO - initialize with unsafe 
	{
		unsafe( move_into_uninitialized( deref_unchecked(), move(val) ) );
	}

	// Copy constructor
	fn enable_if( typeinfo</T/>.is_copy_constructible ) constructor( this_type& other )
	( storage_= zero_init, has_value_= other.has_value_ ) // TODO - initialize with unsafe
	{
		if( other.has_value_ )
		{
			unsafe( move_into_uninitialized( deref_unchecked(), other.deref_unchecked() ) );
		}
	}

	fn destructor()
	{
		if( has_value_ )
		{
			unsafe( call_destructor( cast_ref_unsafe</T/>(storage_) ) );
		}
	}

	// Copy assignment operator
	op enable_if( typeinfo</T/>.is_copy_constructible ) =( mut this, this_type& other )
	{
		unsafe
		{
			static_if( typeinfo</T/>.is_copy_assignable )
			{
				if( other.has_value_ )
				{
					if( this.has_value_ )
					{
						deref_unchecked()= other.deref_unchecked();
					}
					else
					{
						move_into_uninitialized( deref_unchecked(), other.deref_unchecked() );
					}
				}
				else
				{
					if( this.has_value_ )
					{
						call_destructor( deref_unchecked() );
					}
				}
			}
			else
			{
				if( this.has_value_ )
				{
					call_destructor( deref_unchecked() );
				}
				if( other.has_value_ )
				{
					move_into_uninitialized( deref_unchecked(), other.deref_unchecked() );
				}
			}
			has_value_= other.has_value_;
		}
	}

	// Assign value
	op=( mut this, T mut val ) @(c_param1_pollution)
	{
		unsafe
		{
			static_if( typeinfo</T/>.is_copy_assignable )
			{
				if( has_value_ )
				{
					deref_unchecked()= move(val);
				}
				else
				{
					move_into_uninitialized( deref_unchecked(), move(val) );
				}
			}
			else
			{
				if( has_value_ )
				{
					call_destructor( deref_unchecked() );
				}
				move_into_uninitialized( deref_unchecked(), move(val) );
			}
			has_value_= true;
		}
	}

	op=( mut this, null_optional_type n )
	{
		ignore_unused(n);
		reset();
	}

	fn empty(this) : bool
	{
		return !has_value_;
	}

	fn try_deref(  mut this )
		: T @(c_return_inner_references) & mut @( reference_notation::return_references::param0 )
	{
		halt if( empty() );
		return unsafe( deref_unchecked() );
	}

	fn try_deref( imut this )
		: T @(c_return_inner_references) &imut @( reference_notation::return_references::param0 )
	{
		halt if( empty() );
		return unsafe( deref_unchecked() );
	}

	fn deref_unchecked(  mut this ) unsafe
		: T @(c_return_inner_references) & mut @( reference_notation::return_references::param0 )
	{
		return unsafe( cast_ref_unsafe</T/>(storage_) );
	}

	fn deref_unchecked( imut this ) unsafe
		: T @(c_return_inner_references) &imut @( reference_notation::return_references::param0 )
	{
		return unsafe( cast_ref_unsafe</T/>(storage_) );
	}

	fn reset(mut this)
	{
		if( !empty() )
		{
			unsafe( call_destructor( deref_unchecked() ) );
			has_value_= false;
		} 
	}

	fn reset( mut this, T mut val ) @(c_param1_pollution)
	{
		unsafe
		{
			if( has_value_ )
			{
				call_destructor( deref_unchecked() );
			}
			move_into_uninitialized( deref_unchecked(), move(val) );
			has_value_ = true;
		}
	}

	fn
	enable_if( typeinfo</T/>.reference_tag_count == 0s )
	as_ref( mut this ) : optional_ref_mut</T/> @( reference_notation::return_inner_references::param0 )
	{
		if( has_value_ )
		{
			return optional_ref_mut</T/>( unsafe( deref_unchecked() ) );
		}
		else
		{
			return optional_ref_mut</T/>();
		}
	}

	fn
	enable_if( typeinfo</T/>.reference_tag_count == 0s )
	as_ref( imut this ) : optional_ref_imut</T/> @( reference_notation::return_inner_references::param0 )
	{
		if( has_value_ )
		{
			return optional_ref_imut</T/>( unsafe( deref_unchecked() ) );
		}
		else
		{
			return null_optional_ref;
		}
	}

	// Take value, leave optional empty.
	fn try_take( mut this ) : T @(c_return_inner_references)
	{
		halt if(empty());
		has_value_ = false;
		unsafe
		{
			var T mut t= uninitialized;
			memory_copy_aligned( typeinfo</T/>.align_of, cast_ref_unsafe</byte8/>(t), cast_ref_unsafe</byte8/>(deref_unchecked()), typeinfo</T/>.size_of );
			return move(t);
		}
	}

	// Compare with null optional. Result is true if optional is empty.

	op==( this_type& l, null_optional_type n ) : bool
	{
		ignore_unused(n);
		return l.empty();
	}

	op==( null_optional_type n, this_type& r ) : bool
	{
		ignore_unused(n);
		return r.empty();
	}

	// Equality compare operator for equality comparable type.

	op enable_if( typeinfo</T/>.is_equality_comparable )
	==( this_type& l, this_type& r ) : bool
	{
		if( l.empty() != r.empty() )
		{
			return false;
		}

		if( l.empty() )
		{
			return true; // Two empty optionals are equal.
		}

		return unsafe( l.deref_unchecked() ) == unsafe( r.deref_unchecked() );
	}

	// Imnplement also == for value and optional to avoid costly implicit value to optional conversion

	op enable_if( typeinfo</T/>.is_equality_comparable )
	==( this_type& l, T& r ) : bool
	{
		if_var( &l_value : l )
		{
			return l_value == r;
		}
		return false;
	}

	op enable_if( typeinfo</T/>.is_equality_comparable )
	==( T& l, this_type& r ) : bool
	{
		if_var( &r_value : r )
		{
			return l == r_value;
		}
		return false;
	}

private:
	type this_type= optional</T/>;

	auto constexpr c_reference_tag_count= typeinfo</T/>.reference_tag_count;
	auto c_param1_pollution= reference_notation::pollution::param0_param1_all_inner_references</ c_reference_tag_count />();
	auto c_return_inner_references= reference_notation::return_inner_references::param0_all_inner_references</ c_reference_tag_count />();

private:
	ContainerTag</ T /> container_tag_;
	aligned_storage</ typeinfo</T/>.size_of, typeinfo</T/>.align_of /> storage_;
	bool has_value_;
}

struct optional_hasher
{
	template</ type T />
	fn hash( optional</T/>& opt ) : size_type
	{
		if_var( &value : opt )
		{
			return default_hasher::hash(value);
		}
		return 0s;
	}
}

} // namespace ust
