import "container_utils.u"

namespace ust
{

template</ type T />
class optional
{
public:
	fn constructor()
	( storage_= zero_init, has_value_= false  ) // TODO - initialize with unsafe
	{}
	
	// Construct with value.
	fn constructor( mut this'a...', T mut val'b...' ) ' a <- b '
	( storage_= zero_init, has_value_= true  ) // TODO - initialize with unsafe 
	{
		unsafe
		{
			move_unsafe</T/>( get_ref_unsafe(), move(val) );
		}
	}

	// Copy constructor
	fn enable_if( typeinfo</T/>.is_copy_constructible ) constructor( optional</T/>& other )
	( storage_= zero_init, has_value_= other.has_value_ ) // TODO - initialize with unsafe
	{
		if( other.has_value_ )
		{
			unsafe
			{
				move_unsafe</T/>( get_ref_unsafe(), other.get_ref_unsafe() );
			}
		}
	}

	fn destructor()
	{
		if( has_value_ )
		{
			unsafe
			{
				call_destructor( get_ref_unsafe() );
			}
		}
	}

	// Copy assignment operator
	op enable_if( typeinfo</T/>.is_copy_constructible ) =( mut this, optional</T/>& other )
	{
		unsafe
		{
			static_if( typeinfo</T/>.is_copy_assignable )
			{
				if( other.has_value_ )
				{
					if( this.has_value_ )
					{
						get_ref_unsafe()= other.get_ref_unsafe();
					}
					else
					{
						move_unsafe</T/>( get_ref_unsafe(), other.get_ref_unsafe() );
					}
				}
				else
				{
					if( this.has_value_ )
					{
						call_destructor( get_ref_unsafe() );
					}
				}
			}
			else
			{
				if( this.has_value_ )
				{
					call_destructor( get_ref_unsafe() );
				}
				if( other.has_value_ )
				{
					move_unsafe</T/>( get_ref_unsafe(), other.get_ref_unsafe() );
				}
			}
			has_value_= other.has_value_;
		}
	}

	// Assign value
	op=( mut this'a...', T mut val'b...' ) ' a <- b '
	{
		unsafe
		{
			static_if( typeinfo</T/>.is_copy_assignable )
			{
				if( has_value_ )
				{
					get_ref_unsafe()= move(val);
				}
				else
				{
					move_unsafe</T/>( get_ref_unsafe(), move(val) );
				}
			}
			else
			{
				if( has_value_ )
				{
					call_destructor( get_ref_unsafe() );
				}
				move_unsafe</T/>( get_ref_unsafe(), move(val) );
			}
			has_value_= true;
		}
	}

	fn empty(this) : bool
	{
		return !has_value_;
	}

	fn get_ref( mut this ) : T &mut
	{
		halt if( empty() );
		unsafe{  return get_ref_unsafe();  }
	}

	fn get_ref( imut this ) : T &imut
	{
		halt if( empty() );
		unsafe{  return get_ref_unsafe();  }
	}

	fn reset(mut this)
	{
		if( !empty() )
		{
			unsafe
			{
				call_destructor( get_ref_unsafe() );
			}
			has_value_= false;
		} 
	}

	fn reset( mut this'a...', T mut val'b...' ) ' a <- b '
	{
		unsafe
		{
			if( has_value_ )
			{
				call_destructor( get_ref_unsafe() );
			}
			move_unsafe</T/>( get_ref_unsafe(), move(val) );
			has_value_ = true;
		}
	}

	// TODO - add == and !=
	
private:
	fn get_ref_unsafe( mut this ) unsafe : T &mut
	{
		unsafe{  return cast_ref_unsafe</T/>(storage_);  }
	}

	fn get_ref_unsafe( imut this ) unsafe : T &imut
	{
		unsafe{  return cast_ref_unsafe</T/>(storage_);  }
	}

private:

	template</ size_type size, size_type alignment />
	struct aligned_storage
	{
		template<//> struct integer_type_for_alignment</ size_type(1) />{ type t=  u8; }
		template<//> struct integer_type_for_alignment</ size_type(2) />{ type t= u16; }
		template<//> struct integer_type_for_alignment</ size_type(4) />{ type t= u32; }
		template<//> struct integer_type_for_alignment</ size_type(8) />{ type t= u64; }
		template</ size_type S /> struct integer_type_for_alignment     { type t= u64; }
		// TODO - support 16-bytes alignment

		type integer_type= integer_type_for_alignment</ alignment />::t;
		auto constexpr integer_type_size= typeinfo</integer_type/>.size_of;
		auto constexpr integer_count= ( size + ( integer_type_size - size_type(1) ) ) / integer_type_size;

		[ integer_type, integer_count ] storage_;
	}

	type storage_type= aligned_storage</ typeinfo</T/>.size_of, typeinfo</T/>.align_of />;
	
private:
	ContainerTag</ T /> container_tag_;
	storage_type storage_;
	bool has_value_;
}

} // namespace ust
