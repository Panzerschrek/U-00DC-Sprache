import "aligned_storage.u"
import "container_utils.u"
import "hash.u"

namespace ust
{

template</ type T />
class optional
{
public:
	type hasher= optional_hasher;

public:
	fn constructor()
	( storage_= zero_init, has_value_= false  ) // TODO - initialize with unsafe
	{}
	
	// Construct with value.
	fn conversion_constructor( mut this'a', T mut val'b' ) ' a <- b '
	( storage_= zero_init, has_value_= true  ) // TODO - initialize with unsafe 
	{
		unsafe
		{
			move_into_uninitialized( get_ref_unchecked(), move(val) );
		}
	}

	// Copy constructor
	fn enable_if( typeinfo</T/>.is_copy_constructible ) constructor( optional</T/>& other )
	( storage_= zero_init, has_value_= other.has_value_ ) // TODO - initialize with unsafe
	{
		if( other.has_value_ )
		{
			unsafe
			{
				move_into_uninitialized( get_ref_unchecked(), other.get_ref_unchecked() );
			}
		}
	}

	fn destructor()
	{
		if( has_value_ )
		{
			unsafe
			{
				call_destructor( get_ref_unchecked() );
			}
		}
	}

	// Copy assignment operator
	op enable_if( typeinfo</T/>.is_copy_constructible ) =( mut this, optional</T/>& other )
	{
		unsafe
		{
			static_if( typeinfo</T/>.is_copy_assignable )
			{
				if( other.has_value_ )
				{
					if( this.has_value_ )
					{
						get_ref_unchecked()= other.get_ref_unchecked();
					}
					else
					{
						move_into_uninitialized( get_ref_unchecked(), other.get_ref_unchecked() );
					}
				}
				else
				{
					if( this.has_value_ )
					{
						call_destructor( get_ref_unchecked() );
					}
				}
			}
			else
			{
				if( this.has_value_ )
				{
					call_destructor( get_ref_unchecked() );
				}
				if( other.has_value_ )
				{
					move_into_uninitialized( get_ref_unchecked(), other.get_ref_unchecked() );
				}
			}
			has_value_= other.has_value_;
		}
	}

	// Assign value
	op=( mut this'a', T mut val'b' ) ' a <- b '
	{
		unsafe
		{
			static_if( typeinfo</T/>.is_copy_assignable )
			{
				if( has_value_ )
				{
					get_ref_unchecked()= move(val);
				}
				else
				{
					move_into_uninitialized( get_ref_unchecked(), move(val) );
				}
			}
			else
			{
				if( has_value_ )
				{
					call_destructor( get_ref_unchecked() );
				}
				move_into_uninitialized( get_ref_unchecked(), move(val) );
			}
			has_value_= true;
		}
	}

	fn empty(this) : bool
	{
		return !has_value_;
	}

	fn get_ref( mut this ) : T &mut
	{
		halt if( empty() );
		unsafe{  return get_ref_unchecked();  }
	}

	fn get_ref( imut this ) : T &imut
	{
		halt if( empty() );
		unsafe{  return get_ref_unchecked();  }
	}

	fn get_ref_unchecked( mut this ) unsafe : T &mut
	{
		unsafe{  return cast_ref_unsafe</T/>(storage_);  }
	}

	fn get_ref_unchecked( imut this ) unsafe : T &imut
	{
		unsafe{  return cast_ref_unsafe</T/>(storage_);  }
	}

	fn reset(mut this)
	{
		if( !empty() )
		{
			unsafe
			{
				call_destructor( get_ref_unchecked() );
			}
			has_value_= false;
		} 
	}

	fn reset( mut this'a', T mut val'b' ) ' a <- b '
	{
		unsafe
		{
			if( has_value_ )
			{
				call_destructor( get_ref_unchecked() );
			}
			move_into_uninitialized( get_ref_unchecked(), move(val) );
			has_value_ = true;
		}
	}

	// TODO - add == and !=
	
private:
	ContainerTag</ T /> container_tag_;
	aligned_storage</ typeinfo</T/>.size_of, typeinfo</T/>.align_of /> storage_;
	bool has_value_;
}

struct optional_hasher
{
	template</ type T />
	fn hash( optional</T/>& opt ) : size_type
	{
		if_var( &value : opt )
		{
			return default_hasher::hash(value);
		}
		return size_type(0);
	}
}

} // namespace ust
