namespace ust
{

template</type T/>
fn constexpr enable_if( math_impl::is_float</T/>() )
nan() : T
{
	return T(0) / T(0);
}

template</type T/>
fn constexpr enable_if( math_impl::is_float</T/>() )
plus_inf() : T
{
	return T(+1) / T(0);
}

template</type T/>
fn constexpr enable_if( math_impl::is_float</T/>() )
minus_inf() : T
{
	return T(-1) / T(0);
}

template</type T/>
fn constexpr enable_if( math_impl::is_numeric</T/>() )
abs( T x ) : T
{
	return select( x >= T(0) ? x : -x );
}

fn sqrt( f32 x ) : f32;
fn sqrt( f64 x ) : f64;

fn pow( f32 x, f32 exp ) : f32;
fn pow( f64 x, f64 exp ) : f64;

fn exp( f32 x ) : f32;
fn exp( f64 x ) : f64;

fn exp2( f32 x ) : f32;
fn exp2( f64 x ) : f64;

fn expm1( f32 x ) : f32;
fn expm1( f64 x ) : f64;

fn log( f32 x ) : f32;
fn log( f64 x ) : f64;

fn log2( f32 x ) : f32;
fn log2( f64 x ) : f64;

fn log1p( f32 x ) : f32;
fn log1p( f64 x ) : f64;

fn sin( f32 x ) : f32;
fn sin( f64 x ) : f64;

fn cos( f32 x ) : f32;
fn cos( f64 x ) : f64;

fn tan( f32 x ) : f32;
fn tan( f64 x ) : f64;

fn asin( f32 x ) : f32;
fn asin( f64 x ) : f64;

fn acos( f32 x ) : f32;
fn acos( f64 x ) : f64;

fn atan( f32 x ) : f32;
fn atan( f64 x ) : f64;

fn atan2( f32 y, f32 x ) : f32;
fn atan2( f64 y, f64 x ) : f64;

// round downward
fn floor( f32 x ) : f32;
fn floor( f64 x ) : f64;

// round upward
fn ceil( f32 x ) : f32;
fn ceil( f64 x ) : f64;

// round to nearest integer
fn round( f32 x ) : f32;
fn round( f64 x ) : f64;

// round toward zero
fn trunc( f32 x ) : f32;
fn trunc( f64 x ) : f64;

namespace math_impl
{

template</ type T />
fn constexpr is_float() : bool
{
	static_if( typeinfo</T/>.is_fundamental )
	{
		return typeinfo</T/>.is_float;
	}
	else
	{
		return false;
	}
}

template</ type T />
fn constexpr is_numeric() : bool
{
	static_if( typeinfo</T/>.is_fundamental )
	{
		return typeinfo</T/>.is_numeric;
	}
	else
	{
		return false;
	}
}

} // namespace math_impl

} // namespace ust
