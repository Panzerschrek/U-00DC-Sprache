namespace ust
{

template</type T/>
fn constexpr enable_if( math_impl::is_float</T/>() )
nan() : T
{
	return T(0) / T(0);
}

template</type T/>
fn constexpr enable_if( math_impl::is_float</T/>() )
plus_inf() : T
{
	return T(+1) / T(0);
}

template</type T/>
fn constexpr enable_if( math_impl::is_float</T/>() )
minus_inf() : T
{
	return T(-1) / T(0);
}

fn sqrt( f32 x ) : f32;
fn sqrt( f64 x ) : f64;

fn exp( f32 x ) : f32;
fn exp( f64 x ) : f64;

fn exp2( f32 x ) : f32;
fn exp2( f64 x ) : f64;

fn log( f32 x ) : f32;
fn log( f64 x ) : f64;

fn log2( f32 x ) : f32;
fn log2( f64 x ) : f64;

namespace math_impl
{

template</ type T />
fn constexpr is_float() : bool
{
	static_if( typeinfo</T/>.is_fundamental )
	{
		return typeinfo</T/>.is_float;
	}
	else
	{
		return false;
	}
}

} // namespace math_impl

} // namespace ust
