import "aligned_storage.u"
import "container_utils.u"
import "minmax.u"
import "optional_ref.u"
import "type_traits.u"

?macro <? variant_visit:block ( ?r:opt<? & ?> ?m:opt<? mut ?> ?var_name:ident : ?e:expr ) ?b:block ?>
->
<?
	with( & ?m<? mut ?> ??variant : ?e )
	{
		for( & ??element_type_typeinfo : typeinfo</ typeof(??variant)::elements_tuple />.elements_list )
		{
			auto ??ref= ??variant.get</ typeof(??element_type_typeinfo.type)::src_type />();
			if( !??ref.empty() )
			{
				with( ?r<? & ?> ?m<? mut ?> ?var_name : ??ref.try_deref() )
				?b
			}
		}
	}
?>

namespace ust
{

// Param - nonempty tuple with unique types.
template</ type Y />
class variant
{
public:
	static_assert( typeinfo</Y/>.is_tuple );
	static_assert( typeinfo</Y/>.element_count > 0s );
	static_assert( variant_impl::all_tuple_elements_are_unique</Y/>() );
	// Cant' use type with references inside since we use "optional_ref" to access variants.
	static_assert( typeinfo</Y/>.references_tags_count == 0s );

	type this_type= variant</ Y />;
	type elements_tuple= Y;

public:
	fn
	enable_if( typeinfo</Y/>.elements_list[0].type.is_default_constructible )
	constructor()
		( index_(0), storage_= zero_init )
	{
		auto& element_type_typeinfo= typeinfo</Y/>.elements_list[0].type;
		var typeof(element_type_typeinfo)::src_type mut val;
		unsafe
		{
			move_into_uninitialized( cast_ref_unsafe</ typeof(element_type_typeinfo)::src_type />(storage_), move(val) );
		}
	}

	fn
	enable_if( variant_impl::all_tuple_elements_are_copy_constructible</Y/>() )
	constructor( this_type& other )
		( index_(other.index_), storage_= zero_init )
	{
		auto mut cur_index= 0s;
		for( & element : typeinfo</Y/>.elements_list )
		{
			if( cur_index == size_type(other.index_) )
			{
				unsafe
				{
					auto mut copy = cast_ref_unsafe</ typeof(element.type)::src_type />(other.storage_);
					move_into_uninitialized( cast_ref_unsafe</ typeof(element.type)::src_type />(storage_), move(copy) );
				}
				return;
			}
			++cur_index;
		}
	}
	
	template</ type T />
	fn enable_if( variant_impl::type_is_one_of_tuple_elements</ T, Y />() )
	conversion_constructor(T mut val)
		( index_(0), storage_= zero_init )
	{
		auto mut cur_index= 0s;
		for( & element : typeinfo</Y/>.elements_list )
		{
			static_if( is_same_type</ typeof(element.type)::src_type, T />() )
			{
				unsafe
				{
					move_into_uninitialized( cast_ref_unsafe</T/>(storage_), move(val) );
				}

				index_= u8(cur_index);
				return;
			}
			else
			{
				++cur_index;
			}
		}
	}
	
	fn destructor()
	{
		auto mut cur_index= 0s;
		for( & element : typeinfo</Y/>.elements_list )
		{
			if( cur_index == size_type(index_) )
			{
				unsafe
				{
					call_destructor( cast_ref_unsafe</ typeof(element.type)::src_type />(storage_) );
				}
				return;
			}
			++cur_index;
		}
	}

	template</ type T />
	op enable_if( variant_impl::type_is_one_of_tuple_elements</ T, Y />() )
	=( mut this, T mut val )
	{
		this = this_type( move(val) );
	}

	op
	enable_if( variant_impl::all_tuple_elements_are_copy_constructible</Y/>() )
	=( mut this, this_type& other )
	{
		// Implement assignment operator, using copy constructor.
		// Native assignment operators for element types are not used here because it's not applicable in case where this.index_ != other.index_;
		this = this_type(other);
	}
	
	fn index(this) : size_type
	{
		return size_type(index_);
	}

	template</ type T />
	fn enable_if( variant_impl::type_is_one_of_tuple_elements</ T, Y />() )
	get( this ) : optional_ref</ T, false />'this'
	{
		var optional_ref</ T, false /> mut res;
		auto mut cur_index= 0s;
		for( & element : typeinfo</Y/>.elements_list )
		{
			static_if( is_same_type</ typeof(element.type)::src_type, T />() )
			{
				if( cur_index == size_type(index_) )
				{
					unsafe
					{
						res.reset( cast_ref_unsafe</T/>(storage_) );
					}
				}
			}
			else
			{
				++cur_index;
			}
		}
		return res;
	}

	template</ type T />
	fn enable_if( variant_impl::type_is_one_of_tuple_elements</ T, Y />() )
	get(mut this) : optional_ref</ T, true />'this'
	{
		var optional_ref</ T, true /> mut res;
		auto mut cur_index= 0s;
		for( & element : typeinfo</Y/>.elements_list )
		{
			static_if( is_same_type</ typeof(element.type)::src_type, T />() )
			{
				if( cur_index == size_type(index_) )
				{
					unsafe
					{
						res.reset( cast_ref_unsafe</T/>(storage_) );
					}
				}
			}
			else
			{
				++cur_index;
			}
		}
		return res;
	}

	// "==" operators
	// Use aslo "==" for value to variant comparison to avoid constly conversions to variant.

	op
	enable_if( variant_impl::all_tuple_elements_are_equality_comparable</Y/>() )
	==( this_type& l, this_type& r ) : bool
	{
		if( l.index_ != r.index_ )
		{
			return false;
		}

		auto mut cur_index= 0s;
		for( & element : typeinfo</Y/>.elements_list )
		{
			if( cur_index == size_type(l.index_) )
			{
				unsafe
				{
					auto& l_element= cast_ref_unsafe</ typeof(element.type)::src_type />(l.storage_);
					auto& r_element= cast_ref_unsafe</ typeof(element.type)::src_type />(r.storage_);
					safe{  return l_element == r_element;  }
				}
			}
			++cur_index;
		}
		halt;
	}

	template</ type T />
	op
	enable_if( variant_impl::all_tuple_elements_are_equality_comparable</Y/>() && variant_impl::type_is_one_of_tuple_elements</ T, Y />() )
	==( this_type& l, T& r ) : bool
	{
		if_var( &l_value : l.get</T/>() )
		{
			return l_value == r;
		}
		return false;
	}

	template</ type T />
	op
	enable_if( variant_impl::all_tuple_elements_are_equality_comparable</Y/>() && variant_impl::type_is_one_of_tuple_elements</ T, Y />() )
	==( T& l, this_type& r ) : bool
	{
		if_var( &r_value : r.get</T/>() )
		{
			return l == r_value;
		}
		return false;
	}

private:
	type element_type_for_shared_check= Y;

private:
	aligned_storage</
		variant_impl::get_max_tuple_element_size</Y/>(),
		variant_impl::get_max_tuple_element_alignment</Y/>()
		/> storage_;
	u8 index_;
}

namespace variant_impl
{

template</ type T />
fn constexpr get_max_tuple_element_size() : size_type
{
	var size_type mut s(0);
	for( & element : typeinfo</T/>.elements_list )
	{
		s = max( s, element.type.size_of );
	}
	return s;
}

template</ type T />
fn constexpr get_max_tuple_element_alignment() : size_type
{
	var size_type mut a(0);
	for( & element : typeinfo</T/>.elements_list )
	{
		a = max( a, element.type.align_of );
	}
	return a;
}

template</ type T />
fn constexpr all_tuple_elements_are_copy_constructible() : bool
{
	for( & element : typeinfo</T/>.elements_list )
	{
		if( !element.type.is_copy_constructible )
		{
			return false;
		}
	}
	return true;
}

template</ type T />
fn constexpr all_tuple_elements_are_equality_comparable() : bool
{
	for( & element : typeinfo</T/>.elements_list )
	{
		if( !element.type.is_equality_comparable )
		{
			return false;
		}
	}
	return true;
}

template</ type T />
fn constexpr all_tuple_elements_are_unique() : bool
{
	auto mut i= 0s;
	for( & element_i : typeinfo</T/>.elements_list )
	{
		auto mut j= 0s;
		for( & element_j : typeinfo</T/>.elements_list )
		{
			if( i != j && is_same_type</ typeof(element_i.type), typeof(element_j.type) />() )
			{
				return false;
			}

			++j;
		}
		++i;
	}
	return true;
}

template</ type C, type Tup />
fn constexpr type_is_one_of_tuple_elements() : bool
{
	for( & element : typeinfo</Tup/>.elements_list )
	{
		if( is_same_type</ typeof(element.type)::src_type, C />() )
		{
			return true;
		}
	}
	return false;
}

} // namespace variant_impl

} // namespace ust
