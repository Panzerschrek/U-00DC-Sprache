import "container_utils.u"

namespace ust
{

// Optional reference.
template</ type T, bool is_mutable />
class optional_ref
{
public:
	type this_type= optional_ref</T, is_mutable/>;

	fn constructor( this_type &imut other )= default;
	op=( mut this, this_type &imut other )= default;

	// Default constructor - set to zero
	fn constructor()= default;

	// Construct from reference
	fn enable_if( is_mutable )
	constructor( mut this'x', T &'y  mut ref ) ' x <- y '
	{
		unsafe{  ptr_= $<(ref);  }
	}

	// Construct 'imut' reference from 'mut' reference.
	fn enable_if( !is_mutable )
	constructor( mut this'x', T &'y imut ref ) ' x <- y '
	{
		unsafe{  ptr_= $<( cast_mut(ref) );  }
	}

	// Construct form raw pointer. Pointer should be valid or should be null.
	fn constructor( $(T) ptr ) unsafe
	( ptr_= ptr )
	{}

	// Assign 'mut' reference to 'imut' reference.
	op enable_if( !is_mutable )
	=( mut this'x', optional_ref</ T, true />& other'y' ) ' x <- y'
	{
		if( !other.empty() )
		{
			unsafe{ reset( other.deref_unchecked() ); }
		}
		else
		{
			reset();
		}
	}

	fn empty( this ) : bool
	{
		return is_nullptr(ptr_);
	}

	fn enable_if( is_mutable )
	try_deref( this'x' ) : T &'x mut
	{
		halt if(empty());
		unsafe{ return deref_unchecked(); }
	}

	fn enable_if( !is_mutable )
	try_deref( this'x' ) : T &'x imut
	{
		halt if(empty());
		unsafe{ return deref_unchecked(); }
	}

	fn enable_if( is_mutable )
	deref_unchecked( this'x' ) unsafe : T &'x mut
	{
		unsafe{  return $>(ptr_);  }
	}

	fn enable_if( !is_mutable )
	deref_unchecked( this'x' ) unsafe : T &'x imut
	{
		unsafe{  return $>(ptr_);  }
	}

	fn reset( mut this )
	{
		ptr_= nullptr</T/>();
	}

	fn enable_if( is_mutable )
	reset( mut this'x', T &'y  mut ref ) ' x <-  y '
	{
		ptr_= $<(ref);
	}

	fn enable_if( !is_mutable )
	reset( mut this'x', T &'y imut ref ) ' x <- y '
	{
		unsafe{  ptr_= $<( cast_mut(ref) );  }
	}

private:
	ReferenceContainerTag</ T, is_mutable /> container_tag_;
	$(T) ptr_= zero_init;
}

template</ type T />
type optional_ref_mut = ust::optional_ref</T, true />;

template</ type T />
type optional_ref_imut= ust::optional_ref</T, false/>;

} // namespace ust
