import "memory.u"

namespace ust
{

template<//> type byte_type_for_alignment</  1s /> = byte8  ;
template<//> type byte_type_for_alignment</  2s /> = byte16 ;
template<//> type byte_type_for_alignment</  4s /> = byte32 ;
template<//> type byte_type_for_alignment</  8s /> = byte64 ;
template<//> type byte_type_for_alignment</ 16s /> = byte128;
template</ size_type S /> type byte_type_for_alignment</S/> = byte128;

template</ size_type size, size_type alignment />
struct aligned_storage
{
	type byte_type= byte_type_for_alignment</ alignment />;
	auto constexpr byte_type_size= typeinfo</byte_type/>.size_of;
	auto constexpr element_count= ( size + ( byte_type_size - 1s ) ) / byte_type_size;

	[ byte_type, element_count ] storage_;
}

// Special case for zero size. Avoid declaring even internal field.
// This helps compiler to optimize usage of this class (in some cases).
template</ size_type alignment />
struct aligned_storage</ 0s, alignment />
{}

// Use this function to initialize an aligned storage instance with actually uninitialized data.
// This is helpful in constructor initializer list, where using "uninitialized" initializer syntactically isn't possible,
// but it's possible to call unsafe functions.
// Initializing a variable with such function call requires "memcpy",
// but it's effectively eliminated by LLVM optimization passes, because "memcpy" with uninitialized data as source has no effect.
template</type Storage/>
fn get_uninitialized_aligned_storage() unsafe : Storage
{
	unsafe
	{
		var Storage s= uninitialized;
		return s;
	}
}

// Unsafe, since caller must ensure that logical reference pollution doesn't actually happens with "swap".
// It is totally fine to call "swap" for types without references inside.
// It's also fine to call it inside containers to swap contained values.
// But swapping different variables with references inside isn't supported yet.
template</type T/>
fn swap( T &mut a, T &mut b ) unsafe
{
	auto constexpr size= typeinfo</T/>.size_of;
	auto constexpr alignment= typeinfo</T/>.align_of;
	unsafe
	{
		var aligned_storage</ size, alignment /> mut temp= uninitialized;
		memory_copy_aligned( alignment, cast_ref_unsafe</byte8/>( temp ), cast_ref_unsafe</byte8/>(    a ), size );
		memory_copy_aligned( alignment, cast_ref_unsafe</byte8/>(    a ), cast_ref_unsafe</byte8/>(    b ), size );
		memory_copy_aligned( alignment, cast_ref_unsafe</byte8/>(    b ), cast_ref_unsafe</byte8/>( temp ), size );
	}
}

} // namespace ust
