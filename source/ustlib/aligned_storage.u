namespace ust
{

template</ size_type size, size_type alignment />
struct aligned_storage
{
	template<//> struct byte_type_for_alignment</ size_type( 1) />{ type t= byte8  ; }
	template<//> struct byte_type_for_alignment</ size_type( 2) />{ type t= byte16 ; }
	template<//> struct byte_type_for_alignment</ size_type( 4) />{ type t= byte32 ; }
	template<//> struct byte_type_for_alignment</ size_type( 8) />{ type t= byte64 ; }
	template<//> struct byte_type_for_alignment</ size_type(16) />{ type t= byte128; }
	template</ size_type S /> struct byte_type_for_alignment      { type t= byte128; }

	type byte_type= byte_type_for_alignment</ alignment />::t;
	auto constexpr byte_type_size= typeinfo</byte_type/>.size_of;
	auto constexpr element_count= ( size + ( byte_type_size - size_type(1) ) ) / byte_type_size;

	[ byte_type, element_count ] storage_;
}

} // namespace ust
