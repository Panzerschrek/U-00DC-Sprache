namespace ust
{

//
// make_array overloads
//

template</type T/>
fn make_array() : [T,0]
{
	var [T, 0] mut arr[];
	return move(arr);
}

template</type T/>
fn make_array(T mut a) : [T, 1]
{
	var [T, 1] mut arr[move(a)];
	return move(arr);
}

template</type T/>
fn make_array(T mut a, T mut b) : [T, 2]
{
	var [T, 2] mut arr[move(a), move(b)];
	return move(arr);
}

template</type T/>
fn make_array(T mut a, T mut b, T mut c) : [T, 3]
{
	var [T, 3] mut arr[move(a), move(b), move(c)];
	return move(arr);
}

template</type T/>
fn make_array(T mut a, T mut b, T mut c, T mut d) : [T, 4]
{
	var [T, 4] mut arr[move(a), move(b), move(c), move(d)];
	return move(arr);
}

template</type T/>
fn make_array(T mut a, T mut b, T mut c, T mut d, T mut e) : [T, 5]
{
	var [T, 5] mut arr[move(a), move(b), move(c), move(d), move(e)];
	return move(arr);
}

template</type T/>
fn make_array(T mut a, T mut b, T mut c, T mut d, T mut e, T mut f) : [T, 6]
{
	var [T, 6] mut arr[move(a), move(b), move(c), move(d), move(e), move(f)];
	return move(arr);
}

template</type T/>
fn make_array(T mut a, T mut b, T mut c, T mut d, T mut e, T mut f, T mut g) : [T, 7]
{
	var [T, 7] mut arr[move(a), move(b), move(c), move(d), move(e), move(f), move(g)];
	return move(arr);
}

template</type T/>
fn make_array(T mut a, T mut b, T mut c, T mut d, T mut e, T mut f, T mut g, T mut h) : [T, 8]
{
	var [T, 8] mut arr[move(a), move(b), move(c), move(d), move(e), move(f), move(g), move(h)];
	return move(arr);
}

//
// make_tuple overloads
//

fn constexpr make_tuple() : tup[]
{
	var tup[] mut t;
	return move(t);
}

template</type A/>
fn make_tuple(A mut a) : tup[A]
{
	var tup[A] mut t[move(a)];
	return move(t);
}

template</type A, type B/>
fn make_tuple(A mut a, B mut b) : tup[A, B]
{
	var tup[A, B] mut t[move(a), move(b)];
	return move(t);
}

template</type A, type B, type C/>
fn make_tuple(A mut a, B mut b, C mut c) : tup[A, B, C]
{
	var tup[A, B, C] mut t[move(a), move(b), move(c)];
	return move(t);
}

template</type A, type B, type C, type D/>
fn make_tuple(A mut a, B mut b, C mut c, D mut d) : tup[A, B, C, D]
{
	var tup[A, B, C, D] mut t[move(a), move(b), move(c), move(d)];
	return move(t);
}

template</type A, type B, type C, type D, type E/>
fn make_tuple(A mut a, B mut b, C mut c, D mut d, E mut e) : tup[A, B, C, D, E]
{
	var tup[A, B, C, D, E] mut t[move(a), move(b), move(c), move(d), move(e)];
	return move(t);
}

template</type A, type B, type C, type D, type E, type F/>
fn make_tuple(A mut a, B mut b, C mut c, D mut d, E mut e, F mut f) : tup[A, B, C, D, E, F]
{
	var tup[A, B, C, D, E, F] mut t[move(a), move(b), move(c), move(d), move(e), move(f)];
	return move(t);
}

template</type A, type B, type C, type D, type E, type F, type G/>
fn make_tuple(A mut a, B mut b, C mut c, D mut d, E mut e, F mut f, G mut g) : tup[A, B, C, D, E, F, G]
{
	var tup[A, B, C, D, E, F, G] mut t[move(a), move(b), move(c), move(d), move(e), move(f), move(g)];
	return move(t);
}

template</type A, type B, type C, type D, type E, type F, type G, type H/>
fn make_tuple(A mut a, B mut b, C mut c, D mut d, E mut e, F mut f, G mut g, H mut h) : tup[A, B, C, D, E, F, G, H]
{
	var tup[A, B, C, D, E, F, G, H] mut t[move(a), move(b), move(c), move(d), move(e), move(f), move(g), move(h)];
	return move(t);
}

//
// homogeneous_tuple overloads - create tuple of N elements of type T
//

template</type T/> type homogeneous_tuple</T, 0s/> = tup[];
template</type T/> type homogeneous_tuple</T, 1s/> = tup[ T ];
template</type T/> type homogeneous_tuple</T, 2s/> = tup[ T, T ];
template</type T/> type homogeneous_tuple</T, 3s/> = tup[ T, T, T ];
template</type T/> type homogeneous_tuple</T, 4s/> = tup[ T, T, T, T ];
template</type T/> type homogeneous_tuple</T, 5s/> = tup[ T, T, T, T, T ];
template</type T/> type homogeneous_tuple</T, 6s/> = tup[ T, T, T, T, T, T ];
template</type T/> type homogeneous_tuple</T, 7s/> = tup[ T, T, T, T, T, T, T ];
template</type T/> type homogeneous_tuple</T, 8s/> = tup[ T, T, T, T, T, T, T, T ];

} // namespace ust
