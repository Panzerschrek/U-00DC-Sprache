namespace ust
{

// Base ingerger to reference and back conversion functions.
template</type T/>
fn ref_to_int( T& v ) : size_type
{
	unsafe
	{
		auto ptr= $<(cast_mut(v));
		return cast_ref_unsafe</size_type/>(ptr); // Cast reference to pointer to reference to integer, read integer value.
	}
}

template</type T/>
fn int_to_ref( size_type i ) unsafe : T&
{
	unsafe
	{
		auto ptr= cast_ref_unsafe</$(T)/>(i); // Cast reference to integer to reference to pointer, read pointer value.
		return $>(ptr);
	}
}

// Base integer to raw pointer and back conversion functions.
template</type T/>
fn ptr_to_int( $(T) v ) : size_type
{
	return unsafe( cast_ref_unsafe</size_type/>(v) ); // Cast reference to pointer to reference to integer, read integer value.
}

template</type T/>
fn int_to_ptr( size_type i ) unsafe : $(T)
{
	return unsafe( cast_ref_unsafe</$(T)/>(i) ); // Cast reference to integer to reference to pointer, read pointer value.
}

// Performs cast of a pointer of given type to a pointer to provided byte-type.
template</type Dst, type Src/>
fn ptr_cast_to_byte( $(Src) ptr ) unsafe : $(Dst)
{
	static_assert( typeinfo</Dst/>.is_byte );
	static_assert( typeinfo</Dst/>.align_of <= typeinfo</Src/>.align_of, "Destination type alignment shouldn't be greater than source type alignment" );

	// Cast reference to $(Src) to reference to $(Dst), read it.
	return unsafe( cast_ref_unsafe</ $(Dst) />(ptr) );
}

// Performs cast of a byte-type pointer to a pointer of given type.
template</type Dst, type Src/>
fn byte_ptr_cast( $(Src) ptr ) unsafe : $(Dst)
{
	static_assert( typeinfo</Src/>.is_byte );
	static_assert( typeinfo</Dst/>.align_of >= typeinfo</Src/>.align_of, "Destination type alignment shouldn't be less than source type alignment" );

	// Cast reference to $(Src) to reference to $(Dst), read it.
	return unsafe( cast_ref_unsafe</ $(Dst) />(ptr) );
}

fn memory_copy( byte8 &mut dst, byte8 & src, size_type size_bytes ) unsafe
{
	unsafe( ust_memory_copy_impl( $<(dst), $<(cast_mut(src)), size_bytes ) );
}

fn memory_copy_aligned( size_type alignment, byte8 &mut dst, byte8 & src, size_type size_bytes ) unsafe
{
	// For most cases this function will be called with constexpr alignment. So, i hope this branching will be optimized.
	unsafe
	{
		switch( alignment )
		{
			1s -> {  ust_memory_copy_align_1_impl ( $<(dst), $<(cast_mut(src)), size_bytes );  },
			2s -> {  ust_memory_copy_align_2_impl ( $<(dst), $<(cast_mut(src)), size_bytes );  },
			4s -> {  ust_memory_copy_align_4_impl ( $<(dst), $<(cast_mut(src)), size_bytes );  },
			8s -> {  ust_memory_copy_align_8_impl ( $<(dst), $<(cast_mut(src)), size_bytes );  },
			16s -> {  ust_memory_copy_align_16_impl( $<(dst), $<(cast_mut(src)), size_bytes );  },
			default-> {  ust_memory_copy_align_1_impl ( $<(dst), $<(cast_mut(src)), size_bytes );  },
		}
	}
}

fn memory_equals( byte8& a, byte8& b, size_type size ) unsafe : bool
{
	return unsafe( ust_memory_compare_impl( $<(cast_mut(a)), $<(cast_mut(b)), size ) ) == 0;
}

template</type T/>
fn nullptr() : $(T)
{
	var $(T) ptr= zero_init;
	return ptr;
}

template</type T/>
fn is_nullptr( $(T) ptr ) : bool
{
	return ptr == nullptr</T/>();
}

template</type T/>
fn ref_cmp( T& l, T& r ) : i32
{
	return unsafe( $<(cast_mut(l)) <=> $<(cast_mut(r)) );
}

template</type T/>
fn ref_cmp_eq( T& l, T& r ) : bool
{
	return unsafe( $<(cast_mut(l)) == $<(cast_mut(r)) );
}

template</type T/>
fn ref_cmp_ne( T& l, T& r ) : bool
{
	return unsafe( $<(cast_mut(l)) != $<(cast_mut(r)) );
}

template</type T/>
fn ref_cmp_lt( T& l, T& r ) : bool
{
	return unsafe( $<(cast_mut(l)) <  $<(cast_mut(r)) );
}

template</type T/>
fn ref_cmp_le( T& l, T& r ) : bool
{
	return unsafe( $<(cast_mut(l)) <= $<(cast_mut(r)) );
}

template</type T/>
fn ref_cmp_gt( T& l, T& r ) : bool
{
	return unsafe( $<(cast_mut(l)) >  $<(cast_mut(r)) );
}

template</type T/>
fn ref_cmp_ge( T& l, T& r ) : bool
{
	return unsafe( $<(cast_mut(l)) >= $<(cast_mut(r)) );
}

} // namespace ust

// External implementation functions.

fn nomangle ust_memory_copy_impl( $(byte8) dst, $(byte8) src, size_type size_bytes ) unsafe;
fn nomangle ust_memory_copy_align_1_impl ( $(byte8) dst, $(byte8) src, size_type size_bytes ) unsafe;
fn nomangle ust_memory_copy_align_2_impl ( $(byte8) dst, $(byte8) src, size_type size_bytes ) unsafe;
fn nomangle ust_memory_copy_align_4_impl ( $(byte8) dst, $(byte8) src, size_type size_bytes ) unsafe;
fn nomangle ust_memory_copy_align_8_impl ( $(byte8) dst, $(byte8) src, size_type size_bytes ) unsafe;
fn nomangle ust_memory_copy_align_16_impl( $(byte8) dst, $(byte8) src, size_type size_bytes ) unsafe;
fn nomangle ust_memory_compare_impl( $(byte8) a, $(byte8) b, size_type size ) unsafe : i32;
