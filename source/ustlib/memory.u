namespace ust
{

template<//> struct get_signed_type  </  u8 /> { type t=  i8; }
template<//> struct get_signed_type  </ u16 /> { type t= i16; }
template<//> struct get_signed_type  </ u32 /> { type t= i32; }
template<//> struct get_signed_type  </ u64 /> { type t= i64; }
template<//> struct get_unsigned_type</  i8 /> { type t=  u8; }
template<//> struct get_unsigned_type</ i16 /> { type t= u16; }
template<//> struct get_unsigned_type</ i32 /> { type t= u32; }
template<//> struct get_unsigned_type</ i64 /> { type t= u64; }

type ptr_diff_type= get_signed_type</ size_type />::t;

// Base ingerger to reference and back conversion functions. Implemented externally.
fn ref_to_int( void& v ) : size_type;
fn int_to_ref( size_type size ) unsafe : void&;

// Allocation-deallocation functions. Implemented externally.
// If allocation function can not allocate memory block with requested size - program will be halted.
fn memory_allocate( size_type size_bytes ) unsafe : void &mut;
fn memory_reallocate( void& mem, size_type new_size_bytes ) unsafe : void &mut;
fn memory_free( void& mem ) unsafe;
fn memory_copy( void&mut dst, void & src, size_type size_bytes ) unsafe;
fn memory_equals( void& a, void& b, size_type size ) unsafe : bool;

} // namespace ust
