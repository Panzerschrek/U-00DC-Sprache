import "../../imports/tcp_stream.u"
import "socket.uh"

namespace ust
{

fn tcp_stream::connect( socket_address& a ) : io_result</tcp_stream/>
{
	call_wsa_startup();

	unsafe
	{
		if_var( &a_v4 : a.get</socket_address_v4/>() )
		{
			var native_socket_fd s= ::socket( PF_INET, i32(SOCK_STREAM), 0 );
			if( s == native_socket_fd(-1) )
			{
				return translate_wsa_error( WSAGetLastError() );
			}

			var sockaddr_in mut underlying_address= translate_socket_address( a_v4 );

			var i32 res=
				::connect(
					s,
					$<( cast_ref_unsafe</sockaddr/>( underlying_address ) ),
					socklen_t( typeinfo</sockaddr_in/>.size_of ) );

			if( res != 0 )
			{
				var i32 e= WSAGetLastError();
				::closesocket( s );
				return translate_wsa_error( e );
			}

			return tcp_stream( s );
		}
		else if_var( &a_v6 : a.get</socket_address_v6/>() )
		{
			var native_socket_fd s= ::socket( PF_INET6, i32(SOCK_STREAM), 0 );
			if( s == native_socket_fd(-1) )
			{
				return translate_wsa_error( WSAGetLastError() );
			}

			var sockaddr_in6 mut underlying_address= translate_socket_address( a_v6 );

			var i32 res=
				::connect(
					s,
					$<( cast_ref_unsafe</sockaddr/>( underlying_address ) ),
					socklen_t( typeinfo</sockaddr_in6/>.size_of ) );

			if( res != 0 )
			{
				var i32 e= WSAGetLastError();
				::closesocket( s );
				return translate_wsa_error( e );
			}

			return tcp_stream( s );
		}
		else { halt; }
	}
}

fn tcp_stream::create_unconnected_v4() : io_result</tcp_stream/>
{
	call_wsa_startup();

	unsafe
	{
		var native_socket_fd s= ::socket( PF_INET, i32(SOCK_STREAM), 0 );
		if( s == native_socket_fd(-1) )
		{
			return translate_wsa_error( WSAGetLastError() );
		}
		return tcp_stream( s );
	}
}

fn tcp_stream::create_unconnected_v6() : io_result</tcp_stream/>
{
	call_wsa_startup();

	unsafe
	{
		var native_socket_fd s= ::socket( PF_INET6, i32(SOCK_STREAM), 0 );
		if( s == native_socket_fd(-1) )
		{
			return translate_wsa_error( WSAGetLastError() );
		}
		return tcp_stream( s );
	}
}

fn tcp_stream::connect_unconnected( mut this, socket_address& a ) : io_result</void/>
{
	if_var( &a_v4 : a.get</socket_address_v4/>() )
	{
		var sockaddr_in mut underlying_address= translate_socket_address( a_v4 );

		var i32 res=
			unsafe( ::connect(
				socket_,
				$<( cast_ref_unsafe</sockaddr/>( underlying_address ) ),
				socklen_t( typeinfo</sockaddr_in/>.size_of ) ) );

		if( res != 0 )
		{
			auto e= unsafe( WSAGetLastError() );
			if( e == WSAEISCONN )
			{
				return void();
			}
			return translate_wsa_error( e );
		}
	}
	else if_var( &a_v6 : a.get</socket_address_v6/>() )
	{
		var sockaddr_in6 mut underlying_address= translate_socket_address( a_v6 );

		var i32 res=
			unsafe( ::connect(
				socket_,
				$<( cast_ref_unsafe</sockaddr/>( underlying_address ) ),
				socklen_t( typeinfo</sockaddr_in6/>.size_of ) ) );

		if( res != 0 )
		{
			auto e= unsafe( WSAGetLastError() );
			if( e == WSAEISCONN )
			{
				return void();
			}
			return translate_wsa_error( e );
		}
	}
	else { halt; }

	return void();
}

fn tcp_stream::constructor( native_socket_fd s ) unsafe
	( socket_= s )
{}

fn tcp_stream::destructor()
{
	unsafe( ::closesocket( socket_ ) );
}

fn tcp_stream::read( mut this, array_view_mut</byte8/> buf ) : io_result</size_type/>
{
	var i32 bytes_read= unsafe( ::recv( socket_, byte_ptr_cast</char8/>( buf.data() ), i32( buf.size() ), 0 ) );

	if( bytes_read < 0 )
	{
		return translate_wsa_error( unsafe( WSAGetLastError() ) );
	}

	return size_type(bytes_read);
}

fn tcp_stream::write( mut this, array_view_imut</byte8/> buf ) : io_result</size_type/>
{
	var i32 bytes_written= unsafe( ::send( socket_, byte_ptr_cast</char8/>( buf.data() ), i32( buf.size() ), 0 ) );

	if( bytes_written < 0 )
	{
		return translate_wsa_error( unsafe( WSAGetLastError() ) );
	}

	return size_type(bytes_written);
}

fn tcp_stream::peek( mut this, array_view_mut</byte8/> buf ) : io_result</size_type/>
{
	var i32 bytes_read= unsafe( ::recv( socket_, byte_ptr_cast</char8/>( buf.data() ), i32( buf.size() ), MSG_PEEK ) );

	if( bytes_read < 0 )
	{
		return translate_wsa_error( unsafe( WSAGetLastError() ) );
	}

	return size_type(bytes_read);
}

fn tcp_stream::close( byval mut this ) : io_result</void/>
{
	unsafe
	{
		var i32 res= ::closesocket( move(this).take_native_fd() );
		if( res != 0 )
		{
			return translate_wsa_error( WSAGetLastError() );
		}
	}

	return void();
}

fn tcp_stream::is_nonblocking( this ) : io_result</bool/>
{
	return is_socket_nonblocking( socket_ );
}

fn tcp_stream::set_nonblocking( mut this, bool nonblocking ) : io_result</void/>
{
	return set_socket_nonblocking( socket_, nonblocking );
}

fn tcp_stream::get_local_address( this ) : io_result</socket_address/>
{
	return get_socket_local_address( socket_ );
}

fn tcp_stream::get_peer_address( this ) : io_result</socket_address/>
{
	return get_socket_peer_address( socket_ );
}

fn tcp_stream::get_ttl( this ) : io_result</u8/>
{
	return get_socket_ttl( socket_ );
}

fn tcp_stream::set_ttl( mut this, u8 ttl ) : io_result</void/>
{
	return set_socket_ttl( socket_, ttl );
}

fn tcp_stream::get_nodelay( this ) : io_result</bool/>
{
	var u32 mut nodelay= 0u;

	var socklen_t mut len( typeinfo</u32/>.size_of );

	var i32 res=
		unsafe( ::getsockopt(
			socket_,
			i32( IPPROTO_TCP ),
			i32( TCP_NODELAY ),
			$<( cast_ref_unsafe</char8/>( nodelay ) ),
			$<(len) ) );

	if( res != 0 )
	{
		return translate_wsa_error( unsafe( WSAGetLastError() ) );
	}

	return nodelay != 0u;
}

fn tcp_stream::set_read_timeout( mut this, optional</duration/> timeout ) : io_result</void/>
{
	return set_socket_read_timeout( socket_, timeout );
}

fn tcp_stream::set_write_timeout( mut this, optional</duration/> timeout ) : io_result</void/>
{
	return set_socket_write_timeout( socket_, timeout );
}

fn tcp_stream::set_nodelay( mut this, bool nodelay ) : io_result</void/>
{
	var u32 mut nodelay_int= ( nodelay ? 1u : 0u );

	var i32 res=
		unsafe( ::setsockopt(
			socket_,
			i32( IPPROTO_TCP ),
			i32( TCP_NODELAY ),
			$<( cast_ref_unsafe</char8/>( nodelay_int ) ),
			socklen_t( typeinfo</u32/>.size_of ) ) );

	if( res != 0 )
	{
		return translate_wsa_error( unsafe( WSAGetLastError() ) );
	}

	return void();
}

fn tcp_stream::get_native_fd( this ) unsafe : native_socket_fd
{
	return socket_;
}

fn tcp_stream::take_native_fd( byval mut this ) unsafe : native_socket_fd
{
	var native_socket_fd s= socket_;
	unsafe( move_into_nowhere( move(this) ) ); // Forget about "this" to avoid calling destructor.
	return s;
}

} // namespace ust
