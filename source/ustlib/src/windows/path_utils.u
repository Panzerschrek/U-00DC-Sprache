import "../../imports/path_utils.u"

namespace ust
{

namespace path
{

var char8 constexpr g_native_separator = "\\"c8;

fn is_absolute( filesystem_path_view p ) : bool
{
	if( p.size() >= 2s )
	{
		var char8 c0= p[0s];
		var char8 c1= p[1s];
		if( p.size() >= 3s )
		{
			var char8 c2= p[2s];
			if( ( ( c0 >= "a"c8 && c0 <= "z"c8 ) || ( c0 >= "A"c8 && c0 <= "Z"c8 ) ) &&
				c1 == ":"c8 &&
				is_separator(c2) )
			{
				return true;
			}
		}
		if( c0 == g_native_separator && c1 == g_native_separator )
		{
			// TODO - improve this. Not all path starting with "\\" are absolute.
			return true;
		}
	}
	return false;
}

fn is_relative( filesystem_path_view p ) : bool
{
	return !is_absolute(p);
}

fn is_separator( char8 c ) : bool
{
	return c == "/"c8 || c == g_native_separator;
}

fn join( filesystem_path_view p0 ) : filesystem_path
{
	return p0;
}

fn join( filesystem_path_view p0, filesystem_path_view p1 ) : filesystem_path
{
	var [ filesystem_path_view, 2 ] components[ p0, p1 ];
	return join_impl( components );
}

fn join( filesystem_path_view p0, filesystem_path_view p1, filesystem_path_view p2 ) : filesystem_path
{
	var [ filesystem_path_view, 3 ] components[ p0, p1, p2 ];
	return join_impl( components );
}

fn join( filesystem_path_view p0, filesystem_path_view p1, filesystem_path_view p2, filesystem_path_view p3 ) : filesystem_path
{
	var [ filesystem_path_view, 4 ] components[ p0, p1, p2, p3 ];
	return join_impl( components );
}

fn join( filesystem_path_view p0, filesystem_path_view p1, filesystem_path_view p2, filesystem_path_view p3, filesystem_path_view p4 ) : filesystem_path
{
	var [ filesystem_path_view, 5 ] components[ p0, p1, p2, p3, p4 ];
	return join_impl( components );
}

fn join( filesystem_path_view p0, filesystem_path_view p1, filesystem_path_view p2, filesystem_path_view p3, filesystem_path_view p4, filesystem_path_view p5 ) : filesystem_path
{
	var [ filesystem_path_view, 6 ] components[ p0, p1, p2, p3, p4, p5 ];
	return join_impl( components );
}

fn join_impl( array_view_imut</filesystem_path_view/> components ) : filesystem_path
{
	// Start from last absolute component.
	var size_type mut start_component= 0s;
	for( auto mut i= components.size() - 1s; ; )
	{
		var filesystem_path_view& component= components[i];
		if( is_absolute( component ) )
		{
			start_component= i;
			break;
		}
		if( i == 0s )
		{
			break;
		}
		--i;
	}

	var filesystem_path mut result;

	foreach( &component : components.subrange_start( start_component  ) )
	{
		if( !result.empty() && ! is_separator( result.back() ) )
		{
			// Add separator if result ends with non-separator char.
			result.push_back( g_native_separator );
		}

		result+= component;
	}

	return result;
}

fn get_file_extension( filesystem_path_view p )
	: optional</filesystem_path_view/> @( reference_notation::return_inner_references::param0_inner_reference0 )
{
	// TODO
	halt;
}

fn get_path_without_extension( filesystem_path_view p )
	: filesystem_path_view @( reference_notation::return_inner_references::param0_inner_reference0 )
{
	// TODO
	halt;
}

fn get_file_name( filesystem_path_view p )
	: optional</filesystem_path_view/> @( reference_notation::return_inner_references::param0_inner_reference0 )
{
	// TODO
	halt;
}

fn get_parent_path( filesystem_path_view p )
	: optional</filesystem_path_view/> @( reference_notation::return_inner_references::param0_inner_reference0 )
{
	// TODO
	halt;
}

fn normalize( filesystem_path_view p ) : filesystem_path
{
	// TODO
	halt;
}

fn components_raw_iterator::constructor( mut this, filesystem_path_view p )
	@( reference_notation::pollution::param0_param_1_inner_reference )
	( p_= p )
{}

fn nodiscard components_raw_iterator::next( mut this )
	: optional</filesystem_path_view/> @( reference_notation::return_inner_references::param0_inner_reference0 )
{
	// TODO
	halt;
}

} // namespace path

} // namespace ust
