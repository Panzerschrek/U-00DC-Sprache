// This file contains f32 math functions missing in 32-bit Windows/MSVC.
// These implementations just use f64 functions, which 32-bit MSVC does via inline functions.

import "../../imports/type_traits.u"

var bool enable_missing_funcs=
	typeinfo</size_type/>.size_of == 4s &&
	ust::constexpr_string_equals( compiler::target::environment, "msvc" );

fn nomangle enable_if( enable_missing_funcs ) tanf( f32 x ) call_conv( "C" ) : f32
{
	return f32( tan( f64(x) ) );
}

fn nomangle enable_if( enable_missing_funcs ) asinf( f32 x ) call_conv( "C" ) : f32
{
	return f32( asin( f64(x) ) );
}

fn nomangle enable_if( enable_missing_funcs ) acosf( f32 x ) call_conv( "C" ) : f32
{
	return f32( acos( f64(x) ) );
}

fn nomangle enable_if( enable_missing_funcs ) atanf( f32 x ) call_conv( "C" ) : f32
{
	return f32( atan( f64(x) ) );
}

fn nomangle enable_if( enable_missing_funcs ) atan2f( f32 y, f32 x ) call_conv( "C" ) : f32
{
	return f32( atan2( f64(y), f64(x) ) );
}

fn nomangle enable_if( enable_missing_funcs ) tan( f64 x ) call_conv( "C" ) : f64;
fn nomangle enable_if( enable_missing_funcs ) asin( f64 x ) call_conv( "C" ) : f64;
fn nomangle enable_if( enable_missing_funcs ) acos( f64 x ) call_conv( "C" ) : f64;
fn nomangle enable_if( enable_missing_funcs ) atan( f64 x ) call_conv( "C" ) : f64;
fn nomangle enable_if( enable_missing_funcs ) atan2( f64 y, f64 x ) call_conv( "C" ) : f64;
