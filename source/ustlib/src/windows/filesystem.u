import "../../imports/directory_iterator.u"
import "../../imports/file.u"
import "../../imports/minmax.u"
import "../../imports/path_utils.u"
import "wide_string.uh"
import "windows.uh"

namespace ust
{

static_assert( same_type</native_file_handle, HANDLE/>, "Types mismatch!" );

//
// file_readable
//

fn file_readable::open( filesystem_path_view path ) : filesystem_result</file_readable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= true, .write= false, .create_and_truncate= false,  .ensure_new= false } ) );
		return file_readable(handle);
	}
}

fn file_readable::constructor( native_file_handle handle ) unsafe
	( handle_= handle )
{}

fn file_readable::destructor()
{
	unsafe( close_file_impl( handle_ ) );
}

fn file_readable::get_native_handle( this ) unsafe : native_file_handle
{
	return handle_;
}

fn file_readable::take_native_handle( byval mut this ) unsafe : native_file_handle
{
	var native_file_handle h= handle_;
	unsafe( move_into_nowhere( move(this) ) ); // Forget about "this" to avoid calling destructor.
	return h;
}

fn file_readable::get_metatada( this ) : filesystem_result</file_metadata/>
{
	return unsafe( get_metatada_impl( handle_ ) );
}

fn file_readable::get_size( this ) : filesystem_result</u64/>
{
	return unsafe( get_size_impl( handle_ ) );
}

fn file_readable::set_permissions( mut this, file_permissions permissions ) : filesystem_result</void/>
{
	return unsafe( set_permissions_impl( handle_, permissions ) );
}

fn file_readable::read( mut this, array_view_mut</byte8/> buf ) : filesystem_result</size_type/>
{
	return unsafe( read_impl( handle_, buf ) );
}

fn file_readable::read_exact( mut this, array_view_mut</byte8/> buf ) : filesystem_result</void/>
{
	return unsafe( read_exact_impl( handle_, buf ) );
}

fn file_readable::seek( mut this, u64 offset ) : filesystem_result</void/>
{
	return unsafe( seek_impl( handle_, offset ) );
}

//
// file_writeable
//

fn file_writeable::open( filesystem_path_view path ) : filesystem_result</file_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path , open_options{ .read= false, .write= true, .create_and_truncate= false, .ensure_new= false } ) );
		return file_writeable(handle);
	}
}

fn file_writeable::create( filesystem_path_view path ) : filesystem_result</file_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= false, .write= true, .create_and_truncate= true, .ensure_new= false } ) );
		return file_writeable(handle);
	}
}

fn file_writeable::create_new( filesystem_path_view path ) : filesystem_result</file_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= false, .write= true, .create_and_truncate= true, .ensure_new= true } ) );
		return file_writeable(handle);
	}
}

fn file_writeable::constructor( native_file_handle handle ) unsafe
	( handle_= handle )
{}

fn file_writeable::destructor()
{
	unsafe( close_file_impl( handle_ ) );
}

fn file_writeable::get_native_handle( this ) unsafe : native_file_handle
{
	return handle_;
}

fn file_writeable::take_native_handle( byval mut this ) unsafe : native_file_handle
{
	var native_file_handle h= handle_;
	unsafe( move_into_nowhere( move(this) ) ); // Forget about "this" to avoid calling destructor.
	return h;
}

fn file_writeable::get_metatada( this ) : filesystem_result</file_metadata/>
{
	return unsafe( get_metatada_impl( handle_ ) );
}

fn file_writeable::get_size( this ) : filesystem_result</u64/>
{
	return unsafe( get_size_impl( handle_ ) );
}

fn file_writeable::set_permissions( mut this, file_permissions permissions ) : filesystem_result</void/>
{
	return unsafe( set_permissions_impl( handle_, permissions ) );
}

fn file_writeable::write( mut this, array_view_imut</byte8/> buf ) : filesystem_result</size_type/>
{
	return unsafe( write_impl( handle_, buf ) );
}

fn file_writeable::write_all( mut this, array_view_imut</byte8/> buf ) : filesystem_result</void/>
{
	return unsafe( write_all_impl( handle_, buf ) );
}

fn file_writeable::flush( mut this ) : filesystem_result</void/>
{
	return unsafe( flush_impl( handle_ ) );
}

fn file_writeable::flush_all( mut this ) : filesystem_result</void/>
{
	return unsafe( flush_all_impl( handle_ ) );
}

fn file_writeable::resize( mut this, u64 new_size ) : filesystem_result</void/>
{
	return unsafe( resize_impl( handle_, new_size ) );
}

fn file_writeable::seek( mut this, u64 offset ) : filesystem_result</void/>
{
	return unsafe( seek_impl( handle_, offset ) );
}

//
// file_readable_writeable
//

fn file_readable_writeable::open( filesystem_path_view path ) : filesystem_result</file_readable_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= true, .write= true, .create_and_truncate= false, .ensure_new= false } ) );
		return file_readable_writeable(handle);
	}
}

fn file_readable_writeable::create( filesystem_path_view path ) : filesystem_result</file_readable_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= true, .write= true, .create_and_truncate= true, .ensure_new= false } ) );
		return file_readable_writeable(handle);
	}
}

fn file_readable_writeable::create_new( filesystem_path_view path ) : filesystem_result</file_readable_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= true, .write= true, .create_and_truncate= true, .ensure_new= true } ) );
		return file_readable_writeable(handle);
	}
}

fn file_readable_writeable::get_metatada( this ) : filesystem_result</file_metadata/>
{
	return unsafe( get_metatada_impl( handle_ ) );
}

fn file_readable_writeable::get_size( this ) : filesystem_result</u64/>
{
	return unsafe( get_size_impl( handle_ ) );
}

fn file_readable_writeable::set_permissions( mut this, file_permissions permissions ) : filesystem_result</void/>
{
	return unsafe( set_permissions_impl( handle_, permissions ) );
}

fn file_readable_writeable::constructor( native_file_handle handle ) unsafe
	( handle_= handle )
{}

fn file_readable_writeable::destructor()
{
	unsafe( close_file_impl( handle_ ) );
}

fn file_readable_writeable::get_native_handle( this ) unsafe : native_file_handle
{
	return handle_;
}

fn file_readable_writeable::take_native_handle( byval mut this ) unsafe : native_file_handle
{
	var native_file_handle h= handle_;
	unsafe( move_into_nowhere( move(this) ) ); // Forget about "this" to avoid calling destructor.
	return h;
}

fn file_readable_writeable::read( mut this, array_view_mut</byte8/> buf ) : filesystem_result</size_type/>
{
	return unsafe( read_impl( handle_, buf ) );
}

fn file_readable_writeable::read_exact( mut this, array_view_mut</byte8/> buf ) : filesystem_result</void/>
{
	return unsafe( read_exact_impl( handle_, buf ) );
}

fn file_readable_writeable::write( mut this, array_view_imut</byte8/> buf ) : filesystem_result</size_type/>
{
	return unsafe( write_impl( handle_, buf ) );
}

fn file_readable_writeable::write_all( mut this, array_view_imut</byte8/> buf ) : filesystem_result</void/>
{
	return unsafe( write_all_impl( handle_, buf ) );
}

fn file_readable_writeable::flush( mut this ) : filesystem_result</void/>
{
	return unsafe( flush_impl( handle_ ) );
}

fn file_readable_writeable::flush_all( mut this ) : filesystem_result</void/>
{
	return unsafe( flush_all_impl( handle_ ) );
}

fn file_readable_writeable::resize( mut this, u64 new_size ) : filesystem_result</void/>
{
	return unsafe( resize_impl( handle_, new_size ) );
}

fn file_readable_writeable::seek( mut this, u64 offset ) : filesystem_result</void/>
{
	return unsafe( seek_impl( handle_, offset ) );
}

//
// various functions
//

fn get_metadata_for_path( filesystem_path_view path ) : filesystem_result</file_metadata/>
{
	// TODO - support following symlinks.
	return get_symlink_metadata_for_path( path );
}

fn get_symlink_metadata_for_path( filesystem_path_view path ) : filesystem_result</file_metadata/>
{
	var wide_string mut path_null_terminated = utf8_to_null_terminated_wide_string( path );

	var WIN32_FILE_ATTRIBUTE_DATA mut info= zero_init;

	/// Documentation says that for symbolic links their metadata is returned.
	var BOOL res =
		unsafe( ::GetFileAttributesExW(
			path_null_terminated.data(),
			GET_FILEEX_INFO_LEVELS::GetFileExInfoStandard,
			ptr_cast_to_byte8( $<(info) ) ) );

	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return file_metadata
	{
		.size= u64(info.nFileSizeLow) | (u64(info.nFileSizeHigh) << 32u),
		.kind= file_attributes_to_file_kind( info.dwFileAttributes ),
		.access_time= filetime_to_system_time( info.ftLastAccessTime ),
		.modification_time= filetime_to_system_time( info.ftLastWriteTime ),
		.permissions= file_attributes_to_file_permissions( info.dwFileAttributes ),
	};
}

fn set_permissions_for_path( filesystem_path_view path, file_permissions permissions ) : filesystem_result</void/>
{
	var wide_string mut path_null_terminated = utf8_to_null_terminated_wide_string( path );

	var DWORD mut attributes = unsafe( ::GetFileAttributesW( path_null_terminated.data() ) );
	if( attributes == 0xFFFFFFFFu )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	var bool read_only= ( permissions.bits & c_permissions_bits_write ) == 0u;

	if( read_only )
	{
		attributes |= DWORD( FILE_ATTRIBUTE_READONLY );
	}
	else
	{
		attributes &= ~DWORD( FILE_ATTRIBUTE_READONLY );
	}

	var BOOL res = unsafe( ::SetFileAttributesW( path_null_terminated.data(), attributes ) );
	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return void();
}

fn create_directory( filesystem_path_view path ) : filesystem_result</void/>
{
	var wide_string mut path_null_terminated= utf8_to_null_terminated_wide_string( path );

	var BOOL res= unsafe( ::CreateDirectoryW( path_null_terminated.data(), nullptr</SECURITY_ATTRIBUTES/>() ) );

	if( res == 1 )
	{
		return void();
	}

	var DWORD last_error = unsafe( GetLastError() );
	if( last_error == DWORD(ERROR_ALREADY_EXISTS) || last_error == DWORD(ERROR_ACCESS_DENIED) )
	{
		// Path already exists or we have no permissions to create it.
		// Check if it's a directory and not a file or something else.

		var WIN32_FILE_ATTRIBUTE_DATA mut info= zero_init;

		var BOOL res =
			unsafe( ::GetFileAttributesExW(
				path_null_terminated.data(),
				GET_FILEEX_INFO_LEVELS::GetFileExInfoStandard,
				ptr_cast_to_byte8( $<(info) ) ) );

		if( res == 1 && file_attributes_to_file_kind( info.dwFileAttributes ) == file_kind::directory )
		{
			return void();
		}
	}

	return translate_error_code( last_error );
}

fn create_directory_with_parents( filesystem_path_view p ) : filesystem_result</void/>
{
	// TODO - avoid calling "create_directory", this causes utf8 -> utf16 conversion of the whole path on each call.

	// Optimistically assume that we need to create only one directory.
	if( create_directory( p ).is_ok() )
	{
		return void();
	}

	// Create components one by one.
	var filesystem_path mut path_iterative;
	foreach( component : path::components_iter( p ) )
	{
		path::append( path_iterative, component );
		result_check_or_return( create_directory( path_iterative ) );
	}

	return void();
}

fn copy_file( filesystem_path_view src_path, filesystem_path_view dst_path ) : filesystem_result</void/>
{
	return copy_file_impl( src_path, dst_path, false );
}

fn copy_file_if_not_exists( filesystem_path_view src_path, filesystem_path_view dst_path ) : filesystem_result</void/>
{
	return copy_file_impl( src_path, dst_path, true );
}

fn copy_file_impl( filesystem_path_view src_path, filesystem_path_view dst_path, bool fail_if_exists ) : filesystem_result</void/>
{
	var wide_string mut src_path_null_terminated= utf8_to_null_terminated_wide_string( src_path );
	var wide_string mut dst_path_null_terminated= utf8_to_null_terminated_wide_string( dst_path );

	var BOOL res =
		unsafe( ::CopyFileW(
			src_path_null_terminated.data(),
			dst_path_null_terminated.data(),
			BOOL( (fail_if_exists ? 1 : 0 ) ) ) );
	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return void();
}

fn remove_file( filesystem_path_view path ) : filesystem_result</void/>
{
	var wide_string mut path_null_terminated= utf8_to_null_terminated_wide_string( path );

	var BOOL res= unsafe( ::DeleteFileW( path_null_terminated.data() ) );
	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return void();
}

fn rename_file_or_directory( filesystem_path_view src_path, filesystem_path_view dst_path ) : filesystem_result</void/>
{
	return rename_file_or_directory_impl( src_path, dst_path, true );
}

fn rename_file_or_directory_if_not_exists( filesystem_path_view src_path, filesystem_path_view dst_path ) : filesystem_result</void/>
{
	return rename_file_or_directory_impl( src_path, dst_path, false );
}

fn rename_file_or_directory_impl( filesystem_path_view src_path, filesystem_path_view dst_path, bool replace_existing ) : filesystem_result</void/>
{
	var wide_string mut src_path_null_terminated= utf8_to_null_terminated_wide_string( src_path );
	var wide_string mut dst_path_null_terminated= utf8_to_null_terminated_wide_string( dst_path );

	var BOOL res =
		unsafe( ::MoveFileExW(
			src_path_null_terminated.data(),
			dst_path_null_terminated.data(),
			DWORD( (replace_existing ? MOVEFILE_REPLACE_EXISTING : 0 ) ) ) );
	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return void();
}

fn remove_directory( filesystem_path_view path ) : filesystem_result</void/>
{
	var wide_string mut path_null_terminated= utf8_to_null_terminated_wide_string( path );

	var BOOL res= unsafe( ::RemoveDirectoryW( path_null_terminated.data() ) );
	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return void();
}

fn remove_directory_recursive( filesystem_path_view p ) : filesystem_result</void/>
{
	var wide_string mut search_path_null_terminated= utf8_to_wide_string( p );
	if( search_path_null_terminated.empty() )
	{
		search_path_null_terminated.push_back( WCHAR( "."c8 ) );
	}
	// Ensure trailing path separator is present.
	if( !(search_path_null_terminated.back() == WCHAR("/"c8) || search_path_null_terminated.back() == WCHAR("\\"c8) ) )
	{
		search_path_null_terminated.push_back( WCHAR( "\\"c8 ) );
	}
	search_path_null_terminated.push_back( WCHAR( "*"c8 ) ); // Add asterisk to search all.
	search_path_null_terminated.push_back( WCHAR(0) ); // Add null again.

	var WIN32_FIND_DATAW mut find_data= zero_init; // TODO - avoid zeroing it for performance reasons?

	var HANDLE handle= unsafe( ::FindFirstFileW( search_path_null_terminated.data(), $<(find_data) ) );
	if( handle == get_invalid_handle() )
	{
		var DWORD err = unsafe( GetLastError() );
		if( err == DWORD(ERROR_FILE_NOT_FOUND) )
		{
			// Ok - empty directory.
			return void();
		}
		return translate_error_code( err );
	}

	loop
	{
		// TODO - remove unnecessary conversions utf16 -> utf8 -> utf16
		var filesystem_path entry_name= extract_file_name_from_find_data( find_data );
		if( !directory_entry_should_be_ignored( entry_name ) )
		{
			var filesystem_path entry_full_name= path::join( p, entry_name );

			var filesystem_result</void/> remove_result=
				( ( find_data.dwFileAttributes & DWORD(FILE_ATTRIBUTE_DIRECTORY) ) != 0u
					? remove_directory_recursive( entry_full_name )
					: remove_file( entry_full_name ) );

			// Ignore "not found" error - in case if someone else removed this entry concurrently.
			if( remove_result.is_error() && remove_result.try_deref_error() != io_error::not_found )
			{
				unsafe( ::FindClose( handle ) );
				return remove_result;
			}
		}

		var BOOL res = unsafe( ::FindNextFileW( handle, $<(find_data) ) );
		if( res == 0 )
		{
			var DWORD err= unsafe( GetLastError() );

			unsafe( ::FindClose( handle ) );

			if( err == DWORD(ERROR_NO_MORE_FILES) )
			{
				break;
			}

			// Actual error.
			return translate_error_code( err );
		}
	}

	// Can finally remove this directory, since it should be empty.
	var wide_string mut path_null_terminated = utf8_to_null_terminated_wide_string( p );
	var BOOL res= unsafe( ::RemoveDirectoryW( path_null_terminated.data() ) );
	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return void();
}

fn get_current_directory() : filesystem_path
{
	var wide_string mut res;
	for( auto mut i= 0s; i < 8s; ++i )
	{
		var DWORD len= unsafe( ::GetCurrentDirectoryW( DWORD(res.size()), res.data() ) );
		if( len == 0u )
		{
			// Fail - return some dummy.
			return filesystem_path();
		}

		if( len <= DWORD( res.size() ) )
		{
			// Filled enough data - resize down.
			res.resize( size_type(len), WCHAR( " "c8 ) );
			break;
		}

		// Buffer is not large enough - resize it.
		res.resize( size_type(len), WCHAR(0) );
	}

	return wide_string_to_utf8( res );
}

fn set_current_directory( filesystem_path_view path ) : filesystem_result</void/>
{
	var wide_string mut path_null_terminated= utf8_to_null_terminated_wide_string( path );

	var BOOL res= unsafe( ::SetCurrentDirectoryW( path_null_terminated.data() ) );
	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return void();
}

//
// Directory iterator
//

fn directory_raw_iterator::open( filesystem_path_view path ) : filesystem_result</ iterator</ directory_raw_iterator /> />
{
	if( path.empty() )
	{
		// Avoid performing iteration over an empty path.
		return io_error::not_found;
	}

	var wide_string mut path_null_terminated= utf8_to_wide_string( path );
	if( path_null_terminated.empty() )
	{
		path_null_terminated.push_back( WCHAR( "."c8 ) );
	}
	// Ensure trailing path separator is present.
	if( !(path_null_terminated.back() == WCHAR("/"c8) || path_null_terminated.back() == WCHAR("\\"c8) ) )
	{
		path_null_terminated.push_back( WCHAR( "\\"c8 ) );
	}
	path_null_terminated.push_back( WCHAR( "*"c8 ) ); // Add asterisk to search all.
	path_null_terminated.push_back( WCHAR(0) ); // Add null again.

	var WIN32_FIND_DATAW mut find_data= zero_init; // TODO - avoid zeroing it for performance reasons?

	var HANDLE handle= unsafe( ::FindFirstFileW( path_null_terminated.data(), $<(find_data) ) );
	if( handle == get_invalid_handle() )
	{
		var DWORD err= unsafe( GetLastError() );

		if( err == DWORD(ERROR_FILE_NOT_FOUND) )
		{
			// Empty directory.
			return wrap_raw_iterator( unsafe( directory_raw_iterator( impl_windows( handle, null_optional ) ) ) );
		}

		return translate_error_code( err );
	}

	return
		wrap_raw_iterator(
			unsafe( directory_raw_iterator(
				impl_windows(
					handle,
					directory_entry
					{
						.name= extract_file_name_from_find_data( find_data ),
						.kind= file_attributes_to_file_kind( find_data.dwFileAttributes ),
					} ) ) ) );
}

fn directory_raw_iterator::impl_windows::constructor( $(byte8) handle, optional</directory_entry/> mut first_entry ) unsafe
	( handle_= handle, first_entry_= move(first_entry) )
{}

fn directory_raw_iterator::impl_windows::destructor()
{
	if( handle_ != get_invalid_handle() )
	{
		unsafe( ::FindClose( handle_ ) );
	}
}

fn nodiscard directory_raw_iterator::impl_windows::next( mut this ) : optional</ filesystem_result</directory_entry/> />
{
	if( !first_entry_.empty() )
	{
		var directory_entry mut first_entry= first_entry_.try_take();
		if( !directory_entry_should_be_ignored( first_entry.name ) )
		{
			return filesystem_result</directory_entry/>( move(first_entry) );
		}
	}
	if( handle_ == get_invalid_handle() )
	{
		return optional</ filesystem_result</directory_entry/> />();
	}

	var WIN32_FIND_DATAW mut find_data= zero_init; // TODO - avoid zeroing it for performance reasons?

	loop
	{
		var BOOL res = unsafe( ::FindNextFileW( handle_, $<(find_data) ) );
		if( res == 0 )
		{
			var DWORD err= unsafe( GetLastError() );

			// Close handle on end or on error, in order to prevent further iteration.
			unsafe( ::FindClose( handle_ ) );
			handle_= get_invalid_handle();

			if( err == DWORD(ERROR_NO_MORE_FILES) )
			{
				// Not actually an error - return empty optional to indicate end of iteration.
				return optional</ filesystem_result</directory_entry/> />();
			}

			// Actual error.
			return filesystem_result</directory_entry/>( translate_error_code( err ) );
		}

		var filesystem_path mut entry_name= extract_file_name_from_find_data( find_data );
		if( directory_entry_should_be_ignored(entry_name) )
		{
			continue;
		}

		return
			filesystem_result</directory_entry/>(
				directory_entry
				{
					.name= move(entry_name),
					.kind= file_attributes_to_file_kind( find_data.dwFileAttributes )
				} );
	}
}

// TODO - perform this check on raw WCHAR array to avoid extra utf16 -> utf8 conversion
fn directory_entry_should_be_ignored( string_view8 entry_name ) : bool
{
	return entry_name == "." || entry_name == "..";
}

fn extract_file_name_from_find_data( WIN32_FIND_DATAW& find_data ) : filesystem_path
{
	var size_type mut s= 0s;
	while( s < typeinfo</ typeof(find_data.cFileName) />.element_count )
	{
		if( find_data.cFileName[s] == WCHAR(0) )
		{
			break;
		}
		++s;
	}

	return wide_string_to_utf8( array_view_imut</WCHAR/>( find_data.cFileName ).subrange_end(s) );
}

//
// impl functions
//

struct open_options
{
	bool read;
	bool write;
	bool create_and_truncate;
	bool ensure_new;
}

fn open_file_impl( filesystem_path_view path, open_options& options ) unsafe : filesystem_result</native_file_handle/>
{
	var wide_string mut path_null_terminated= utf8_to_null_terminated_wide_string( path );

	// Allow sharing of files by default.
	// TODO - allow to override this.
	var DWORD share_mode = DWORD( FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE );

	var DWORD mut desired_access= 0u;
	var DWORD mut creation_disposition= 0u;

	if( options.read )
	{
		desired_access|= DWORD( GENERIC_READ );
	}
	if( options.write )
	{
		desired_access|= DWORD( GENERIC_WRITE );
	}

	if( options.create_and_truncate )
	{
		if( options.ensure_new )
		{
			creation_disposition= DWORD( CREATE_NEW );
		}
		else
		{
			creation_disposition= DWORD( CREATE_ALWAYS );
		}
	}
	else
	{
		creation_disposition= DWORD( OPEN_EXISTING );
	}

	var HANDLE handle =
		unsafe( ::CreateFileW(
			path_null_terminated.data(),
			desired_access,
			share_mode,
			nullptr</SECURITY_ATTRIBUTES/>(),
			creation_disposition,
			0u,
			nullptr</byte8/>() ) );
	if( handle == get_invalid_handle() )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return handle;
}

fn close_file_impl( native_file_handle handle ) unsafe
{
	unsafe( ::CloseHandle( handle ) );
}

fn get_metatada_impl( native_file_handle handle ) : filesystem_result</file_metadata/>
{
	var BY_HANDLE_FILE_INFORMATION mut info= zero_init;
	var BOOL res = unsafe( ::GetFileInformationByHandle( handle, $<(info) ) );
	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return file_metadata
	{
		.size= u64(info.nFileSizeLow) | (u64(info.nFileSizeHigh) << 32u),
		.kind= file_attributes_to_file_kind( info.dwFileAttributes ),
		.access_time= filetime_to_system_time( info.ftLastAccessTime ),
		.modification_time= filetime_to_system_time( info.ftLastWriteTime ),
		.permissions= file_attributes_to_file_permissions( info.dwFileAttributes ),
	};
}

fn get_size_impl( native_file_handle handle ) : filesystem_result</u64/>
{
	var LARGE_INTEGER mut i= zero_init;
	var BOOL res = unsafe( ::GetFileSizeEx( handle, $<(i) ) );
	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return u64(i.union_contents[0]);
}

fn set_permissions_impl( native_file_handle handle, file_permissions permissions ) : filesystem_result</void/>
{
	var FILE_BASIC_INFO mut info= zero_init;
	var BOOL get_res =
		unsafe( ::GetFileInformationByHandleEx(
			handle,
			FILE_INFO_BY_HANDLE_CLASS::FileBasicInfo,
			ptr_cast_to_byte8( $<(info) ),
			DWORD( typeinfo</FILE_BASIC_INFO/>.size_of ) ) );
	if( get_res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	var bool read_only= ( permissions.bits & c_permissions_bits_write ) == 0u;

	if( read_only )
	{
		info.FileAttributes |= DWORD( FILE_ATTRIBUTE_READONLY );
	}
	else
	{
		info.FileAttributes &= ~DWORD( FILE_ATTRIBUTE_READONLY );
	}

	var BOOL set_res =
		unsafe( ::SetFileInformationByHandle(
			handle,
			FILE_INFO_BY_HANDLE_CLASS::FileBasicInfo,
			ptr_cast_to_byte8( $<(info) ),
			DWORD( typeinfo</FILE_BASIC_INFO/>.size_of ) ) );
	if( set_res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return void();
}

fn file_attributes_to_file_kind( DWORD attributes ) : file_kind
{
	if( ( attributes & DWORD(FILE_ATTRIBUTE_DIRECTORY) ) != 0u )
	{
		return file_kind::directory;
	}

	// TODO - support symlinks.

	return file_kind::file;
}

fn filetime_to_system_time( FILETIME& t ) : system_time
{
	return unsafe( system_time( system_time::impl_windows{ .intervals= u64(t.dwLowDateTime) | ( u64(t.dwHighDateTime) << 32u ) } ) );
}

fn file_attributes_to_file_permissions( DWORD attributes ) : file_permissions
{
	if( ( attributes & DWORD(FILE_ATTRIBUTE_READONLY) ) != 0u )
	{
		return file_permissions{ .bits= file_permissions::all & (~c_permissions_bits_write) };
	}
	else
	{
		return file_permissions{ .bits= file_permissions::all };
	}
}

fn read_impl( native_file_handle handle, array_view_mut</byte8/> buf ) unsafe : filesystem_result</size_type/>
{
	var DWORD mut bytes_read = 0u;
	var BOOL res =
		unsafe( ::ReadFile(
			handle,
			buf.data(),
			DWORD( min( buf.size(), size_type(MAXDWORD) ) ),
			$<(bytes_read),
			nullptr</OVERLAPPED/>() ) );

	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	// Expected number of bytes or less.
	return size_type(bytes_read);
}

fn read_exact_impl( native_file_handle handle, array_view_mut</byte8/> buf ) unsafe : filesystem_result</void/>
{
	for( var size_type mut offset= 0s; offset < buf.size(); )
	{
		result_match( unsafe( read_impl( handle, buf ) ) )
		{
			Ok(bytes_read) ->
			{
				if( bytes_read == 0s )
				{
					return io_error::unexpected_end_of_file;
				}
				offset+= bytes_read;
			},
			Err(e) ->
			{
				if( e == io_error::interrupted )
				{
					continue;
				}
				return e;
			},
		}
	}

	return void();
}

fn write_impl( native_file_handle handle, array_view_imut</byte8/> buf ) unsafe : filesystem_result</size_type/>
{
	var DWORD mut bytes_written = 0u;
	var BOOL res =
		unsafe( ::WriteFile(
			handle,
			buf.data(),
			DWORD( min( buf.size(), size_type(MAXDWORD) ) ),
			$<(bytes_written),
			nullptr</OVERLAPPED/>() ) );

	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	// Expected number of bytes or less.
	return size_type(bytes_written);
}

fn write_all_impl( native_file_handle handle, array_view_imut</byte8/> buf ) unsafe : filesystem_result</void/>
{
	for( var size_type mut offset= 0s; offset < buf.size(); )
	{
		result_match( unsafe( write_impl( handle, buf.subrange_start( offset ) ) ) )
		{
			Ok(bytes_written) ->
			{
				if( bytes_written == 0s )
				{
					return io_error::write_zero;
				}
				offset+= size_type(bytes_written);
			},
			Err(e) ->
			{
				if( e == io_error::interrupted )
				{
					continue;
				}
				return e;
			},
		}
	}

	return void();
}

fn flush_impl( native_file_handle handle ) unsafe : filesystem_result</void/>
{
	var i32 res= unsafe( ::FlushFileBuffers( handle ) );
	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}
	return void();
}

fn flush_all_impl( native_file_handle handle ) unsafe : filesystem_result</void/>
{
	// As I understand under Windows there is no difference between flushing data and metadata for a file.
	return unsafe( flush_impl( handle ) );
}

fn resize_impl( native_file_handle handle, u64 new_size ) unsafe : filesystem_result</void/>
{
	var FILE_END_OF_FILE_INFO mut e{ .EndOfFile{ .union_contents[ byte64(new_size) ] } };

	var BOOL res =
		unsafe( ::SetFileInformationByHandle(
			handle,
			FILE_INFO_BY_HANDLE_CLASS::FileEndOfFileInfo,
			ptr_cast_to_byte8( $<(e) ),
			DWORD( typeinfo</ FILE_END_OF_FILE_INFO />.size_of ) ) );

	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return void();
}

fn seek_impl( native_file_handle handle, u64 offset ) unsafe : filesystem_result</void/>
{
	var LARGE_INTEGER li_offset{ .union_contents[ byte64(offset) ] };

	var BOOL res = unsafe( ::SetFilePointerEx( handle, li_offset, nullptr</LARGE_INTEGER/>(), DWORD(FILE_BEGIN) ) );
	if( res == 0 )
	{
		return translate_error_code( unsafe( GetLastError() ) );
	}

	return void();
}

fn translate_error_code( DWORD code ) : io_error
{
	switch(code)
	{
		DWORD(ERROR_FILE_NOT_FOUND), DWORD(ERROR_PATH_NOT_FOUND) -> { return io_error::not_found; },
		DWORD(ERROR_DIRECTORY)-> { return io_error::not_a_directory; },
		DWORD(ERROR_ALREADY_EXISTS), DWORD(ERROR_FILE_EXISTS) -> { return io_error::already_exists; },
		DWORD(ERROR_ACCESS_DENIED) -> { return io_error::permission_denied; },
		DWORD(ERROR_HANDLE_EOF) -> { return io_error::unexpected_end_of_file; },
		DWORD(ERROR_DIR_NOT_EMPTY) -> { return io_error::directory_not_empty; },
		default -> { return io_error::other; },
	}
}

// Produces INVALID_HANDLE_VALUE.
fn get_invalid_handle() : HANDLE
{
	static_assert( typeinfo</ size_type />.size_of == typeinfo</HANDLE/>.size_of );

	// Make -1.
	var size_type mut s(0);
	--s;

	var HANDLE mut handle= zero_init;

	unsafe( memory_copy(
		ptr_cast_to_byte8( $<(handle) ),
		ptr_cast_to_byte8( $<(s) ),
		typeinfo</ HANDLE />.size_of ) );

	return handle;
}

var u32 c_permissions_bits_write= file_permissions::owner_write | file_permissions::group_write | file_permissions::others_write;

} // namespace ust
