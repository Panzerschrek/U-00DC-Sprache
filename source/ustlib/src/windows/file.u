import "../../imports/file.u"
import "../../imports/string.u"
import "../../imports/utf.u"
import "../../imports/vector.u"
import "windows.uh"

namespace ust
{

//
// file_readable
//

fn file_readable::open( file_path path ) : file_result</file_readable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= true, .write= false, .create= false, .truncate= false, .ensure_new= false } ) );
		return file_readable(handle);
	}
}

fn file_readable::constructor( native_file_handle handle ) unsafe
	( handle_= handle )
{}

fn file_readable::destructor()
{
	unsafe( close_file_impl( handle_ ) );
}

fn file_readable::read( mut this, array_view_mut</byte8/> buf ) : file_result</size_type/>
{
	return unsafe( read_impl( handle_, buf ) );
}

fn file_readable::seek( mut this, u64 offset ) : file_result</void/>
{
	return unsafe( seek_impl( handle_, offset ) );
}

//
// file_writeable
//

fn file_writeable::open( file_path path ) : file_result</file_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path , open_options{ .read= false, .write= true, .create= false, .truncate= false, .ensure_new= false } ) );
		return file_writeable(handle);
	}
}

fn file_writeable::create( file_path path ) : file_result</file_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= false, .write= true, .create= true, .truncate= true, .ensure_new= false } ) );
		return file_writeable(handle);
	}
}

fn file_writeable::create_new( file_path path ) : file_result</file_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= false, .write= true, .create= true, .truncate= true, .ensure_new= true } ) );
		return file_writeable(handle);
	}
}

fn file_writeable::constructor( native_file_handle handle ) unsafe
	( handle_= handle )
{}

fn file_writeable::destructor()
{
	unsafe( close_file_impl( handle_ ) );
}

fn file_writeable::write( mut this, array_view_imut</byte8/> buf ) : file_result</size_type/>
{
	return unsafe( write_impl( handle_, buf ) );
}

fn file_writeable::seek( mut this, u64 offset ) : file_result</void/>
{
	return unsafe( seek_impl( handle_, offset ) );
}

//
// file_readable_writeable
//

fn file_readable_writeable::open( file_path path ) : file_result</file_readable_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= true, .write= true, .create= false, .truncate= false, .ensure_new= false } ) );
		return file_readable_writeable(handle);
	}
}

fn file_readable_writeable::create( file_path path ) : file_result</file_readable_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= true, .write= true, .create= true, .truncate= true, .ensure_new= false } ) );
		return file_readable_writeable(handle);
	}
}

fn file_readable_writeable::create_new( file_path path ) : file_result</file_readable_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= true, .write= true, .create= true, .truncate= true, .ensure_new= true } ) );
		return file_readable_writeable(handle);
	}
}

fn file_readable_writeable::constructor( native_file_handle handle ) unsafe
	( handle_= handle )
{}

fn file_readable_writeable::destructor()
{
	unsafe( close_file_impl( handle_ ) );
}

fn file_readable_writeable::read( mut this, array_view_mut</byte8/> buf ) : file_result</size_type/>
{
	return unsafe( read_impl( handle_, buf ) );
}

fn file_readable_writeable::write( mut this, array_view_imut</byte8/> buf ) : file_result</size_type/>
{
	return unsafe( write_impl( handle_, buf ) );
}

fn file_readable_writeable::seek( mut this, u64 offset ) : file_result</void/>
{
	return unsafe( seek_impl( handle_, offset ) );
}

//
// impl functions
//

struct open_options
{
	bool read;
	bool write;
	bool create;
	bool truncate;
	bool ensure_new;
}

fn open_file_impl( file_path path, open_options& options ) unsafe : file_result</native_file_handle/>
{
	var WideString mut path_null_terminated= UTF8ToNullTerminatedWideString( path );

	var DWORD mut desired_access= 0u;
	var DWORD mut share_mode= 0u; // TODO - tune its usage.
	var DWORD mut creation_disposition= 0u;

	if( options.read & options.write )
	{
		desired_access|= DWORD( GENERIC_READ | GENERIC_WRITE );
		share_mode|= DWORD( FILE_SHARE_READ | FILE_SHARE_WRITE );
	}
	else if( options.read )
	{
		desired_access|= DWORD( GENERIC_READ );
		share_mode|= DWORD( FILE_SHARE_READ  );
	}
	else if( options.write )
	{
		desired_access|= DWORD( GENERIC_WRITE );
		share_mode|= DWORD( FILE_SHARE_WRITE );
	}

	if( options.create )
	{
		if( options.ensure_new )
		{
			creation_disposition= DWORD( CREATE_NEW );
		}
		else
		{
			creation_disposition= DWORD( CREATE_ALWAYS );
		}
	}
	else
	{
		creation_disposition= DWORD( OPEN_ALWAYS );
	}
	if( options.truncate )
	{
		// TODO - use TRUNCATE_EXISTING
	}

	var HANDLE handle = unsafe( ::CreateFileW(
		path_null_terminated.data(),
		desired_access,
		share_mode,
		nullptr</ü_SECURITY_ATTRIBUTES/>(),
		creation_disposition,
		0u,
		nullptr</byte8/>() ) );
	if( is_nullptr(handle) || handle == GetInvalidHandle() )
	{
		return io_error::other;
	}

	return handle;
}

fn close_file_impl( native_file_handle handle ) unsafe
{
	unsafe( ::CloseHandle( handle ) );
}

fn read_impl( native_file_handle handle, array_view_mut</byte8/> buf ) unsafe : file_result</size_type/>
{
	// TODO - maybe read in loop to support larger sizes?

	var DWORD mut bytes_read = 0u;
	var BOOL res =
		unsafe( ::ReadFile(
			handle,
			buf.data(),
			DWORD(buf.size()),
			$<(bytes_read),
			ust::nullptr</ü_OVERLAPPED/>() ) );

	if( res == 0 )
	{
		return io_error::other;
	}

	// Expected number of bytes or less.
	return size_type(bytes_read);
}

fn write_impl( native_file_handle handle, array_view_imut</byte8/> buf ) unsafe : file_result</size_type/>
{
	// TODO - maybe write in loop to support larger sizes?

	var DWORD mut bytes_written = 0u;
	var BOOL res =
		unsafe( ::WriteFile(
			handle,
			buf.data(),
			DWORD(buf.size()),
			$<(bytes_written),
			ust::nullptr</ü_OVERLAPPED/>() ) );

	if( res == 0 )
	{
		return io_error::other;
	}

	// Expected number of bytes or less.
	return size_type(bytes_written);
}

fn seek_impl( native_file_handle handle, u64 offset ) unsafe : file_result</void/>
{
	var LARGE_INTEGER li_offset{ .union_contents[ byte64(offset) ] };

	var BOOL res = unsafe( ::SetFilePointerEx( handle, li_offset, nullptr</LARGE_INTEGER/>(), DWORD(FILE_BEGIN) ) );
	if( res == 0 )
	{
		return io_error::other;
	}

	return void();
}

// Can't use string_base, since "WCHAR" is defined as integer.
type WideString= vector</WCHAR/>;

fn UTF8ToNullTerminatedWideString( string_view8 mut v ) : WideString
{
	var WideString mut res;
	while( !v.empty() )
	{
		var u32 code_point( utf::extract_code_point_or_null_from_string(v) );
		if(code_point < u32(0xD800) || (code_point > u32(0xDFFF) && code_point < u32(0x10000)))
		{
			res.push_back( WCHAR( code_point ) );
		}
		else
		{
			var u32 c= u32(code_point) - 0x10000u;
			res.push_back( WCHAR( ( c >> 10u ) + 0xD800u ) );
			res.push_back( WCHAR( ( c & 0x3FFu ) + 0xDC00u ) );
		}
	}

	res.push_back( WCHAR( "\0"c8 ) );

	return res;
}

// Produces INVALID_HANDLE_VALUE.
fn GetInvalidHandle() : HANDLE
{
	static_assert( typeinfo</ size_type />.size_of == typeinfo</HANDLE/>.size_of );

	// Make -1.
	var size_type mut s(0);
	--s;

	var HANDLE mut handle= zero_init;

	unsafe( memory_copy(
		ptr_cast_to_byte8( $<(handle) ),
		ptr_cast_to_byte8( $<(s) ),
		typeinfo</ HANDLE />.size_of ) );

	return handle;
}


} // namespace ust
