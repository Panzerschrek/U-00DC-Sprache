// This file contains some definitions from windows headers, which are used for implementing some functionality of "ustlib".
// These definitions are manually copypasted from the result of the CPPHeaderConverter tool execution and somewhat tweaked.

fn nomangle AcquireSRWLockExclusive( PSRWLOCK SRWLock ) unsafe call_conv( "system" ) : void;
fn nomangle AcquireSRWLockShared( PSRWLOCK SRWLock ) unsafe call_conv( "system" ) : void;
fn nomangle CopyFileW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists ) unsafe call_conv( "system" ) : BOOL;
fn nomangle CreateDirectoryW( LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes ) unsafe call_conv( "system" ) : BOOL;
fn nomangle CreateFileW( LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile ) unsafe call_conv( "system" ) : HANDLE;
fn nomangle CreateSemaphoreW( LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName ) unsafe call_conv( "system" ) : HANDLE;
fn nomangle CreateThread( LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, ( fn( LPVOID arg0 ) unsafe call_conv( "system" ) : DWORD ) lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId ) unsafe call_conv( "system" ) : HANDLE;
fn nomangle CloseHandle( HANDLE hObject ) unsafe call_conv( "system" ) : BOOL;
fn nomangle DeleteFileW( LPCWSTR lpFileName ) unsafe call_conv( "system" ) : BOOL;
fn nomangle DeleteSynchronizationBarrier( LPSYNCHRONIZATION_BARRIER lpBarrier ) unsafe call_conv( "system" ) : BOOL;
fn nomangle EnterSynchronizationBarrier( LPSYNCHRONIZATION_BARRIER lpBarrier, DWORD dwFlags ) unsafe call_conv( "system" ) : BOOL;
fn nomangle FindClose( HANDLE hFindFile ) unsafe call_conv( "system" ) : BOOL;
fn nomangle FindFirstFileW( LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData ) unsafe call_conv( "system" ) : HANDLE;
fn nomangle FindNextFileW( HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData ) unsafe call_conv( "system" ) : BOOL;
fn nomangle FlushFileBuffers( HANDLE hFile ) unsafe call_conv( "system" ) : BOOL;
fn nomangle GetCurrentDirectoryW( DWORD nBufferLength, LPWSTR lpBuffer ) unsafe call_conv( "system" ) : DWORD;
fn nomangle GetEnvironmentVariableW( LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize ) unsafe call_conv( "system" ) : DWORD;
fn nomangle GetFileAttributesW( LPCWSTR lpFileName ) unsafe call_conv( "system" ) : DWORD;
fn nomangle GetFileAttributesExW( LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation ) unsafe call_conv( "system" ) : BOOL;
fn nomangle GetFileInformationByHandle( HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation ) unsafe call_conv( "system" ) : BOOL;
fn nomangle GetFileInformationByHandleEx( HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize ) unsafe call_conv( "system" ) : BOOL;
fn nomangle GetFileSizeEx( HANDLE hFile, PLARGE_INTEGER lpFileSize ) unsafe call_conv( "system" ) : BOOL;
fn nomangle GetLastError() unsafe call_conv( "system" ) : DWORD;
fn nomangle GetSystemInfo( LPSYSTEM_INFO lpSystemInfo ) unsafe call_conv( "system" ) : void;
fn nomangle GetSystemTimePreciseAsFileTime( LPFILETIME lpSystemTimeAsFileTime ) unsafe call_conv( "system" ) : void;
fn nomangle InitializeConditionVariable( PCONDITION_VARIABLE ConditionVariable ) unsafe call_conv( "system" ) : void;
fn nomangle InitializeSynchronizationBarrier( LPSYNCHRONIZATION_BARRIER lpBarrier, LONG lTotalThreads, LONG lSpinCount ) unsafe call_conv( "system" ) : BOOL;
fn nomangle InitializeSRWLock( PSRWLOCK SRWLock ) unsafe call_conv( "system" ) : void;
fn nomangle MoveFileExW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags ) unsafe call_conv( "system" ) : BOOL;
fn nomangle ReadFile( HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped ) unsafe call_conv( "system" ) : BOOL;
fn nomangle ReleaseSemaphore( HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount ) unsafe call_conv( "system" ) : BOOL;
fn nomangle ReleaseSRWLockExclusive( PSRWLOCK SRWLock ) unsafe call_conv( "system" ) : void;
fn nomangle ReleaseSRWLockShared( PSRWLOCK SRWLock ) unsafe call_conv( "system" ) : void;
fn nomangle RemoveDirectoryW( LPCWSTR lpPathName ) unsafe call_conv( "system" ) : BOOL;
fn nomangle SetCurrentDirectoryW( LPCWSTR lpPathName ) unsafe call_conv( "system" ) : BOOL;
fn nomangle GetCurrentThreadId() unsafe call_conv( "system" ) : DWORD;
fn nomangle SetEnvironmentVariableW( LPCWSTR lpName, LPCWSTR lpValue ) unsafe call_conv( "system" ) : BOOL;
fn nomangle SetFileAttributesW( LPCWSTR lpFileName, DWORD dwFileAttributes ) unsafe call_conv( "system" ) : BOOL;
fn nomangle SetFileInformationByHandle( HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize ) unsafe call_conv( "system" ) : BOOL;
fn nomangle SetFilePointerEx( HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod ) unsafe call_conv( "system" ) : BOOL;
fn nomangle SleepConditionVariableSRW( PCONDITION_VARIABLE ConditionVariable, PSRWLOCK SRWLock, DWORD dwMilliseconds, ULONG Flags ) unsafe call_conv( "system" ) : BOOL;
fn nomangle WakeAllConditionVariable( PCONDITION_VARIABLE ConditionVariable ) unsafe call_conv( "system" ) : void;
fn nomangle WakeConditionVariable( PCONDITION_VARIABLE ConditionVariable ) unsafe call_conv( "system" ) : void;
fn nomangle WaitForSingleObject( HANDLE hHandle, DWORD dwMilliseconds ) unsafe call_conv( "system" ) : DWORD;
fn nomangle WriteFile( HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped ) unsafe call_conv( "system" ) : BOOL;
fn nomangle WSACleanup() unsafe call_conv( "system" ) : i32;
fn nomangle WSAGetLastError() unsafe call_conv( "system" ) : i32;
fn nomangle WSAStartup( WORD wVersionRequested, LPWSADATA lpWSAData ) unsafe call_conv( "system" ) : i32;
fn nomangle bind( SOCKET s, $(sockaddr) name, i32 namelen ) unsafe call_conv( "system" ) : i32;
fn nomangle closesocket( SOCKET s ) unsafe call_conv( "system" ) : i32;
fn nomangle connect( SOCKET s, $(sockaddr) name, i32 namelen ) unsafe call_conv( "system" ) : i32;
fn nomangle getpeername( SOCKET s, $(sockaddr) name, $(i32) namelen ) unsafe call_conv( "system" ) : i32;
fn nomangle getsockname( SOCKET s, $(sockaddr) name, $(i32) namelen ) unsafe call_conv( "system" ) : i32;
fn nomangle getsockopt( SOCKET s, i32 level, i32 optname, $(char8) optval, $(i32) optlen ) unsafe call_conv( "system" ) : i32;
fn nomangle ioctlsocket( SOCKET s, i32 cmd, $(u_long) argp ) unsafe call_conv( "system" ) : i32;
fn nomangle recv( SOCKET s, $(char8) buf, i32 len, i32 flags ) unsafe call_conv( "system" ) : i32;
fn nomangle recvfrom( SOCKET s, $(char8) buf, i32 len, i32 flags, $(sockaddr) from, $(i32) fromlen ) unsafe call_conv( "system" ) : i32;
fn nomangle send( SOCKET s, $(char8) buf, i32 len, i32 flags ) unsafe call_conv( "system" ) : i32;
fn nomangle sendto( SOCKET s, $(char8) buf, i32 len, i32 flags, $(sockaddr) to, i32 tolen ) unsafe call_conv( "system" ) : i32;
fn nomangle setsockopt( SOCKET s, i32 level, i32 optname, $(char8) optval, i32 optlen ) unsafe call_conv( "system" ) : i32;
fn nomangle socket( i32 af, i32 type_, i32 protocol ) unsafe call_conv( "system" ) : SOCKET;

struct ü_BY_HANDLE_FILE_INFORMATION ordered
{
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD dwVolumeSerialNumber;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
	DWORD nNumberOfLinks;
	DWORD nFileIndexHigh;
	DWORD nFileIndexLow;
}

struct ü_FILE_BASIC_INFO ordered
{
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	DWORD FileAttributes;
}

struct ü_FILE_END_OF_FILE_INFO ordered
{
	LARGE_INTEGER EndOfFile;
}

struct ü_FILETIME ordered
{
	DWORD dwLowDateTime;
	DWORD dwHighDateTime;
}

struct ü_LARGE_INTEGER ordered
{
	[ byte64, 1 ] union_contents;
}

struct ü_OVERLAPPED ordered
{
	ULONG_PTR Internal;
	ULONG_PTR InternalHigh;

	struct ü_anon_record_190 ordered
	{
		[ byte32, 2 ] union_contents;
	}
	ü_anon_record_190 ü_anon_field_636;

	HANDLE hEvent;
}

struct ü_RTL_BARRIER ordered
{
	DWORD Reserved1;
	DWORD Reserved2;
	[ ULONG_PTR, 2u ] Reserved3;
	DWORD Reserved4;
	DWORD Reserved5;
}

struct ü_RTL_CONDITION_VARIABLE ordered
{
	PVOID Ptr;
}

struct ü_RTL_SRWLOCK ordered
{
	PVOID Ptr;
}

struct ü_SECURITY_ATTRIBUTES ordered
{
	DWORD nLength;
	LPVOID lpSecurityDescriptor;
	BOOL bInheritHandle;
}

struct ü_SYSTEM_INFO ordered
{
	struct ü_anon_record_194 ordered
	{
		[ byte32, 1 ] union_contents;
	}
	ü_anon_record_194 ü_anon_field_700;
	DWORD dwPageSize;
	LPVOID lpMinimumApplicationAddress;
	LPVOID lpMaximumApplicationAddress;
	DWORD_PTR dwActiveProcessorMask;
	DWORD dwNumberOfProcessors;
	DWORD dwProcessorType;
	DWORD dwAllocationGranularity;
	WORD wProcessorLevel;
	WORD wProcessorRevision;
}

struct ü_WIN32_FILE_ATTRIBUTE_DATA ordered
{
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
}

struct ü_WIN32_FIND_DATAW ordered
{
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
	DWORD dwReserved0;
	DWORD dwReserved1;
	[ WCHAR, 260u ] cFileName;
	[ WCHAR, 14u ] cAlternateFileName;
}

struct WSAData ordered
{
	WORD wVersion;
	WORD wHighVersion;
	[ char8, 257 ] szDescription;
	[ char8, 129 ] szSystemStatus;
	u16 iMaxSockets;
	u16 iMaxUdpDg;
	$(char8) lpVendorInfo;
}

struct sockaddr ordered
{
	ADDRESS_FAMILY sa_family;
	[ CHAR, 14 ] sa_data;
}

struct sockaddr_in ordered
{
	ADDRESS_FAMILY sin_family;
	USHORT_ sin_port;
	IN_ADDR sin_addr;
	[ CHAR, 8 ] sin_zero;
}

struct in_addr ordered
{
	ü_anon_record_381 S_un;
}

struct ü_anon_record_381 ordered
{
	[ byte32, 1 ] union_contents;
}

type ü_FILE_INFO_BY_HANDLE_CLASS = i32;
var ü_FILE_INFO_BY_HANDLE_CLASS
	constexpr FileBasicInfo( 0 ),
	constexpr FileStandardInfo( 1 ),
	constexpr FileNameInfo( 2 ),
	constexpr FileRenameInfo( 3 ),
	constexpr FileDispositionInfo( 4 ),
	constexpr FileAllocationInfo( 5 ),
	constexpr FileEndOfFileInfo( 6 ),
	constexpr FileStreamInfo( 7 ),
	constexpr FileCompressionInfo( 8 ),
	constexpr FileAttributeTagInfo( 9 ),
	constexpr FileIdBothDirectoryInfo( 10 ),
	constexpr FileIdBothDirectoryRestartInfo( 11 ),
	constexpr FileIoPriorityHintInfo( 12 ),
	constexpr FileRemoteProtocolInfo( 13 ),
	constexpr FileFullDirectoryInfo( 14 ),
	constexpr FileFullDirectoryRestartInfo( 15 ),
	constexpr FileStorageInfo( 16 ),
	constexpr FileAlignmentInfo( 17 ),
	constexpr FileIdInfo( 18 ),
	constexpr FileIdExtdDirectoryInfo( 19 ),
	constexpr FileIdExtdDirectoryRestartInfo( 20 ),
	constexpr FileDispositionInfoEx( 21 ),
	constexpr FileRenameInfoEx( 22 ),
	constexpr FileCaseSensitiveInfo( 23 ),
	constexpr FileNormalizedNameInfo( 24 ),
	constexpr MaximumFileInfoByHandleClass( 25 );

type ü_GET_FILEEX_INFO_LEVELS = i32;
var ü_GET_FILEEX_INFO_LEVELS
	constexpr GetFileExInfoStandard( 0 ),
	constexpr GetFileExMaxInfoLevel( 1 );

type socklen_t = i32;
type u_long = u32;
type wchar_t = char16; // Changed manually from "u16" in order to be able to use ust::string16.
type ADDRESS_FAMILY = USHORT_;
type BOOL = i32;
type BY_HANDLE_FILE_INFORMATION = ü_BY_HANDLE_FILE_INFORMATION;
type CHAR = char8;
type GET_FILEEX_INFO_LEVELS = ü_GET_FILEEX_INFO_LEVELS;
type DWORD = u32;
type DWORD_PTR = ULONG_PTR;
type FILE_BASIC_INFO = ü_FILE_BASIC_INFO;
type FILE_END_OF_FILE_INFO = ü_FILE_END_OF_FILE_INFO;
type FILE_INFO_BY_HANDLE_CLASS = ü_FILE_INFO_BY_HANDLE_CLASS;
type FILETIME = ü_FILETIME;
type HANDLE = $(byte8);
type INT_ = i32;
type IN_ADDR = in_addr;
type LARGE_INTEGER = ü_LARGE_INTEGER;
type LONG = i32;
type LPBY_HANDLE_FILE_INFORMATION = $(ü_BY_HANDLE_FILE_INFORMATION);
type LPCVOID = $(byte8);
type LPCWSTR = $(WCHAR);
type LPDWORD = $(DWORD);
type LPFILETIME = $(ü_FILETIME);
type LPLONG = $(i32);
type LPOVERLAPPED = $(ü_OVERLAPPED);
type LPSECURITY_ATTRIBUTES = $(ü_SECURITY_ATTRIBUTES);
type LPSYNCHRONIZATION_BARRIER = PRTL_BARRIER;
type LPSYSTEM_INFO = $(ü_SYSTEM_INFO);
type LPVOID = $(byte8);
type LPWIN32_FIND_DATAW = $(ü_WIN32_FIND_DATAW);
type LPWSADATA = $(WSAData);
type LPWSAOVERLAPPED = $(ü_OVERLAPPED);
type LPWSTR = $(WCHAR);
type OVERLAPPED = ü_OVERLAPPED;
type PCONDITION_VARIABLE = $(RTL_CONDITION_VARIABLE);
type PCSTR = $(CHAR);
type PLARGE_INTEGER = $(LARGE_INTEGER);
type PRTL_BARRIER = $(ü_RTL_BARRIER);
type PSRWLOCK = $(RTL_SRWLOCK);
type PVOID = $(byte8);
type RTL_CONDITION_VARIABLE = ü_RTL_CONDITION_VARIABLE;
type RTL_SRWLOCK = ü_RTL_SRWLOCK;
type SECURITY_ATTRIBUTES = ü_SECURITY_ATTRIBUTES;
type SIZE_T = ULONG_PTR;
type SOCKET = UINT_PTR;
type SYSTEM_INFO = ü_SYSTEM_INFO;
type UINT_PTR = size_type;
type ULONG = u32;
type ULONG_PTR = size_type;
type USHORT_ = u16;
type WCHAR = wchar_t;
type WIN32_FILE_ATTRIBUTE_DATA = ü_WIN32_FILE_ATTRIBUTE_DATA;
type WIN32_FIND_DATAW = ü_WIN32_FIND_DATAW;
type WORD = u16;

auto constexpr AF_INET = 2;
auto constexpr AF_INET6 = 23;

auto constexpr PF_INET = AF_INET;

auto constexpr SOCK_DGRAM = 2;

auto constexpr ERROR_SUCCESS = 0;
auto constexpr NO_ERROR = 0;
auto constexpr ERROR_INVALID_FUNCTION = 1;
auto constexpr ERROR_FILE_NOT_FOUND = 2;
auto constexpr ERROR_TOO_MANY_OPEN_FILES = 4;
auto constexpr ERROR_PATH_NOT_FOUND = 3;
auto constexpr ERROR_ACCESS_DENIED = 5;
auto constexpr ERROR_INVALID_HANDLE = 6;
auto constexpr ERROR_NOT_ENOUGH_MEMORY = 8;
auto constexpr ERROR_ARENA_TRASHED = 7;
auto constexpr ERROR_INVALID_BLOCK = 9;
auto constexpr ERROR_BAD_ENVIRONMENT = 10;
auto constexpr ERROR_INVALID_ACCESS = 12;
auto constexpr ERROR_BAD_FORMAT = 11;
auto constexpr ERROR_INVALID_DATA = 13;
auto constexpr ERROR_NO_MORE_FILES = 18;
auto constexpr ERROR_HANDLE_EOF = 38;
auto constexpr ERROR_FILE_EXISTS = 80;
auto constexpr ERROR_DIR_NOT_EMPTY = 145;
auto constexpr ERROR_ALREADY_EXISTS = 183;
auto constexpr ERROR_ENVVAR_NOT_FOUND = 203;
auto constexpr ERROR_DIRECTORY = 267;

auto constexpr WSAEWOULDBLOCK = 10035;
auto constexpr WSAEMSGSIZE = 10040;
auto constexpr WSAEADDRINUSE = 10048;
auto constexpr WSAEADDRNOTAVAIL = 10049;
auto constexpr WSAENOTCONN = 10057;

auto constexpr FILE_ATTRIBUTE_READONLY = 1;
auto constexpr FILE_ATTRIBUTE_HIDDEN = 2;
auto constexpr FILE_ATTRIBUTE_SYSTEM = 4;
auto constexpr FILE_ATTRIBUTE_DIRECTORY = 16;
auto constexpr FILE_ATTRIBUTE_ARCHIVE = 32;
auto constexpr FILE_ATTRIBUTE_DEVICE = 64;
auto constexpr FILE_ATTRIBUTE_NORMAL = 128;
auto constexpr FILE_ATTRIBUTE_TEMPORARY = 256;
auto constexpr FILE_ATTRIBUTE_SPARSE_FILE = 512;
auto constexpr FILE_ATTRIBUTE_REPARSE_POINT = 1024;
auto constexpr FILE_ATTRIBUTE_COMPRESSED = 2048;
auto constexpr FILE_ATTRIBUTE_OFFLINE = 4096;
auto constexpr FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192;
auto constexpr FILE_ATTRIBUTE_ENCRYPTED = 16384;
auto constexpr FILE_ATTRIBUTE_INTEGRITY_STREAM = 32768;
auto constexpr FILE_ATTRIBUTE_VIRTUAL = 65536;
auto constexpr FILE_ATTRIBUTE_NO_SCRUB_DATA = 131072;
auto constexpr FILE_ATTRIBUTE_EA = 262144;
auto constexpr FILE_ATTRIBUTE_PINNED = 524288;
auto constexpr FILE_ATTRIBUTE_UNPINNED = 1048576;
auto constexpr FILE_ATTRIBUTE_RECALL_ON_OPEN = 262144;
auto constexpr FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 4194304;

auto constexpr FILE_BEGIN = 0;
auto constexpr FILE_CURRENT = 1;
auto constexpr FILE_END = 2;

auto constexpr FILE_SHARE_READ = 1;
auto constexpr FILE_SHARE_WRITE = 2;
auto constexpr FILE_SHARE_DELETE = 4;

auto constexpr FIONBIO = ü_IOW</u_long/>( u32('f'), 126u );

template</type T/>
fn constexpr ü_IOW( u32 x, u32 y ) : u32
{
	return  IOC_IN | ( ( u32( typeinfo</T/>.size_of ) & IOCPARM_MASK ) << 16u ) | ( x << 8u ) | y;
}

auto constexpr IOCPARM_MASK = 0x7fu;
auto constexpr IOC_IN = 0x80000000u;

auto constexpr GENERIC_READ = 0x80000000u;
auto constexpr GENERIC_WRITE = 0x40000000u;
auto constexpr GENERIC_EXECUTE = 0x20000000u;
auto constexpr GENERIC_ALL = 0x10000000u;

auto constexpr CREATE_NEW = 1;
auto constexpr CREATE_ALWAYS = 2;
auto constexpr OPEN_EXISTING = 3;
auto constexpr OPEN_ALWAYS = 4;

auto constexpr INFINITE = -1;

auto constexpr IPPROTO_IP = 0;
auto constexpr IP_TTL = 4;

auto constexpr MSG_PEEK = 2;

auto constexpr MOVEFILE_REPLACE_EXISTING = 1;

var DWORD MAXDWORD = 4294967295u;
