// This file contains some definitions from windows headers, which are used for implementing some functionality of "ustlib".
// These definitions are manually copypasted from the result of the CPPHeaderConverter tool execution and somewhat tweaked.

fn nomangle AcquireSRWLockExclusive( PSRWLOCK SRWLock ) unsafe call_conv( "system" ) : void;
fn nomangle AcquireSRWLockShared( PSRWLOCK SRWLock ) unsafe call_conv( "system" ) : void;
fn nomangle CopyFileW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists ) unsafe call_conv( "system" ) : BOOL;
fn nomangle CreateDirectoryW( LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes ) unsafe call_conv( "system" ) : BOOL;
fn nomangle CreateFileW( LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile ) unsafe call_conv( "system" ) : HANDLE;
fn nomangle CreateThread( LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, ( fn( LPVOID arg0 ) unsafe call_conv( "system" ) : DWORD ) lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId ) unsafe call_conv( "system" ) : HANDLE;
fn nomangle CloseHandle( HANDLE hObject ) unsafe call_conv( "system" ) : BOOL;
fn nomangle DeleteFileW( LPCWSTR lpFileName ) unsafe call_conv( "system" ) : BOOL;
fn nomangle FindClose( HANDLE hFindFile ) unsafe call_conv( "system" ) : BOOL;
fn nomangle FindFirstFileW( LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData ) unsafe call_conv( "system" ) : HANDLE;
fn nomangle FindNextFileW( HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData ) unsafe call_conv( "system" ) : BOOL;
fn nomangle FlushFileBuffers( HANDLE hFile ) unsafe call_conv( "system" ) : BOOL;
fn nomangle GetCurrentDirectoryW( DWORD nBufferLength, LPWSTR lpBuffer ) unsafe call_conv( "system" ) : DWORD;
fn nomangle GetEnvironmentVariableW( LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize ) unsafe call_conv( "system" ) : DWORD;
fn nomangle GetFileAttributesW( LPCWSTR lpFileName ) unsafe call_conv( "system" ) : DWORD;
fn nomangle GetFileAttributesExW( LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation ) unsafe call_conv( "system" ) : BOOL;
fn nomangle GetFileInformationByHandle( HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation ) unsafe call_conv( "system" ) : BOOL;
fn nomangle GetFileInformationByHandleEx( HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize ) unsafe call_conv( "system" ) : BOOL;
fn nomangle GetFileSizeEx( HANDLE hFile, PLARGE_INTEGER lpFileSize ) unsafe call_conv( "system" ) : BOOL;
fn nomangle GetLastError() unsafe call_conv( "system" ) : DWORD;
fn nomangle GetSystemTimePreciseAsFileTime( LPFILETIME lpSystemTimeAsFileTime ) unsafe call_conv( "system" ) : void;
fn nomangle InitializeSRWLock( PSRWLOCK SRWLock ) unsafe call_conv( "system" ) : void;
fn nomangle MoveFileExW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags ) unsafe call_conv( "system" ) : BOOL;
fn nomangle ReadFile( HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped ) unsafe call_conv( "system" ) : BOOL;
fn nomangle ReleaseSRWLockExclusive( PSRWLOCK SRWLock ) unsafe call_conv( "system" ) : void;
fn nomangle ReleaseSRWLockShared( PSRWLOCK SRWLock ) unsafe call_conv( "system" ) : void;
fn nomangle RemoveDirectoryW( LPCWSTR lpPathName ) unsafe call_conv( "system" ) : BOOL;
fn nomangle SetCurrentDirectoryW( LPCWSTR lpPathName ) unsafe call_conv( "system" ) : BOOL;
fn nomangle SetFileAttributesW( LPCWSTR lpFileName, DWORD dwFileAttributes ) unsafe call_conv( "system" ) : BOOL;
fn nomangle SetFileInformationByHandle( HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize ) unsafe call_conv( "system" ) : BOOL;
fn nomangle SetFilePointerEx( HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod ) unsafe call_conv( "system" ) : BOOL;
fn nomangle WaitForSingleObject( HANDLE hHandle, DWORD dwMilliseconds ) unsafe call_conv( "system" ) : DWORD;
fn nomangle WriteFile( HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped ) unsafe call_conv( "system" ) : BOOL;

struct ü_BY_HANDLE_FILE_INFORMATION ordered
{
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD dwVolumeSerialNumber;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
	DWORD nNumberOfLinks;
	DWORD nFileIndexHigh;
	DWORD nFileIndexLow;
}

struct ü_FILE_BASIC_INFO ordered
{
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	DWORD FileAttributes;
}

struct ü_FILE_END_OF_FILE_INFO ordered
{
	LARGE_INTEGER EndOfFile;
}

struct ü_FILETIME ordered
{
	DWORD dwLowDateTime;
	DWORD dwHighDateTime;
}

struct ü_LARGE_INTEGER ordered
{
	[ byte64, 1 ] union_contents;
}

struct ü_OVERLAPPED ordered
{
	ULONG_PTR Internal;
	ULONG_PTR InternalHigh;

	struct ü_anon_record_190 ordered
	{
		[ byte32, 2 ] union_contents;
	}
	ü_anon_record_190 ü_anon_field_636;

	HANDLE hEvent;
}

struct ü_RTL_SRWLOCK ordered
{
	PVOID Ptr;
}

struct ü_SECURITY_ATTRIBUTES ordered
{
	DWORD nLength;
	LPVOID lpSecurityDescriptor;
	BOOL bInheritHandle;
}

struct ü_WIN32_FILE_ATTRIBUTE_DATA ordered
{
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
}

struct ü_WIN32_FIND_DATAW ordered
{
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
	DWORD dwReserved0;
	DWORD dwReserved1;
	[ WCHAR, 260u ] cFileName;
	[ WCHAR, 14u ] cAlternateFileName;
}

enum ü_FILE_INFO_BY_HANDLE_CLASS : i32
{
	FileBasicInfo,
	FileStandardInfo,
	FileNameInfo,
	FileRenameInfo,
	FileDispositionInfo,
	FileAllocationInfo,
	FileEndOfFileInfo,
	FileStreamInfo,
	FileCompressionInfo,
	FileAttributeTagInfo,
	FileIdBothDirectoryInfo,
	FileIdBothDirectoryRestartInfo,
	FileIoPriorityHintInfo,
	FileRemoteProtocolInfo,
	FileFullDirectoryInfo,
	FileFullDirectoryRestartInfo,
	FileStorageInfo,
	FileAlignmentInfo,
	FileIdInfo,
	FileIdExtdDirectoryInfo,
	FileIdExtdDirectoryRestartInfo,
	FileDispositionInfoEx,
	FileRenameInfoEx,
	FileCaseSensitiveInfo,
	FileNormalizedNameInfo,
	MaximumFileInfoByHandleClass,
}

enum ü_GET_FILEEX_INFO_LEVELS : i32
{
	GetFileExInfoStandard,
	GetFileExMaxInfoLevel,
}

type wchar_t = char16; // Changed manually from "u16" in order to be able to use ust::string16.
type BOOL = i32;
type BY_HANDLE_FILE_INFORMATION = ü_BY_HANDLE_FILE_INFORMATION;
type GET_FILEEX_INFO_LEVELS = ü_GET_FILEEX_INFO_LEVELS;
type DWORD = u32;
type FILE_BASIC_INFO = ü_FILE_BASIC_INFO;
type FILE_END_OF_FILE_INFO = ü_FILE_END_OF_FILE_INFO;
type FILE_INFO_BY_HANDLE_CLASS = ü_FILE_INFO_BY_HANDLE_CLASS;
type FILETIME = ü_FILETIME;
type HANDLE = $(byte8);
type LARGE_INTEGER = ü_LARGE_INTEGER;
type LPBY_HANDLE_FILE_INFORMATION = $(ü_BY_HANDLE_FILE_INFORMATION);
type LPCVOID = $(byte8);
type LPCWSTR = $(WCHAR);
type LPDWORD = $(DWORD);
type LPFILETIME = $(ü_FILETIME);
type LPOVERLAPPED = $(ü_OVERLAPPED);
type LPSECURITY_ATTRIBUTES = $(ü_SECURITY_ATTRIBUTES);
type LPVOID = $(byte8);
type LPWIN32_FIND_DATAW = $(ü_WIN32_FIND_DATAW);
type LPWSTR = $(WCHAR);
type OVERLAPPED = ü_OVERLAPPED;
type PLARGE_INTEGER = $(LARGE_INTEGER);
type PSRWLOCK = $(RTL_SRWLOCK);
type PVOID = $(byte8);
type RTL_SRWLOCK = ü_RTL_SRWLOCK;
type SECURITY_ATTRIBUTES = ü_SECURITY_ATTRIBUTES;
type SIZE_T = ULONG_PTR;
type ULONG_PTR = size_type;
type WCHAR = wchar_t;
type WIN32_FILE_ATTRIBUTE_DATA = ü_WIN32_FILE_ATTRIBUTE_DATA;
type WIN32_FIND_DATAW = ü_WIN32_FIND_DATAW;

auto constexpr ERROR_SUCCESS = 0;
auto constexpr NO_ERROR = 0;
auto constexpr ERROR_INVALID_FUNCTION = 1;
auto constexpr ERROR_FILE_NOT_FOUND = 2;
auto constexpr ERROR_TOO_MANY_OPEN_FILES = 4;
auto constexpr ERROR_PATH_NOT_FOUND = 3;
auto constexpr ERROR_ACCESS_DENIED = 5;
auto constexpr ERROR_INVALID_HANDLE = 6;
auto constexpr ERROR_NOT_ENOUGH_MEMORY = 8;
auto constexpr ERROR_ARENA_TRASHED = 7;
auto constexpr ERROR_INVALID_BLOCK = 9;
auto constexpr ERROR_BAD_ENVIRONMENT = 10;
auto constexpr ERROR_INVALID_ACCESS = 12;
auto constexpr ERROR_BAD_FORMAT = 11;
auto constexpr ERROR_INVALID_DATA = 13;
auto constexpr ERROR_NO_MORE_FILES = 18;
auto constexpr ERROR_HANDLE_EOF = 38;
auto constexpr ERROR_FILE_EXISTS = 80;
auto constexpr ERROR_DIR_NOT_EMPTY = 145;
auto constexpr ERROR_ALREADY_EXISTS = 183;
auto constexpr ERROR_ENVVAR_NOT_FOUND = 203;
auto constexpr ERROR_DIRECTORY = 267;

auto constexpr FILE_ATTRIBUTE_READONLY = 1;
auto constexpr FILE_ATTRIBUTE_HIDDEN = 2;
auto constexpr FILE_ATTRIBUTE_SYSTEM = 4;
auto constexpr FILE_ATTRIBUTE_DIRECTORY = 16;
auto constexpr FILE_ATTRIBUTE_ARCHIVE = 32;
auto constexpr FILE_ATTRIBUTE_DEVICE = 64;
auto constexpr FILE_ATTRIBUTE_NORMAL = 128;
auto constexpr FILE_ATTRIBUTE_TEMPORARY = 256;
auto constexpr FILE_ATTRIBUTE_SPARSE_FILE = 512;
auto constexpr FILE_ATTRIBUTE_REPARSE_POINT = 1024;
auto constexpr FILE_ATTRIBUTE_COMPRESSED = 2048;
auto constexpr FILE_ATTRIBUTE_OFFLINE = 4096;
auto constexpr FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192;
auto constexpr FILE_ATTRIBUTE_ENCRYPTED = 16384;
auto constexpr FILE_ATTRIBUTE_INTEGRITY_STREAM = 32768;
auto constexpr FILE_ATTRIBUTE_VIRTUAL = 65536;
auto constexpr FILE_ATTRIBUTE_NO_SCRUB_DATA = 131072;
auto constexpr FILE_ATTRIBUTE_EA = 262144;
auto constexpr FILE_ATTRIBUTE_PINNED = 524288;
auto constexpr FILE_ATTRIBUTE_UNPINNED = 1048576;
auto constexpr FILE_ATTRIBUTE_RECALL_ON_OPEN = 262144;
auto constexpr FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 4194304;

auto constexpr FILE_BEGIN = 0;
auto constexpr FILE_CURRENT = 1;
auto constexpr FILE_END = 2;

auto constexpr FILE_SHARE_READ = 1;
auto constexpr FILE_SHARE_WRITE = 2;
auto constexpr FILE_SHARE_DELETE = 4;

auto constexpr GENERIC_READ = 0x80000000u;
auto constexpr GENERIC_WRITE = 0x40000000u;
auto constexpr GENERIC_EXECUTE = 0x20000000u;
auto constexpr GENERIC_ALL = 0x10000000u;

auto constexpr CREATE_NEW = 1;
auto constexpr CREATE_ALWAYS = 2;
auto constexpr OPEN_EXISTING = 3;
auto constexpr OPEN_ALWAYS = 4;

auto constexpr INFINITE = -1;

auto constexpr MOVEFILE_REPLACE_EXISTING = 1;

var DWORD MAXDWORD = 4294967295u;
