import "../../imports/memory.u"
import "../../imports/semaphore_impl.u"
import "windows.uh"

namespace ust
{

namespace semaphore_impl
{

static_assert( same_type</ semaphore_handle_t, HANDLE />, "Invalid type for semaphore handle!" );

fn create_semaphore( u32 initial_value ) unsafe : semaphore_handle_t
{
	unsafe
	{
		var HANDLE handle=
			::CreateSemaphoreW(
				nullptr</SECURITY_ATTRIBUTES_/>(),
				i32(initial_value),
				i32(0x7FFFFFFFu),
				nullptr</WCHAR/>() );
		halt if( is_nullptr( handle ) );
		return handle;
	}
}

fn destroy_semaphore( semaphore_handle_t s ) unsafe
{
	unsafe( ::CloseHandle( s ) );
}

fn acquire_semaphore( semaphore_handle_t s ) unsafe
{
	unsafe( ::WaitForSingleObject( s, DWORD(INFINITE) ) );
}

fn release_semaphore( semaphore_handle_t s ) unsafe
{
	var BOOL res = unsafe( ::ReleaseSemaphore( s, 1, nullptr</LONG/>() ) );
	halt if( res == 0 );
}

} // namespace semaphore_impl

} // namespace ust
