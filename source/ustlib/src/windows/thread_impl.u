import "../../imports/helpers.u"
import "../../imports/memory.u"
import "../../imports/thread_impl.u"
import "windows.uh"

namespace ust
{

namespace thread_impl
{

static_assert( same_type</thread_id, DWORD/>, "Types mismatch!" );
static_assert( same_type</thread_handle, HANDLE/>, "Types mismatch!" );

fn create_and_start_thread( thread_start_function func, $(byte8) arg ) unsafe : tup[ thread_handle, thread_id ]
{
	var DWORD mut id= zero_init;

	var HANDLE handle=
		unsafe( ::CreateThread(
			nullptr</SECURITY_ATTRIBUTES/>(),
			SIZE_T(0), // stack size (0 for default)
			func,
			arg,
			DWORD(0), // flags
			$<(id) ) );

	halt if( is_nullptr(handle) );

	var tup[ thread_handle, thread_id ] res[ handle, id ];
	return res;
}

fn join_and_destroy_thread( thread_handle handle ) unsafe
{
	unsafe( ::WaitForSingleObject( handle, DWORD(INFINITE) ) );
	unsafe( ::CloseHandle( handle ) );
}

fn get_current_thread_id() : thread_id
{
	return unsafe( GetCurrentThreadId() );
}

fn get_number_of_available_cpus() : u32
{
	var SYSTEM_INFO mut sysinfo= zero_init;
	unsafe( ::GetSystemInfo( $<(sysinfo) ) );
	return sysinfo.dwNumberOfProcessors;
}

} // namespace thread_impl

} // namespace us
