// This file contains some definitions from UNIX (pparticulary Linux) headers, which are used inside "ustlib".
// These definitions are manually copypasted from the result of the CPPHeaderConverter tool execution and somewhat tweaked.

fn nomangle chdir( $(char8) ü__path ) unsafe : i32;
fn nomangle chmod( $(char8) ü__file, ü__mode_t ü__mode ) unsafe : i32;
fn nomangle fchmod( i32 ü__fd, ü__mode_t ü__mode ) unsafe : i32;
fn nomangle clock_gettime( clockid_t ü__clock_id, $(timespec) ü__tp ) unsafe : i32;
fn nomangle close( i32 ü__fd ) unsafe : i32;
fn nomangle closedir( $(DIR) ü__dirp ) unsafe : i32;
fn nomangle fdatasync( i32 ü__fildes ) unsafe : i32;
fn nomangle fstat( i32 ü__fd, $(stat_) ü__buf ) unsafe : i32;
fn nomangle fsync( i32 ü__fd ) unsafe : i32;
fn nomangle ftruncate( i32 ü__fd, ü__off_t ü__length ) unsafe : i32;
fn nomangle getcwd( $(char8) ü__buf, size_t ü__size ) unsafe : $(char8);
fn nomangle getenv( $(char8) ü__name ) unsafe : $(char8);
fn nomangle lseek( i32 ü__fd, ü__off_t ü__offset, i32 ü__whence ) unsafe : ü__off64_t;
fn nomangle lstat( $(char8) ü__file, $(stat_) ü__buf ) unsafe : i32;
fn nomangle mkdir( $(char8) ü__path, ü__mode_t ü__mode ) unsafe : i32;
fn nomangle open( $(char8) ü__file, i32 ü__oflag, ü__mode_t ü__mode ) unsafe : i32;
fn nomangle opendir( $(char8) ü__name ) unsafe : $(DIR);
fn nomangle read( i32 ü__fd, $(byte8) ü__buf, size_t ü__nbytes ) unsafe : ssize_t;
fn nomangle readdir( $(DIR) ü__dirp ) unsafe : $(dirent);
fn nomangle rename( $(char8) ü__old, $(char8) ü__new ) unsafe : i32;
fn nomangle rmdir( $(char8) ü__path ) unsafe : i32;
fn nomangle sendfile( i32 ü__out_fd, i32 ü__in_fd, $(off_t) ü__offset, size_t ü__count ) unsafe : ssize_t;
fn nomangle setenv( $(char8) ü__name, $(char8) ü__value, i32 ü__replace ) unsafe : i32;
fn nomangle stat( $(char8) ü__file, $(stat_) ü__buf ) unsafe : i32;
fn nomangle unlink( $(char8) ü__name ) unsafe : i32;
fn nomangle unsetenv( $(char8) ü__name ) unsafe : i32;
fn nomangle write( i32 ü__fd, $(byte8) ü__buf, size_t ü__n ) unsafe : ssize_t;

struct dirent ordered
{
	ü__ino_t d_ino;
	ü__off_t d_off;
	u16 d_reclen;
	u8 d_type;
	[ char8, 256u ] d_name;
}

struct timespec ordered
{
	ü__time_t tv_sec;
	ü__syscall_slong_t tv_nsec;
}

// TODO - adopt this structure for 32-bit code and non-GNU/Linux systems (GNU/Hurd, OS X, FreeBSD).
struct stat_ ordered
{
	ü__dev_t st_dev;
	ü__ino_t st_ino;
	ü__nlink_t st_nlink;
	ü__mode_t st_mode;
	ü__uid_t st_uid;
	ü__gid_t st_gid;
	i32 ü__pad0;
	ü__dev_t st_rdev;
	ü__off_t st_size;
	ü__blksize_t st_blksize;
	ü__blkcnt_t st_blocks;
	timespec st_atim;
	timespec st_mtim;
	timespec st_ctim;
	[ ü__syscall_slong_t, 3u ] ü__glibc_reserved;
}

struct ü__dirstream ordered
{
fn constructor() : void= delete;
}

type ü_anon_enum_56 = u32;
var ü_anon_enum_56
	constexpr DT_UNKNOWN( 0u ),
	constexpr DT_FIFO( 1u ),
	constexpr DT_CHR( 2u ),
	constexpr DT_DIR( 4u ),
	constexpr DT_BLK( 6u ),
	constexpr DT_REG( 8u ),
	constexpr DT_LNK( 10u ),
	constexpr DT_SOCK( 12u ),
	constexpr DT_WHT( 14u );

type DIR = ü__dirstream;
type clockid_t = ü__clockid_t;
type off_t = ü__off_t;
type size_t = size_type;
type ssize_t = ü__ssize_t;
type ü__blkcnt_t = i64;
type ü__blksize_t = i64;
type ü__clockid_t = i32;
type ü__dev_t = u64;
type ü__gid_t = u32;
type ü__ino_t = u64;
type ü__mode_t = u32;
type ü__nlink_t = u64;
type ü__off64_t = i64;
type ü__off_t = i64;
type ü__ssize_t = ssize_type;
type ü__syscall_slong_t = i64;
type ü__time_t = i64;
type ü__uid_t = u32;

mixin( embed</char8/>( "unix_constants_freebsd.uh" ) );
