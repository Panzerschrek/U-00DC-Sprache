// Header for pthread library functions, used in "ustlib".
import "../../imports/type_traits.u"

type pthread_t= size_type;

// This structs have different size on diffrerent platforms. Use maximum size and maximum alignment.
type pthread_attr_t  = [ byte64, 8 ];
type pthread_mutexattr_t = [ byte64, ( c_pthread_is_darwin ? 2 : 1 ) ];
type pthread_mutex_t = [ byte64, ( c_pthread_is_darwin ? 8 : 5 ) ];
type pthread_rwlock_t= [ byte64, ( c_pthread_is_darwin ? 25 : 8 ) ];
type pthread_rwlockattr_t= [ byte64, ( c_pthread_is_darwin ? 3 : 8 ) ];
type pthread_barrier_t= [ byte64, 4 ];
type pthread_barrierattr_t= [ byte32, 1 ];
type pthread_cond_t= [ byte64, 6 ];
type pthread_condattr_t= [ byte64, ( c_pthread_is_darwin ? 2 : 1 ) ];

type pthread_start_function= fn( $(byte8) arg ) unsafe call_conv( "C" ) : $(byte8);

fn nomangle pthread_attr_init( pthread_attr_t& mut thread_attr ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_attr_destroy( pthread_attr_t& mut thread_attr ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_create(
	pthread_t& mut thread_id,
	$(pthread_attr_t) thread_attr /* may be null */,
	pthread_start_function start_function,
	$(byte8) arg ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_join(
	pthread_t thread_id,
	$($(byte8)) ret_val ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_detach( pthread_t thread_id ) unsafe call_conv( "C" ) : i32;

fn nomangle pthread_mutexattr_init( pthread_mutexattr_t &mut attr ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_mutexattr_destroy( pthread_mutexattr_t &mut attr ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_mutex_init( pthread_mutex_t &mut mutex, $(pthread_mutexattr_t) attr /* may be null */ ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_mutex_destroy( pthread_mutex_t &mut mutex ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_mutex_lock( pthread_mutex_t &mut mutex ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_mutex_unlock( pthread_mutex_t &mut mutex ) unsafe call_conv( "C" ) : i32;

fn nomangle pthread_rwlockattr_init( pthread_rwlockattr_t& mut attr ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_rwlockattr_destroy( pthread_rwlockattr_t& mut attr ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_rwlock_init( pthread_rwlock_t &mut rwlock, $(pthread_rwlockattr_t) attr /* may be null */ ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_rwlock_destroy( pthread_rwlock_t &mut rwlock ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_rwlock_rdlock( pthread_rwlock_t &mut rwlock ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_rwlock_wrlock( pthread_rwlock_t &mut rwlock ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_rwlock_unlock( pthread_rwlock_t &mut rwlock ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_self() unsafe call_conv( "C" ) : pthread_t;

fn nomangle pthread_barrier_destroy( pthread_barrier_t &mut barrier ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_barrier_init( pthread_barrier_t &mut barrier, $(pthread_barrierattr_t) attr /* may be null */, u32 count ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_barrier_wait( pthread_barrier_t &mut barrier ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_barrierattr_destroy( pthread_barrierattr_t &mut attr ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_barrierattr_init( pthread_barrierattr_t &mut attr ) unsafe call_conv( "C" ) : i32;

fn nomangle pthread_cond_init( pthread_cond_t &mut cond, $(pthread_condattr_t) attr /* may be null */ ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_cond_destroy( pthread_cond_t &mut cond ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_cond_signal( pthread_cond_t &mut cond ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_cond_broadcast( pthread_cond_t &mut cond ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_cond_wait( pthread_cond_t &mut cond, pthread_mutex_t &mut mutex ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_condattr_init( pthread_condattr_t &mut attr ) unsafe call_conv( "C" ) : i32;
fn nomangle pthread_condattr_destroy( pthread_condattr_t &mut attr ) unsafe call_conv( "C" ) : i32;

var bool c_pthread_is_darwin= ust::constexpr_string_equals( compiler::target::vendor, "apple" );
