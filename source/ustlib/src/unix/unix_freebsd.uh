// This file contains some definitions from FreeBSD headers, which are used inside "ustlib".
// These definitions are manually copypasted from the result of the CPPHeaderConverter tool execution and somewhat tweaked.

fn nomangle accept( i32 param0, $(sockaddr) param1, $(socklen_t) param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle bind( i32 param0, $(sockaddr) param1, socklen_t param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle chdir( $(char8) param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle chmod( $(char8) param0, mode_t param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle clock_gettime( clockid_t param0, $(timespec) param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle close( i32 param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle closedir( $(DIR) param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle connect( i32 param0, $(sockaddr) param1, socklen_t param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle copy_file_range( i32 param0, $(off_t) param1, i32 param2, $(off_t) param3, size_t param4, u32 param5 ) unsafe call_conv( "C" ) : ssize_t; // FreeBSD-specific
fn nomangle fchmod( i32 param0, mode_t param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle fcntl( i32 param0, i32 param1, i32 flags ) unsafe call_conv( "C" ) : i32;
fn nomangle fdatasync( i32 param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle fstat( i32 param0, $(stat_) param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle fsync( i32 param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle ftruncate( i32 param0, off_t param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle getaddrinfo( $(char8) param0, $(char8) param1, $(addrinfo) param2, $($(addrinfo)) param3 ) unsafe call_conv( "C" ) : i32;
fn nomangle getcwd( $(char8) param0, size_t param1 ) unsafe call_conv( "C" ) : $(char8);
fn nomangle getenv( $(char8) param0 ) unsafe call_conv( "C" ) : $(char8);
fn nomangle getpeername( i32 param0, $(sockaddr) param1, $(socklen_t) param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle getsockname( i32 param0, $(sockaddr) param1, $(socklen_t) param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle getsockopt( i32 param0, i32 param1, i32 param2, $(byte8) param3, $(socklen_t) param4 ) unsafe call_conv( "C" ) : i32;
fn nomangle listen( i32 param0, i32 param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle lseek( i32 param0, off_t param1, i32 param2 ) unsafe call_conv( "C" ) : off_t;
fn nomangle lstat( $(char8) param0, $(stat_) param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle mkdir( $(char8) param0, mode_t param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle open( $(char8) param0, i32 param1, mode_t param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle opendir( $(char8) param0 ) unsafe call_conv( "C" ) : $(DIR);
fn nomangle read( i32 param0, $(byte8) param1, size_t param2 ) unsafe call_conv( "C" ) : ssize_t;
fn nomangle readdir( $(DIR) param0 ) unsafe call_conv( "C" ) : $(dirent);
fn nomangle recv( i32 param0, $(byte8) param1, size_t param2, i32 param3 ) unsafe call_conv( "C" ) : ssize_t;
fn nomangle recvfrom( i32 param0, $(byte8) param1, size_t param2, i32 param3, $(sockaddr) param4, $(socklen_t) param5 ) unsafe call_conv( "C" ) : ssize_t;
fn nomangle rename( $(char8) param0, $(char8) param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle rmdir( $(char8) param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle send( i32 param0, $(byte8) param1, size_t param2, i32 param3 ) unsafe call_conv( "C" ) : ssize_t;
fn nomangle sendto( i32 param0, $(byte8) param1, size_t param2, i32 param3, $(sockaddr) param4, socklen_t param5 ) unsafe call_conv( "C" ) : ssize_t;
fn nomangle setenv( $(char8) param0, $(char8) param1, i32 param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle setsockopt( i32 param0, i32 param1, i32 param2, $(byte8) param3, socklen_t param4 ) unsafe call_conv( "C" ) : i32;
fn nomangle socket( i32 param0, i32 param1, i32 param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle stat( $(char8) param0, $(stat_) param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle unlink( $(char8) param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle unsetenv( $(char8) param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle write( i32 param0, $(byte8) param1, size_t param2 ) unsafe call_conv( "C" ) : ssize_t;

struct dirent ordered
{
	ino_t d_fileno;
	off_t d_off;
	ü__uint16_t d_reclen;
	ü__uint8_t d_type;
	ü__uint8_t d_pad0;
	ü__uint16_t d_namlen;
	ü__uint16_t d_pad1;
	[ char8, 256u ] d_name;
}

struct timespec ordered
{
	time_t tv_sec;
	i64 tv_nsec;
}

struct stat_ ordered
{
	dev_t st_dev;
	ino_t st_ino;
	nlink_t st_nlink;
	mode_t st_mode;
	ü__int16_t st_bsdflags;
	uid_t st_uid;
	gid_t st_gid;
	ü__int32_t st_padding1;
	dev_t st_rdev;
	timespec st_atim;
	timespec st_mtim;
	timespec st_ctim;
	timespec st_birthtim;
	off_t st_size;
	blkcnt_t st_blocks;
	blksize_t st_blksize;
	fflags_t st_flags;
	ü__uint64_t st_gen;
	ü__uint64_t st_filerev;
	[ ü__uint64_t, 9u ] st_spare;
}

struct ü_dirdesc ordered
{
fn constructor() : void= delete;
}

struct addrinfo ordered
{
	i32 ai_flags;
	i32 ai_family;
	i32 ai_socktype;
	i32 ai_protocol;
	socklen_t ai_addrlen;
	$(char8) ai_canonname;
	$(sockaddr) ai_addr;
	$(addrinfo) ai_next;
}

struct sockaddr ordered
{
	u8 sa_len;
	sa_family_t sa_family;
	[ char8, 14 ] sa_data;
}

struct sockaddr_in ordered
{
	uint8_t sin_len;
	sa_family_t sin_family;
	in_port_t sin_port;
	in_addr sin_addr;
	[ char8, 8 ] sin_zero;
}

struct sockaddr_in6 ordered
{
	uint8_t sin6_len;
	sa_family_t sin6_family;
	in_port_t sin6_port;
	uint32_t sin6_flowinfo;
	in6_addr sin6_addr;
	uint32_t sin6_scope_id;
}

struct sockaddr_storage ordered
{
	u8 ss_len;
	sa_family_t ss_family;
	[ char8, 6 ] ü__ss_pad1;
	ü__int64_t ü__ss_align;
	[ char8, 112 ] ü__ss_pad2;
}

struct in_addr ordered
{
	in_addr_t s_addr;
}

struct in6_addr ordered
{
	// Manually changed to u32x4 array.
	[ u32, 4 ] parts;
}

auto constexpr DT_DIR = 4;
auto constexpr DT_LNK = 10;

type DIR = ü_dirdesc;
type blkcnt_t = ü__blkcnt_t;
type blksize_t = ü__blksize_t;
type clockid_t = ü__clockid_t;
type dev_t = ü__dev_t;
type fflags_t = ü__fflags_t;
type gid_t = ü__gid_t;
type in_addr_t = ü__uint32_t;
type in_port_t = ü__uint16_t;
type ino_t = ü__ino_t;
type mode_t = ü__mode_t;
type nlink_t = ü__nlink_t;
type off64_t = ü__off64_t;
type off_t = ü__off_t;
type sa_family_t = ü__sa_family_t;
type size_t = ü__size_t;
type socklen_t = ü__socklen_t;
type ssize_t = ü__ssize_t;
type time_t = ü__time_t;
type uid_t = ü__uid_t;
type uint32_t = ü__uint32_t;
type uint8_t = ü__uint8_t;
type ü__blkcnt_t = ü__int64_t;
type ü__blksize_t = ü__int32_t;
type ü__clockid_t = ü__int32_t;
type ü__dev_t = ü__uint64_t;
type ü__fflags_t = ü__uint32_t;
type ü__gid_t = ü__uint32_t;
type ü__ino_t = ü__uint64_t;
type ü__int16_t = i16;
type ü__int32_t = i32;
type ü__int64_t = i64;
type ü__mode_t = ü__uint16_t;
type ü__nlink_t = ü__uint64_t;
type ü__off64_t = ü__int64_t;
type ü__off_t = ü__int64_t;
type ü__sa_family_t = ü__uint8_t;
type ü__size_t = size_type;
type ü__socklen_t = ü__uint32_t;
type ü__ssize_t = ssize_type;
type ü__time_t = ü__int64_t;
type ü__uid_t = ü__uint32_t;
type ü__uint16_t = u16;
type ü__uint32_t = u32;
type ü__uint64_t = u64;
type ü__uint8_t = u8;

auto constexpr AF_INET = 2;
auto constexpr AF_INET6 = 28;

auto constexpr CLOCK_REALTIME = 0;
auto constexpr CLOCK_MONOTONIC = 4;
auto constexpr CLOCK_PROCESS_CPUTIME_ID = 15;
auto constexpr CLOCK_THREAD_CPUTIME_ID = 14;
auto constexpr CLOCK_REALTIME_COARSE = 10;
auto constexpr CLOCK_MONOTONIC_COARSE = 12;
auto constexpr CLOCK_BOOTTIME = 5;

auto constexpr EPERM = 1;
auto constexpr ENOENT = 2;
auto constexpr ESRCH = 3;
auto constexpr EINTR = 4;
auto constexpr EIO = 5;
auto constexpr ENXIO = 6;
auto constexpr E2BIG = 7;
auto constexpr ENOEXEC = 8;
auto constexpr EBADF = 9;
auto constexpr ECHILD = 10;
auto constexpr EDEADLK = 11;
auto constexpr ENOMEM = 12;
auto constexpr EACCES = 13;
auto constexpr EFAULT = 14;
auto constexpr ENOTBLK = 15;
auto constexpr EBUSY = 16;
auto constexpr EEXIST = 17;
auto constexpr EXDEV = 18;
auto constexpr ENODEV = 19;
auto constexpr ENOTDIR = 20;
auto constexpr EISDIR = 21;
auto constexpr EINVAL = 22;
auto constexpr ENFILE = 23;
auto constexpr EMFILE = 24;
auto constexpr ENOTTY = 25;
auto constexpr ETXTBSY = 26;
auto constexpr EFBIG = 27;
auto constexpr ENOSPC = 28;
auto constexpr ESPIPE = 29;
auto constexpr EROFS = 30;
auto constexpr EMLINK = 31;
auto constexpr EPIPE = 32;
auto constexpr EDOM = 33;
auto constexpr ERANGE = 34;
auto constexpr EAGAIN = 35;
auto constexpr EDESTADDRREQ = 39;
auto constexpr EADDRINUSE = 48;
auto constexpr ECONNRESET = 54;
auto constexpr ENOTCONN = 57;
auto constexpr ECONNREFUSED = 61;
auto constexpr ENOTEMPTY = 66;

auto constexpr F_GETFL = 3;
auto constexpr F_SETFL = 4;

auto constexpr IP_TTL = 4;

auto constexpr IPPROTO_IP = 0;
auto constexpr IPPROTO_TCP = 6;

auto constexpr MSG_PEEK = 2;
auto constexpr MSG_NOSIGNAL = 131072;

auto constexpr O_RDONLY = 0;
auto constexpr O_WRONLY = 1;
auto constexpr O_RDWR = 2;
auto constexpr O_NONBLOCK = 4;
auto constexpr O_CREAT = 512;
auto constexpr O_EXCL = 2048;
auto constexpr O_TRUNC = 1024;

auto constexpr PF_INET = AF_INET;
auto constexpr PF_INET6 = AF_INET6;

auto constexpr S_IFDIR = 16384;
auto constexpr S_IFLNK = 40960;
auto constexpr S_IFMT = 61440;

auto constexpr SEEK_SET = 0;
auto constexpr SEEK_CUR = 1;
auto constexpr SEEK_END = 2;

auto constexpr SOCK_STREAM = 1;
auto constexpr SOCK_DGRAM = 2;

auto constexpr SOL_SOCKET = 65535;

auto constexpr SO_REUSEADDR = 4;

auto constexpr STDIN_FILENO = 0;
auto constexpr STDOUT_FILENO = 1;
auto constexpr STDERR_FILENO = 2;

auto constexpr TCP_NODELAY = 1;
