// This file contains some definitions from Darwin headers, which are used inside "ustlib".
// These definitions are manually copypasted from the result of the CPPHeaderConverter tool execution and somewhat tweaked.

fn nomangle accept( i32 param0, $(sockaddr) param1, $(socklen_t) param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle bind( i32 param0, $(sockaddr) param1, socklen_t param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle chdir( $(char8) param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle chmod( $(char8) param0, mode_t param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle clock_gettime( clockid_t ü__clock_id, $(timespec) ü__tp ) unsafe call_conv( "C" ) : i32;
fn nomangle close( i32 param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle closedir( $(DIR) param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle connect( i32 param0, $(sockaddr) param1, socklen_t param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle copyfile( $(char8) from, $(char8) to, $(byte8) state, u32 flags ) unsafe call_conv( "C" ) : i32;
fn nomangle fchmod( i32 param0, mode_t param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle fcntl( i32 param0, i32 param1, i32 flags ) unsafe call_conv( "C" ) : i32;
fn nomangle freeaddrinfo( $(addrinfo) param0 ) unsafe call_conv( "C" ) : void;
fn nomangle fstat( i32 param0, $(stat_) param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle fsync( i32 param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle ftruncate( i32 param0, off_t param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle getaddrinfo( $(char8) param0, $(char8) param1, $(addrinfo) param2, $($(addrinfo)) param3 ) unsafe call_conv( "C" ) : i32;
fn nomangle getcwd( $(char8) param0, size_t param1 ) unsafe call_conv( "C" ) : $(char8);
fn nomangle getenv( $(char8) param0 ) unsafe call_conv( "C" ) : $(char8);
fn nomangle getpeername( i32 param0, $(sockaddr) param1, $(socklen_t) param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle getpid() unsafe call_conv( "C" ) : pid_t;
fn nomangle getsockname( i32 param0, $(sockaddr) param1, $(socklen_t) param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle getsockopt( i32 param0, i32 param1, i32 param2, $(byte8) param3, $(socklen_t) param4 ) unsafe call_conv( "C" ) : i32;
fn nomangle listen( i32 param0, i32 param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle lseek( i32 param0, off_t param1, i32 param2 ) unsafe call_conv( "C" ) : off_t;
fn nomangle lstat( $(char8) param0, $(stat_) param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle mkdir( $(char8) param0, mode_t param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle nanosleep( $(timespec) ü__rqtp, $(timespec) ü__rmtp ) unsafe call_conv( "C" ) : i32;
fn nomangle open( $(char8) param0, i32 param1, mode_t param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle opendir( $(char8) param0 ) unsafe call_conv( "C" ) : $(DIR);
fn nomangle read( i32 param0, $(byte8) param1, size_t param2 ) unsafe call_conv( "C" ) : ssize_t;
fn nomangle readdir( $(DIR) param0 ) unsafe call_conv( "C" ) : $(dirent);
fn nomangle recv( i32 param0, $(byte8) param1, size_t param2, i32 param3 ) unsafe call_conv( "C" ) : ssize_t;
fn nomangle recvfrom( i32 param0, $(byte8) param1, size_t param2, i32 param3, $(sockaddr) param4, $(socklen_t) param5 ) unsafe call_conv( "C" ) : ssize_t;
fn nomangle rename( $(char8) ü__old, $(char8) ü__new ) unsafe call_conv( "C" ) : i32;
fn nomangle rmdir( $(char8) param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle sched_yield() unsafe call_conv( "C" ) : i32;
fn nomangle send( i32 param0, $(byte8) param1, size_t param2, i32 param3 ) unsafe call_conv( "C" ) : ssize_t;
fn nomangle sendto( i32 param0, $(byte8) param1, size_t param2, i32 param3, $(sockaddr) param4, socklen_t param5 ) unsafe call_conv( "C" ) : ssize_t;
fn nomangle setenv( $(char8) ü__name, $(char8) ü__value, i32 ü__overwrite ) unsafe call_conv( "C" ) : i32;
fn nomangle setsockopt( i32 param0, i32 param1, i32 param2, $(byte8) param3, socklen_t param4 ) unsafe call_conv( "C" ) : i32;
fn nomangle socket( i32 param0, i32 param1, i32 param2 ) unsafe call_conv( "C" ) : i32;
fn nomangle stat( $(char8) param0, $(stat_) param1 ) unsafe call_conv( "C" ) : i32;
fn nomangle unlink( $(char8) param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle unsetenv( $(char8) param0 ) unsafe call_conv( "C" ) : i32;
fn nomangle write( i32 ü__fd, $(byte8) ü__buf, size_t ü__nbyte ) unsafe call_conv( "C" ) : ssize_t;

struct dirent ordered
{
	ü__uint64_t d_ino;
	ü__uint64_t d_seekoff;
	ü__uint16_t d_reclen;
	ü__uint16_t d_namlen;
	ü__uint8_t d_type;
	[ char8, 1024u ] d_name;
}

struct stat_ ordered
{
	dev_t st_dev;
	mode_t st_mode;
	nlink_t st_nlink;
	ü__darwin_ino64_t st_ino;
	uid_t st_uid;
	gid_t st_gid;
	dev_t st_rdev;
	timespec st_atim;
	timespec st_mtim;
	timespec st_ctim;
	timespec st_birthtimespec;
	off_t st_size;
	blkcnt_t st_blocks;
	blksize_t st_blksize;
	ü__uint32_t st_flags;
	ü__uint32_t st_gen;
	ü__int32_t st_lspare;
	[ ü__int64_t, 2u ] st_qspare;
}

struct timespec ordered
{
	ü__darwin_time_t tv_sec;
	i64 tv_nsec;
}

struct timeval ordered
{
	ü__darwin_time_t tv_sec;
	ü__darwin_suseconds_t tv_usec;
}

struct ü_anon_record_30 ordered
{
	i32 ü__dd_fd;
	i64 ü__dd_loc;
	i64 ü__dd_size;
	$(char8) ü__dd_buf;
	i32 ü__dd_len;
	i64 ü__dd_seek;
	i64 ü__padding;
	i32 ü__dd_flags;
	ü__darwin_pthread_mutex_t ü__dd_lock;
	$(ü_telldir) ü__dd_td;
}

struct ü_opaque_pthread_mutex_t ordered
{
	i64 ü__sig;
	[ char8, 56u ] ü__opaque;
}

struct ü_telldir ordered
{
	fn constructor() : void= delete;
}

struct addrinfo ordered
{
	i32 ai_flags;
	i32 ai_family;
	i32 ai_socktype;
	i32 ai_protocol;
	socklen_t ai_addrlen;
	$(char8) ai_canonname;
	$(sockaddr) ai_addr;
	$(addrinfo) ai_next;
}

struct sockaddr ordered
{
	ü__uint8_t sa_len;
	sa_family_t sa_family;
	[ char8, 14 ] sa_data;
}

struct sockaddr_in ordered
{
	ü__uint8_t sin_len;
	sa_family_t sin_family;
	in_port_t sin_port;
	in_addr sin_addr;
	[ char8, 8 ] sin_zero;
}

struct sockaddr_in6 ordered
{
	ü__uint8_t sin6_len;
	sa_family_t sin6_family;
	in_port_t sin6_port;
	ü__uint32_t sin6_flowinfo;
	in6_addr sin6_addr;
	ü__uint32_t sin6_scope_id;
}

struct sockaddr_storage ordered
{
	ü__uint8_t ss_len;
	sa_family_t ss_family;
	[ char8, 6 ] ü__ss_pad1;
	ü__int64_t ü__ss_align;
	[ char8, 112 ] ü__ss_pad2;
}

struct in_addr ordered
{
	in_addr_t s_addr;
}

struct in6_addr ordered
{
	// Manually changed to u32x4 array.
	[ u32, 4 ] parts;
}

type DIR = ü_anon_record_30;
type blkcnt_t = ü__darwin_blkcnt_t;
type blksize_t = ü__darwin_blksize_t;
type clockid_t = ü_anon_enum_40;
type dev_t = ü__darwin_dev_t;
type gid_t = ü__darwin_gid_t;
type in_addr_t = ü__uint32_t;
type in_port_t = ü__uint16_t;
type mode_t = ü__darwin_mode_t;
type nlink_t = ü__uint16_t;
type off_t = ü__darwin_off_t;
type pid_t = ü__darwin_pid_t;
type sa_family_t = ü__uint8_t;
type size_t = ü__darwin_size_t;
type socklen_t = ü__darwin_socklen_t;
type ssize_t = ü__darwin_ssize_t;
type uid_t = ü__darwin_uid_t;
type ü__darwin_blkcnt_t = ü__int64_t;
type ü__darwin_blksize_t = ü__int32_t;
type ü__darwin_dev_t = ü__int32_t;
type ü__darwin_gid_t = ü__uint32_t;
type ü__darwin_ino64_t = ü__uint64_t;
type ü__darwin_mode_t = ü__uint16_t;
type ü__darwin_off_t = ü__int64_t;
type ü__darwin_pid_t = ü__int32_t;
type ü__darwin_pthread_mutex_t = ü_opaque_pthread_mutex_t;
type ü__darwin_size_t = size_type;
type ü__darwin_socklen_t = ü__uint32_t;
type ü__darwin_ssize_t = ssize_type;
type ü__darwin_suseconds_t = ü__int32_t;
type ü__darwin_time_t = i64;
type ü__darwin_uid_t = ü__uint32_t;
type ü__int32_t = i32;
type ü__int64_t = i64;
type ü__uint16_t = u16;
type ü__uint32_t = u32;
type ü__uint64_t = u64;
type ü__uint8_t = u8;

type ü_anon_enum_40 = u32;
var ü_anon_enum_40
	constexpr CLOCK_REALTIME( 0u ),
	constexpr CLOCK_MONOTONIC( 6u ),
	constexpr CLOCK_MONOTONIC_RAW( 4u ),
	constexpr CLOCK_MONOTONIC_RAW_APPROX( 5u ),
	constexpr CLOCK_UPTIME_RAW( 8u ),
	constexpr CLOCK_UPTIME_RAW_APPROX( 9u ),
	constexpr CLOCK_PROCESS_CPUTIME_ID( 12u ),
	constexpr CLOCK_THREAD_CPUTIME_ID( 16u );

auto constexpr AF_INET = 2;
auto constexpr AF_INET6 = 30;

var u32 COPYFILE_ALL= 15u;
var u32 COPYFILE_EXCL= 131072u;

auto constexpr DT_UNKNOWN = 0;
auto constexpr DT_FIFO = 1;
auto constexpr DT_CHR = 2;
auto constexpr DT_DIR = 4;
auto constexpr DT_BLK = 6;
auto constexpr DT_REG = 8;
auto constexpr DT_LNK = 10;
auto constexpr DT_SOCK = 12;
auto constexpr DT_WHT = 14;

auto constexpr EPERM = 1;
auto constexpr ENOENT = 2;
auto constexpr EINTR = 4;
auto constexpr EACCES = 13;
auto constexpr EEXIST = 17;
auto constexpr ENOTDIR = 20;
auto constexpr EISDIR = 21;
auto constexpr EPIPE = 32;
auto constexpr ERANGE = 34;
auto constexpr EAGAIN = 35;
auto constexpr EDESTADDRREQ = 39;
auto constexpr EADDRINUSE = 48;
auto constexpr ECONNRESET = 54;
auto constexpr ENOTCONN = 57;
auto constexpr ECONNREFUSED = 61;
auto constexpr ENOTEMPTY = 66;

auto constexpr F_GETFL = 3;
auto constexpr F_SETFL = 4;
auto constexpr F_FULLFSYNC = 51;

auto constexpr IP_TTL = 4;

auto constexpr IPPROTO_IP = 0;
auto constexpr IPPROTO_TCP = 6;

auto constexpr MSG_PEEK = 2;
auto constexpr MSG_NOSIGNAL = 524288;

auto constexpr O_RDONLY = 0;
auto constexpr O_WRONLY = 1;
auto constexpr O_RDWR = 2;
auto constexpr O_NONBLOCK = 4;
auto constexpr O_CREAT = 512;
auto constexpr O_TRUNC = 1024;
auto constexpr O_EXCL = 2048;

auto constexpr PF_INET = AF_INET;
auto constexpr PF_INET6 = AF_INET6;

auto constexpr S_IFDIR = 16384;
auto constexpr S_IFLNK = 40960;
auto constexpr S_IFMT = 61440;

auto constexpr SEEK_SET = 0;
auto constexpr SEEK_CUR = 1;
auto constexpr SEEK_END = 2;

auto constexpr SOCK_STREAM = 1;
auto constexpr SOCK_DGRAM = 2;

auto constexpr SOL_SOCKET = 65535;

auto constexpr SO_REUSEADDR = 4;
auto constexpr SO_SNDTIMEO = 4101;
auto constexpr SO_RCVTIMEO = 4102;

auto constexpr STDIN_FILENO = 0;
auto constexpr STDOUT_FILENO = 1;
auto constexpr STDERR_FILENO = 2;

auto constexpr TCP_NODELAY = 1;
