// This file contains some definitions from Darwin headers, which are used inside "ustlib".
// These definitions are manually copypasted from the result of the CPPHeaderConverter tool execution and somewhat tweaked.

fn nomangle chdir( $(char8) param0 ) unsafe : i32;
fn nomangle chmod( $(char8) param0, mode_t param1 ) unsafe : i32;
fn nomangle clock_gettime( clockid_t ü__clock_id, $(timespec) ü__tp ) unsafe : i32;
fn nomangle close( i32 param0 ) unsafe : i32;
fn nomangle closedir( $(DIR) param0 ) unsafe : i32;
fn nomangle fchmod( i32 param0, mode_t param1 ) unsafe : i32;
fn nomangle fcntl( i32 param0, i32 param1 ) unsafe : i32;
fn nomangle fstat( i32 param0, $(stat_) param1 ) unsafe : i32;
fn nomangle fsync( i32 param0 ) unsafe : i32;
fn nomangle ftruncate( i32 param0, off_t param1 ) unsafe : i32;
fn nomangle getcwd( $(char8) param0, size_t param1 ) unsafe : $(char8);
fn nomangle getenv( $(char8) param0 ) unsafe : $(char8);
fn nomangle lseek( i32 param0, off_t param1, i32 param2 ) unsafe : off_t;
fn nomangle lstat( $(char8) param0, $(stat_) param1 ) unsafe : i32;
fn nomangle mkdir( $(char8) param0, mode_t param1 ) unsafe : i32;
fn nomangle open( $(char8) param0, i32 param1, mode_t param2 ) unsafe : i32;
fn nomangle opendir( $(char8) param0 ) unsafe : $(DIR);
fn nomangle read( i32 param0, $(byte8) param1, size_t param2 ) unsafe : ssize_t;
fn nomangle readdir( $(DIR) param0 ) unsafe : $(dirent);
fn nomangle rename( $(char8) ü__old, $(char8) ü__new ) unsafe : i32;
fn nomangle rmdir( $(char8) param0 ) unsafe : i32;
fn nomangle setenv( $(char8) ü__name, $(char8) ü__value, i32 ü__overwrite ) unsafe : i32;
fn nomangle stat( $(char8) param0, $(stat_) param1 ) unsafe : i32;
fn nomangle unlink( $(char8) param0 ) unsafe : i32;
fn nomangle unsetenv( $(char8) param0 ) unsafe : i32;
fn nomangle write( i32 ü__fd, $(byte8) ü__buf, size_t ü__nbyte ) unsafe : ssize_t;

struct dirent ordered
{
	ü__uint64_t d_ino;
	ü__uint64_t d_seekoff;
	ü__uint16_t d_reclen;
	ü__uint16_t d_namlen;
	ü__uint8_t d_type;
	[ char8, 1024u ] d_name;
}

struct stat_ ordered
{
	dev_t st_dev;
	mode_t st_mode;
	nlink_t st_nlink;
	ü__darwin_ino64_t st_ino;
	uid_t st_uid;
	gid_t st_gid;
	dev_t st_rdev;
	timespec st_atim;
	timespec st_mtim;
	timespec st_ctim;
	timespec st_birthtimespec;
	off_t st_size;
	blkcnt_t st_blocks;
	blksize_t st_blksize;
	ü__uint32_t st_flags;
	ü__uint32_t st_gen;
	ü__int32_t st_lspare;
	[ ü__int64_t, 2u ] st_qspare;
}

struct timespec ordered
{
	ü__darwin_time_t tv_sec;
	i64 tv_nsec;
}

struct ü_anon_record_30 ordered
{
	i32 ü__dd_fd;
	i64 ü__dd_loc;
	i64 ü__dd_size;
	$(char8) ü__dd_buf;
	i32 ü__dd_len;
	i64 ü__dd_seek;
	i64 ü__padding;
	i32 ü__dd_flags;
	ü__darwin_pthread_mutex_t ü__dd_lock;
	$(ü_telldir) ü__dd_td;
}

struct ü_opaque_pthread_mutex_t ordered
{
	i64 ü__sig;
	[ char8, 56u ] ü__opaque;
}

struct ü_telldir ordered
{
	fn constructor() : void= delete;
}

type DIR = ü_anon_record_30;
type blkcnt_t = ü__darwin_blkcnt_t;
type blksize_t = ü__darwin_blksize_t;
type clockid_t = ü_anon_enum_40;
type dev_t = ü__darwin_dev_t;
type gid_t = ü__darwin_gid_t;
type mode_t = ü__darwin_mode_t;
type nlink_t = ü__uint16_t;
type off_t = ü__darwin_off_t;
type size_t = ü__darwin_size_t;
type ssize_t = ü__darwin_ssize_t;
type uid_t = ü__darwin_uid_t;
type ü__darwin_blkcnt_t = ü__int64_t;
type ü__darwin_blksize_t = ü__int32_t;
type ü__darwin_dev_t = ü__int32_t;
type ü__darwin_gid_t = ü__uint32_t;
type ü__darwin_ino64_t = ü__uint64_t;
type ü__darwin_mode_t = ü__uint16_t;
type ü__darwin_off_t = ü__int64_t;
type ü__darwin_pthread_mutex_t = ü_opaque_pthread_mutex_t;
type ü__darwin_size_t = size_type;
type ü__darwin_ssize_t = ssize_type;
type ü__darwin_time_t = i64;
type ü__darwin_uid_t = ü__uint32_t;
type ü__int32_t = i32;
type ü__int64_t = i64;
type ü__uint16_t = u16;
type ü__uint32_t = u32;
type ü__uint64_t = u64;
type ü__uint8_t = u8;

type ü_anon_enum_40 = u32;
var ü_anon_enum_40
	constexpr CLOCK_REALTIME( 0u ),
	constexpr CLOCK_MONOTONIC( 6u ),
	constexpr CLOCK_MONOTONIC_RAW( 4u ),
	constexpr CLOCK_MONOTONIC_RAW_APPROX( 5u ),
	constexpr CLOCK_UPTIME_RAW( 8u ),
	constexpr CLOCK_UPTIME_RAW_APPROX( 9u ),
	constexpr CLOCK_PROCESS_CPUTIME_ID( 12u ),
	constexpr CLOCK_THREAD_CPUTIME_ID( 16u );

auto constexpr DT_UNKNOWN = 0;
auto constexpr DT_FIFO = 1;
auto constexpr DT_CHR = 2;
auto constexpr DT_DIR = 4;
auto constexpr DT_BLK = 6;
auto constexpr DT_REG = 8;
auto constexpr DT_LNK = 10;
auto constexpr DT_SOCK = 12;
auto constexpr DT_WHT = 14;

auto constexpr EPERM = 1;
auto constexpr ENOENT = 2;
auto constexpr EINTR = 4;
auto constexpr EACCES = 13;
auto constexpr EEXIST = 17;
auto constexpr ENOTDIR = 20;
auto constexpr EISDIR = 21;
auto constexpr ERANGE = 34;
auto constexpr ENOTEMPTY = 66;

auto constexpr F_FULLFSYNC = 51;

auto constexpr O_RDONLY = 0;
auto constexpr O_WRONLY = 1;
auto constexpr O_RDWR = 2;
auto constexpr O_CREAT = 512;
auto constexpr O_TRUNC = 1024;
auto constexpr O_EXCL = 2048;

auto constexpr S_IFDIR = 16384;
auto constexpr S_IFLNK = 40960;
auto constexpr S_IFMT = 61440;

auto constexpr SEEK_SET = 0;
auto constexpr SEEK_CUR = 1;
auto constexpr SEEK_END = 2;

auto constexpr STDIN_FILENO = 0;
auto constexpr STDOUT_FILENO = 1;
auto constexpr STDERR_FILENO = 2;
