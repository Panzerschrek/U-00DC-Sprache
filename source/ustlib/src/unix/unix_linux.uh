// This file contains some definitions from Linux headers, which are used inside "ustlib".
// These definitions are manually copypasted from the result of the CPPHeaderConverter tool execution and somewhat tweaked.

fn nomangle chdir( $(char8) ü__path ) unsafe call_conv( "C" ) : i32;
fn nomangle chmod( $(char8) ü__file, ü__mode_t ü__mode ) unsafe call_conv( "C" ) : i32;
fn nomangle clock_gettime( clockid_t ü__clock_id, $(timespec) ü__tp ) unsafe call_conv( "C" ) : i32;
fn nomangle close( i32 ü__fd ) unsafe call_conv( "C" ) : i32;
fn nomangle closedir( $(DIR) ü__dirp ) unsafe call_conv( "C" ) : i32;
fn nomangle fchmod( i32 ü__fd, ü__mode_t ü__mode ) unsafe call_conv( "C" ) : i32;
fn nomangle fdatasync( i32 ü__fildes ) unsafe call_conv( "C" ) : i32;
fn nomangle fstat64( i32 ü__fd, $(stat64_) ü__buf ) unsafe call_conv( "C") : i32;
fn nomangle fsync( i32 ü__fd ) unsafe call_conv( "C" ) : i32;
fn nomangle ftruncate64( i32 ü__fd, ü__off64_t ü__length ) unsafe call_conv( "C") : i32;
fn nomangle getcwd( $(char8) ü__buf, size_t ü__size ) unsafe call_conv( "C" ) : $(char8);
fn nomangle getenv( $(char8) ü__name ) unsafe call_conv( "C" ) : $(char8);
fn nomangle getpid() unsafe call_conv( "C" ) : pid_t;
fn nomangle lseek64( i32 ü__fd, ü__off64_t ü__offset, i32 ü__whence ) unsafe call_conv( "C") : ü__off64_t;
fn nomangle lstat64( $(char8) ü__file, $(stat64_) ü__buf ) unsafe call_conv( "C") : i32;
fn nomangle mkdir( $(char8) ü__path, ü__mode_t ü__mode ) unsafe call_conv( "C" ) : i32;
fn nomangle open( $(char8) ü__file, i32 ü__oflag, ü__mode_t ü__mode ) unsafe call_conv( "C" ) : i32;
fn nomangle opendir( $(char8) ü__name ) unsafe call_conv( "C" ) : $(DIR);
fn nomangle read( i32 ü__fd, $(byte8) ü__buf, size_t ü__nbytes ) unsafe call_conv( "C" ) : ssize_t;
fn nomangle readdir64( $(DIR) ü__dirp ) unsafe call_conv( "C" ) : $(dirent64);
fn nomangle rename( $(char8) ü__old, $(char8) ü__new ) unsafe call_conv( "C" ) : i32;
fn nomangle rmdir( $(char8) ü__path ) unsafe call_conv( "C" ) : i32;
fn nomangle sendfile64( i32 ü__out_fd, i32 ü__in_fd, $(ü__off64_t) ü__offset, size_t ü__count ) unsafe call_conv( "C") : ssize_t; // Linux-specific
fn nomangle setenv( $(char8) ü__name, $(char8) ü__value, i32 ü__replace ) unsafe call_conv( "C" ) : i32;
fn nomangle stat64( $(char8) ü__file, $(stat64_) ü__buf ) unsafe call_conv( "C") : i32;
fn nomangle unlink( $(char8) ü__name ) unsafe call_conv( "C" ) : i32;
fn nomangle unsetenv( $(char8) ü__name ) unsafe call_conv( "C" ) : i32;
fn nomangle write( i32 ü__fd, $(byte8) ü__buf, size_t ü__n ) unsafe call_conv( "C" ) : ssize_t;

// Use function pointers to create aliases for 64-bit versions of some functions.
// It's necessary, since on some systems native functions like these have 32-bit arguments and thus can't work with large files properly.
auto fstat= fstat64;
auto ftruncate= ftruncate64;
auto lseek= lseek64;
auto lstat= lstat64;
auto stat= stat64;
auto readdir= readdir64;
auto sendfile= sendfile64;

struct dirent64 ordered
{
	ü__ino64_t d_ino;
	ü__off64_t d_off;
	u16 d_reclen;
	u8 d_type;
	[ char8, 256u ] d_name;
}

// Manually redirect "dirent" to "dirent64".
type dirent= dirent64;

struct timespec ordered
{
	ü__time_t tv_sec;
	ü__syscall_slong_t tv_nsec;
}

struct stat64_x86 ordered
{
	ü__dev_t st_dev;
	u32 ü__pad1;
	ü__ino_t ü__st_ino;
	ü__mode_t st_mode;
	ü__nlink_t st_nlink;
	ü__uid_t st_uid;
	ü__gid_t st_gid;
	ü__dev_t st_rdev;
	u32 ü__pad2;
	ü__off64_t st_size;
	ü__blksize_t st_blksize;
	ü__blkcnt64_t st_blocks;
	timespec st_atim;
	timespec st_mtim;
	timespec st_ctim;
	ü__ino64_t st_ino;
}

struct stat64_x86_64 ordered
{
	ü__dev_t st_dev;
	ü__ino64_t st_ino;
	ü__nlink_t st_nlink;
	ü__mode_t st_mode;
	ü__uid_t st_uid;
	ü__gid_t st_gid;
	i32 ü__pad0;
	ü__dev_t st_rdev;
	ü__off_t st_size;
	ü__blksize_t st_blksize;
	ü__blkcnt64_t st_blocks;
	timespec st_atim;
	timespec st_mtim;
	timespec st_ctim;
	[ ü__syscall_slong_t, 3u ] ü__glibc_reserved;
}

struct stat64_aarch64 ordered
{
	ü__dev_t st_dev;
	u32 ü__pad1;
	ü__ino_t ü__st_ino;
	ü__mode_t st_mode;
	ü__nlink_t st_nlink;
	ü__uid_t st_uid;
	ü__gid_t st_gid;
	ü__dev_t st_rdev;
	u32 ü__pad2;
	ü__off64_t st_size;
	ü__blksize_t st_blksize;
	ü__blkcnt64_t st_blocks;
	timespec st_atim;
	timespec st_mtim;
	timespec st_ctim;
	ü__ino64_t st_ino;
}

type stat64_=
	ust::type_select</
		c_arch_is_aarch64,
		stat64_aarch64,
		ust::type_select</
			c_arch_is_i686,
			stat64_x86,
			stat64_x86_64 /> />;

// Manually redirect "stat_" to "stat64_".
type stat_= stat64_;

struct ü__dirstream ordered
{
fn constructor() : void= delete;
}

type ü_anon_enum_56 = u32;
var ü_anon_enum_56
	constexpr DT_UNKNOWN( 0u ),
	constexpr DT_FIFO( 1u ),
	constexpr DT_CHR( 2u ),
	constexpr DT_DIR( 4u ),
	constexpr DT_BLK( 6u ),
	constexpr DT_REG( 8u ),
	constexpr DT_LNK( 10u ),
	constexpr DT_SOCK( 12u ),
	constexpr DT_WHT( 14u );

type DIR = ü__dirstream;
type clockid_t = ü__clockid_t;
type mode_t = ü__mode_t;
type off_t = ü__off_t;
type pid_t = ü__pid_t;
type size_t = size_type;
type ssize_t = ü__ssize_t;
type ü__blkcnt64_t = i64;
type ü__blksize_t = ust::type_select</ c_arch_is_aarch64, i32, ust::type_select</ c_arch_is_i686, i32, i64 /> />;
type ü__clockid_t = i32;
type ü__dev_t = u64;
type ü__gid_t = u32;
type ü__ino_t = ust::type_select</ c_arch_is_i686, u32, u64 />;
type ü__ino64_t = i64;
type ü__mode_t = u32;
type ü__nlink_t = ust::type_select</ c_arch_is_aarch64, u32, ust::type_select</ c_arch_is_i686, u32, u64 /> />;
type ü__off64_t = i64;
type ü__off_t = i64; // manually changed to "i64", since we always use 64-bit functions.
type ü__pid_t = i32;
type ü__ssize_t = ssize_type;
type ü__syscall_slong_t = ust::type_select</ c_arch_is_i686, i32, i64 />;
type ü__time_t = ust::type_select</ c_arch_is_i686, i32, i64 />;
type ü__uid_t = u32;

auto constexpr CLOCK_REALTIME = 0;
auto constexpr CLOCK_MONOTONIC = 1;
auto constexpr CLOCK_PROCESS_CPUTIME_ID = 2;
auto constexpr CLOCK_THREAD_CPUTIME_ID = 3;
auto constexpr CLOCK_MONOTONIC_RAW = 4;
auto constexpr CLOCK_REALTIME_COARSE = 5;
auto constexpr CLOCK_MONOTONIC_COARSE = 6;
auto constexpr CLOCK_BOOTTIME = 7;
auto constexpr CLOCK_REALTIME_ALARM = 8;

auto constexpr EPERM = 1;
auto constexpr ENOENT = 2;
auto constexpr ESRCH = 3;
auto constexpr EINTR = 4;
auto constexpr EIO = 5;
auto constexpr ENXIO = 6;
auto constexpr E2BIG = 7;
auto constexpr ENOEXEC = 8;
auto constexpr EBADF = 9;
auto constexpr ECHILD = 10;
auto constexpr EAGAIN = 11;
auto constexpr ENOMEM = 12;
auto constexpr EACCES = 13;
auto constexpr EFAULT = 14;
auto constexpr ENOTBLK = 15;
auto constexpr EBUSY = 16;
auto constexpr EEXIST = 17;
auto constexpr EXDEV = 18;
auto constexpr ENODEV = 19;
auto constexpr ENOTDIR = 20;
auto constexpr EISDIR = 21;
auto constexpr EINVAL = 22;
auto constexpr ENFILE = 23;
auto constexpr EMFILE = 24;
auto constexpr ENOTTY = 25;
auto constexpr ETXTBSY = 26;
auto constexpr EFBIG = 27;
auto constexpr ENOSPC = 28;
auto constexpr ESPIPE = 29;

auto constexpr EROFS = 30;
auto constexpr EMLINK = 31;
auto constexpr EPIPE = 32;
auto constexpr EDOM = 33;
auto constexpr ERANGE = 34;
auto constexpr ENOTEMPTY = 39;

auto constexpr O_RDONLY = 0;
auto constexpr O_WRONLY = 1;
auto constexpr O_RDWR = 2;
auto constexpr O_CREAT = 64;
auto constexpr O_EXCL = 128;
auto constexpr O_TRUNC = 512;

auto constexpr S_IEXEC = 64;
auto constexpr S_IWRITE = 128;
auto constexpr S_IREAD = 256;
auto constexpr S_ISVTX = 512;
auto constexpr S_ISGID = 1024;
auto constexpr S_ISUID = 2048;
auto constexpr S_IFIFO = 4096;
auto constexpr S_IFCHR = 8192;
auto constexpr S_IFDIR = 16384;
auto constexpr S_IFREG = 32768;
auto constexpr S_IFBLK = 24576;
auto constexpr S_IFLNK = 40960;
auto constexpr S_IFSOCK = 49152;
auto constexpr S_IFMT = 61440;

auto constexpr SEEK_SET = 0;
auto constexpr SEEK_CUR = 1;
auto constexpr SEEK_END = 2;

auto constexpr STDIN_FILENO = 0;
auto constexpr STDOUT_FILENO = 1;
auto constexpr STDERR_FILENO = 2;

var bool c_arch_is_i686= ust::constexpr_string_equals( compiler::target::arch, "i686" );
var bool c_arch_is_aarch64= ust::constexpr_string_equals( compiler::target::arch, "aarch64" );
