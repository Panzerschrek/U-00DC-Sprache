import "../../imports/file.u"
import "../../imports/scoped_array.u"
import "unix.uh"

namespace ust
{

static_assert( same_type</native_file_handle, i32/>, "Types mismatch!" );

//
// file_readable
//

fn file_readable::open( file_path path ) : file_result</file_readable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= true, .write= false, .create= false, .truncate= false, .ensure_new= false } ) );
		return file_readable(handle);
	}
}

fn file_readable::constructor( native_file_handle handle ) unsafe
	( handle_= handle )
{}

fn file_readable::destructor()
{
	unsafe( close_file_impl( handle_ ) );
}

fn file_readable::get_native_handle( this ) unsafe : native_file_handle
{
	return handle_;
}

fn file_readable::take_native_handle( byval mut this ) unsafe : native_file_handle
{
	var native_file_handle h= handle_;
	unsafe( move_into_nowhere( move(this) ) ); // Forget about "this" to avoid calling destructor.
	return h;
}

fn file_readable::get_metatada( this ) : file_result</file_metadata/>
{
	return unsafe( get_metatada_impl( handle_ ) );
}

fn file_readable::get_size( this ) : file_result</u64/>
{
	return unsafe( get_size_impl( handle_ ) );
}

fn file_readable::read( mut this, array_view_mut</byte8/> buf ) : file_result</size_type/>
{
	return unsafe( read_impl( handle_, buf ) );
}

fn file_readable::seek( mut this, u64 offset ) : file_result</void/>
{
	return unsafe( seek_impl( handle_, offset ) );
}

//
// file_writeable
//

fn file_writeable::open( file_path path ) : file_result</file_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path , open_options{ .read= false, .write= true, .create= false, .truncate= false, .ensure_new= false } ) );
		return file_writeable(handle);
	}
}

fn file_writeable::create( file_path path ) : file_result</file_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= false, .write= true, .create= true, .truncate= true, .ensure_new= false } ) );
		return file_writeable(handle);
	}
}

fn file_writeable::create_new( file_path path ) : file_result</file_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= false, .write= true, .create= true, .truncate= true, .ensure_new= true } ) );
		return file_writeable(handle);
	}
}

fn file_writeable::constructor( native_file_handle handle ) unsafe
	( handle_= handle )
{}

fn file_writeable::destructor()
{
	unsafe( close_file_impl( handle_ ) );
}

fn file_writeable::get_native_handle( this ) unsafe : native_file_handle
{
	return handle_;
}

fn file_writeable::take_native_handle( byval mut this ) unsafe : native_file_handle
{
	var native_file_handle h= handle_;
	unsafe( move_into_nowhere( move(this) ) ); // Forget about "this" to avoid calling destructor.
	return h;
}

fn file_writeable::get_metatada( this ) : file_result</file_metadata/>
{
	return unsafe( get_metatada_impl( handle_ ) );
}

fn file_writeable::get_size( this ) : file_result</u64/>
{
	return unsafe( get_size_impl( handle_ ) );
}

fn file_writeable::write( mut this, array_view_imut</byte8/> buf ) : file_result</size_type/>
{
	return unsafe( write_impl( handle_, buf ) );
}

fn file_writeable::flush( mut this ) : file_result</void/>
{
	return unsafe( flush_impl( handle_ ) );
}

fn file_writeable::flush_all( mut this ) : file_result</void/>
{
	return unsafe( flush_all_impl( handle_ ) );
}

fn file_writeable::resize( mut this, u64 new_size ) : file_result</void/>
{
	return unsafe( resize_impl( handle_, new_size ) );
}

fn file_writeable::seek( mut this, u64 offset ) : file_result</void/>
{
	return unsafe( seek_impl( handle_, offset ) );
}

//
// file_readable_writeable
//

fn file_readable_writeable::open( file_path path ) : file_result</file_readable_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= true, .write= true, .create= false, .truncate= false, .ensure_new= false } ) );
		return file_readable_writeable(handle);
	}
}

fn file_readable_writeable::create( file_path path ) : file_result</file_readable_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= true, .write= true, .create= true, .truncate= true, .ensure_new= false } ) );
		return file_readable_writeable(handle);
	}
}

fn file_readable_writeable::create_new( file_path path ) : file_result</file_readable_writeable/>
{
	unsafe
	{
		result_unwrap_or_return( handle : open_file_impl( path, open_options{ .read= true, .write= true, .create= true, .truncate= true, .ensure_new= true } ) );
		return file_readable_writeable(handle);
	}
}

fn file_readable_writeable::constructor( native_file_handle handle ) unsafe
	( handle_= handle )
{}

fn file_readable_writeable::destructor()
{
	unsafe( close_file_impl( handle_ ) );
}

fn file_readable_writeable::get_native_handle( this ) unsafe : native_file_handle
{
	return handle_;
}

fn file_readable_writeable::take_native_handle( byval mut this ) unsafe : native_file_handle
{
	var native_file_handle h= handle_;
	unsafe( move_into_nowhere( move(this) ) ); // Forget about "this" to avoid calling destructor.
	return h;
}

fn file_readable_writeable::get_metatada( this ) : file_result</file_metadata/>
{
	return unsafe( get_metatada_impl( handle_ ) );
}

fn file_readable_writeable::get_size( this ) : file_result</u64/>
{
	return unsafe( get_size_impl( handle_ ) );
}

fn file_readable_writeable::read( mut this, array_view_mut</byte8/> buf ) : file_result</size_type/>
{
	return unsafe( read_impl( handle_, buf ) );
}

fn file_readable_writeable::write( mut this, array_view_imut</byte8/> buf ) : file_result</size_type/>
{
	return unsafe( write_impl( handle_, buf ) );
}

fn file_readable_writeable::flush( mut this ) : file_result</void/>
{
	return unsafe( flush_impl( handle_ ) );
}

fn file_readable_writeable::flush_all( mut this ) : file_result</void/>
{
	return unsafe( flush_all_impl( handle_ ) );
}

fn file_readable_writeable::resize( mut this, u64 new_size ) : file_result</void/>
{
	return unsafe( resize_impl( handle_, new_size ) );
}

fn file_readable_writeable::seek( mut this, u64 offset ) : file_result</void/>
{
	return unsafe( seek_impl( handle_, offset ) );
}

//
// various functions
//

fn get_metadata_for_path( file_path path ) : file_result</file_metadata/>
{
	scoped_array char8 path_nt[ path.size() + 1s ]( path.iter().chain( file_path("\0").iter() ) );

	var stat_ mut s= zero_init;
	auto res= unsafe( ::lstat( path_nt.data(), $<(s) ) );
	if( res != 0 )
	{
		return translate_errno( get_errno() );
	}

	return file_metadata
	{
		.size= u64(s.st_size),
		.kind= file_flags_to_file_kind( s.st_mode & u32(S_IFMT) ),
		.access_time= unsafe( timespec_to_system_time( s.st_atim ) ),
		.modification_time= unsafe( timespec_to_system_time( s.st_mtim ) ),
	};
}

fn create_directory( file_path path ) : file_result</void/>
{
	scoped_array char8 path_nt[ path.size() + 1s ]( path.iter().chain( file_path("\0").iter() ) );

	var u32 file_mode= 0o777u; // TODO - allow to select it.

	auto res= unsafe( ::mkdir( path_nt.data(), file_mode ) );
	if( res == -1 )
	{
		var i32 errno= get_errno();
		if( errno == EEXIST )
		{
			// Already exists - check if it's a directory.
			var stat_ mut s= zero_init;
			auto res= unsafe( ::lstat( path_nt.data(), $<(s) ) );
			if( res == 0 && (s.st_mode & u32(S_IFMT)) == u32(S_IFDIR) )
			{
				return void();
			}
		}
		return translate_errno( errno );
	}

	return void();
}

fn copy_file( file_path src_path, file_path dst_path ) : file_result</void/>
{
	return copy_file_impl( src_path, dst_path, false );
}

fn copy_file_if_not_exists( file_path src_path, file_path dst_path ) : file_result</void/>
{
	return copy_file_impl( src_path, dst_path, true );
}

fn copy_file_impl( file_path src_path, file_path dst_path, bool ensure_new ) : file_result</void/>
{
	var file_result</native_file_handle/> mut src_res=
		unsafe( open_file_impl( src_path, open_options{ .read= true, .write= false, .create= false, .truncate= false, .ensure_new= false } ) );
	if( src_res.is_error() )
	{
		return move(src_res).try_take_error();
	}
	var native_file_handle src_handle= move(src_res).try_take();

	var file_result</native_file_handle/> mut dst_res=
		unsafe( open_file_impl( dst_path, open_options{ .read= false, .write= true, .create= true, .truncate= true, .ensure_new= ensure_new } ) );
	if( dst_res.is_error() )
	{
		unsafe( close_file_impl( src_handle ) );
		return move(dst_res).try_take_error();
	}
	var native_file_handle dst_handle= move(dst_res).try_take();

	var file_result</u64/> mut src_size_res= unsafe( get_size_impl( src_handle ) );
	if( src_size_res.is_error() )
	{
		unsafe( close_file_impl( dst_handle ) );
		unsafe( close_file_impl( src_handle ) );
		return move(src_size_res).try_take_error();
	}
	var u64 src_size= move(src_size_res).try_take();

	for( var off_t mut offset(0); offset < off_t(src_size); )
	{
		var ssize_type bytes_sent= unsafe( ::sendfile( dst_handle, src_handle, $<(offset), size_t( off_t(src_size) - offset ) ) );
		if( bytes_sent <= ssize_type(0) )
		{
			auto err= get_errno();
			unsafe( close_file_impl( dst_handle ) );
			unsafe( close_file_impl( src_handle ) );
			return translate_errno( err );
		}
	}

	{ // Copy permissions from src to dst.
		var stat_ mut s= zero_init;
		auto stat_res= unsafe( ::fstat( src_handle, $<(s) ) );
		if( stat_res != 0 )
		{
			unsafe( close_file_impl( dst_handle ) );
			unsafe( close_file_impl( src_handle ) );
			return translate_errno( get_errno() );
		}

		auto chmod_res= unsafe( ::fchmod( dst_handle, s.st_mode ) );
		if( chmod_res != 0 )
		{
			unsafe( close_file_impl( dst_handle ) );
			unsafe( close_file_impl( src_handle ) );
			return translate_errno( get_errno() );
		}
	}

	unsafe( close_file_impl( dst_handle ) );
	unsafe( close_file_impl( src_handle ) );
	return void();
}

fn rename_file_or_directory( file_path src_path, file_path dst_path ) : file_result</void/>
{
	scoped_array char8 src_path_nt[ src_path.size() + 1s ]( src_path.iter().chain( file_path("\0").iter() ) );
	scoped_array char8 dst_path_nt[ dst_path.size() + 1s ]( dst_path.iter().chain( file_path("\0").iter() ) );

	var i32 res= unsafe( ::rename( src_path_nt.data(), dst_path_nt.data() ) );
	if( res == -1 )
	{
		return translate_errno( get_errno() );
	}
	return void();
}

fn rename_file_or_directory_if_not_exists( file_path src_path, file_path dst_path ) : file_result</void/>
{
	// Check if destination exists.
	// TODO - fix this. We need to do this atomically via some another system call, which fails if destination already exists.
	if( get_metadata_for_path( dst_path ).is_ok() )
	{
		return io_error::already_exists;
	}
	return rename_file_or_directory( src_path, dst_path );
}

fn remove_file( file_path path ) : file_result</void/>
{
	scoped_array char8 path_nt[ path.size() + 1s ]( path.iter().chain( file_path("\0").iter() ) );

	auto res= unsafe( ::unlink( path_nt.data() ) );
	if( res == -1 )
	{
		return translate_errno( get_errno() );
	}

	return void();
}

fn remove_directory( file_path path ) : file_result</void/>
{
	scoped_array char8 path_nt[ path.size() + 1s ]( path.iter().chain( file_path("\0").iter() ) );

	auto res= unsafe( ::rmdir( path_nt.data() ) );
	if( res == -1 )
	{
		return translate_errno( get_errno() );
	}

	return void();
}

fn get_current_directory() : string8
{
	var string8 mut res;
	res.resize( 256s, "\0"c8 );
	for( auto mut i= 0s; i < 8s; ++i )
	{
		auto call_res = unsafe( ::getcwd( res.data(), res.size() ) );
		if( is_nullptr(call_res) )
		{
			if( get_errno() == ERANGE )
			{
				// Not enough space - double it and call the function again.
				var size_type new_size= res.size() * 2s;
				res.resize( new_size, "\0"c8 );
				continue;
			}
			else
			{
				// "getcwd" failed for some other reason.
				break;
			}
		}

		var size_type mut len= 0s;
		while( len < res.size() && res[len] != "\0"c8 )
		{
			++len;
		}

		res.resize( len, " "c8 );
		return res;
	}

	// Return some dummy in case of fail.
	return string8();
}

fn set_current_directory( file_path path ) : file_result</void/>
{
	scoped_array char8 path_nt[ path.size() + 1s ]( path.iter().chain( file_path("\0").iter() ) );
	var i32 res= unsafe( ::chdir( path_nt.data() ) );
	if( res == -1 )
	{
		return translate_errno( get_errno() );
	}
	return void();
}

//
// directory_raw_iterator
//

fn directory_raw_iterator::open( file_path path ) : file_result</ iterator</ directory_raw_iterator /> />
{
	scoped_array char8 path_nt[ path.size() + 1s ]( path.iter().chain( file_path("\0").iter() ) );

	var $(DIR) res= unsafe( ::opendir( path_nt.data() ) );
	if( is_nullptr(res) )
	{
		return translate_errno( get_errno() );
	}

	return wrap_raw_iterator( unsafe( directory_raw_iterator( impl_unix( ptr_cast_to_byte8( res ) ) ) ) );
}

fn directory_raw_iterator::impl_unix::constructor( $(byte8) handle ) unsafe
	( handle_= handle )
{}

fn directory_raw_iterator::impl_unix::destructor()
{
	if( !is_nullptr( handle_ ) )
	{
		unsafe( ::closedir( byte_ptr_cast</DIR/>( handle_ ) ) );
	}
}

fn directory_raw_iterator::impl_unix::next( mut this ) : optional</ file_result</directory_entry/> />
{
	if( is_nullptr( handle_ ) )
	{
		return null_optional; // Reached the end.
	}

	loop
	{
		set_errno(0); // Documentation says it's necessary to reset "errno" before "readdir" call.
		var $(dirent) entry_ptr= unsafe( ::readdir( byte_ptr_cast</DIR/>( handle_ ) ) );
		if( is_nullptr( entry_ptr ) )
		{
			var i32 err= get_errno();

			// Close handle on end or on error, in order to avoid further iteration.
			unsafe( ::closedir( byte_ptr_cast</DIR/>( handle_ ) ) );
			handle_= nullptr</byte8/>();

			if( err == 0 )
			{
				return null_optional; // Reached the end.
			}
			else
			{
				return file_result</directory_entry/>( translate_errno( err ) ); // Some error occured.
			}
		}

		var dirent& entry= unsafe( $>(entry_ptr) );

		// Skip "." and "..".
		if( entry.d_name[0] == "."c8  && ( entry.d_name[1] == "\0"c8 || (entry.d_name[1] == "."c8 && entry.d_name[2] == "\0"c8 ) ) )
		{
			continue;
		}

		var size_type mut name_size= 0s;
		while( name_size < typeinfo</ typeof( entry.d_name ) />.size_of )
		{
			if( entry.d_name[name_size] == "\0"c8 )
			{
				break;
			}
			++name_size;
		}

		return
			file_result</directory_entry/>(
				directory_entry
				{
					.name= string_view8( entry.d_name ).subrange_end( name_size ),
					.kind= directory_entry_type_to_file_kind( entry.d_type ),
				} );
	}
}

//
// impl functions
//

struct open_options
{
	bool read;
	bool write;
	bool create;
	bool truncate;
	bool ensure_new;
}

fn open_file_impl( file_path path, open_options& options ) unsafe : file_result</native_file_handle/>
{
	scoped_array char8 path_nt[ path.size() + 1s ]( path.iter().chain( file_path("\0").iter() ) );

	var i32 mut open_flags= 0;
	var u32 mut file_mode= 0u;

	if( options.read & options.write )
	{
		open_flags|= O_RDWR;
	}
	else if( options.read )
	{
		open_flags|= O_RDONLY;
	}
	else if( options.write )
	{
		open_flags|= O_WRONLY;
	}

	if( options.create )
	{
		open_flags|= O_CREAT;
		// TODO - provide permissions for newly-created files.
		file_mode|= 0o644u;
	}
	if( options.truncate )
	{
		open_flags|= O_TRUNC;
	}
	if( options.ensure_new )
	{
		open_flags|= O_EXCL;
	}

	var i32 handle= unsafe( ::open( path_nt.data(), open_flags, file_mode ) );
	if( handle == -1 )
	{
		return translate_errno( get_errno() );
	}

	return handle;
}

fn close_file_impl( native_file_handle handle ) unsafe
{
	unsafe( ::close( handle ) );
}

fn get_metatada_impl( native_file_handle handle ) : file_result</file_metadata/>
{
	var stat_ mut s= zero_init;
	auto res= unsafe( ::fstat( handle, $<(s) ) );
	if( res != 0 )
	{
		return translate_errno( get_errno() );
	}

	return file_metadata
	{
		.size= u64(s.st_size),
		.kind= file_flags_to_file_kind( s.st_mode & u32(S_IFMT) ),
		.access_time= unsafe( timespec_to_system_time( s.st_atim ) ),
		.modification_time= unsafe( timespec_to_system_time( s.st_mtim ) ),
	};
}

fn file_flags_to_file_kind( u32 flags ) : file_kind
{
	if( ( flags & u32(S_IFDIR) ) == u32(S_IFDIR) )
	{
		return file_kind::directory;
	}

	if( ( flags & u32(S_IFLNK) ) == u32(S_IFLNK) )
	{
		return file_kind::symlink;
	}

	return file_kind::file;
}

fn directory_entry_type_to_file_kind( u8 t ) : file_kind
{
	if( t == u8(DT_DIR) )
	{
		return file_kind::directory;
	}

	if( t == u8(DT_LNK) )
	{
		return file_kind::symlink;
	}

	return file_kind::file;
}

fn timespec_to_system_time( timespec& t ) unsafe : system_time
{
	return unsafe( system_time( system_time::impl_unix{ .seconds= t.tv_sec, .nanoseconds= t.tv_nsec } ) );
}

fn get_size_impl( native_file_handle handle ) : file_result</u64/>
{
	var stat_ mut s= zero_init;
	auto res= unsafe( ::fstat( handle, $<(s) ) );
	if( res != 0 )
	{
		return translate_errno( get_errno() );
	}

	return u64(s.st_size);
}

fn read_impl( native_file_handle handle, array_view_mut</byte8/> buf ) unsafe : file_result</size_type/>
{
	// TODO - maybe read in loop to support larger sizes?

	var ssize_type read_res = unsafe( ::read( handle, buf.data(), buf.size() ) );

	if( read_res < ssize_type(0) )
	{
		return translate_errno( get_errno() );
	}

	if( read_res == ssize_type(0) )
	{
		return 0s; // End of file reached.
	}

	// Expected number of bytes or less.
	return size_type(read_res);
}

fn write_impl( native_file_handle handle, array_view_imut</byte8/> buf ) unsafe : file_result</size_type/>
{
	// TODO - maybe write in loop to support larger sizes?

	var ssize_type write_res = unsafe( ::write( handle, buf.data(), buf.size() ) );

	if( write_res < ssize_type(0) )
	{
		return translate_errno( get_errno() );
	}

	if( write_res == ssize_type(0) )
	{
		return 0s; // End of file reached.
	}

	// Expected number of bytes or less.
	return size_type(write_res);
}

fn flush_impl( native_file_handle handle ) unsafe : file_result</void/>
{
	var i32 res= unsafe( ::fdatasync( handle ) );
	if( res == -1 )
	{
		return translate_errno( get_errno() );
	}
	return void();
}

fn flush_all_impl( native_file_handle handle ) unsafe : file_result</void/>
{
	var i32 res= unsafe( ::fsync( handle ) );
	if( res == -1 )
	{
		return translate_errno( get_errno() );
	}
	return void();
}

fn resize_impl( native_file_handle handle, u64 new_size ) unsafe : file_result</void/>
{
	var i32 res= unsafe( ::ftruncate( handle, i64(new_size) ) );
	if( res == -1 )
	{
		return translate_errno( get_errno() );
	}
	return void();
}

fn seek_impl( native_file_handle handle, u64 offset ) unsafe : file_result</void/>
{
	var ü__off64_t seek_res= unsafe( ::lseek64( handle, ü__off64_t(offset), SEEK_SET ) );

	if( seek_res == ü__off64_t(-1) )
	{
		return translate_errno( get_errno() );
	}

	return void();
}

fn translate_errno( i32 errno ) : io_error
{
	switch(errno)
	{
	EPERM -> { return io_error::permission_denied; },
	ENOENT -> { return io_error::not_found; },
	EEXIST -> { return io_error::already_exists; },
	ENOTDIR -> { return io_error::not_a_directory; },
	// TODO - support other codes.
	default -> { return io_error::other; },
	}
}

fn get_errno() : i32
{
	return unsafe( $>( get_errno_location() ) );
}

fn set_errno( i32 val )
{
	unsafe
	{
		$>( get_errno_location() )= val;
	}
}

fn get_errno_location() : $(i32)
{
	// "errno" in glibc is accessed via function "__errno_location".
	// We can't declare a prototype for it, since in Ü names can't start with "_", so, use external function access operator to call it.
	unsafe
	{
		auto f= import fn</ fn() : $(i32) /> ( "__errno_location" );
		var $(i32) ptr= f();
		return ptr;
	}
}

} // namespace ust
