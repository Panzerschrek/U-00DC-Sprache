import "../../imports/file.u"
import "../../imports/scoped_array.u"
import "unix.uh"

namespace ust
{

static_assert( same_type</native_file_handle, i32/>, "Types mismatch!" );

fn file_readable::get_metatada( this ) : file_result</file_metadata/>
{
	return unsafe( get_metatada_impl( handle_ ) );
}

fn get_metatada_impl( native_file_handle handle ) : file_result</file_metadata/>
{
	var stat_ mut s= zero_init;
	auto res= unsafe( ::fstat( handle, $<(s) ) );
	if( res != 0 )
	{
		return translate_errno( get_errno() );
	}

	return file_metadata
	{
		.size= u64(s.st_size),
		.kind= file_flags_to_file_kind( s.st_mode & u32(S_IFMT) ),
		.access_time= unsafe( timespec_to_system_time( s.st_atim ) ),
		.modification_time= unsafe( timespec_to_system_time( s.st_mtim ) ),
	};
}

fn file_flags_to_file_kind( u32 flags ) : file_kind
{
	if( ( flags & u32(S_IFDIR) ) == u32(S_IFDIR) )
	{
		return file_kind::directory;
	}

	if( ( flags & u32(S_IFLNK) ) == u32(S_IFLNK) )
	{
		return file_kind::symlink;
	}

	return file_kind::file;
}

fn timespec_to_system_time( timespec& t ) unsafe : system_time
{
	return unsafe( system_time( system_time::impl_unix{ .seconds= t.tv_sec, .nanoseconds= t.tv_nsec } ) );
}

fn translate_errno( i32 errno ) : io_error;

fn get_errno() : i32;

} // namespace ust
