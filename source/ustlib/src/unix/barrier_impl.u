import "../../imports/barrier_impl.u"
import "pthread.uh"

namespace ust
{

namespace barrier_impl
{

static_assert( typeinfo</barrier_t/>.size_of >= typeinfo</pthread_barrier_t/>.size_of );
static_assert( typeinfo</barrier_t/>.align_of >= typeinfo</pthread_barrier_t/>.align_of );

fn initialize_barrier( barrier_t &mut b, u32 num_threads ) unsafe
{
	static_if( constexpr_string_equals( compiler::target::vendor, "apple" ) )
	{
		// TODO - implement barriers for MacOS using other synchronization primitive, it has no native barriers support.
		ignore_unused( b );
		ignore_unused( num_threads );
		halt;
	}
	else
	{
		unsafe
		{
			var $(pthread_barrierattr_t) attr= zero_init;
			var i32 res= ::pthread_barrier_init( cast_ref_unsafe</ pthread_barrier_t />( b ), attr, num_threads );
			halt if( res != 0 );
		}
	}
}

fn destroy_barrier( barrier_t &mut b ) unsafe
{
	static_if( constexpr_string_equals( compiler::target::vendor, "apple" ) )
	{
		ignore_unused( b );
		halt;
	}
	else
	{
		unsafe( ::pthread_barrier_destroy( cast_ref_unsafe</ pthread_barrier_t />( b ) ) );
	}
}

fn wait_barrier( barrier_t &mut b ) unsafe
{
	static_if( constexpr_string_equals( compiler::target::vendor, "apple" ) )
	{
		ignore_unused( b );
		halt;
	}
	else
	{
		unsafe( ::pthread_barrier_wait( cast_ref_unsafe</ pthread_barrier_t />( b ) ) );
	}
}

} // namespace barrier_impl

} // namespace ust
