import "../../imports/mutex_impl.u"
import "pthread.uh"

namespace ust
{

namespace mutex_impl
{

static_assert( typeinfo</mutex_t/>.size_of >= typeinfo</pthread_mutex_t/>.size_of );
static_assert( typeinfo</mutex_t/>.align_of >= typeinfo</pthread_mutex_t/>.align_of );

fn initialize_mutex( mutex_t &mut m ) unsafe
{
	unsafe
	{
		var pthread_mutexattr_t mut attr= zero_init;
		::pthread_mutexattr_init( attr );

		var i32 res= ::pthread_mutex_init( cast_ref_unsafe</pthread_mutex_t/>( m ), attr );
		halt if( res != 0 );

		::pthread_mutexattr_destroy( attr );
	}
}

fn destroy_mutex( mutex_t &mut m ) unsafe
{
	unsafe( ::pthread_mutex_destroy( cast_ref_unsafe</pthread_mutex_t/>( m ) ) );
}

fn lock_mutex( mutex_t &mut m ) unsafe
{
	unsafe( ::pthread_mutex_lock( cast_ref_unsafe</pthread_mutex_t/>( m ) ) );
}

fn unlock_mutex( mutex_t &mut m ) unsafe
{
	unsafe( ::pthread_mutex_unlock( cast_ref_unsafe</pthread_mutex_t/>( m ) ) );
}

} // namespace mutex_impl

} // namespace ust
