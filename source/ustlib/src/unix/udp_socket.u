import "../../imports/udp_socket.u"
import "errno.uh"

namespace ust
{

namespace net
{

fn udp_socket::create() : result</udp_socket, io_error/>
{
	unsafe
	{
		var raw_socket s= ::socket( PF_INET, i32(SOCK_DGRAM), 0 );
		if( s == -1 )
		{
			return translate_errno( get_errno() );
		}

		return udp_socket( s );
	}
}

fn udp_socket::create_and_bind( socket_address& a ) : result</udp_socket, io_error/>
{
	var result</udp_socket, io_error/> mut socket_or_error= create();
	if( socket_or_error.is_error() )
	{
		return socket_or_error;
	}

	var udp_socket mut socket= move(socket_or_error).try_take();

	if_var( &a_v4 : a.get</socket_address_v4/>() )
	{
		var sockaddr_in mut underlying_address
		{
			.sin_family( AF_INET ),
			.sin_port= a_v4.get_port(),
			.sin_addr{ .s_addr= a_v4.get_ip().get_bits() },
			.sin_zero= zero_init
		};

		var i32 res=
			unsafe( ::bind(
				socket.socket_,
				$<( cast_ref_unsafe</sockaddr/>( underlying_address ) ),
				socklen_t( typeinfo</sockaddr_in/>.size_of ) ) );

		if( res != 0 )
		{
			// Socket will be destroyed on error return.
			var i32 e= get_errno();
			return translate_errno( e );
		}
	}
	else
	{
		// TODO - support IP v6.
		halt;
	}

	return socket;
}

fn udp_socket::constructor( raw_socket s ) unsafe
	( socket_= s )
{}

fn udp_socket::destructor()
{
	unsafe( ::close( socket_ ) );
}

fn udp_socket::send_to( mut this, socket_address& a, array_view_imut</byte8/> data ) : result</size_type, io_error/>
{
	if_var( &a_v4 : a.get</socket_address_v4/>() )
	{
		var sockaddr_in mut underlying_address
		{
			.sin_family( AF_INET ),
			.sin_port= a_v4.get_port(),
			.sin_addr{ .s_addr= a_v4.get_ip().get_bits() },
			.sin_zero= zero_init
		};

		var ssize_type bytes_written=
			unsafe( ::sendto(
				socket_,
				data.data(),
				data.size(),
				0,
				$<( cast_ref_unsafe</sockaddr/>( underlying_address ) ),
				socklen_t( typeinfo</sockaddr_in/>.size_of ) ) );

		if( bytes_written < ssize_type(0) )
		{
			return translate_errno( get_errno() );
		}

		return size_type(bytes_written);
	}
	else
	{
		// TODO - support IP v6.
		halt;
	}
}

fn udp_socket::receive_from( mut this, array_view_mut</byte8/> data ) : result</ tup[ socket_address, size_type ], io_error/>
{
	var sockaddr mut sender_address= zero_init;
	static_assert( typeinfo</sockaddr_in/>.size_of <= typeinfo</sockaddr/>.size_of );

	var socklen_t mut socket_address_length( typeinfo</sockaddr/>.size_of );

	unsafe
	{
		var ssize_type bytes_read=
			unsafe( ::recvfrom(
				socket_,
				data.data(),
				data.size(),
				0,
				$<( sender_address ),
				$<( socket_address_length ) ) );

		if( bytes_read < ssize_type(0) )
		{
			return translate_errno( get_errno() );
		}

		if( i32(sender_address.sa_family) == AF_INET )
		{
			var sockaddr_in mut sender_address_ip_v4= zero_init;

			memory_copy(
				ptr_cast_to_byte8( $<(sender_address_ip_v4) ),
				ptr_cast_to_byte8( $<(sender_address) ),
				typeinfo</sockaddr_in/>.size_of );

			var tup[ socket_address, size_type ] res
			[
				socket_address_v4( ip_address_v4( sender_address_ip_v4.sin_addr.s_addr ), sender_address_ip_v4.sin_port ),
				( bytes_read )
			];

			return res;
		}
		else
		{
			// TODO - support IP v6.
			return io_error::other;
		}
	}
}

} // namespace net

} // namespace ust
