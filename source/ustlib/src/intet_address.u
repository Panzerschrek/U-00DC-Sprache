import "../imports/inet_address.u"
import "../imports/integer_parsing.u"

namespace ust
{

fn parse_ip_address_v4( string_view8 mut s ) : optional</ip_address_v4/>
{
	if_var( ip : extract_ip_v4_address(s) )
	{
		if( !s.empty() )
		{
			// Allow no trailing symbols.
			return null_optional;
		}

		return ip;
	}

	return null_optional;
}

fn parse_ip_address_v6( string_view8 s ) : optional</ip_address_v6/>
{
	// TODO
	ignore_unused( s );
	return null_optional;
}

fn parse_socket_address_v4( string_view8 mut s ) : optional</socket_address_v4/>
{
	if_var( mut ip : extract_ip_v4_address(s) )
	{
		if( !( s.size() >= 1s && s.front() == ':' ) )
		{
			return null_optional;
		}
		s.drop_front();

		var u16 mut port= zero_init;

		if_var( p : parse_and_extract_integer</u16/>( s ) )
		{
			port= p;
		}
		else
		{
			return null_optional;
		}

		if( !s.empty() )
		{
			// Allow no trailing symbols.
			return null_optional;
		}

		return socket_address_v4( move(ip), port );
	}

	return null_optional;
}

fn parse_socket_address_v6( string_view8 s ) : optional</socket_address_v6/>
{
	// TODO
	ignore_unused( s );
	return null_optional;
}

fn parse_socket_address( string_view8 mut s ) : optional</socket_address/>
{
	if_var( mut a : parse_socket_address_v4( s ) )
	{
		return socket_address( move(a) );
	}
	if_var( mut a : parse_socket_address_v6( s ) )
	{
		return socket_address( move(a) );
	}

	return null_optional;
}

fn extract_ip_v4_address( string_view8 &mut s ) : optional</ip_address_v4/>
{
	var [ u8, 4 ] mut octets= zero_init;

	for( var size_type mut i= 0s; i < 3s; ++i )
	{
		if_var( o : parse_and_extract_integer</u8/>( s ) )
		{
			octets[i]= o;
		}
		else
		{
			return null_optional;
		}

		if( !( s.size() >= 1s && s.front() == '.' ) )
		{
			return null_optional;
		}
		s.drop_front();
	}

	if_var( o : parse_and_extract_integer</u8/>( s ) )
	{
		octets[3]= o;
	}
	else
	{
		return null_optional;
	}

	return ip_address_v4( octets );
}

} // namespace ust
