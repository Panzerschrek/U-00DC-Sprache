import "../imports/string_conversions.u"

namespace ust
{

fn to_string8 ( i8 x ) : string8
{
	return to_string</char8 />(x);
}

fn to_string8 ( u8 x ) : string8
{
	return to_string</char8 />(x);
}

fn to_string8 ( i16 x ) : string8
{
	return to_string</char8 />(x);
}

fn to_string8 ( u16 x ) : string8
{
	return to_string</char8 />(x);
}

fn to_string8 ( i32 x ) : string8
{
	return to_string</char8 />(x);
}

fn to_string8 ( u32 x ) : string8
{
	return to_string</char8 />(x);
}

fn to_string8 ( i64 x ) : string8
{
	return to_string</char8 />(x);
}

fn to_string8 ( u64 x ) : string8
{
	return to_string</char8 />(x);
}

fn to_string8 ( ssize_type x ) : string8
{
	static_if( typeinfo</ssize_type/>.size_of == typeinfo</i32/>.size_of )
	{
		return to_string8 ( i32(x) );
	}
	else
	{
		return to_string8 ( i64(x) );
	}
}

fn to_string8 ( size_type x ) : string8
{
	static_if( typeinfo</size_type/>.size_of == typeinfo</u32/>.size_of )
	{
		return to_string8 ( u32(x) );
	}
	else
	{
		return to_string8 ( u64(x) );
	}
}

fn to_string16( i8 x ) : string16
{
	return to_string</char16/>(x);
}

fn to_string16( u8 x ) : string16
{
	return to_string</char16/>(x);
}

fn to_string16( i16 x ) : string16
{
	return to_string</char16/>(x);
}

fn to_string16( u16 x ) : string16
{
	return to_string</char16/>(x);
}

fn to_string16( i32 x ) : string16
{
	return to_string</char16/>(x);
}

fn to_string16( u32 x ) : string16
{
	return to_string</char16/>(x);
}

fn to_string16( i64 x ) : string16
{
	return to_string</char16/>(x);
}

fn to_string16( u64 x ) : string16
{
	return to_string</char16/>(x);
}

fn to_string16( ssize_type x ) : string16
{
	static_if( typeinfo</ssize_type/>.size_of == typeinfo</i32/>.size_of )
	{
		return to_string16( i32(x) );
	}
	else
	{
		return to_string16( i64(x) );
	}
}

fn to_string16( size_type x ) : string16
{
	static_if( typeinfo</size_type/>.size_of == typeinfo</u32/>.size_of )
	{
		return to_string16( u32(x) );
	}
	else
	{
		return to_string16( u64(x) );
	}
}

fn to_string32( i8 x ) : string32
{
	return to_string</char32/>(x);
}

fn to_string32( u8 x ) : string32
{
	return to_string</char32/>(x);
}

fn to_string32( i16 x ) : string32
{
	return to_string</char32/>(x);
}

fn to_string32( u16 x ) : string32
{
	return to_string</char32/>(x);
}

fn to_string32( i32 x ) : string32
{
	return to_string</char32/>(x);
}

fn to_string32( u32 x ) : string32
{
	return to_string</char32/>(x);
}

fn to_string32( i64 x ) : string32
{
	return to_string</char32/>(x);
}

fn to_string32( u64 x ) : string32
{
	return to_string</char32/>(x);
}

fn to_string32( ssize_type x ) : string32
{
	static_if( typeinfo</ssize_type/>.size_of == typeinfo</i32/>.size_of )
	{
		return to_string32( i32(x) );
	}
	else
	{
		return to_string32( i64(x) );
	}
}

fn to_string32( size_type x ) : string32
{
	static_if( typeinfo</size_type/>.size_of == typeinfo</u32/>.size_of )
	{
		return to_string32( u32(x) );
	}
	else
	{
		return to_string32( u64(x) );
	}
}

template</type C/>
fn to_string( i8 x ) : string_base</C/>
{
	var string_base</C/> mut result;
	if( i32(x) >= 0 )
	{
		to_string_impl</C/>( u8( x), result );
	}
	else
	{
		result.push_back( C('-') );
		to_string_impl</C/>( u8(-x), result );
	}
	return result;
}

template</type C/>
fn to_string( u8 x ) : string_base</C/>
{
	var string_base</C/> mut result;
	to_string_impl</C/>( x, result );
	return result;
}

template</type C/>
fn to_string( i16 x ) : string_base</C/>
{
	var string_base</C/> mut result;
	if( i32(x) >= 0 )
	{
		to_string_impl</C/>( u16( x), result );
	}
	else
	{
		result.push_back( C('-') );
		to_string_impl</C/>( u16(-x), result );
	}
	return result;
}

template</type C/>
fn to_string( u16 x ) : string_base</C/>
{
	var string_base</C/> mut result;
	to_string_impl</C/>( x, result );
	return result;
}

template</type C/>
fn to_string( i32 x ) : string_base</C/>
{
	var string_base</C/> mut result;
	if( x >= 0 )
	{
		to_string_impl</C/>( u32( x), result );
	}
	else
	{
		result.push_back( C('-') );
		to_string_impl</C/>( u32(-x), result );
	}
	return result;
}

template</type C/>
fn to_string( u32 x ) : string_base</C/>
{
	var string_base</C/> mut result;
	to_string_impl</C/>( x, result );
	return result;
}

template</type C/>
fn to_string( i64 x ) : string_base</C/>
{
	var string_base</C/> mut result;
	if( x >= 0i64 )
	{
		to_string_impl</C/>( u64( x), result );
	}
	else
	{
		result.push_back( C('-') );
		to_string_impl</C/>( u64(-x), result );
	}
	return result;
}

template</type C/>
fn to_string( u64 x ) : string_base</C/>
{
	var string_base</C/> mut result;
	to_string_impl</C/>( x, result );
	return result;
}

// 8-bit version.
template</type C/>
fn to_string_impl( u8 in_x, string_base</C/>& mut result )
{
	auto constexpr zero_char= C('0');

	var u32 x(in_x);

	if( x >= 100u )
	{
		result.push_back( C( u32(zero_char) + x / 100u ) );
		result.push_back( C( u32(zero_char) + x / 10u % 10u ) );
	}
	else if( x >= 10u )
	{
		result.push_back( C( u32(zero_char) + x / 10u ) );
	}

	result.push_back( C( u32(zero_char) + x % 10u ) );
}

// 16-bit version.
template</type C/>
fn to_string_impl( u16 in_x, string_base</C/>& mut result )
{
	auto constexpr zero_char= C('0');

	var u32 x(in_x);

	if( x == 0u )
	{
		result.push_back(zero_char);
	}
	else
	{
		var u32 mut div= 10000u;
		while( div > x )
		{
			div/= 10u;
		}

		var u32 mut rem= x;
		while( div > 0u )
		{
			auto digit= rem / div;
			result.push_back( C( digit + u32(zero_char) ) );
			rem-= digit * div;
			div/= 10u;
		}
	}
}

// 32-bit version.
template</type C/>
fn to_string_impl( u32 x, string_base</C/>& mut result )
{
	auto constexpr zero_char= C('0');

	if( x == 0u )
	{
		result.push_back(zero_char);
	}
	else
	{
		var u32 mut div= 1000000000u;
		while( div > x )
		{
			div/= 10u;
		}

		var u32 mut rem= x;
		while( div > 0u )
		{
			auto digit= rem / div;
			result.push_back( C( digit + u32(zero_char) ) );
			rem-= digit * div;
			div/= 10u;
		}
	}
}

// 64-bit version.
template</type C/>
fn to_string_impl( u64 x, string_base</C/>& mut result )
{
	auto constexpr zero_char= C('0');

	if( x == 0u64 )
	{
		result.push_back(zero_char);
	}
	else
	{
		var u64 mut div= 10000000000000000000u64;
		while( div > x )
		{
			div/= 10u64;
		}

		var u64 mut rem= x;
		while( div > 0u64 )
		{
			auto digit= rem / div;
			result.push_back( C( digit + u64(zero_char) ) );
			rem-= digit * div;
			div/= 10u64;
		}
	}
}

} // namespace ust
