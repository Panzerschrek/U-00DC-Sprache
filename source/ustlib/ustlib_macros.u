//
// This file contains some macros which are widely used with ustlib containers.
//

//
// "if_var" - use to unwrap "optional" or "optional_ref".
//
?macro <? if_var:block ( ?r:opt<? & ?> ?m:opt<? mut ?> ?var_name:ident : ?e:expr ) ?b:block ?alternative:opt<? else ?a:if_alternative ?> ?>
->
<?
	// Expand this macro into block in order to use it as "if alternative".
	{
		with( & ?m<? mut ?> ??e_result : ?e )
		{
			if( !??e_result.empty() )
			{
				with( ?r<? & ?> ?m<? mut ?> ?var_name : unsafe( ??e_result.deref_unchecked() ) )
				?b
			}
			?alternative
			<?
				// Unfortunately it is the only proper way to process if_var alternative - here, inside "with", when lock for ?e still exists.
				// There is no possibility to process alternative after "with", using "break label", for example,
				// because user-specified block before "break" can be terminal and "break" here will cause unreachable code error.
				else ?a
			?>
		}
	}
?>

//
// "foreach" - used for iteration over containers, iterators,arrays, tuples.
//
?macro <? foreach:block ( ?r:opt<? & ?> ?m:opt<? mut ?> ?var_name:ident : ?e:expr ) ?l:opt<? label ?l:ident ?> ?b:block ?>
->
<?
	with( & ?m<? mut ?> ??e_result : ?e )
	{
		static_if( typeinfo</ typeof(??e_result) />.is_array )
		{
			for( var size_type mut ??i(0u); ??i < typeinfo</ typeof(??e_result) />.element_count; ++ ??i ) ?l<? label ?l ?>
			{
				auto ?r<? & ?> ?m<? mut ?> ?var_name= ??e_result[??i];
				?b
			}
		}
		else static_if( typeinfo</ typeof(??e_result) />.is_tuple )
		{
			for( ?r<? & ?> ?m<? mut ?> ?var_name : ??e_result ) ?l<? label ?l ?>
			?b
		}
		else
		{
			// Generic iteration code.
			// First call "iter" method to obtain iterator object.
			auto mut ??it= ??e_result.iter();
			loop ?l<? label ?l ?>
			{
				// Obtain next result - "optional" or "optional_ref".
				auto mut ??next_res= ??it.next();
				if( ??next_res.empty() )
				{
					// End iteration if "next" call result is empty.
					break;
				}
				// Unwrap "optional" or "optional_ref".
				with( ?r<? & ?> ?m<? mut ?> ?var_name : ??next_res.try_take() )
				{
					?b
				}
			}
		}
	}
?>
