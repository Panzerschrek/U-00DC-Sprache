import "assert.u"
import "random_access_range.u"

namespace ust
{

template</type T/>
fn sort( random_access_range</T, true/> range )
{
	unsafe( sort_impl::do_sort( range.data(), range.data() + range.size(), sort_impl::default_compare</T/>() ) );
}

template</type T, type Compare/>
fn sort( random_access_range</T, true/> range, Compare& comp )
{
	unsafe( sort_impl::do_sort( range.data(), range.data() + range.size(), comp ) );
}

namespace sort_impl
{

template</type T/>
struct default_compare
{
	op()( this, T& a, T& b ) : bool
	{
		return a < b;
	}
}

/*
Simple quicksort implementation. Average complexity - O(log(n)), worst case complexity - O(n^2).
 TODO:
 * Use more simple sorting algorithm for small number of elements.
 * Select median element wisely.
*/
// Input pointers should be part of the same memory region (array, vector, etc.). start <= end.
template</type T, type Compare/>
fn do_sort( $(T) mut start, $(T) mut end, Compare& comp ) unsafe
{
	loop
	{
		debug_assert( start <= end );
		auto size= unsafe( end - start );

		if( size <= ssize_type(1) )
		{
			return;
		}
		if( size == ssize_type(2) )
		{
			unsafe
			{
				var T &mut l= $>(start);
				var T &mut r= $>(start + 1);

				if( !safe( comp( cast_imut(l), cast_imut(r) ) ) )
				{
					swap( l, r );
				}
			}
			return;
		}

		unsafe
		{
			// Assuming the middle element is at the end.
			// Compare all elements against it and place them at left or right range part.
			// TODO - select somehow good enough middle element and put it at end.

			// Perform operations with raw pointers, because it seems to be the fastest way to do so.
			var $(T) last= end - 1s, mut lo= start, mut hi= last;

			loop
			{
				if( safe( comp( cast_imut( unsafe( $>(lo) ) ), cast_imut( unsafe( $>(last) ) ) ) ) )
				{
					++lo;
					if( lo == hi )
					{
						break;
					}
				}
				else
				{
					--hi;
					if( lo == hi )
					{
						break;
					}

					swap( $>(lo), $>(hi) );
				}
			}

			// At end put the middle element at split position.
			if( hi != last )
			{
				swap( $>(hi), $>(last) );
			}

			// Avoid deep recursion. Perform recursive call for smaller range, perform next loop interation for larger range.
			// In both cases process subranges excluding "hi" position, since it now contains the middle element.
			auto hi1= hi + 1s;
			if( hi - start < end - hi1 )
			{
				do_sort( start, hi, comp );
				start= hi1;
			}
			else
			{
				do_sort( hi1, end, comp );
				end= hi;
			}
		}
	}
}

} // namespace sort_impl

} // namespace ust
