import "alloc.u"
import "container_utils.u"
import "hash.u"
import "polymorph.u"
import "type_traits.u"

namespace ust
{

template</ type T />
class box non_sync( non_sync</T/> )
{
	static_assert( typeinfo</T/>.references_tags_count == 0s, "this container doesn't support types with references inside" );

public:
	type hasher= box_hasher;

public:
	fn constructor()= delete;

	fn constructor( mut this, T mut val )
		( ptr_= $<( unsafe( cast_ref_unsafe</T/>( memory_allocate( typeinfo</T/>.size_of ) ) ) ) )
	{
		unsafe( move_into_uninitialized( $>(ptr_), move(val) ) );
	}

	template</ type U />
	fn enable_if( !is_same_type</T, U/>() && is_ancestor_for</T, U/>() )
	conversion_constructor( mut this, box</U/> mut val )
		( ptr_= $<( cast_ref</T/>(val.deref()) ) )
	{
		unsafe( move_into_nowhere( move(val) ) );
	}

	// box is NOT copyable, because copying required memory allocation. Copying must be done manually.

	fn destructor()
	{
		unsafe
		{
			call_destructor( $>(ptr_) );
			memory_free( polymorph_restore_original_ref( $>(ptr_) ) );
		}
	}

	fn deref( mut this ) : T &mut
	{
		return unsafe( deref_unchecked() );
	}

	fn deref( imut this ) : T &imut
	{
		return unsafe( deref_unchecked() );
	}

	fn deref_unchecked( mut this ) unsafe : T &mut
	{
		return unsafe( $>(ptr_) );
	}

	fn deref_unchecked( imut this ) unsafe : T &imut
	{
		return unsafe( $>(ptr_) );
	}

	fn get_ptr( this ) unsafe : $(T)
	{
		return ptr_;
	}

private:
	$(T) ptr_;
}

struct box_hasher
{
	template</ type T />
	fn hash( box</T/>& b ) : size_type
	{
		return ust::default_hasher::hash(b.deref());
	}
}

// Constructor helper.
template</type T/>
fn make_box(T mut t) : box</T/>
{
	return box</T/>( move(t) );
}

// Take value.
// This is a free function, because "is_abstract" check requires T completeness, which may create globals loop.
template</type T/>
fn enable_if( !is_abstract</T/>() ) box_take( box</T/> mut b ) : T
{
	unsafe
	{
		auto ptr= b.get_ptr();
		var T mut t= uninitialized;
		memory_copy_aligned( typeinfo</T/>.align_of, cast_ref_unsafe</byte8/>(t), cast_ref_unsafe</byte8/>($>(ptr)), typeinfo</T/>.size_of );
		memory_free( polymorph_restore_original_ref( $>(ptr) ) ); // Free memory block, that was used for box.
		move_into_nowhere( move(b) ); // Forget about the box.
		return move(t);
	}
}

} // namespace ust
