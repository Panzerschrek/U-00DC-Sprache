import "container_utils.u"
import "pointer.u"
import "type_traits.u"

namespace ust
{

template</ type T />
class box
{
public:
	fn constructor()= delete;

	fn constructor( mut this'a...', T mut val'b...' ) ' a <- b '
	{
		unsafe
		{
			ptr_= raw_ptr_mut</ T />( cast_ref_unsafe</T/>( memory_allocate( typeinfo</T/>.size_of ) ) );
			move_unsafe</T/>( ptr_.get_ref(), move(val) );
		}
	}

	template</ type U />
	fn enable_if( !is_same_type</T, U/>() && is_ancestor_for</T, U/>() )
	constructor( mut this'a...', box</U/> mut val'b...' ) ' a <- b '
	{
		unsafe
		{
			ptr_= raw_ptr_mut</ T />( val.get_ref() ); // Convert reference here.
			move_into_nowhere( move(val) );
		}
	}

	// box is NOT copyable, because copying required memory allocation. Copying must be done manually.

	fn destructor()
	{
		unsafe
		{
			call_destructor( ptr_.get_ref() );
			memory_free( ptr_.get_ref() );
		}
	}

	fn get_ref( mut this ) : T &mut
	{
		unsafe{  return ptr_.get_ref();  }
	}

	fn get_ref( imut this ) : T &imut
	{
		unsafe{  return ptr_.get_ref();  }
	}

private:
	ContainerTag</ T /> container_tag_;
	raw_ptr_mut</ T /> ptr_;
}

} // namespace ust
