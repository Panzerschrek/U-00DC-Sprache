import "container_utils.u"
import "hash.u"
import "pointer.u"
import "polymorph.u"
import "type_traits.u"

namespace ust
{

template</ type T />
class box
{
public:
	type hasher= box_hasher;

public:
	fn constructor()= delete;

	fn constructor( mut this, T mut val )
	{
		unsafe
		{
			ptr_= raw_ptr_mut</ T />( cast_ref_unsafe</T/>( memory_allocate( typeinfo</T/>.size_of ) ) );
			move_unsafe</T/>( ptr_.get_ref(), move(val) );
		}
	}

	template</ type U />
	fn enable_if( !is_same_type</T, U/>() && is_ancestor_for</T, U/>() )
	conversion_constructor( mut this, box</U/> mut val )
	{
		unsafe
		{
			ptr_= raw_ptr_mut</ T />( val.get_ref() ); // Convert reference here.
			move_into_nowhere( move(val) );
		}
	}

	// box is NOT copyable, because copying required memory allocation. Copying must be done manually.

	fn destructor()
	{
		unsafe
		{
			call_destructor( ptr_.get_ref() );
			memory_free( polymorph_restore_original_ref( ptr_.get_ref() ) );
		}
	}

	fn get_ref( mut this ) : T &mut
	{
		unsafe{  return get_ref_unsafe();  }
	}

	fn get_ref( imut this ) : T &imut
	{
		unsafe{  return get_ref_unsafe();  }
	}

	fn get_ref_unsafe( mut this ) unsafe : T &mut
	{
		unsafe{  return ptr_.get_ref();  }
	}

	fn get_ref_unsafe( imut this ) unsafe : T &imut
	{
		unsafe{  return ptr_.get_ref();  }
	}

private:
	fn check_type()
	{
		static_assert(typeinfo</T/>.references_tags_count == 0s);
	}

private:
	//ContainerTag</ T /> container_tag_;
	raw_ptr_mut</ T /> ptr_;
}

struct box_hasher
{
	template</ type T />
	fn hash( box</T/>& b ) : size_type
	{
		return ust::default_hasher::hash(b.get_ref());
	}
}

} // namespace ust
