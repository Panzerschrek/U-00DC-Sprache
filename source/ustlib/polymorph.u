import "optional_ref.u"
import "type_traits.u"

namespace ust
{

template</type T/>
fn polymorph_restore_original_ref( T &imut ref ) : void &imut
{
	static_if( polymorph_impl::is_polymorph</T/>() )
	{
		unsafe
		{
			// Virtual table pointer is always first field in class.
			auto offset= cast_ref_unsafe</ polymorph_impl::virtual_class />(ref).vptr.offset_of_allocated_object;

			auto original_ptr= $<( cast_ref_unsafe</u8/>(cast_mut(ref)) ) - offset;
			return cast_ref_unsafe</ void />( $>(original_ptr) );
		}
	}
	else
	{
		unsafe{  return  cast_ref_unsafe</void/>( ref );  }
	}
}

template</type A, type B/>
fn polymorph_is_same_type( A& a, B& b ) : bool
{
	static_if( polymorph_impl::is_polymorph</A/>() && polymorph_impl::is_polymorph</B/>() )
	{
		unsafe
		{
			// Virtual table pointer is always first field in class.
			return
				cast_ref_unsafe</ polymorph_impl::virtual_class />(a).vptr.type_id ==
				cast_ref_unsafe</ polymorph_impl::virtual_class />(b).vptr.type_id;
		}
	}
	else
	{
		return is_same_type</A, B/>();
	}
}

template</ type A, type B />
fn polymorph_is_instance_of( B& b ) : bool
{
	static_if( polymorph_impl::is_polymorph</A/>() && polymorph_impl::is_polymorph</B/>() )
	{
		unsafe
		{
			return cast_ref_unsafe</ polymorph_impl::virtual_class />(b).vptr.type_id == ust::ref_to_int( cast_ref_unsafe</void/>( typeinfo</A/>.type_id ) );
		}
	}
	else
	{
		return false;
	}
}

template</ type To, type From />
fn polymorph_cast( From &'x mut from ) : optional_ref</ To, true  />'x'
{
	polymorph_impl::polymorph_cast_impl</To/>(from);
}

template</ type To, type From />
fn polymorph_cast( From &'x imut from ) : optional_ref</ To, false />'x'
{
	unsafe
	{
		auto res= polymorph_impl::polymorph_cast_impl</To/>( cast_mut(from) );
		if( !res.empty() )
		{
			return optional_ref</ To, false />( res.get_ref_unsafe() );
		}
		else
		{
			return optional_ref</ To, false />();
		}
	}
}

namespace polymorph_impl
{

// If compiler virtual table layout changed, this must be changed too!
struct virtual_table
{
	size_type offset_of_allocated_object;
	size_type type_id;
}

struct virtual_class
{
	virtual_table& vptr;
}

template</type T/>
fn constexpr is_polymorph() : bool
{
	static_if( typeinfo</T/>.is_class )
	{
		return typeinfo</T/>.is_polymorph;
	}
	else
	{
		return false;
	}
}

template</ type To, type From />
fn polymorph_cast_impl( From &'x mut from ) : optional_ref</ To, true />'x'
{
	static_if( is_polymorph</From/>() && is_polymorph</To/>() )
	{
		static_if( is_same_type</ From, To />() || is_ancestor_for</ To, From />() )
		{
			// Derived to base cast.
			return optional_ref</ To, true  />( from );
		}
		else if( is_ancestor_for</ From, To />() )
		{
			// Base to derived cast.
			unsafe
			{
				// TODO - support cast A->B in hierarchy A->B->C
				if( cast_ref_unsafe</ virtual_class />(from).vptr.type_id == ust::ref_to_int( cast_ref_unsafe</void/>( typeinfo</To/>.type_id ) ) )
				{
					return optional_ref</ To, true />( cast_ref_unsafe</To/>( cast_mut( polymorph_restore_original_ref(from) ) ) );
				}
				else
				{
					return optional_ref</ To, true />();
				}
			}
		}
		else
		{
			static_assert(false); // Unsupported polymorph_cast.
			halt;
		}
	}
	else
	{
		static_assert(false); // polymorph_cast works only for polymorph classes.
		halt;
	}
}

} // namespace polymorph_impl

} // namespace ust
