namespace ust
{

namespace mixin_utils
{

// Special helper struct, used for mixins text generation.
// Is struct because classes can't be constexpr.
template</size_type size/>
struct static_string
{
	type this_type= static_string</size/>;

	[ char8, size ] buffer= zero_init;
	size_type current_size= 0s;

	// Append a char array.
	// Halts if no space is left.
	template</size_type src_size />
	op constexpr +=( mut this, [ char8, src_size ]& src )
	{
		for( auto mut i= 0s; i < src_size; ++i )
		{
			buffer[ i + current_size ]= src[i];
		}
		current_size+= src_size;
	}

	// Compare agains char array.
	template</size_type other_size />
	op constexpr == ( this, [ char8, other_size ]& other ) : bool
	{
		if( current_size != other_size )
		{
			return false;
		}
		for( auto mut i= 0s; i < other_size; ++i )
		{
			if( buffer[i] != other[i] )
			{
				return false;
			}
		}
		return true;
	}

	// Compare a char array against this class.
	template</size_type other_size />
	op constexpr == ( [ char8, other_size ]& other, this_type& r ) : bool
	{
		return r == other;
	}
}

} // namespace mixin_utils

} // namespace ust
