// This class contains definitions of types, that are used for functions reference notation.
// Also it contains constants and helper functions for common reference notation patterns.

// TODO - improve this, use common naming pattern, add more functionality.

namespace ust
{

namespace reference_notation
{

// A pair of chars.
// First - number of param from '0' up to '9'.
// Second - '_' for reference param or letters from 'a' up to 'z' for inner reference tags.
type param_reference_description= [ char8, 2 ];

// A pair of reference param descriptions. First - destination, second - source.
type reference_pollution_element= [ param_reference_description, 2 ];

// List of reference pollutions of a function.
template</ size_type N />
type reference_pollution= [ reference_pollution_element, N ];

// List of returned references.
template</ size_type N />
type return_references_list= [ param_reference_description, N ];

namespace pollution
{

// Save reference to param #1 into reference tag #0 of "this".
var reference_pollution</1s/> constexpr this_param_1_reference[ [ "0a", "1_" ] ];

// Save inner reference of param #1 into reference tag #0 of "this".
var reference_pollution</1s/> constexpr this_param_1_inner_reference[ [ "0a", "1a" ] ];

}

namespace return_references
{

var return_references_list</1s/> constexpr param0[ "0_" ];

// Return reference to inner reference tag #0 of "this".
var return_references_list</1s/> constexpr this_param_inner_reference[ "0a" ];

} // namespace return_reference

namespace return_inner_references
{

// Inner reference of return value points to param reference #0.
var tup[ return_references_list</1s/> ] constexpr param0[ [ "0_" ] ];

// Inner reference of return value points to reference tag #0 of "this".
var tup[ return_references_list</1s/> ] constexpr this_param_inner_reference[ [ "0a" ] ];

} // return_inner_references

} // namespace reference_notation

} // namespace ust
