namespace ust
{

template<//> struct get_signed_type  </  u8 /> { type t=  i8; }
template<//> struct get_signed_type  </ u16 /> { type t= i16; }
template<//> struct get_signed_type  </ u32 /> { type t= i32; }
template<//> struct get_signed_type  </ u64 /> { type t= i64; }
template<//> struct get_unsigned_type</  i8 /> { type t=  u8; }
template<//> struct get_unsigned_type</ i16 /> { type t= u16; }
template<//> struct get_unsigned_type</ i32 /> { type t= u32; }
template<//> struct get_unsigned_type</ i64 /> { type t= u64; }

type ptr_diff_type= get_signed_type</ size_type />::t;

template</ type A, type B />
fn constexpr is_same_type() : bool
{
	return type_traits_impl::is_same_type_impl</A/>::same</B/>::value;
}

template</ type A, type B />
fn is_parent_for() : bool
{
	static_if( typeinfo</A/>.is_class & typeinfo</B/>.is_class )
	{
		return type_traits_impl::has_parent</ A />( typeinfo</B/>.parents_list );
	}
	else{ return false; }
}

template</ type A, type B />
fn is_ancestor_for() : bool
{
	static_if( typeinfo</A/>.is_class & typeinfo</B/>.is_class )
	{
		return type_traits_impl::has_ancestor</ A />( typeinfo</B/>.parents_list );
	}
	else{ return false; }
}

template</type T/>
fn constexpr is_polymorph_non_final_class() : bool
{
	static_if( typeinfo</T/>.is_class )
	{
		return typeinfo</T/>.is_polymorph && !typeinfo</T/>.is_final;
	}
	else
	{
		return false;
	}
}

template</ type ListType, size_type name_size />
fn constexpr class_have_field( ListType& fields_list, [ char8, name_size ]& name ) : bool
{
	for( &list_element : fields_list )
	{
		if( type_traits_impl::string_equals( list_element.name, name ) )
		{
			return true;
		}
	}
	return false;
}

template</ type T />
fn constexpr is_class_typeinfo_type() : bool
{
	static_if( typeinfo</T/>.is_class )
	{
		static_if( typeinfo</T/>.is_typeinfo )
		{
			return
				class_have_field( typeinfo</T/>.fields_list, "fields_list" ) &&
				class_have_field( typeinfo</T/>.fields_list, "types_list" ) &&
				class_have_field( typeinfo</T/>.fields_list, "functions_list" ) &&
				class_have_field( typeinfo</T/>.fields_list, "parents_list" );
		}
		else { return false; }
	}
	else { return false; }
}

template</ type T />
fn constexpr is_array_typeinfo_type() : bool
{
	static_if( typeinfo</T/>.is_class )
	{
		static_if( typeinfo</T/>.is_typeinfo )
		{
			return
				class_have_field( typeinfo</T/>.fields_list, "element_count" ) &&
				class_have_field( typeinfo</T/>.fields_list, "element_type" );
		}
		else { return false; }
	}
	else { return false; }
}

template</ type T />
fn constexpr is_tuple_typeinfo_type() : bool
{
	static_if( typeinfo</T/>.is_class )
	{
		static_if( typeinfo</T/>.is_typeinfo )
		{
			return
				class_have_field( typeinfo</T/>.fields_list, "element_count" ) &&
				class_have_field( typeinfo</T/>.fields_list, "elements_list" ) &&
				!class_have_field( typeinfo</T/>.fields_list, "underlaying_type" );
		}
		else { return false; }
	}
	else { return false; }
}

template</ type T, type FnT, size_type name_size />
fn constexpr class_have_method( [ char8, name_size ]& name ) : bool
{
	static_assert( typeinfo</FnT/>.is_function_pointer, "expected function type" );
	static_if( typeinfo</T/>.is_class )
	{
		for( &list_element : typeinfo</T/>.functions_list )
		{
			if( type_traits_impl::string_equals( list_element.name, name ) )
			{
				// Same type of typeinfo means same type
				if( type_traits_impl::args_are_same( list_element.type, typeinfo</FnT/> ) )
				{ return true; }
			}
		}
	}

	return false;
}

namespace type_traits_impl
{

template</ size_type size0, size_type size1 />
fn constexpr string_equals( [ char8, size0 ]& s0, [ char8, size1 ]& s1 ) : bool
{
	if( size0 != size1 ) { return false; }

	for( var size_type mut i(0); i < size0; ++i )
	{
		if( s0[i] != s1[i] ) { return false; }
	}
	return true;
}

template</ type A />
struct is_same_type_impl
{
	// Use type templates overloading for type equality comparison.
	template</ type B /> struct same</ B />
	{
		auto constexpr value= false;
	}

	template</ /> struct same</ A />
	{
		auto constexpr value= true;
	}
}

// Use this function only for typeinfo arguments, which are allways constexpr.
template</ type A, type B />
fn constexpr args_are_same( A& a, B& b ) : bool
{
	return is_same_type_impl</A/>::same</B/>::value;
}

template</ type ParentCandidate, type ParentListType />
fn constexpr has_parent( ParentListType& parents_list ) : bool
{
	for( &list_elemet : parents_list )
	{
		if( args_are_same( typeinfo</ParentCandidate/>, list_elemet.type ) )
		{ return true; }
	}
	return false;
}

template</ type ParentCandidate, type ParentListType />
fn constexpr has_ancestor( ParentListType& parents_list ) : bool
{
	for( &list_elemet : parents_list )
	{
		if( args_are_same( typeinfo</ParentCandidate/>, list_elemet.type ) )
		{ return true; }
		if( type_traits_impl::has_ancestor</ ParentCandidate />( list_elemet.type.parents_list ) )
		{ return true; }
	}
	return false;
}

} // namespace type_traits_impl

} // namespace ust
