namespace ust
{

namespace type_traits_impl
{

template</ size_type size0, size_type size1 />
fn constexpr string_equals( [ char8, size0 ]& s0, [ char8, size1 ]& s1 ) : bool
{
	if( size0 != size1 ) { return false; }
	var size_type mut i(0);
	while( i < size0 )
	{
		if( s0[i] != s1[i] ) { return false; }
		++i;
	}
	return true;
}

template</ type A />
struct is_same_type_impl
{
	// Use type templates overloading for type equality comparison.
	template</ type B /> struct same</ B />
	{
		auto constexpr value= false;
	}

	template</ /> struct same</ A />
	{
		auto constexpr value= true;
	}
}

// Use this function only for typeinfo arguments, which are allways constexpr.
template</ type A, type B />
fn constexpr args_are_same( A& a, B& b ) : bool
{
	return is_same_type_impl</A/>::same</B/>::value;
}

template</ type ParentCandidate, type NodeListType />
fn constexpr has_parent( NodeListType& parents_list_node ) : bool
{
	static_if( NodeListType::is_end )
	{ return false; }
	else
	{
		if( args_are_same( typeinfo</ParentCandidate/>, parents_list_node.type ) )
		{ return true; }
		return type_traits_impl::has_parent</ ParentCandidate />( parents_list_node.next );
	}
}

template</ type ParentCandidate, type NodeListType />
fn constexpr has_ancestor( NodeListType& parents_list_node ) : bool
{
	static_if( NodeListType::is_end )
	{ return false; }
	else
	{
		if( args_are_same( typeinfo</ParentCandidate/>, parents_list_node.type ) )
		{ return true; }
		if( type_traits_impl::has_ancestor</ ParentCandidate />( parents_list_node.type.parents_list ) )
		{ return true; }
		return type_traits_impl::has_ancestor</ ParentCandidate />( parents_list_node.next );
	}
}

} // namespace type_traits_impl

template</ type A, type B />
fn constexpr is_same_type() : bool
{
	return type_traits_impl::is_same_type_impl</A/>::same</B/>::value;
}

template</ type A, type B />
fn is_parent_for() : bool
{
	static_if( typeinfo</A/>.is_class & typeinfo</B/>.is_class )
	{
		return type_traits_impl::has_parent</ A />( typeinfo</B/>.parents_list );
	}
	else{ return false; }
}

template</ type A, type B />
fn is_ancestor_for() : bool
{
	static_if( typeinfo</A/>.is_class & typeinfo</B/>.is_class )
	{
		return type_traits_impl::has_ancestor</ A />( typeinfo</B/>.parents_list );
	}
	else{ return false; }
}

template</ type NodeType, size_type name_size />
fn constexpr class_have_field( NodeType& fields_list_node, [ char8, name_size ]& name ) : bool
{
	static_if( NodeType::is_end )
	{
		return false;
	}
	else
	{
		if( type_traits_impl::string_equals( fields_list_node.name, name ) )
		{
			return true;
		}
		else
		{
			return ust::class_have_field( fields_list_node.next, name );
		}
	}
}

} // namespace ust
