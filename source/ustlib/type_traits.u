import "helpers.u"

namespace ust
{

template<//> type get_signed_type  </   u8 /> =   i8;
template<//> type get_signed_type  </  u16 /> =  i16;
template<//> type get_signed_type  </  u32 /> =  i32;
template<//> type get_signed_type  </  u64 /> =  i64;
template<//> type get_signed_type  </ u128 /> = i128;
template<//> type get_unsigned_type</   i8 /> =   u8;
template<//> type get_unsigned_type</  i16 /> =  u16;
template<//> type get_unsigned_type</  i32 /> =  u32;
template<//> type get_unsigned_type</  i64 /> =  u64;
template<//> type get_unsigned_type</ i128 /> = u128;

template</ type A, type B />
fn is_parent_for() : bool
{
	static_if( typeinfo</A/>.is_class & typeinfo</B/>.is_class )
	{
		// Statically check if both classes are polymorph, beffore requesting parents lists and building extra template function.
		// This check is valid, since only polymorph classes can have parents or be parents.
		static_if( typeinfo</A/>.is_polymorph && typeinfo</B/>.is_polymorph )
		{
			return type_traits_impl::has_parent</ A />( typeinfo</B/>.parents_list );
		}
		else{ return false; }
	}
	else{ return false; }
}

template</ type A, type B />
fn is_ancestor_for() : bool
{
	static_if( typeinfo</A/>.is_class & typeinfo</B/>.is_class )
	{
		// Statically check if both classes are polymorph, beffore requesting parents lists and building extra template function.
		// This check is valid, since only polymorph classes can have parents or be parents.
		static_if( typeinfo</A/>.is_polymorph && typeinfo</B/>.is_polymorph )
		{
			return type_traits_impl::has_ancestor</ A />( typeinfo</B/>.parents_list );
		}
		else{ return false; }
	}
	else{ return false; }
}

template</ type T />
fn is_abstract() : bool
{
	static_if( typeinfo</T/>.is_class )
	{
		return typeinfo</T/>.is_abstract;
	}
	else static_if( typeinfo</T/>.is_array )
	{
		return ::ust::is_abstract</ typeof(typeinfo</T/>.element_type)::src_type />();
	}
	else static_if( typeinfo</T/>.is_tuple )
	{
		var bool mut res= false;
		for( &el : typeinfo</T/>.elements_list )
		{
			res|= ::ust::is_abstract</ typeof(el.type)::src_type />();
		}
		return res;
	}
	else
	{
		return false;
	}
}

template</type T/>
fn constexpr is_polymorph_non_final_class() : bool
{
	static_if( typeinfo</T/>.is_class )
	{
		return typeinfo</T/>.is_polymorph && !typeinfo</T/>.is_final;
	}
	else
	{
		return false;
	}
}

template</ type ListType, size_type name_size />
fn constexpr class_have_field( ListType& fields_list, [ char8, name_size ]& name ) : bool
{
	for( &list_element : fields_list )
	{
		if( type_traits_impl::string_equals( list_element.name, name ) )
		{
			return true;
		}
	}

	ignore_unused(name);
	return false;
}

template</ type T />
fn constexpr is_class_typeinfo_type() : bool
{
	static_if( typeinfo</T/>.is_class )
	{
		static_if( typeinfo</T/>.is_typeinfo )
		{
			return typeinfo</ T::src_type />.is_class;
		}
		else { return false; }
	}
	else { return false; }
}

template</ type T />
fn constexpr is_array_typeinfo_type() : bool
{
	static_if( typeinfo</T/>.is_class )
	{
		static_if( typeinfo</T/>.is_typeinfo )
		{
			return typeinfo</ T::src_type />.is_array;
		}
		else { return false; }
	}
	else { return false; }
}

template</ type T />
fn constexpr is_tuple_typeinfo_type() : bool
{
	static_if( typeinfo</T/>.is_class )
	{
		static_if( typeinfo</T/>.is_typeinfo )
		{
			return typeinfo</ T::src_type />.is_tuple;
		}
		else { return false; }
	}
	else { return false; }
}

template</ type T, type FnT, size_type name_size />
fn constexpr class_have_method( [ char8, name_size ]& name ) : bool
{
	static_assert( typeinfo</FnT/>.is_function_pointer, "expected function type" );
	static_if( typeinfo</T/>.is_class )
	{
		for( &list_element : typeinfo</T/>.functions_list )
		{
			if( type_traits_impl::string_equals( list_element.name, name ) )
			{
				// Same type of typeinfo means same type
				if( same_type</ typeof(list_element.type), typeof(typeinfo</FnT/>) /> )
				{ return true; }
			}
		}
	}

	return false;
}

// Assuming that passed type is function pointer or a funtional object (with single non-template op())
// return whether this function result is value (not a reference).
template</type Func/>
fn function_returns_value() : bool
{
	auto& ti= typeinfo</Func/>;
	static_if( ti.is_function_pointer )
	{
		return !ti.return_value_is_reference;
	}
	else static_if( ti.is_class )
	{
		for( &method : ti.functions_list )
		{
			// TODO - support multiple overloaded () operators.
			if( type_traits_impl::string_equals( method.name, "()" ) )
			{
				return !method.type.return_value_is_reference;
			}
		}
		halt; // Can't find proper () operator.
	}
	else
	{
		static_assert( false, "Expected functional type!" );
		halt;
	}
}

// Assuming that passed type is function pointer or a funtional object (with single non-template op())
// return whether this function result is immutable reference.
template</type Func/>
fn function_returns_immutable_reference() : bool
{
	auto& ti= typeinfo</Func/>;
	static_if( ti.is_function_pointer )
	{
		return ti.return_value_is_reference && !ti.return_value_is_mutable;
	}
	else static_if( ti.is_class )
	{
		for( &method : ti.functions_list )
		{
			// TODO - support multiple overloaded () operators.
			if( type_traits_impl::string_equals( method.name, "()" ) )
			{
				return method.type.return_value_is_reference && !method.type.return_value_is_mutable;
			}
		}
		halt; // Can't find proper () operator.
	}
	else
	{
		static_assert( false, "Expected functional type!" );
		halt;
	}
}

// Assuming that passed type is function pointer or a funtional object (with single non-template op())
// return whether this function result is mutable reference.
template</type Func/>
fn function_returns_mutable_reference() : bool
{
	auto& ti= typeinfo</Func/>;
	static_if( ti.is_function_pointer )
	{
		return ti.return_value_is_reference && ti.return_value_is_mutable;
	}
	else static_if( ti.is_class )
	{
		for( &method : ti.functions_list )
		{
			// TODO - support multiple overloaded () operators.
			if( type_traits_impl::string_equals( method.name, "()" ) )
			{
				return method.type.return_value_is_reference && method.type.return_value_is_mutable;
			}
		}
		halt; // Can't find proper () operator.
	}
	else
	{
		static_assert( false, "Expected functional type!" );
		halt;
	}
}

namespace type_traits_impl
{

template</ size_type size0, size_type size1 />
fn constexpr string_equals( [ char8, size0 ]& s0, [ char8, size1 ]& s1 ) : bool
{
	if( size0 != size1 ) { return false; }

	for( var size_type mut i(0); i < size0; ++i )
	{
		if( s0[i] != s1[i] ) { return false; }
	}
	return true;
}

template</ type ParentCandidate, type ParentListType />
fn constexpr has_parent( ParentListType& parents_list ) : bool
{
	for( &list_elemet : parents_list )
	{
		if( same_type</ typeof(typeinfo</ParentCandidate/>), typeof(list_elemet.type) /> )
		{ return true; }
	}
	return false;
}

template</ type ParentCandidate, type ParentListType />
fn constexpr has_ancestor( ParentListType& parents_list ) : bool
{
	for( &list_elemet : parents_list )
	{
		if( same_type</ typeof(typeinfo</ParentCandidate/>), typeof(list_elemet.type) /> )
		{ return true; }
		if( type_traits_impl::has_ancestor</ ParentCandidate />( list_elemet.type.parents_list ) )
		{ return true; }
	}
	return false;
}

} // namespace type_traits_impl

} // namespace ust
