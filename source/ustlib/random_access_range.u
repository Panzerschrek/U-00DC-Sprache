import "aligned_storage.u"
import "container_utils.u"
import "memory.u"
import "pointer.u"

namespace ust
{

template</ type T, bool is_mutable />
class random_access_range
{
public:
	fn constructor( mut this )
	( begin_(), size_(0) )
	{}

	fn constructor( mut this, this_type &imut other )= default;

	op=( mut this, this_type &imut other )= default;

	template</ size_type size />
	fn enable_if( is_mutable )
	conversion_constructor( mut this'a', [ T, size ] &'b  mut arr ) ' a <-  b '
	( begin_(arr), size_(size) )
	{}

	template</ size_type size />
	fn enable_if( !is_mutable )
	conversion_constructor( mut this'a', [ T, size ] &'b imut arr ) ' a <- b '
	( size_(size) )
	{
		unsafe
		{
			begin_= ptr_type( cast_mut(arr) );
		}
	}

	fn enable_if( !is_mutable )
	conversion_constructor( mut this'a', random_access_range</ T, true />& src_range'b' ) ' a <- b '
	( size_(0) )
	{
		unsafe
		{	// Hack! we can not access begin_/end_ members of different range type, so, just copy memory.
			static_assert( typeinfo</typeof(this)/>.size_of == typeinfo</typeof(src_range)/>.size_of );
			memory_copy( this, src_range, typeinfo</typeof(this)/>.size_of );
		}
	}

	fn constructor( raw_ptr_mut</ T /> begin, size_type size ) unsafe
		( begin_(begin), size_(size) )
	{}

	op enable_if( is_mutable )
	[]( this'x', size_type index ) : T &'x  mut
	{
		halt if( empty() );
		unsafe
		{
			return cast_mut( cast_ref_unsafe</T/>( int_to_ref( ref_to_int( begin_[index] ) ) ) );
		}
	}

	op
	enable_if( !is_mutable )
	[]( this'x', size_type index ) : T &'x imut
	{
		halt if( empty() );
		unsafe
		{
			return cast_ref_unsafe</T/>( int_to_ref( ref_to_int( begin_[index] ) ) );
		}
	}

	fn enable_if(  is_mutable ) front( this'x' ) : T &'x  mut
	{
		halt if(empty());
		unsafe{  return front_unsafe();  }
	}

	fn enable_if( !is_mutable ) front( this'x' ) : T &'x imut
	{
		halt if(empty());
		unsafe{  return front_unsafe();  }
	}

	fn enable_if(  is_mutable ) back ( this'x' ) : T &'x  mut
	{
		halt if(empty());
		unsafe{  return back_unsafe ();  }
	}

	fn enable_if( !is_mutable ) back ( this'x' ) : T &'x imut
	{
		halt if(empty());
		unsafe{  return back_unsafe ();  }
	}

	fn enable_if(  is_mutable ) front_unsafe( this'x' ) unsafe : T &'x  mut
	{
		unsafe{  return cast_mut( cast_ref_unsafe</T/>( int_to_ref( ref_to_int( begin_.get_ref() ) ) ) );  }
	}

	fn enable_if( !is_mutable ) front_unsafe( this'x' ) unsafe : T &'x imut
	{
		unsafe{  return cast_mut( cast_ref_unsafe</T/>( int_to_ref( ref_to_int( begin_.get_ref() ) ) ) );  }
	}

	fn enable_if(  is_mutable ) back_unsafe ( this'x' ) unsafe : T &'x  mut
	{
		unsafe{  return cast_mut( cast_ref_unsafe</T/>( int_to_ref( ref_to_int( ( begin_ + size_ - size_type(1) ).get_ref() ) ) ) );  }
	}

	fn enable_if( !is_mutable ) back_unsafe ( this'x' ) unsafe : T &'x imut
	{
		unsafe{  return cast_mut( cast_ref_unsafe</T/>( int_to_ref( ref_to_int( ( begin_ + size_ - size_type(1) ).get_ref() ) ) ) );  }
	}

	fn subrange( this'x', size_type start_index, size_type end_index ) : this_type'x'
	{
		halt if( start_index > end_index );
		halt if( end_index > size_ );
		unsafe{  return this_type( begin_ + start_index, end_index - start_index );  }
	}

	fn empty( this ) : bool
	{
		return size_ == 0s;
	}

	fn size( this ) : size_type
	{
		return size_;
	}

	fn drop_front( mut this )
	{
		halt if( empty() );
		++begin_;
		--size_;
	}

	fn drop_back( mut this )
	{
		halt if( empty() );
		--size_;
	}

	// Precondition - range is nonempty.
	fn drop_front_unsafe( mut this ) unsafe
	{
		++begin_;
		--size_;
	}

	// Precondition - range is nonempty.
	fn drop_back_unsafe( mut this ) unsafe
	{
		--size_;
	}

	fn range( this'x' ) : this_type'x'
	{
		return this;
	}

	// Access raw data.
	fn data( this ) unsafe : ptr_type
	{
		return begin_;
	}

	fn enable_if( is_mutable ) swap( this, size_type i0, size_type i1 )
	{
		halt if( i0 >= size_ );
		halt if( i1 >= size_ );

		if( i0 == i1 ){ return; }

		unsafe
		{
			var ptr_type mut ptr0= begin_ + i0;
			var ptr_type mut ptr1= begin_ + i1;

			auto c_element_size= typeinfo</T/>.size_of;
			var aligned_storage</ c_element_size, typeinfo</T/>.align_of /> mut temp= uninitialized;
			memory_copy( temp          , ptr0.get_ref(), c_element_size );
			memory_copy( ptr0.get_ref(), ptr1.get_ref(), c_element_size );
			memory_copy( ptr1.get_ref(), temp          , c_element_size );
		}
	}

private:
	type this_type= random_access_range</ T, is_mutable />;
	type ptr_type= raw_ptr_mut</ T />;

private:
	ReferenceContainerTag</ T, is_mutable /> reference_tag_;

private:
	// Store begin + size, instead of begin + end because we need to support elements with zero size.
	// TODO - maybe use begin + end for non-zero-sized elements?
	ptr_type begin_;
	size_type size_;
}

template</ type T />
type random_access_range_mut = random_access_range</ T, true  />;
template</ type T />
type array_view_mut = random_access_range</ T, true  />;

template</ type T />
type random_access_range_imut= random_access_range</ T, false />;
template</ type T />
type array_view_imut= random_access_range</ T, false />;

} // namespace ust
