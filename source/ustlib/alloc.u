namespace ust
{

// Allocation-deallocation functions.
// If allocation function can not allocate memory block with requested size - program will be halted.

fn memory_allocate( size_type size_bytes ) unsafe : $(byte8)
{
	alloc_impl::allocation_size_check( size_bytes );
	auto ptr= unsafe( ust_memory_allocate_impl( size_bytes ) );
	// Do not bother checking allocation result against null, since null may not be returned in out of memory case.
	// Even if underlying implementation returns null, such check is almost useless,
	// since this memory is almost always immediately used, which triggers program crash anyway.
	return ptr;
}

fn memory_reallocate( $(byte8) mem, size_type new_size_bytes ) unsafe : $(byte8)
{
	alloc_impl::allocation_size_check( new_size_bytes );
	auto ptr= unsafe( ust_memory_reallocate_impl( mem, new_size_bytes ) );
	// Do not bother checking allocation result against null, since null may not be returned in out of memory case.
	// Even if underlying implementation returns null, such check is almost useless,
	// since this memory is almost always immediately used, which triggers program crash anyway.
	return ptr;
}

fn memory_free( $(byte8) mem ) unsafe
{
	unsafe( ust_memory_free_impl( mem ) );
}

namespace alloc_impl
{

fn allocation_size_check( size_type size )
{
	if( typeinfo</size_type/>.size_of == 8s )
	{
		// It's almost impossible to get pointer difference overflow on 64bit platform. So, ignore allocation size check here.
	}
	else
	{
		// Do not allow allocations greater than half of address space to avoid pointer difference overflow.
		// TODO - do this only if underlying "malloc" function have no such functionality.
		halt if( size >= 2147483647s );
	}
}

} // namespace alloc_impl

} // namespace ust

// External implementation functions.
// These functions are also used by compiler itself.

fn nomangle ust_memory_allocate_impl( size_type size ) unsafe : $(byte8);
fn nomangle ust_memory_reallocate_impl( $(byte8) ptr, size_type new_size ) unsafe : $(byte8);
fn nomangle ust_memory_free_impl( $(byte8) ptr ) unsafe;
