import "shared_ptr_base.u"
import "shared_ptr_imut.u"
import "shared_ptr_nullable_mut.u"

namespace ust
{

template</ type T />
class shared_ptr_nullable_imut
{
public:
	fn constructor()= default;

	fn constructor( T mut value )
	( impl_( move(value) ) )
	{}

	fn conversion_constructor( shared_ptr_imut</T/> & ptr )
	{
		unsafe{  impl_= shared_ptr_base</ T />( ptr.get_impl() );  }
	}

	fn conversion_constructor( shared_ptr_nullable_mut</T/>& ptr )
	{
		unsafe{  impl_= shared_ptr_base</ T />( ptr.get_impl() );  }
	}

	template</ type U />
	fn enable_if( !is_same_type</T, U/>() && is_ancestor_for</T, U/>() )
	conversion_constructor( mut this, shared_ptr_nullable_imut</U/>& ptr )
	{
		unsafe{  impl_= ptr.get_impl();  }
	}

	fn constructor( mut this, this_type &imut other )= default;
	op=( mut this, this_type &imut other )= default;

	fn reset( mut this )
	{
		impl_.reset();
	}

	fn reset( mut this, T mut value )
	{
		impl_.reset( move(value) );
	}

	fn empty( this ) : bool
	{
		return impl_.empty();
	}

	fn lock_imut( this ) : shared_ptr_impl::lock_imut</T/>'this'
	{
		return impl_.lock_imut();
	}

public: // Methods for internal usage
	fn constructor( shared_ptr_base</ T /> mut impl ) unsafe
	( impl_(move(impl)) )
	{}

	fn get_impl( this ) unsafe : shared_ptr_base</ T />
	{
		return impl_;
	}

private:
	type this_type= shared_ptr_nullable_imut</T/>;

private:
	shared_ptr_base</ T /> impl_;
}

template</ type T />
fn to_non_nullable( shared_ptr_nullable_imut</T/> & val ) : shared_ptr_imut</T/>
{
	halt if( val.empty() );
	unsafe
	{
		return shared_ptr_imut</T/>( val.get_impl() );
	}
}

} // namespace ust
