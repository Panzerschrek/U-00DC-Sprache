import "shared_ptr_final_base.u"

namespace ust
{

template</ type T />
class shared_ptr_final
{
public:
	fn constructor( T mut value )
	{
		impl_= shared_ptr_final_base</T/>( move(value) );
	}

	fn constructor( mut this, this_type &imut other )= default;
	op=( mut this, this_type &imut other )= default;

	fn reset( mut this, T mut value )
	{
		impl_.reset( move(value) );
	}

	fn empty( this ) : bool
	{
		return false;
	}

	fn get_ref( this ) : T &imut
	{
		unsafe
		{
			return impl_.get_ref_unsafe();
		}
	}

	op==( this_type& l, this_type& r ) : bool
	{
		return l.impl_ == r.impl_;
	}

	op!=( this_type& l, this_type& r ) : bool
	{
		return l.impl_ != r.impl_;
	}

public: // Methods for internal usage
	// impl must be non-empty
	fn constructor( shared_ptr_final_base</ T /> mut impl ) unsafe
	( impl_(move(impl)) )
	{}

	fn get_impl( this ) unsafe : shared_ptr_final_base</ T />
	{
		return impl_;
	}

private:
	type this_type= shared_ptr_final</T/>;

private:
	shared_ptr_final_base</T/> impl_;
}

} // namespace ust
