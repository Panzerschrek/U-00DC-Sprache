namespace ust
{

// add/sub/mul with overflow check. If overflow occurs - functions halted.

fn add_overflow_check_halt( i32 a, i32 b ) : i32
{
	return ust_add_overflow_check_halt_i32_impl( a, b );
}

fn add_overflow_check_halt( u32 a, u32 b ) : u32
{
	return ust_add_overflow_check_halt_u32_impl( a, b );
}

fn add_overflow_check_halt( i64 a, i64 b ) : i64
{
	return ust_add_overflow_check_halt_i64_impl( a, b );
}

fn add_overflow_check_halt( u64 a, u64 b ) : u64
{
	return ust_add_overflow_check_halt_u64_impl( a, b );
}

fn add_overflow_check_halt( size_type a, size_type b ) : size_type
{
	static_if( typeinfo</size_type/>.size_of == typeinfo</u32/>.size_of )
	{
		return size_type( add_overflow_check_halt( u32(a), u32(b) ) );
	}
	else
	{
		return size_type( add_overflow_check_halt( u64(a), u64(b) ) );
	}
}

fn add_overflow_check_halt( ssize_type a, ssize_type b ) : ssize_type
{
	static_if( typeinfo</ssize_type/>.size_of == typeinfo</i32/>.size_of )
	{
		return ssize_type( add_overflow_check_halt( i32(a), i32(b) ) );
	}
	else
	{
		return ssize_type( add_overflow_check_halt( i64(a), i64(b) ) );
	}
}

fn sub_overflow_check_halt( i32 a, i32 b ) : i32
{
	return ust_sub_overflow_check_halt_i32_impl( a, b );
}

fn sub_overflow_check_halt( u32 a, u32 b ) : u32
{
	return ust_sub_overflow_check_halt_u32_impl( a, b );
}

fn sub_overflow_check_halt( i64 a, i64 b ) : i64
{
	return ust_sub_overflow_check_halt_i64_impl( a, b );
}

fn sub_overflow_check_halt( u64 a, u64 b ) : u64
{
	return ust_sub_overflow_check_halt_u64_impl( a, b );
}

fn sub_overflow_check_halt( size_type a, size_type b ) : size_type
{
	static_if( typeinfo</size_type/>.size_of == typeinfo</u32/>.size_of )
	{
		return size_type( sub_overflow_check_halt( u32(a), u32(b) ) );
	}
	else
	{
		return size_type( sub_overflow_check_halt( u64(a), u64(b) ) );
	}
}

fn sub_overflow_check_halt( ssize_type a, ssize_type b ) : ssize_type
{
	static_if( typeinfo</ssize_type/>.size_of == typeinfo</i32/>.size_of )
	{
		return ssize_type( sub_overflow_check_halt( i32(a), i32(b) ) );
	}
	else
	{
		return ssize_type( sub_overflow_check_halt( i64(a), i64(b) ) );
	}
}

fn mul_overflow_check_halt( i32 a, i32 b ) : i32
{
	return ust_mul_overflow_check_halt_i32_impl( a, b );
}

fn mul_overflow_check_halt( u32 a, u32 b ) : u32
{
	return ust_mul_overflow_check_halt_u32_impl( a, b );
}

fn mul_overflow_check_halt( i64 a, i64 b ) : i64
{
	return ust_mul_overflow_check_halt_i64_impl( a, b );
}

fn mul_overflow_check_halt( u64 a, u64 b ) : u64
{
	return ust_mul_overflow_check_halt_u64_impl( a, b );
}

fn mul_overflow_check_halt( size_type a, size_type b ) : size_type
{
	static_if( typeinfo</size_type/>.size_of == typeinfo</u32/>.size_of )
	{
		return size_type( mul_overflow_check_halt( u32(a), u32(b) ) );
	}
	else
	{
		return size_type( mul_overflow_check_halt( u64(a), u64(b) ) );
	}
}

fn mul_overflow_check_halt( ssize_type a, ssize_type b ) : ssize_type
{
	static_if( typeinfo</ssize_type/>.size_of == typeinfo</i32/>.size_of )
	{
		return ssize_type( mul_overflow_check_halt( i32(a), i32(b) ) );
	}
	else
	{
		return ssize_type( mul_overflow_check_halt( i64(a), i64(b) ) );
	}
}

} // namespace ust

// External implementation functions. Do not use directly!

fn nomangle ust_add_overflow_check_halt_i32_impl( i32 a, i32 b ) : i32;
fn nomangle ust_add_overflow_check_halt_u32_impl( u32 a, u32 b ) : u32;
fn nomangle ust_add_overflow_check_halt_i64_impl( i64 a, i64 b ) : i64;
fn nomangle ust_add_overflow_check_halt_u64_impl( u64 a, u64 b ) : u64;

fn nomangle ust_sub_overflow_check_halt_i32_impl( i32 a, i32 b ) : i32;
fn nomangle ust_sub_overflow_check_halt_u32_impl( u32 a, u32 b ) : u32;
fn nomangle ust_sub_overflow_check_halt_i64_impl( i64 a, i64 b ) : i64;
fn nomangle ust_sub_overflow_check_halt_u64_impl( u64 a, u64 b ) : u64;

fn nomangle ust_mul_overflow_check_halt_i32_impl( i32 a, i32 b ) : i32;
fn nomangle ust_mul_overflow_check_halt_u32_impl( u32 a, u32 b ) : u32;
fn nomangle ust_mul_overflow_check_halt_i64_impl( i64 a, i64 b ) : i64;
fn nomangle ust_mul_overflow_check_halt_u64_impl( u64 a, u64 b ) : u64;
