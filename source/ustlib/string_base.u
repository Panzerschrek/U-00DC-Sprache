import "alloc.u"
import "checked_math.u"
import "minmax.u"
import "random_access_range.u"

namespace ust
{

template</ type char_type />
class string_base
{
	static_assert( typeinfo</ char_type />.is_char );

public:
	type this_type= string_base</char_type/>;
	type hasher= string_base_hasher;

public:
	// Default constructor.
	fn constructor()= default;

	// Copy constructor.
	fn constructor( this_type& other )
		( size_(other.size_) )
	{
		if( other.empty() ){ return; }

		unsafe
		{
			capacity_= max( get_first_allocation_size(), other.size_ );
			// Multiplication overflow is not possible here because allocation of source string should not overflow.
			ptr_= $<( cast_ref_unsafe</char_type/>( memory_allocate( capacity_ * c_element_size_ ) ) );

			memory_copy_aligned( c_element_alignment_, cast_ref_unsafe</byte8/>( $>(ptr_) ), cast_ref_unsafe</byte8/>( $>(other.ptr_) ), size_ * c_element_size_ );
		}
	}

	// Construct form char array.
	template</ size_type array_size />
	fn conversion_constructor( [ char_type, array_size ]& array )
		( size_(array_size) )
	{
		if( array_size == size_type(0) ){ return; }

		unsafe
		{
			capacity_= max( get_first_allocation_size(), array_size );
			// It's impossible to get multiplication overflow here - source array should not occupy more than address space size.
			ptr_= $<( cast_ref_unsafe</char_type/>( memory_allocate( capacity_ * c_element_size_ ) ) );

			memory_copy_aligned( c_element_alignment_, cast_ref_unsafe</byte8/>( $>(ptr_) ), cast_ref_unsafe</byte8/>( array ), size_ * c_element_size_ );
		}
	}

	// Construct from char range.
	fn conversion_constructor( range_imut range )
		( size_(range.size()) )
	{
		if( size_ == size_type(0) ){ return; }

		unsafe
		{
			capacity_= max( get_first_allocation_size(), size_ );
			// It's impossible to get multiplication overflow here - source range should not occupy more than address space size.
			ptr_= $<( cast_ref_unsafe</char_type/>( memory_allocate( capacity_ * c_element_size_ ) ) );

			memory_copy_aligned( c_element_alignment_, cast_ref_unsafe</byte8/>( $>(ptr_) ), cast_ref_unsafe</byte8/>( $>(range.data()) ), size_ * c_element_size_ );
		}
	}

	// Fill constructor.
	fn constructor( size_type count, char_type value )
		( size_(count) )
	{
		if( count == size_type(0) ){ return; }

		unsafe
		{
			capacity_= max( get_first_allocation_size(), size_ );
			// Multiplication overflow check is needed here.
			ptr_= $<( cast_ref_unsafe</char_type/>( memory_allocate( mul_overflow_check_halt( capacity_, c_element_size_ ) ) ) );

			for( var size_type mut i(0); i < size_; ++i )
			{
				$>(ptr_ + i)= value;
			}
		}
	}

	// Copy assignment operator.
	op=( mut this, this_type& other )
	{
		this = other.range();
	}

	// Assign char array.
	template</ size_type array_size />
	op=( mut this, [ char_type, array_size ]& array )
	{
		this = range_imut(array);
	}

	// Assign char range.
	op=( mut this, range_imut range )
	{
		unsafe
		{
			ensure_capacity( range.size() );
			size_= range.size();
			memory_copy_aligned( c_element_alignment_, cast_ref_unsafe</byte8/>( $>(this.ptr_) ), cast_ref_unsafe</byte8/>(  $>(range.data()) ), size_ * c_element_size_ );
		}
	}

	fn destructor()
	{
		unsafe
		{
			if( !is_nullptr(ptr_) )
			{
				memory_free( cast_ref_unsafe</byte8/>( $>(ptr_) ) );
			}
		}
	}

	fn size( this ) : size_type
	{
		return size_;
	}

	fn empty( this ) : bool
	{
		return size_ == size_type(0);
	}

	fn capacity( this ) : size_type
	{
		return capacity_;
	}

	// Indexing

	op[]( mut this, size_type index ) : char_type &mut
	{
		halt if( index >= size_ );
		unsafe{  return $>(ptr_ + index );  }
	}

	op[]( imut this, size_type index ) : char_type &imut
	{
		halt if( index >= size_ );
		unsafe{  return $>(ptr_ + index );  }
	}

	fn index_unchecked( mut this, size_type index ) unsafe : char_type &mut
	{
		unsafe{  return $>(ptr_ + index );  }
	}

	fn index_unchecked( imut this, size_type index ) unsafe : char_type &imut
	{
		unsafe{  return $>(ptr_ + index );  }
	}

	op enable_if( c_size_type_is_u64_ ) []( mut this, u32 index ) : char_type &mut
	{
		return this[ size_type(index) ];
	}

	op enable_if( c_size_type_is_u64_ ) []( imut this, u32 index ) : char_type &imut
	{
		return this[ size_type(index) ];
	}

	op enable_if( c_size_type_is_u32_ ) []( mut this, u64 index ) : char_type &mut
	{
		halt if( index > u64(size_) );
		return this[ size_type(index) ];
	}

	op enable_if( c_size_type_is_u32_ ) []( imut this, u64 index ) : char_type &imut
	{
		halt if( index > u64(size_) );
		return this[ size_type(index) ];
	}

	// front/back

	fn front( mut this ) : char_type &mut
	{
		halt if(empty());
		unsafe{  return $>(ptr_);  }
	}

	fn front( imut this ) : char_type &imut
	{
		halt if(empty());
		unsafe{  return $>(ptr_);  }
	}

	fn back( mut this ) : char_type &mut
	{
		halt if(empty());
		unsafe{  return $>(ptr_ + size_ - 1s);  }
	}

	fn back( imut this ) : char_type &imut
	{
		halt if(empty());
		unsafe{  return $>(ptr_ + size_ - 1s);  }
	}

	fn front_unchecked( mut this ) unsafe : char_type &mut
	{
		unsafe{  return $>(ptr_);  }
	}

	fn front_unchecked( imut this ) unsafe : char_type &imut
	{
		unsafe{  return $>(ptr_);  }
	}

	fn back_unchecked( mut this ) unsafe : char_type &mut
	{
		unsafe{  return $>(ptr_ + size_ - 1s);  }
	}

	fn back_unchecked( imut this ) unsafe : char_type &imut
	{
		unsafe{  return $>(ptr_ + size_ - 1s);  }
	}

	// ranges

	fn range(  mut this ) : range_mut'this'
	{
		unsafe{  return range_mut ( ptr_, size_ );  }
	}

	fn range( imut this ) : range_imut'this'
	{
		unsafe{  return range_imut( ptr_, size_ );  }
	}

	fn substr( this, size_type start_index, size_type end_index ) : this_type
	{
		return this_type( range().subrange( start_index, end_index ) );
	}

	// Access raw data.
	fn data( mut this ) unsafe : $(char_type)
	{
		return ptr_;
	}

	// compare

	op==( this_type& l, this_type& r ) : bool
	{
		return l == r.range();
	}

	template</ size_type array_size />
	op==( this_type& l, [ char_type, array_size ]& array ) : bool
	{
		return l == range_imut(array);
	}

	template</ size_type array_size />
	op==( [ char_type, array_size ]& array, this_type& r ) : bool
	{
		return r == array;
	}

	op==( this_type& l, range_imut r ) : bool
	{
		if( l.size() != r.size() ) { return false; }

		unsafe
		{
			auto size= l.size();
			return memory_equals( cast_ref_unsafe</byte8/>( $>(l.ptr_) ), cast_ref_unsafe</byte8/>( $>(r.data()) ), size * c_element_size_ );
		}
	}

	op==( range_imut l, this_type& r ) : bool
	{
		return r == l;
	}

	// order compare
	op<=>( this_type& l, this_type& r ) : i32
	{
		for( var size_type mut i= 0s, min_s= ust::min( l.size(), r.size() ); i < min_s; ++i )
		{
			unsafe
			{
				if( $>(l.ptr_ + i) != $>(r.ptr_ + i) )
				{
					return $>(l.ptr_ + i) <=> $>(r.ptr_ + i);
				}
			}
		}

		// In case if one string is substring of another, shorter string is less.
		return l.size() <=> r.size();
	}

	// modificators

	fn swap( mut this, size_type i0, size_type i1 )
	{
		halt if( i0 >= size_ );
		halt if( i1 >= size_ );

		if( i0 == i1 ){ return; }

		unsafe
		{
			var char_type c0= $>(ptr_ + i0);
			var char_type c1= $>(ptr_ + i1);
			$>(ptr_ + i0)= c1;
			$>(ptr_ + i1)= c0;
		}
	}

	fn enable_if( c_size_type_is_u64_ ) swap( mut this, u32 i0, u32 i1 )
	{
		return swap( size_type(i0), size_type(i1) );
	}

	fn enable_if( c_size_type_is_u32_ ) swap( mut this, u64 i0, u64 i1 )
	{
		halt if( i0 >= u64(size_) );
		halt if( i1 >= u64(size_) );
		return swap( size_type(i0), size_type(i1) );
	}

	fn push_back( mut this, char_type val )
	{
		unsafe
		{
			// It's impossible to get overflow here, because previous size (and allocation) can't be more than half of address space.
			auto new_size= size_ + 1s;
			ensure_capacity( new_size );
			$>(ptr_ + size_)= val;
			size_= new_size;
		}
	}

	fn push_back( mut this, size_type count, char_type val )
	{
		unsafe
		{
			auto new_size= add_overflow_check_halt( size_, count ); // Overflow check is needed here.
			ensure_capacity( new_size );

			for( var size_type mut i(0); i < count; ++i )
			{
				$>(ptr_ + size_ + i)= val;
			}
			size_= new_size;
		}
	}

	fn drop_back( mut this )
	{
		halt if(empty());
		--size_;
	}

	fn drop_back( mut this, size_type count )
	{
		halt if( count > size_ );
		size_-= count;
	}

	fn pop_back( mut this ) : char_type
	{
		halt if(empty());
		unsafe
		{
			--size_;
			return $>(ptr_ + size_);
		}
	}

	fn pop_back_unchecked( mut this ) unsafe : char_type
	{
		unsafe
		{
			--size_;
			return $>(ptr_ + size_);
		}
	}

	fn resize( mut this, size_type new_size, char_type val )
	{
		// TODO - optimize. Calls to public methods contain unnecessary checks.
		if( new_size > size_ )
		{
			push_back( new_size - size_, val );
		}
		else if( new_size < size_ )
		{
			drop_back( size_ - new_size );
		}
	}

	fn clear( mut this )
	{
		size_= size_type(0);
	}

	fn shrink_to_fit( mut this )
	{
		if( capacity_ > size_ )
		{
			capacity_= size_;
			unsafe
			{
				if( capacity_ == size_type(0) )
				{
					memory_free( cast_ref_unsafe</byte8/>( $>(ptr_) ) );
					ptr_= nullptr</char_type/>();
				}
				else
				{
					auto &mut ref= cast_ref_unsafe</char_type/>( memory_reallocate( cast_ref_unsafe</byte8/>( $>(ptr_) ), capacity_ * c_element_size_ ) );
					ptr_= $<(ref);
				}
			}
		}
	}

	// +

	op+( this_type& l, this_type& r ) : this_type
	{
		return l + r.range();
	}

	template</ size_type array_size />
	op+( this_type& l, [ char_type, array_size ]& array ) : this_type
	{
		return l + range_imut(array);
	}

	template</ size_type array_size />
	op+( [ char_type, array_size ]& array, this_type& r ) : this_type
	{
		return range_imut(array) + r;
	}

	op+( this_type& l, range_imut range ) : this_type
	{
		var this_type mut result;
		unsafe
		{
			// Overflow check is not needed here - size of single string can't be greater than size of half of address space.
			auto result_size= l.size_ + range.size();
			result.ensure_capacity( result_size );
			result.size_= result_size;
			memory_copy_aligned( c_element_alignment_, cast_ref_unsafe</byte8/>( $>(result.ptr_) ), cast_ref_unsafe</byte8/>( $>(l.ptr_) ), l.size_ * c_element_size_ );
			memory_copy_aligned( c_element_alignment_, cast_ref_unsafe</byte8/>( $>(result.ptr_ + l.size_) ), cast_ref_unsafe</byte8/>( $>(range.data()) ), range.size() * c_element_size_ );
		}

		return move(result);
	}

	op+( range_imut range, this_type& r ) : this_type
	{
		var this_type mut result;
		unsafe
		{
			// Overflow check is not needed here - size of single string can't be greater than size of half of address space.
			auto result_size= range.size() + r.size_;
			result.ensure_capacity( result_size );
			result.size_= result_size;
			memory_copy_aligned( c_element_alignment_, cast_ref_unsafe</byte8/>( $>(result.ptr_) ), cast_ref_unsafe</byte8/>( $>(range.data()) ), range.size() * c_element_size_ );
			memory_copy_aligned( c_element_alignment_, cast_ref_unsafe</byte8/>( $>(result.ptr_ + range.size()) ), cast_ref_unsafe</byte8/>( $>(r.ptr_) ), r.size_ * c_element_size_ );
		}

		return move(result);
	}

	// +=

	op+=( mut this, this_type& other )
	{
		this += other.range();
	}

	template</ size_type array_size />
	op+=( mut this, [ char_type, array_size ]& array )
	{
		this += range_imut(array);
	}

	op+=( mut this, range_imut range )
	{
		unsafe
		{
			// Overflow check is not needed here - size of single string can't be greater than size of half of address space.
			auto new_size= this.size_ + range.size();
			ensure_capacity( new_size );
			memory_copy_aligned( c_element_alignment_, cast_ref_unsafe</byte8/>( $>( ptr_ + size_ ) ), cast_ref_unsafe</byte8/>( $>(range.data()) ), range.size() * c_element_size_ );
			size_= new_size;
		}
	}

private:
	type range_mut=  random_access_range_mut </char_type/>;
	type range_imut= random_access_range_imut</char_type/>;
	auto constexpr c_element_size_= typeinfo</char_type/>.size_of;
	auto constexpr c_element_alignment_= typeinfo</char_type/>.align_of;

	fn constexpr get_first_allocation_size() : size_type
	{
		// Typical allocator allocates memory with block size=16 or more.
		// For first allocation we can allocate more, than one element for elements, smaller, then 16/2.

		static_if( c_element_size_ == size_type(0) ) { return ~size_type(0); } // Max for zero-sized elements.
		else if  ( c_element_size_ >= size_type(16) ) { return size_type(1); }
		else { return size_type(16) / c_element_size_; }
	}

	auto c_size_type_is_u32_= typeinfo</ size_type />.size_of == typeinfo</ u32 />.size_of;
	auto c_size_type_is_u64_= typeinfo</ size_type />.size_of == typeinfo</ u64 />.size_of;

private:
	fn ensure_capacity( mut this, size_type new_size ) unsafe
	{
		unsafe
		{
			if( capacity_ >= new_size )
			{
				return;
			}
			else if( capacity_ == size_type(0) )
			{
				capacity_= max( get_first_allocation_size(), new_size );
				// Multiplication overflow check is needed here.
				ptr_= $<( cast_ref_unsafe</char_type/>( memory_allocate( mul_overflow_check_halt( capacity_, c_element_size_ ) ) ) );
			}
			else // if( capacity_ < new_size )
			{
				// It's impossible to get capacity overflow here, because "new_size" can't be greater than address space size.
				while( capacity_ < new_size ) { capacity_*= 2s; }
				// Multiplication overflow check is needed here.
				ptr_= $<( cast_ref_unsafe</char_type/>( memory_reallocate( cast_ref_unsafe</byte8/>( $>(ptr_) ), mul_overflow_check_halt( capacity_, c_element_size_ ) ) ) );
			}
		}
	}

private:
	$(char_type) ptr_= zero_init;
	size_type size_(0);
	size_type capacity_(0);
}

struct string_base_hasher
{

template</ type char_type />
fn hash( string_base</char_type/>& str ) : size_type
{
	var size_type mut r(0);
	foreach( c : str )
	{
		r= r * size_type(33) + size_type(c);
	}
	return r;
}

}

} // namespace ust
