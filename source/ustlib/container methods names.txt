// This document describes recommended names for common containers methods.


// Size methods for all containers.
fn size( imut this ) : size_type;
fn capacity( imut this ) : size_type;
fn empty( imut this ) : bool;

// Safe element access. "halt", if index out of range or key does not exists.
op[]( imut this, size_type i ) : T &imut;
op[](  mut this, size_type i ) : T & mut;
op[]( imut this, key_type& k ) : T &imut;
op[](  mut this, key_type& k ) : T & mut;
// Safe access for sequential containers. "halt", if container is empty.
fn front( imut this ) : T &imut;
fn front(  mut this ) : T & mut;
fn back ( imut this ) : T &imut;
fn back (  mut this ) : T & mut;

// Unsafe element access. Index or key must exists.
fn index_unchecked( imut this, size_type i ) unsafe : T &imut;
fn index_unchecked(  mut this, size_type i ) unsafe : T & mut;
fn index_unchecked( imut this, key_type& k ) unsafe : T &imut;
fn index_unchecked(  mut this, key_type& k ) unsafe : T & mut;
// Unsafe access for sequential containers. Container must be nonempty.
fn front_unchecked( imut this ) unsafe : T &imut;
fn front_unchecked(  mut this ) unsafe : T & mut;
fn back_unchecked ( imut this ) unsafe : T &imut;
fn back_unchecked (  mut this ) unsafe : T & mut;

// Safe swap elements. "halt", if indexes out of range or keys does not exists.
fn swap( mut this, size_type i0, size_type i1 );
fn swap( mut this, key_type& k0, key_type& k1 );

// Add elements for sequential containers.
fn push_front( mut this, T mut t ) : T &mut;
fn push_back ( mut this, T mut t ) : T &mut;

// Add elements for random-access or key-value containers.
fn insert( mut this, size_type i, T mut t ) : T &mut;
fn insert( mut this, key_type& k, T mut t ) : T &mut;

// Safe remove element from sequential containers."halt", if container empty.
fn pop_front( mut this ) : T;
fn pop_back ( mut this ) : T;
fn drop_front( mut this );
fn drop_back ( mut this );

// Unsafe remove element from sequential containers. Container must be nonempty.
fn pop_front_unchecked( mut this ) unsafe : T;
fn pop_back_unchecked ( mut this ) unsafe : T;
fn drop_front_unchecked( mut this ) unsafe;
fn drop_back_unchecked ( mut this ) unsafe;

// Safe remove for random-access or key-value containers. "halt", if index out of range or key does not exists.
fn erase( mut this, size_type i ) : T;
fn drop ( mut this, size_type i );
fn erase( mut this, key_type& k ) : T;
fn drop ( mut this, key_type& k );

// Unsafe remove for random-access or key-value containers. Index must be in range or key must exists in container.
fn erase_unchecked( mut this, size_type i ) unsafe : T;
fn drop_unchecked ( mut this, size_type i ) unsafe;
fn erase_unchecked( mut this, key_type& k ) unsafe : T;
fn drop_unchecked ( mut this, key_type& k ) unsafe;

// Clear container, if container may be empty.
fn clear( mut this );
// Reset container, if container may contain 0 or 1 element.
fn reset( mut thus );
// Reset container with new value, if container may contain no more, then 1 element.
fn reset( mut thus, T mut t );

// Element access for single element containers (box, optional). "halt", if container is empty.
fn get_ref( imut this ) : T &imut;
fn get_ref(  mut this ) : T & mut;

// Methods for single element containers (box, optional). Coontainer must be nonempty.
fn get_ref_unchecked( imut this ) unsafe : T &imut;
fn get_ref_unchecked(  mut this ) unsafe : T & mut;

// Get range (for containers for many elements).
fn range( imut this ) : range_type_imut;
fn range(  mut this ) : range_type_mut ;
