import "box.u"
import "container_utils.u"
import "hash.u"
import "polymorph.u"

namespace ust
{

template</ type T />
class box_nullable non_sync( non_sync</T/> )
{
	static_assert( typeinfo</T/>.reference_tag_count == 0s, "this container doesn't support types with references inside" );

public:
	type hasher= box_nullable_hasher;

public:
	// Default initializer = set to zero.
	fn constructor()
	{}

	// Construct with value.
	fn constructor( mut this, T mut val )
		( ptr_= $<( unsafe( cast_ref_unsafe</T/>( memory_allocate( typeinfo</T/>.size_of ) ) ) ) )
	{
		unsafe( move_into_uninitialized( $>(ptr_), move(val) ) );
	}

	// Construct with value, taken from box.
	fn conversion_constructor( mut this, box</T/> mut val )
		( ptr_= unsafe( val.get_ptr() ) )
	{
		unsafe( move_into_nowhere( move(val) ) );
	}
	
	// Construct with value, taken from nullable box of compatible type.
	template</ type U />
	fn enable_if( !same_type</T, U/> && is_ancestor_for</T, U/>() )
	conversion_constructor( mut this, box_nullable</U/> mut val )
	{
		unsafe
		{
			if( !val.empty() )
			{
				ptr_= $<( cast_ref</T/>( val.deref_unchecked() ) );
			}
			move_into_nowhere( move(val) );
		}
	}
	
	// Construct with value, taken from box of compatible type.
	template</ type U />
	fn enable_if( !same_type</T, U/> && is_ancestor_for</T, U/>() )
	conversion_constructor( mut this, box</U/> mut val )
	{
		unsafe
		{
			ptr_= $<( cast_ref</T/>( val.deref() ) ); // Convert reference here.
			move_into_nowhere( move(val) );
		}
	}

	// box is NOT copyable, because copying required memory allocation. Copying must be done manually.

	fn destructor()
	{
		if( !empty() )
		{
			unsafe
			{
				call_destructor( $>(ptr_) );
				memory_free( polymorph_restore_original_ref( $>(ptr_) ) );
			}
		}
	}

	fn try_deref(  mut this ) : T & mut @( reference_notation::return_references::param0 )
	{
		halt if( empty() );
		return unsafe( deref_unchecked() );
	}

	fn try_deref( imut this ) : T &imut @( reference_notation::return_references::param0 )
	{
		halt if( empty() );
		return unsafe( deref_unchecked() );
	}

	fn deref_unchecked(  mut this ) unsafe : T & mut @( reference_notation::return_references::param0 )
	{
		return unsafe( $>(ptr_) );
	}

	fn deref_unchecked( imut this ) unsafe : T &imut @( reference_notation::return_references::param0 )
	{
		return unsafe( $>(ptr_) );
	}

	fn get_ptr( this ) unsafe : $(T)
	{
		return ptr_;
	}

	fn empty( this )  : bool
	{
		return is_nullptr(ptr_);
	}

	fn reset( mut this )
	{
		if( !empty() )
		{
			unsafe
			{
				call_destructor( $>(ptr_) );
				memory_free( polymorph_restore_original_ref( $>(ptr_) ) );
				ptr_= nullptr</T/>();
			}
		}
	}

	fn reset( mut this, T mut val )
	{
		unsafe
		{
			if( empty() )
			{
				ptr_= $<( cast_ref_unsafe</T/>( memory_allocate( typeinfo</T/>.size_of ) ) );
				move_into_uninitialized( $>(ptr_), move(val) );
			}
			else
			{
				static_if( is_polymorph_non_final_class</T/>() )
				{
					// This instance of "box_nullable</Base/>" may be initialized with "box_nullable</Derived/>".
					// In such case we can't reuse allocation for construction of new value of "Base" class,
					// because dynamic type info of allocated class is used for deallocation of "ptr_".
					// So, just deallocate initial "ptr" and allocate new one.
					reset();
					ptr_= $<( cast_ref_unsafe</T/>( memory_allocate( typeinfo</T/>.size_of ) ) );
					move_into_uninitialized( $>(ptr_), move(val) );
				}
				else
				{
					$>(ptr_)= move(val);
				}
			}
		}
	}

	// Checked conversion to non-nullable box from nullable box.
	fn try_to_non_nullable( byval mut this ) : box</T/>
	{
		halt if( empty() );
		unsafe
		{
			static_assert( typeinfo</ box</T/> />.size_of == typeinfo</ box_nullable</T/> />.size_of );
			var box</T/> mut result= uninitialized;
			memory_copy_aligned( typeinfo</ box</T/> />.align_of, cast_ref_unsafe</byte8/>( result ), cast_ref_unsafe</byte8/>( this ), typeinfo</ box</T/> />.size_of );
			move_into_nowhere( move(this) );
			return result;
		}
	}

	// Take value, leave box empty.
	// This is a zero-params template function, because type checks requires T completeness, which may create globals loop.
	template<//>
	fn enable_if( !is_polymorph_non_final_class</T/>() && !is_abstract</T/>() ) try_take_value( mut this ) : T
	{
		halt if(empty());
		unsafe
		{
			auto ptr= get_ptr();
			var T mut t= uninitialized;
			memory_copy_aligned( typeinfo</T/>.align_of, cast_ref_unsafe</byte8/>(t), cast_ref_unsafe</byte8/>($>(ptr)), typeinfo</T/>.size_of ); // Copy contents into the result.
			memory_free( polymorph_restore_original_ref( $>(ptr) ) ); // Free memory block, that was used for box.
			ptr_= nullptr</T/>(); // Reset box storage pointer. Now it is empty.
			return t;
		}
	}

private:
	$(T) ptr_= zero_init;
}

struct box_nullable_hasher
{
	template</ type T />
	fn hash( box_nullable</T/>& b ) : size_type
	{
		if_var( &value : b )
		{
			return default_hasher::hash(value);
		}
		return 0s;
	}
}

} // namespace ust
