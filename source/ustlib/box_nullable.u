import "box.u"
import "container_utils.u"
import "hash.u"
import "polymorph.u"
import "type_traits.u"

namespace ust
{

template</ type T />
class box_nullable
{
public:
	type hasher= box_nullable_hasher;

public:
	// Default initializer = set to zero.
	fn constructor()
	( ptr_= zero_init )
	{}

	// Construct with value.
	fn constructor( mut this, T mut val )
	( ptr_= zero_init )
	{
		unsafe
		{
			ptr_= $<( cast_ref_unsafe</T/>( memory_allocate( typeinfo</T/>.size_of ) ) );
			move_unsafe</T/>( $>(ptr_), move(val) );
		}
	}

	// Construct with value, taken from box.
	fn conversion_constructor( mut this, box</T/> mut val )
	( ptr_= zero_init )
	{
		unsafe
		{
			static_assert( typeinfo</ box</T/> />.size_of == typeinfo</ $(T) />.size_of );
			memory_copy( ptr_, val, typeinfo</ box</T/> />.size_of );
			move_into_nowhere( move(val) );
		}
	}
	
	// Construct with value, taken from nullable box of compatible type.
	template</ type U />
	fn enable_if( !is_same_type</T, U/>() && is_ancestor_for</T, U/>() )
	conversion_constructor( mut this, box_nullable</U/> mut val )
	( ptr_= zero_init )
	{
		unsafe
		{
			if( !val.empty() )
			{
				// TODO - do not call "get_ref", because it checks value.
				ptr_= $<( cast_ref</T/>( val.get_ref() ) );
			}
			move_into_nowhere( move(val) );
		}
	}
	
	// Construct with value, taken from box of compatible type.
	template</ type U />
	fn enable_if( !is_same_type</T, U/>() && is_ancestor_for</T, U/>() )
	conversion_constructor( mut this, box</U/> mut val )
	( ptr_= zero_init )
	{
		unsafe
		{
			// TODO - do not call "get_ref", because it checks value.
			ptr_= $<( cast_ref</T/>( val.get_ref() ) ); // Convert reference here.
			move_into_nowhere( move(val) );
		}
	}

	// box is NOT copyable, because copying required memory allocation. Copying must be done manually.

	fn destructor()
	{
		if( !empty() )
		{
			unsafe
			{
				call_destructor( $>(ptr_) );
				memory_free( polymorph_restore_original_ref( $>(ptr_) ) );
			}
		}
	}

	fn get_ref( mut this ) : T &mut
	{
		halt if( empty() );
		unsafe{  return get_ref_unsafe();  }
	}

	fn get_ref( imut this ) : T &imut
	{
		halt if( empty() );
		unsafe{  return get_ref_unsafe();  }
	}

	fn get_ref_unsafe( mut this ) unsafe : T &mut
	{
		unsafe{  return $>(ptr_);  }
	}

	fn get_ref_unsafe( imut this ) unsafe : T &imut
	{
		unsafe{  return $>(ptr_);  }
	}

	fn empty( this )  : bool
	{
		return ptr_ == nullptr</T/>();
	}

	fn reset( mut this )
	{
		if( !empty() )
		{
			unsafe
			{
				call_destructor( $>(ptr_) );
				memory_free( polymorph_restore_original_ref( $>(ptr_) ) );
				ptr_= nullptr</T/>();
			}
		}
	}

	fn reset( mut this, T mut val )
	{
		unsafe
		{
			if( empty() )
			{
				ptr_= $<( cast_ref_unsafe</T/>( memory_allocate( typeinfo</T/>.size_of ) ) );
				move_unsafe</T/>( $>(ptr_), move(val) );
			}
			else
			{
				$>(ptr_)= move(val);
			}
		}
	}

private:
	fn check_type()
	{
		static_assert( typeinfo</T/>.references_tags_count == 0s );
	}

	type element_type_for_shared_check= T;

private:
	$(T) ptr_;
}

struct box_nullable_hasher
{
	template</ type T />
	fn hash( box_nullable</T/>& b ) : size_type
	{
		if_var( &value : b )
		{
			return default_hasher::hash(value);
		}
		return size_type(0);
	}
}

template</ type T />
fn to_non_nullable( box_nullable</T/> mut val ) : box</T/>
{
	halt if( val.empty() );
	unsafe
	{
		static_assert( typeinfo</ box</T/> />.size_of == typeinfo</ box_nullable</T/> />.size_of );
		var box</T/> mut result= uninitialized;
		memory_copy( result, val, typeinfo</ box</T/> />.size_of );
		move_into_nowhere( move(val) );
		return move(result);
	}
}

} // namespace ust
