import "pointer.u"
import "container_utils.u"
import "box.u"

namespace ust
{

template</ type T />
class box_nullable
{
public:
	// Default initializer = set to zero.
	fn constructor(){}

	// Construct with value.
	fn constructor( mut this'a...', T mut val'b...' ) ' a <- b '
	{
		unsafe
		{
			ptr_= raw_ptr_mut</ T />( cast_ref_unsafe</T/>( memory_allocate( typeinfo</T/>.size_of ) ) );
			move_unsafe</T/>( ptr_.get_ref(), move(val) );
		}
	}

	// Construct with value, taken from box.
	fn constructor( mut this'a...', box</T/> mut val'b...' ) ' a <- b '
	{
		unsafe
		{
			static_assert( typeinfo</ box</T/> />.size_of == typeinfo</ raw_ptr_mut</T/> />.size_of );
			memory_copy( ptr_, val, typeinfo</ box</T/> />.size_of );
			move_into_nowhere( move(val) );
		}
	}

	// box is NOT copyable, because copying required memory allocation. Copying must be done manually.

	fn destructor()
	{
		if( !empty() )
		{
			unsafe
			{
				call_destructor( ptr_.get_ref() );
				memory_free( ptr_.get_ref() );
			}
		}
	}

	fn get_ref( mut this ) : T &mut
	{
		halt if( empty() );
		unsafe{  return ptr_.get_ref();  }
	}

	fn get_ref( imut this ) : T &imut
	{
		halt if( empty() );
		unsafe{  return ptr_.get_ref();  }
	}

	fn empty( this )  : bool
	{
		return ptr_.is_null();
	}

	fn reset( mut this )
	{
		if( !empty() )
		{
			unsafe
			{
				call_destructor( ptr_.get_ref() );
				memory_free( ptr_.get_ref() );
				ptr_= raw_ptr_mut</T/>();
			}
		}
	}

	fn reset( mut this'a...', T mut val'b...' ) ' a <- b '
	{
		unsafe
		{
			if( empty() )
			{
				ptr_= raw_ptr_mut</ T />( cast_ref_unsafe</T/>( memory_allocate( typeinfo</T/>.size_of ) ) );
				move_unsafe</T/>( ptr_.get_ref(), move(val) );
			}
			else
			{
				ptr_.get_ref()= move(val);
			}
		}
	}

private:
	ContainerTag</ T /> container_tag_;
	raw_ptr_mut</ T /> ptr_;
}

} // namespace ust
