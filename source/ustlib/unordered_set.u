import "unordered_map.u"

namespace ust
{

template</ type T />
class unordered_set
{
public:
	type this_type= unordered_set</ T />;
	type key_type= T;
	type value_type= T;

	static_assert( typeinfo</T/>.is_copy_constructible , "set type should be copyable" );
	static_assert( typeinfo</T/>.is_copy_assignable , "set type should be copyable" );

public:
	// Default constructor.
	fn constructor() = default;
	// Copy constructor.
	fn constructor( mut this, this_type &imut other ) = default;
	// Copy assignment operator.
	op=( mut this, this_type &imut other ) = default;

	fn size( this ) : size_type
	{
		return impl_.size();
	}

	fn empty( this ) : bool
	{
		return impl_.empty();
	}

	fn insert( mut this, T& key )
	{
		impl_.insert( key, void() );
	}

	fn exists( this, T& key ) : bool
	{
		return !impl_.find( key ).empty();
	}

	fn drop( mut this, T& key )
	{
		// TODO - optimize this, do not perform search twice.
		if( exists( key ) )
		{
			impl_.drop(key);
		}
	}

	fn clear( mut this )
	{
		impl_.clear();
	}

	fn iter( this ) : auto
	{
		return wrap_raw_iterator( unordered_set_iterator_raw( impl_.iter() ) );
	}

public:
	class unordered_set_iterator_raw
	{
	public:
		fn constructor( mut this, ImplIter mut impl ) @( reference_notation::pollution::param0_param_1_inner_reference )
			( impl_( move(impl) ) )
		{}

		fn next( mut this )
			: optional_ref_imut</ T /> @( reference_notation::return_inner_references::param0_inner_reference0 )
		{
			auto next_res= impl_.next();
			if( next_res.empty() )
			{
				return null_optional_ref;
			}
			return optional_ref_imut</ T />( next_res.try_deref().key() );
		}

	private:
		type ImplIter= iterator</ Impl::unordered_map_iterator_raw</false/> />;

	private:
		ImplIter impl_;
	}

private:
	type Impl = unordered_map</T, void/>;

private:
	Impl impl_;
}

} // namespace ust
