import "unordered_map.u"

namespace ust
{

template</ type T />
class unordered_set
{
public:
	type this_type= unordered_set</ T />;
	type key_type= T;
	type value_type= T;

	static_assert( typeinfo</T/>.is_copy_constructible , "set type should be copyable" );
	static_assert( typeinfo</T/>.is_copy_assignable , "set type should be copyable" );

public:
	// Default constructor.
	fn constructor() = default;
	// Copy constructor.
	fn constructor( mut this, this_type &imut other ) = default;
	// Copy assignment operator.
	op=( mut this, this_type &imut other ) = default;

	fn size( this ) : size_type
	{
		return impl_.size();
	}

	fn empty( this ) : bool
	{
		return impl_.empty();
	}

	fn insert( mut this, T& key )
	{
		impl_.insert( key, void() );
	}

	fn exists( this, T& key ) : bool
	{
		return !impl_.find( key ).empty();
	}

	fn drop( mut this, T& key )
	{
		// TODO - optimize this, do not perform search twice.
		if( exists( key ) )
		{
			impl_.drop(key);
		}
	}

	fn clear( mut this )
	{
		impl_.clear();
	}

	fn range( this ) : unordered_set_range @( reference_notation::return_inner_references::param0 )
	{
		return unordered_set_range( impl_.range() );
	}

public:
	class unordered_set_range
	{
	public:
		fn constructor( mut this, Impl::unordered_map_range</false/> mut impl ) @( reference_notation::pollution::param0_param_1_inner_reference )
			( impl_( move(impl) ) )
		{}

		fn size( this ) : size_type
		{
			return impl_.size();
		}

		fn empty( this ) : bool
		{
			return impl_.empty();
		}

		fn drop_front( mut this )
		{
			return impl_.drop_front();
		}

		fn drop_front_unchecked( mut this ) unsafe
		{
			unsafe{  return impl_.drop_front_unchecked();  }
		}

		fn front( this ) : T & @( reference_notation::return_references::param0_inner_reference0 )
		{
			return impl_.front().key();
		}

		fn front_unchecked( this ) unsafe : T & @( reference_notation::return_references::param0_inner_reference0 )
		{
			unsafe{  return impl_.front_unchecked().key();  }
		}

	private:
		Impl::unordered_map_range</false/> impl_;
	}

private:
	type Impl = unordered_map</T, void/>;

private:
	Impl impl_;
}

} // namespace ust
