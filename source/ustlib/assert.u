import "helpers.u"

?macro <? assert:block ( ?e:expr ?m:opt<? , ?message:expr ?> ) ?term:opt<? ; ?> ?> ->
<?
{
	if( !(?e) )
	{
		?m<? ::ust::assert_impl::process_assert_message( ?message ); ?>
		halt;
	}
}
?>

?macro <? debug_assert:block ( ?e:expr ?m:opt<? , ?message:expr ?> ) ?term:opt<? ; ?> ?> ->
<?
{
	// Enable debug assert only without any optimizations.
	// Use non-static if with constexpr expression in order to compile the assert expression, but avoiding executing it.
	if( ::compiler::options::optimization_level == "0"c8 )
	{
		assert( ?e ?m<? , ?message ?> )
	}
}
?>

namespace ust
{

namespace assert_impl
{

template</type T/> fn process_assert_message( T& message )
{
	// TODO - print message into cerr.
	ignore_unused(message);
}

} // namespace assert_impl

} // namespace ust
