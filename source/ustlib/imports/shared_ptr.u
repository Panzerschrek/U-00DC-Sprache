import "alloc.u"
import "container_utils.u"
import "hash_apply.u"
import "polymorph.u"

namespace ust
{

template</ type T, bool is_nullable, bool is_mutable />
class shared_ptr_base non_sync
{
	static_assert( typeinfo</T/>.reference_tag_count == 0s, "this container doesn't support types with references inside" );

public:
	// Default constructor. Exists only for nullable shared_ptr.
	fn enable_if(is_nullable) constructor()= default;

	// Construct with value.
	fn constructor( T mut value )
	{
		storage_= unsafe( storage_type( move(value) ) );
	}

	// Constructor for nullable ptr from non-nullable ptr.
	fn enable_if( is_nullable ) conversion_constructor( mut this, shared_ptr_base</T, false, is_mutable/>& ptr )
		( storage_= unsafe( ptr.get_storage() ) )
	{
		unsafe
		{
			auto counter_ptr= storage_.get_counter_ptr();
			shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_total );
			shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_strong );
		}
	}

	// Constructor for immutable ptr from mutable ptr.
	fn enable_if( !is_mutable ) conversion_constructor( mut this, shared_ptr_base</T, is_nullable, true/>& ptr )
		( storage_= unsafe( ptr.get_storage() ) )
	{
		if( !ptr.empty() )
		{
			unsafe
			{
				auto counter_ptr= storage_.get_counter_ptr();
				shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_total );
				shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_strong );
			}
		}
	}

	// Constructor for immutable nullable ptr from mutable non-nullable ptr.
	fn enable_if( is_nullable && !is_mutable ) conversion_constructor( mut this, shared_ptr_base</T, false, true/>& ptr )
		( storage_= unsafe( ptr.get_storage() ) )
	{
		unsafe
		{
			auto counter_ptr= storage_.get_counter_ptr();
			shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_total );
			shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_strong );
		}
	}

	// Copy constructor.
	fn constructor( mut this, this_type &imut other )
		( storage_= unsafe( other.get_storage() ) )
	{
		if( !empty() )
		{
			unsafe
			{
				auto counter_ptr= storage_.get_counter_ptr();
				shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_total );
				shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_strong );
			}
		}
	}

	// Construct from shared_ptr of compatible type.
	template</ type U />
	fn enable_if( !same_type</T, U/> && is_ancestor_for</T, U/>() )
	conversion_constructor( mut this, shared_ptr_base</U, is_nullable, is_mutable/>& ptr )
	{
		unsafe
		{
			if( !ptr.empty() )
			{
				storage_= storage_type( ptr.get_storage() );
				auto counter_ptr= storage_.get_counter_ptr();
				shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_total );
				shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_strong );
			}
		}
	}

	fn destructor()
	{
		if( empty() ) { return; }
		unsafe
		{
			auto counter_ptr= storage_.get_counter_ptr();

			shared_ptr_impl::counter_dec( $>(counter_ptr).use_count_strong );
			if( $>(counter_ptr).use_count_strong == 0u )
			{
				call_destructor( $>( storage_.get_value_ptr() ) );
			}

			shared_ptr_impl::counter_dec( $>(counter_ptr).use_count_total );
			if( $>(counter_ptr).use_count_total == 0u )
			{
				// Free counter together with initial allocated object.
				memory_free( ptr_cast_to_byte8( counter_ptr ) );
			}
		}
	}

	// Copy-assignment operator.
	op=( mut this, this_type &imut other )
	{
		// Call copy constructor for other and move-assign copy to this.
		this= this_type(other);
	}

	fn enable_if(is_nullable) reset( mut this )
	{
		// Move value ot out "this", call destructor for it, construct default value in place of "this".
		take(this);
	}

	fn reset( mut this, T mut value )
	{
		this= this_type( move(value) );
	}

	fn empty( this ) : bool
	{
		static_if( is_nullable )
		{
			return is_nullptr( unsafe( storage_.get_counter_ptr() ) );
		}
		else
		{
			return false;
		}
	}

	// Checked conversion to non-nullable from nullable.
	fn enable_if(is_nullable) try_to_non_nullable( this ) : shared_ptr_base</T, false, is_mutable/>
	{
		halt if(empty());

		unsafe
		{
			auto counter_ptr= storage_.get_counter_ptr();

			// It's almost impossible to get counter overflow here - so, ignore such possibility.
			shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_total );
			shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_strong );
			return shared_ptr_base</T, false, is_mutable/>( storage_ );
		}
	}

	// Lock operations.

	fn enable_if(is_nullable && is_mutable) try_lock_mut( this ) : lock_mut_t @( reference_notation::return_inner_references::param0 )
	{
		halt if( empty() );
		return unsafe( lock_mut_unchecked() );
	}

	fn enable_if(is_nullable) try_lock_imut( this ) : lock_imut_t @( reference_notation::return_inner_references::param0 )
	{
		halt if( empty() );
		return unsafe( lock_imut_unchecked() );
	}

	fn enable_if(!is_nullable && is_mutable) lock_mut( this ) : lock_mut_t @( reference_notation::return_inner_references::param0 )
	{
		return unsafe( lock_mut_unchecked() );
	}

	fn enable_if(!is_nullable) lock_imut( this ) : lock_imut_t @( reference_notation::return_inner_references::param0 )
	{
		return unsafe( lock_imut_unchecked() );
	}

	fn enable_if(is_mutable) lock_mut_unchecked( this ) unsafe : lock_mut_t @( reference_notation::return_inner_references::param0 )
	{
		return unsafe( lock_mut_t ( storage_.get_value_ptr(), storage_.get_counter_ptr() ) );
	}

	fn lock_imut_unchecked( this ) unsafe : lock_imut_t @( reference_notation::return_inner_references::param0 )
	{
		return unsafe( lock_imut_t( storage_.get_value_ptr(), storage_.get_counter_ptr() ) );
	}

	// Compare.

	op==( this_type& l, this_type& r ) : bool
	{
		// Just compare counter pointers.
		return unsafe( l.storage_.get_counter_ptr() ) == unsafe( r.storage_.get_counter_ptr() );
	}

	// Hashing.
	template</type Hasher/>
	fn hash( this, Hasher &mut hasher )
	{
		// Just hash counter pointer value.
		apply_value_to_hasher( hasher, unsafe( storage_.get_counter_ptr() ) );
	}

public: // Methods for internal usage.
	fn get_storage( this ) unsafe : storage_type
	{
		return storage_;
	}

	// Counter must be incremented before this constructor call.
	fn constructor( storage_type storage ) unsafe
	( storage_(storage) )
	{}

private:
	type this_type= shared_ptr_base</ T, is_nullable, is_mutable />;
	type value_ptr= $(T);
	type counter_ptr= $(shared_ptr_impl::counter);
	type lock_mut_t = shared_ptr_impl::lock_mut </T/>;
	type lock_imut_t= shared_ptr_impl::lock_imut</T/>;

	type storage_type= shared_ptr_impl::shared_ptr_storage</T/>;

private:
	storage_type storage_;
}

template</ type T, bool is_mutable />
class weak_ptr_base non_sync
{
public:
	fn constructor()= default;

	// Construct from non-nullable immutable shared_ptr.
	fn enable_if(!is_mutable) conversion_constructor( shared_ptr_base</ T, false, false/>& ptr )
		( storage_= unsafe( ptr.get_storage() ) )
	{
		unsafe
		{
			shared_ptr_impl::counter_inc( $>( storage_.get_counter_ptr() ).use_count_total );
		}
	}

	// Construct from non-nullable mutable shared_ptr.
	fn conversion_constructor( shared_ptr_base</ T, false, true/>& ptr )
		( storage_= unsafe( ptr.get_storage() ) )
	{
		unsafe
		{
			shared_ptr_impl::counter_inc( $>( storage_.get_counter_ptr() ).use_count_total );
		}
	}

	// Construct from nullable immutable shared_ptr.
	fn enable_if(!is_mutable) conversion_constructor( shared_ptr_base</ T, true, false/>& ptr )
		( storage_= unsafe( ptr.get_storage() ) )
	{
		unsafe
		{
			auto counter_ptr= storage_.get_counter_ptr();
			if( !is_nullptr(counter_ptr) )
			{
				shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_total );
			}
		}
	}

	// Construct from nullable mutable shared_ptr.
	fn conversion_constructor( shared_ptr_base</ T, true, true/>& ptr )
		( storage_= unsafe( ptr.get_storage() ) )
	{
		unsafe
		{
			auto counter_ptr= storage_.get_counter_ptr();
			if( !is_nullptr(counter_ptr) )
			{
				shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_total );
			}
		}
	}

	// Construct from weak_ptr of compatible type.
	template</ type U />
	fn enable_if( !same_type</T, U/> && is_ancestor_for</T, U/>() )
	conversion_constructor( mut this, weak_ptr_base</U, is_mutable/>& ptr )
	{
		unsafe
		{
			auto counter_ptr= ptr.get_storage().get_counter_ptr();
			if( !is_nullptr(counter_ptr) )
			{
				storage_= storage_type( ptr.get_storage() );
				shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_total );
			}
		}
	}

	// Copy constructor.
	fn constructor( mut this, this_type &imut other )
		( storage_= unsafe( other.get_storage() ) )
	{
		unsafe
		{
			auto counter_ptr= storage_.get_counter_ptr();
			if( !is_nullptr(counter_ptr) )
			{
				shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_total );
			}
		}
	}

	fn destructor()
	{
		unsafe
		{
			auto counter_ptr= storage_.get_counter_ptr();
			if( !is_nullptr(counter_ptr) )
			{
				shared_ptr_impl::counter_dec( $>(counter_ptr).use_count_total );
				if( $>(counter_ptr).use_count_total == 0u )
				{
					memory_free( ptr_cast_to_byte8( counter_ptr ) );
				}
			}
		}
	}

	op=( mut this, this_type &imut other )
	{
		// Call copy constructor for other and move-assign copy to this.
		this= this_type(other);
	}

	fn reset( mut this )
	{
		// Move value ot out "this", call destructor for it, construct default value in place of "this".
		take(this);
	}

	fn lock( this ) : shared_ptr_type
	{
		unsafe
		{
			auto counter_ptr= storage_.get_counter_ptr();
			if( is_nullptr(counter_ptr) || $>(counter_ptr).use_count_strong == 0u )
			{
				return shared_ptr_type();
			}
			shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_total );
			shared_ptr_impl::counter_inc( $>(counter_ptr).use_count_strong );
			return shared_ptr_type( storage_ );
		}
	}

public: // Methods for internal usage.
	fn get_storage( this ) unsafe : storage_type
	{
		return storage_;
	}

private:
	type this_type= weak_ptr_base</ T, is_mutable />;
	type shared_ptr_type= shared_ptr_base</ T, true, is_mutable />;
	type value_ptr= $(T);
	type counter_ptr= $(shared_ptr_impl::counter);
	type lock_mut_t = shared_ptr_impl::lock_mut </T/>;
	type lock_imut_t= shared_ptr_impl::lock_imut</T/>;

	type storage_type= shared_ptr_impl::shared_ptr_storage</T/>;

private:
	storage_type storage_;
}

// All necessary type aliases.

template</type T/> type shared_ptr_imut= shared_ptr_base</T, false, false/>;
template</type T/> type shared_ptr_mut= shared_ptr_base</T, false, true/>;
template</type T/> type shared_ptr_nullable_imut= shared_ptr_base</T, true, false/>;
template</type T/> type shared_ptr_nullable_mut= shared_ptr_base</T, true, true/>;
template</type T/> type weak_ptr_imut= weak_ptr_base</T, false/>;
template</type T/> type weak_ptr_mut= weak_ptr_base</T, true/>;

// Helper function for shared_ptr construction.
template</type T/>
fn make_shared_ptr( T mut value ) : shared_ptr_mut</T/>
{
	return shared_ptr_mut</T/>( move(value) );
}

namespace shared_ptr_impl
{

// TODO - rename counter to control block.
struct counter
{
	u32 use_count_total;
	u32 use_count_strong; // always <= use_count_total
	i32 lock_count; // 0 - not locked, positive value - locked as imut, -1 - locked as mut.
}

fn counter_inc( u32& mut c )
{
	// It's almost impossible to get counter overflow here - so, ignore such possibility.
	++c;
}

fn counter_dec( u32& mut c )
{
	// Normally overflow is not possible here.
	--c;
}

template</ type T />
class lock_mut nodiscard
{
public:
	fn constructor( mut this, $(T) v, $(counter) c ) unsafe
		( value_(v), counter_(c) )
	{
		unsafe
		{
			halt if( $>(counter_).lock_count != 0 ); // halt if have any locks
			$>(counter_).lock_count= -1;
		}
	}

	fn destructor()
	{
		unsafe{  $>(counter_).lock_count= 0;  }
	}

	// Mark reference by "this" tag, instead of inner tag, for prevention of "lock" destruction.
	fn deref( mut this ) : T & mut @( reference_notation::return_references::param0 )
	{
		return unsafe( $>( value_ ) );
	}

private:
	// Use this tag in order to mark lock class as reference-contained.
	// It contains actually a logical reference to source shared_ptr - "counter".
	ReferenceContainerTag</ counter, false /> shared_ptr_ref_tag_;

	$(T) value_;
	$(counter) counter_;
}

template</ type T />
class lock_imut nodiscard
{
public:
	fn constructor( mut this, $(T) v, $(counter) c ) unsafe
		( value_(v), counter_(c) )
	{
		unsafe
		{
			halt if( $>(counter_).lock_count < 0 ); // halt if have mutable locks
			// It's almost impossible to get counter overflow here - so, ignore such possibility.
			++$>(counter_).lock_count;
		}
	}

	fn destructor()
	{
		unsafe{  --$>(counter_).lock_count;  }
	}

	// Mark reference by "this" tag, instead of inner tag, for prevention of "lock" destruction.
	fn deref( this ) : T &imut @( reference_notation::return_references::param0 )
	{
		return unsafe( $>( value_ ) );
	}

private:
	// Use this tag in order to mark lock class as reference-contained.
	// It contains actually a logical reference to source shared_ptr - "counter".
	ReferenceContainerTag</ counter, false /> shared_ptr_ref_tag_;

	$(T) value_;
	$(counter) counter_;
}

template</type T/>
class shared_ptr_storage
{
public:
	fn constructor()= default;

	fn constructor( T mut value ) unsafe
	{
		unsafe
		{
			// Allocate counter and object in single allocation.
			// Counter goes first, than goes the object itself (with proper alignment).
			// The only disadvantage of this approach is that memory isn't freed if a weak_ptr instance is still alive.
			auto constexpr counter_size= typeinfo</ shared_ptr_impl::counter />.size_of;
			auto constexpr object_size= typeinfo</T/>.size_of;
			auto constexpr object_alignment= typeinfo</T/>.align_of;
			auto constexpr object_offset= (counter_size + (object_alignment - 1s)) / object_alignment * object_alignment;
			static_assert(object_offset % object_alignment == 0s);
			auto constexpr allocation_size= object_offset + object_size;

			var $(byte8) mem= memory_allocate( allocation_size );

			counter_= byte_ptr_cast</ shared_ptr_impl::counter />( mem );
			$>(counter_).use_count_total= 1u;
			$>(counter_).use_count_strong= 1u;
			$>(counter_).lock_count= 0;

			value_= byte_ptr_cast</T/>( mem + object_offset );
			move_into_uninitialized( $>(value_), move(value) );
		}
	}

	// Construct from storage for compatible type.
	template</ type U />
	fn enable_if( !same_type</T, U/> && is_ancestor_for</T, U/>() )
	constructor( mut this, shared_ptr_storage</U/>& storage ) unsafe
	{
		unsafe
		{
			auto counter_ptr= storage.get_counter_ptr();
			if( !is_nullptr( counter_ptr ) )
			{
				counter_= counter_ptr;
				value_= $<( cast_ref</T/>( $>( storage.get_value_ptr() ) ) );
			}
		}
	}

	fn constructor( shared_ptr_storage</T/>& other )= default;

	op=( mut this, shared_ptr_storage</T/>& other )= default;

	fn get_counter_ptr(this) unsafe : $(counter)
	{
		return counter_;
	}

	fn get_value_ptr(this) unsafe : $(T)
	{
		return value_;
	}

private:
	$(counter) counter_= zero_init;
	$(T) value_= zero_init;
}

} // namespace shared_ptr_impl

} // namespace ust
