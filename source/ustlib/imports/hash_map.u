import "alloc.u"
import "container_utils.u"
import "iterator.u"
import "hasher.u"
import "hash_apply.u"
import "minmax.u"
import "optional.u"
import "optional_ref.u"

namespace ust
{

// A hash-table implementation for specified keys and values.
// Key value should be equality-comparable and hashable.
// All fundamental types and scalars are hashable.
// Many standard library classes are also hashable.
// Arrays, tuples, simple structs may be also hashed automatically.
// If this doesn't work, you need to implement hashing method for your key type or its parts, like this:
//
// template</type Hasher/>
// fn hash( this, Hasher &mut hasher )
// {
//     // call here "ust::apply_value_to_hasher" for fields needed to be hashed
// }
//
// Iteration order is unspecified and may be different for different instances of the same hash_map type or even
// for the same instance.
//
// The third optional template argument is a hasher factory class.
// It's needed mainly to allow to tune hash-function on per-container basis.
// If it's not specified, default hasher factory is used, which creates "default_hasher" instances.
//
// Internally this container is implemented as an open-addressing hash-table with linear probing.
// It uses two different tables - control table and storage table.
// Control table element is single byte indicated table slot state and (sometimes) containing a small portion of hash.
// Storage table stores just pairs of keys and values.
// Using separate control table reduces cache-locality of hash_map operations and saves sometimes some memory for padding.
// Overall overhead is only 1 byte per hash-table slot (ignoring, of course, unoccupied slots).
//
// TODO - speed-up probing on insertion, deletion and search using SIMD instructions or something similar.
//
template</ type K, type V, type HF />
class hash_map</ K, V, HF= default_hasher_factory />
{
public:
	type key_type= K;
	type value_type= V;
	type this_type= hash_map</ key_type, value_type />;

	static_assert( typeinfo</K/>.is_copy_constructible, "key type should be copyable" );
	static_assert( typeinfo</K/>.is_copy_assignable, "key type should be copyable" );
	// Can't use type with references inside since we use "optional_ref" for search.
	static_assert( typeinfo</K/>.reference_tag_count == 0s, "this container doesn't support types with references inside" );
	static_assert( typeinfo</V/>.reference_tag_count == 0s, "this container doesn't support types with references inside" );

public:
	// Default constructor.
	fn constructor()= default;

	// Copy constructor.
	fn enable_if( typeinfo</V/>.is_copy_constructible )
	constructor( mut this, this_type &imut other )
	{
		if( other.capacity_ == 0s )
		{
			return;
		}

		unsafe
		{
			var $(hash_map_impl::ControlTableElement) other_control_table= other.get_control_table();
			var $(TableValue) other_data_table= other.get_data_table();

			for( var size_type mut i(0); i < other.capacity_; ++i )
			{
				if( ( size_type( $>( other_control_table + i ) ) & hash_map_impl::c_control_element_non_value_bit ) == 0s )
				{
					auto &mut table_value= $>( other_data_table + i );
					safe( this.insert_or_update( table_value.key_storage, table_value.value_storage ) );
				}
			}
		}
	}

	fn destructor()
	{
		clear();
		// "clear" call should free memory.
	}

	// Copy assignment operator.
	op enable_if( typeinfo</V/>.is_copy_constructible )
	=( mut this, this_type &imut other )
	{
		this= this_type(other);
	}

	fn size( this ) : size_type
	{
		return size_;
	}

	fn empty( this ) : bool
	{
		return size_ == 0s;
	}

	// Equality compare - returns true if both maps contains the same values.
	op enable_if( typeinfo</V/>.is_equality_comparable )
	==( this_type& l, this_type& r ) : bool
	{
		if( l.size() != r.size() )
		{
			return false;
		}
		if( l.empty() )
		{
			return true;
		}

		// Iterate over "l" table and check if all elements present are also present in "r".

		var $(hash_map_impl::ControlTableElement) control_table_l= l.get_control_table();
		var $(TableValue) data_table_l= l.get_data_table();

		unsafe
		{
			for( auto mut i= 0s; i < l.capacity_; ++i )
			{
				if( ( size_type( $>( control_table_l + i ) ) & hash_map_impl::c_control_element_non_value_bit ) == 0s )
				{
					var TableValue& table_value_l= $>( data_table_l + i );
					var TableValuePtr table_value_ptr_r= cast_mut(r).find_key( table_value_l.key_storage );
					if( is_nullptr( table_value_ptr_r ) )
					{
						return false;
					}
					auto& value_ref_l= table_value_l.value_storage;
					auto& value_ref_r= $>(table_value_ptr_r).value_storage;
					if( safe( value_ref_l != value_ref_r ) )
					{
						return false;
					}
				}
			}
		}

		return true;
	}

	// Insert a value for given key.
	// If there is already a value for given key, preserve it and discard new value.
	// Returns "true" if value was inserted and "false" if it was discarded.
	template</type GivenKeyType/>
	fn insert_new( mut this, GivenKeyType& key, value_type mut value ) : bool
	{
		unsafe( try_rehash_on_insert() );

		var $(hash_map_impl::ControlTableElement) control_table= get_control_table();
		var $(TableValue) data_table= get_data_table();

		auto capacity_mask= capacity_ - 1s;
		auto key_hash= calculate_hash(key);
		auto hash2= hash_map_impl::get_hash2( key_hash );
		auto mut key_hash_wrapped= hash_map_impl::get_hash1( key_hash ) & capacity_mask;
		auto mut insert_index= ~0s;

		unsafe
		{
			loop
			{
				var hash_map_impl::ControlTableElement cell_content= $>( control_table + key_hash_wrapped );
				if( cell_content == hash_map_impl::c_contents_empty )
				{
					// Finally reached an empty cell. This means that we insert new value.

					++size_; // Size overflow is impossible here - previous container size can't be greater than half of address space.

					// Insert new value into place of tombstone (if it exists) or in this empty cell.
					if( insert_index == ~0s )
					{
						insert_index= key_hash_wrapped;
						++num_occupied_slots_;
					}

					$>( control_table + insert_index )= hash_map_impl::ControlTableElement( hash2 );

					auto &mut dst_value= $>( data_table + insert_index );
					move_into_uninitialized( dst_value.key_storage, key );
					move_into_uninitialized( dst_value.value_storage, move(value) );
					return true;
				}
				else if( cell_content == hash_map_impl::c_contents_value_removed )
				{
					// Remember first tombstone position in order to perform insertion into it.
					// We need to select the first one in order to minimize probing sequence on lookup.
					if( insert_index == ~0s )
					{
						insert_index= key_hash_wrapped;
					}
				}
				else if( size_type(cell_content) == hash2 )
				{
					// If hash2 is equal to stored hash2 value, we are likely found a matching value.
					// Compare keys to be sure.
					auto &mut dst_value= $>( data_table + key_hash_wrapped );
					if( safe( key == cast_imut(dst_value).key_storage ) )
					{
						return false;
					}
				}

				key_hash_wrapped= ( key_hash_wrapped + 1s ) & capacity_mask;

				// Eventually we should finish this loop, since we should have at least one empty cell.
			}
		}
	}

	// Insert a value for given key.
	// If there is already a value for given key, replace it with new value.
	// Returns "true" if value was inserted and "false" if existing value was updated.
	template</type GivenKeyType/>
	fn insert_or_update( mut this, GivenKeyType& key, value_type mut value ) : bool
	{
		unsafe( try_rehash_on_insert() );

		var $(hash_map_impl::ControlTableElement) control_table= get_control_table();
		var $(TableValue) data_table= get_data_table();

		auto capacity_mask= capacity_ - 1s;
		auto key_hash= calculate_hash(key);
		auto hash2= hash_map_impl::get_hash2( key_hash );
		auto mut key_hash_wrapped= hash_map_impl::get_hash1( key_hash ) & capacity_mask;
		auto mut insert_index= ~0s;

		unsafe
		{
			loop
			{
				var hash_map_impl::ControlTableElement cell_content= $>( control_table + key_hash_wrapped );
				if( cell_content == hash_map_impl::c_contents_empty )
				{
					// Finally reached an empty cell. This means that we insert new value.

					++size_; // Size overflow is impossible here - previous container size can't be greater than half of address space.

					// Insert new value into place of tombstone (if it exists) or in this empty cell.
					if( insert_index == ~0s )
					{
						insert_index= key_hash_wrapped;
						++num_occupied_slots_;
					}

					$>( control_table + insert_index )= hash_map_impl::ControlTableElement( hash2 );

					auto &mut dst_value= $>( data_table + insert_index );
					move_into_uninitialized( dst_value.key_storage, key );
					move_into_uninitialized( dst_value.value_storage, move(value) );
					return true;
				}
				else if( cell_content == hash_map_impl::c_contents_value_removed )
				{
					// Remember first tombstone position in order to perform insertion into it.
					// We need to select the first one in order to minimize probing sequence on lookup.
					if( insert_index == ~0s )
					{
						insert_index= key_hash_wrapped;
					}
				}
				else if( size_type(cell_content) == hash2 )
				{
					// If hash2 is equal to stored hash2 value, we are likely found a matching value.
					// Compare keys to be sure.
					auto &mut dst_value= $>( data_table + key_hash_wrapped );
					if( safe( key == cast_imut(dst_value).key_storage ) )
					{
						dst_value.value_storage= move(value);
						return false;
					}
				}

				key_hash_wrapped= ( key_hash_wrapped + 1s ) & capacity_mask;

				// Eventually we should finish this loop, since we should have at least one empty cell.
			}
		}
	}

	// Find a value for given key.
	// If there is no such key, call the given function to construct new value and insert it into the container.
	template</type Func, type GivenKeyType/>
	fn find_or_construct_new( mut this, GivenKeyType& key, Func mut construction_func ) : value_type &mut @( reference_notation::return_references::param0 )
	{
		unsafe( try_rehash_on_insert() );

		var $(hash_map_impl::ControlTableElement) control_table= get_control_table();
		var $(TableValue) data_table= get_data_table();

		auto capacity_mask= capacity_ - 1s;
		auto key_hash= calculate_hash(key);
		auto hash2= hash_map_impl::get_hash2( key_hash );
		auto mut key_hash_wrapped= hash_map_impl::get_hash1( key_hash ) & capacity_mask;
		auto mut insert_index= ~0s;

		unsafe
		{
			loop
			{
				var hash_map_impl::ControlTableElement cell_content= $>( control_table + key_hash_wrapped );
				if( cell_content == hash_map_impl::c_contents_empty )
				{
					// Finally reached an empty cell. This means that we insert new value.

					++size_; // Size overflow is impossible here - previous container size can't be greater than half of address space.

					// Insert new value into place of tombstone (if it exists) or in this empty cell.
					if( insert_index == ~0s )
					{
						insert_index= key_hash_wrapped;
						++num_occupied_slots_;
					}

					$>( control_table + insert_index )= hash_map_impl::ControlTableElement( hash2 );

					var value_type mut value= safe( move(construction_func)() ); // Call given function to create new value.

					auto &mut dst_value= $>( data_table + insert_index );
					move_into_uninitialized( dst_value.key_storage, key );
					move_into_uninitialized( dst_value.value_storage, move(value) );
					return dst_value.value_storage;
				}
				else if( cell_content == hash_map_impl::c_contents_value_removed )
				{
					// Remember first tombstone position in order to perform insertion into it.
					// We need to select the first one in order to minimize probing sequence on lookup.
					if( insert_index == ~0s )
					{
						insert_index= key_hash_wrapped;
					}
				}
				else if( size_type(cell_content) == hash2 )
				{
					// If hash2 is equal to stored hash2 value, we are likely found a matching value.
					// Compare keys to be sure.
					auto &mut dst_value= $>( data_table + key_hash_wrapped );
					if( safe( key == cast_imut(dst_value).key_storage ) )
					{
						return dst_value.value_storage;
					}
				}

				key_hash_wrapped= ( key_hash_wrapped + 1s ) & capacity_mask;

				// Eventually we should finish this loop, since we should have at least one empty cell.
			}
		}
	}

	// Find a value for given key.
	// If there is no such key, construct new value using default constructor.
	template</type GivenKeyType/>
	fn enable_if( typeinfo</value_type/>.is_default_constructible )
	find_or_construct_default( mut this, GivenKeyType& key ) : value_type &mut @( reference_notation::return_references::param0 )
	{
		return find_or_construct_new( key, lambda() : value_type { return value_type(); } );
	}

	// Removes value for given key and returns it.
	// Halts if value not found.
	template</type GivenKeyType/>
	fn nodiscard remove_existing( mut this, GivenKeyType& key ) : value_type
	{
		if( empty() )
		{
			halt;
		}

		unsafe( try_rehash_on_remove() );

		var $(hash_map_impl::ControlTableElement) control_table= get_control_table();
		var $(TableValue) data_table= get_data_table();

		auto capacity_mask= capacity_ - 1s;
		auto key_hash= calculate_hash(key);
		auto hash2= hash_map_impl::get_hash2( key_hash );
		auto mut key_hash_wrapped= hash_map_impl::get_hash1( key_hash ) & capacity_mask;

		unsafe
		{
			loop
			{
				var hash_map_impl::ControlTableElement &mut cell_content= $>( control_table + key_hash_wrapped );
				if( cell_content == hash_map_impl::c_contents_empty )
				{
					// End search if reached an empty cell.
					halt;
				}
				else if( size_type(cell_content) == hash2 )
				{
					// If hash2 is equal to stored hash2 value, we are likely found a matching value.
					// Compare keys to be sure.
					auto &mut table_value= $>(data_table + key_hash_wrapped);
					if( safe( key == cast_imut(table_value).key_storage ) )
					{
						if( $>( control_table + ( ( key_hash_wrapped + 1s ) & capacity_mask ) ) == hash_map_impl::c_contents_empty )
						{
							// If next cell is empty, we can mark this cell as empty too without breaking any probing chain.
							// TODO - try to remove also tombstones prior to this cell.
							cell_content= hash_map_impl::c_contents_empty;
							--num_occupied_slots_;
						}
						else
						{
							// Place a tombstone here to preserve probing chain.
							cell_content= hash_map_impl::c_contents_value_removed;
						}
						--size_;

						// Destroy stored key.
						call_destructor( table_value.key_storage );

						// Take and return stored value.
						var value_type mut r= uninitialized;
						memory_copy_aligned( typeinfo</ typeof(table_value.value_storage) />.align_of, ptr_cast_to_byte8( $<(r) ), ptr_cast_to_byte8( $<(table_value.value_storage) ), typeinfo</ typeof(table_value.value_storage) />.size_of );
						return r;
					}
				}

				key_hash_wrapped= ( key_hash_wrapped + 1s ) & capacity_mask;

				// Eventually we should finish this loop, since we should have at least one empty cell.
			}
		}
	}

	// Removes value for given key and returns it, if it exists.
	// Returns empty optional if value not found.
	template</type GivenKeyType/>
	fn nodiscard remove_if_exists( mut this, GivenKeyType& key ) : optional</value_type/>
	{
		if( empty() )
		{
			return null_optional;
		}

		unsafe( try_rehash_on_remove() );

		var $(hash_map_impl::ControlTableElement) control_table= get_control_table();
		var $(TableValue) data_table= get_data_table();

		auto capacity_mask= capacity_ - 1s;
		auto key_hash= calculate_hash(key);
		auto hash2= hash_map_impl::get_hash2( key_hash );
		auto mut key_hash_wrapped= hash_map_impl::get_hash1( key_hash ) & capacity_mask;

		unsafe
		{
			loop
			{
				var hash_map_impl::ControlTableElement &mut cell_content= $>( control_table + key_hash_wrapped );
				if( cell_content == hash_map_impl::c_contents_empty )
				{
					// End search if reached an empty cell.
					return null_optional;
				}
				else if( size_type(cell_content) == hash2 )
				{
					// If hash2 is equal to stored hash2 value, we are likely found a matching value.
					// Compare keys to be sure.
					auto &mut table_value= $>(data_table + key_hash_wrapped);
					if( safe( key == cast_imut(table_value).key_storage ) )
					{
						if( $>( control_table + ( ( key_hash_wrapped + 1s ) & capacity_mask ) ) == hash_map_impl::c_contents_empty )
						{
							// If next cell is empty, we can mark this cell as empty too without breaking any probing chain.
							// TODO - try to remove also tombstones prior to this cell.
							cell_content= hash_map_impl::c_contents_empty;
							--num_occupied_slots_;
						}
						else
						{
							// Place a tombstone here to preserve probing chain.
							cell_content= hash_map_impl::c_contents_value_removed;
						}
						--size_;

						// Destroy stored key.
						call_destructor( table_value.key_storage );

						// Take and return stored value.
						var value_type mut r= uninitialized;
						memory_copy_aligned( typeinfo</ typeof(table_value.value_storage) />.align_of, ptr_cast_to_byte8( $<(r) ), ptr_cast_to_byte8( $<(table_value.value_storage) ), typeinfo</ typeof(table_value.value_storage) />.size_of );
						return optional</value_type/>( move(r) );
					}
				}

				key_hash_wrapped= ( key_hash_wrapped + 1s ) & capacity_mask;

				// Eventually we should finish this loop, since we should have at least one empty cell.
			}
		}
	}

	// Removes given key, if it existis.
	// Returns "true" if value was removed and "false" otherwise.
	template</type GivenKeyType/>
	fn drop_if_exists( mut this, GivenKeyType& key ) : bool
	{
		if( empty() )
		{
			return false;
		}

		unsafe( try_rehash_on_remove() );

		var $(hash_map_impl::ControlTableElement) control_table= get_control_table();
		var $(TableValue) data_table= get_data_table();

		auto capacity_mask= capacity_ - 1s;
		auto key_hash= calculate_hash(key);
		auto hash2= hash_map_impl::get_hash2( key_hash );
		auto mut key_hash_wrapped= hash_map_impl::get_hash1( key_hash ) & capacity_mask;

		unsafe
		{
			loop
			{
				var hash_map_impl::ControlTableElement &mut cell_content= $>( control_table + key_hash_wrapped );
				if( cell_content == hash_map_impl::c_contents_empty )
				{
					// End search if reached an empty cell.
					return false;
				}
				else if( size_type(cell_content) == hash2 )
				{
					// If hash2 is equal to stored hash2 value, we are likely found a matching value.
					// Compare keys to be sure.
					auto &mut table_value= $>(data_table + key_hash_wrapped);
					if( safe( key == cast_imut(table_value).key_storage ) )
					{
						if( $>( control_table + ( ( key_hash_wrapped + 1s ) & capacity_mask ) ) == hash_map_impl::c_contents_empty )
						{
							// If next cell is empty, we can mark this cell as empty too without breaking any probing chain.
							// TODO - try to remove also tombstones prior to this cell.
							cell_content= hash_map_impl::c_contents_empty;
							--num_occupied_slots_;
						}
						else
						{
							// Place a tombstone here to preserve probing chain.
							cell_content= hash_map_impl::c_contents_value_removed;
						}
						--size_;

						// Destroy both key and value.
						call_destructor( table_value.key_storage );
						call_destructor( table_value.value_storage );

						return true;
					}
				}

				key_hash_wrapped= ( key_hash_wrapped + 1s ) & capacity_mask;

				// Eventually we should finish this loop, since we should have at least one empty cell.
			}
		}
	}

	// Run given function for all present elements.
	// Given function should have two arguments - immutable reference to key and mutable reference to value.
	// Elements for which given function returned "false" are removed.
	template</type Func/>
	fn retain( mut this, Func& func )
	{
		if( empty() )
		{
			return;
		}

		var $(hash_map_impl::ControlTableElement) control_table= get_control_table();
		var $(TableValue) data_table= get_data_table();
		auto capacity_mask= capacity_ - 1s;

		unsafe
		{
			for( auto mut i= 0s; i < capacity_; ++i )
			{
				var hash_map_impl::ControlTableElement &mut cell_content= $>( control_table + i );
				if( ( size_type( cell_content ) & hash_map_impl::c_control_element_non_value_bit ) == 0s )
				{
					auto &mut table_value= $>( data_table + i );

					// TODO - prevent possible reference pollution in such call.
					var bool should_preserve=
						safe( func(
							cast_imut(table_value.key_storage), // Make sure given function doesn't modify the key.
							table_value.value_storage ) );

					if( !should_preserve )
					{
						if( $>( control_table + ( ( i + 1s ) & capacity_mask ) ) == hash_map_impl::c_contents_empty )
						{
							// If next cell is empty, we can mark this cell as empty too without breaking any probing chain.
							// TODO - try to remove also tombstones prior to this cell.
							cell_content= hash_map_impl::c_contents_empty;
							--num_occupied_slots_;
						}
						else
						{
							// Place a tombstone here to preserve probing chain.
							cell_content= hash_map_impl::c_contents_value_removed;
						}

						--size_;

						// Destroy both key and value.
						call_destructor( table_value.key_storage );
						call_destructor( table_value.value_storage );
					}
				}
			}

			// If many elements were removed, it makes sense to reduce table size.
			try_rehash_on_remove();
		}
	}

	// Check if given key exists in this hash_map.
	template</type GivenKeyType/>
	fn exists( this, GivenKeyType& key ) : bool
	{
		return !is_nullptr( unsafe( cast_mut(this).find_key( key ) ) );
	}

	template</type GivenKeyType/>
	fn find( imut this, GivenKeyType& key ) : optional_ref_imut</ value_type /> @( reference_notation::return_inner_references::param0 )
	{
		return unsafe( cast_mut(this).find(key) );
	}

	template</type GivenKeyType/>
	fn find(  mut this, GivenKeyType& key ) : optional_ref_mut</ value_type /> @( reference_notation::return_inner_references::param0 )
	{
		unsafe
		{
			var TableValuePtr table_value_ptr= find_key( key );
			if( !is_nullptr(table_value_ptr) )
			{
				return $>(table_value_ptr).value_storage;
			}
		}

		return null_optional_ref;
	}

	template</type GivenKeyType/>
	op[](  mut this, GivenKeyType& key ) : value_type & mut @( reference_notation::return_references::param0 )
	{
		return find(key).try_deref(); // "try_deref" will halt, if "find" returns empty result.
	}

	template</type GivenKeyType/>
	op[]( imut this, GivenKeyType& key ) : value_type &imut @( reference_notation::return_references::param0 )
	{
		return find(key).try_deref(); // "try_deref" will halt, if "find" returns empty result.
	}

	fn clear( mut this )
	{
		if( is_nullptr(ptr_) )
		{
			return;
		}

		// In case of "clear" operation not olny destroy stored elements but also free table memory.
		// It's necessary in case if someone tries to iterate this "hash_map" instance after clearing.
		// It may be very slow, if table is still there.

		var $(hash_map_impl::ControlTableElement) control_table= get_control_table();
		var $(TableValue) data_table= get_data_table();

		unsafe
		{
			for( auto mut i= 0s; i < capacity_; ++i )
			{
				if( ( size_type( $>( control_table + i ) ) & hash_map_impl::c_control_element_non_value_bit ) == 0s )
				{
					auto &mut table_value= $>( data_table + i );
					call_destructor( table_value.key_storage );
					call_destructor( table_value.value_storage );
				}
			}

			memory_free( ptr_ );
			ptr_= nullptr</byte8/>();
			capacity_= 0s;
			size_= 0s;
			num_occupied_slots_= 0s;
		}
	}

	// "iter" methods are declared as zero-param templates to instantiate them lazily and thus avoid instantiation of iterator classes where it isn't necessary.

	template<//>
	fn iter( imut this ) : auto
	{
		return wrap_raw_iterator( raw_iterator</false/>( this ) );
	}

	template<//>
	fn iter(  mut this ) : auto
	{
		return wrap_raw_iterator( raw_iterator</true />( this ) );
	}

private:

	// Call this function only from "insert_*" methods.
	fn try_rehash_on_insert( mut this ) unsafe
	{
		static_assert( c_min_non_zero_capacity % hash_map_impl::c_max_loading_factor_denominator == 0s );
		var size_type max_occupancy= capacity_ / hash_map_impl::c_max_loading_factor_denominator * hash_map_impl::c_max_loading_factor_numerator;

		// Trigger rehashing using not size, but the number of occupied slots, considering one more slot is needed for new value.
		// Do this in order to have not so many occupied slots (values and tombstones),
		// since having too many of them slows-down lookup/insertion.
		if( (num_occupied_slots_ + 1s) > max_occupancy )
		{
			// Rehashing is required, since load factor is exceeded.
			// Trigger it, requesting size for all current elements plus newly-inserted element.
			// Additionaly add extra place for some tombstones, if current table contains them, this may be needed in cases
			// when values are added and removed.
			var size_type num_tombstones= num_occupied_slots_ - size_;
			var size_type new_size= size_ + 1s + ( num_tombstones >> 1u );
			unsafe( rehash( new_size ) );
		}
	}

	// Call this function only from "remove*" and "drop_*" methods.
	fn try_rehash_on_remove( mut this ) unsafe
	{
		// Calculate minimum occupancy.
		// Perform division first to avoid overflow.
		// Result may be rounded down and be even 0, which is mostly fine.
		var size_type min_occupancy= capacity_ / hash_map_impl::c_min_loading_factor_denominator * hash_map_impl::c_min_loading_factor_numerator;

		// A workaround for cases where "hash_map" contained many elements but now almost all of them are removed.
		// In such case iteration may be very slow.
		// Perform rehash on erase if size is several times less than capacity, in order to prevent such performance drops.
		if( size_ < min_occupancy && // Use "<" here in to avoid rehashing if size_ == 0 and min_occupancy == 0.
			capacity_ > c_min_non_zero_capacity )
		{
			var size_type size= size_;
			unsafe( rehash( size ) );
		}
	}

	// Performs unconditional rehashing.
	// New size should not be less than current size.
	fn rehash( mut this,size_type new_size ) unsafe
	{
		var size_type mut new_capacity= hash_map_impl::calculate_capacity_for_given_size( new_size );

		max_assign( new_capacity, c_min_non_zero_capacity );

		unsafe // reallocate table and rehash.
		{
			// Allocate and initialize new table.

			auto new_capacity_mask= new_capacity - 1s;

			// it's impossible to add more than one key into hash map in one call.
			// Because of that it's impossible to get sizeof * capacity multiplication overflow here.
			// Maximum allocation limit will be reached first.
			auto new_ptr= memory_allocate( new_capacity + new_capacity * typeinfo</TableValue/>.size_of );
			auto new_control_table= byte_ptr_cast</ hash_map_impl::ControlTableElement />( new_ptr );
			auto new_data_table= byte_ptr_cast</TableValue/>( new_ptr + new_capacity );

			for( auto mut i= 0s; i < new_capacity; ++i )
			{
				$>( new_control_table + i )= hash_map_impl::c_contents_empty;
			}

			// Move content of old table into new table.
			if( !is_nullptr(ptr_) )
			{
				var $(hash_map_impl::ControlTableElement) control_table= get_control_table();
				var $(TableValue) data_table= get_data_table();

				for( auto mut i= 0s; i < capacity_; ++i )
				{
					if( ( size_type( $>(control_table + i) ) & hash_map_impl::c_control_element_non_value_bit ) == 0s )
					{
						auto &mut old_value= $>(data_table + i);

						// Insert value into new table.
						auto key_hash= safe( calculate_hash( old_value.key_storage ) );
						auto hash2= safe( hash_map_impl::get_hash2( key_hash ) );
						auto mut key_hash_wrapped= hash_map_impl::get_hash1( key_hash ) & new_capacity_mask;
						loop
						{
							var hash_map_impl::ControlTableElement &mut cell_content= $>( new_control_table + key_hash_wrapped );
							if( cell_content == hash_map_impl::c_contents_empty )
							{
								cell_content= hash_map_impl::ControlTableElement( hash2 );

								auto &mut new_value= $>( new_data_table + key_hash_wrapped );
								memory_copy_aligned( typeinfo</ key_type   />.align_of, ptr_cast_to_byte8( $<(new_value.key_storage   ) ), ptr_cast_to_byte8( $<( old_value.key_storage   ) ), typeinfo</ key_type   />.size_of );
								memory_copy_aligned( typeinfo</ value_type />.align_of, ptr_cast_to_byte8( $<(new_value.value_storage ) ), ptr_cast_to_byte8( $<( old_value.value_storage ) ), typeinfo</ value_type />.size_of );
								break; // We must find value, bacause new_capacity >= size_
							}
							key_hash_wrapped= ( key_hash_wrapped + 1s ) & new_capacity_mask;
						}
					}
				} // for all old table.

				// All value moved, so, we can free old memory.
				memory_free( ptr_ );
			}

			capacity_= new_capacity;
			ptr_= new_ptr;
			num_occupied_slots_= size_; // After rehashing we have no tombstones, so the number of occupied slots is equal to number of stored elements.
		}
	}

	// Returns bucket for specific key. Returns 'null', if key not found.
	template</type GivenKeyType/>
	fn find_key( mut this, GivenKeyType& key ) : TableValuePtr
	{
		if( empty() ){ return nullptr</TableValue/>(); }

		var $(hash_map_impl::ControlTableElement) control_table= get_control_table();
		var $(TableValue) data_table= get_data_table();

		auto capacity_mask= capacity_ - 1s;
		auto key_hash= calculate_hash(key);
		auto hash2= hash_map_impl::get_hash2( key_hash );
		auto mut key_hash_wrapped= hash_map_impl::get_hash1( key_hash ) & capacity_mask;

		unsafe
		{
			loop
			{
				var hash_map_impl::ControlTableElement cell_content= $>( control_table + key_hash_wrapped );
				if( cell_content == hash_map_impl::c_contents_empty )
				{
					// End search if reached an empty cell.
					return nullptr</TableValue/>();
				}
				else if( size_type(cell_content) == hash2 )
				{
					// If hash2 is equal to stored hash2 value, we are likely found a matching value.
					// Compare keys to be sure.
					auto &mut table_value= $>( data_table + key_hash_wrapped );
					if( safe( key == cast_imut(table_value).key_storage ) )
					{
						return $<( table_value );
					}
				}

				key_hash_wrapped= ( key_hash_wrapped + 1s ) & capacity_mask;

				// Eventually we should finish this loop, since we should have at least one empty cell.
			}
		}
	}

	fn get_control_table( this ) : $(hash_map_impl::ControlTableElement)
	{
		// Control table goes first.
		return unsafe( byte_ptr_cast</ hash_map_impl::ControlTableElement />( ptr_ ) );
	}

	fn get_data_table( this ) : $(TableValue)
	{
		// Data table follows after control table.
		// Each element of the control table is just a byte.
		// It's ensured that capacity_ is selected so that result values table is properly aligned.
		return unsafe( byte_ptr_cast</TableValue/>( ptr_ + capacity_ ) );
	}

	fn calculate_hash( this, key_type& key ) : size_type
	{
		auto mut hasher= hasher_factory_();
		apply_value_to_hasher( hasher, key );
		return hasher.get();
	}

public:
	// Iterator element classes - for immutable and mutable iteration.
	// They are needed to wrap TableValue nicely.

	class iterator_element_imut
	{
		fn constructor( mut this, TableValue &imut table_value ) @( reference_notation::pollution::param0_param_1_reference )
			( table_value_(table_value) )
			{}

		fn constructor( mut this, iterator_element_imut& other )= default;

		fn key( this ) : key_type & @( reference_notation::return_references::param0_inner_reference0 )
		{
			return table_value_.key_storage;
		}

		fn value( this ) : value_type &imut @( reference_notation::return_references::param0_inner_reference0 )
		{
			return table_value_.value_storage;
		}

	private:
		TableValue &imut table_value_;
	}

	class iterator_element_mut
	{
		fn constructor( mut this, TableValue & mut table_value ) @( reference_notation::pollution::param0_param_1_reference )
			( table_value_(table_value) )
			{}

		fn constructor( mut this, iterator_element_mut& other )= default;

		fn key( this ) : key_type & @( reference_notation::return_references::param0_inner_reference0 )
		{
			return table_value_.key_storage;
		}

		fn value( this ) : value_type & mut @( reference_notation::return_references::param0_inner_reference0 )
		{
			return table_value_.value_storage;
		}

	private:
		TableValue & mut table_value_;
	}

	// Iterator for hash_map.
	// Internally this iterator basically scans hash table and returns contents of non-empty cells.
	// It finishes when it reaches the table end.
	template</ bool is_mutable />
	class raw_iterator
	{
	public:
		// These constructors are safe, since they assume that passed "hash_map" is always in valid state.

		fn enable_if( is_mutable )
		constructor( this_type & mut m ) @( reference_notation::pollution::param0_param_1_reference )
			( control_table_( m.get_control_table() ), table_( m.get_data_table() ), capacity_(m.capacity_) )
		{}

		fn enable_if( !is_mutable )
		constructor( this_type &imut m ) @( reference_notation::pollution::param0_param_1_reference )
			( control_table_( m.get_control_table() ), table_( m.get_data_table() ), capacity_(m.capacity_) )
		{}

		fn constructor( mut this, raw_iterator</is_mutable/>& other )= default;

		fn nodiscard enable_if( is_mutable )
		next( mut this )
			: optional</ iterator_element_mut /> @( reference_notation::return_inner_references::param0_inner_reference0 )
		{
			advance_to_next_element();
			if( capacity_ == 0s )
			{
				return null_optional;
			}
			unsafe
			{
				var optional</ iterator_element_mut /> res( iterator_element_mut( $>(table_) ) );
				drop_front_unchecked();
				return res;
			}
		}

		fn nodiscard enable_if( !is_mutable )
		next( mut this )
			: optional</ iterator_element_imut /> @( reference_notation::return_inner_references::param0_inner_reference0 )
		{
			advance_to_next_element();
			if( capacity_ == 0s )
			{
				return null_optional;
			}
			unsafe
			{
				var optional</ iterator_element_imut /> res( iterator_element_imut( $>(table_) ) );
				drop_front_unchecked();
				return res;
			}
		}

	private:
		fn advance_to_next_element( mut this )
		{
			while( capacity_ > 0s &&
				( size_type( unsafe( $>(control_table_) ) ) & hash_map_impl::c_control_element_non_value_bit ) != 0s )
			{
				unsafe
				{
					++control_table_;
					++table_;
				}
				--capacity_;
			}
		}

		// Precondition - end is not reached.
		fn drop_front_unchecked( mut this ) unsafe
		{
			unsafe
			{
				++control_table_;
				++table_;
			}
			--capacity_;
		}

	private:
		ReferenceContainerTag</ this_type, is_mutable /> reference_tag_; // Logically hold a reference to the source container.
		$(hash_map_impl::ControlTableElement) control_table_;
		TableValuePtr table_;
		size_type capacity_;
	}

private:
	// Storage array value.
	// Constructors and destructors are usually called manually.
	struct TableValue
	{
		key_type key_storage;
		value_type value_storage;
	}

	type TableValuePtr= $(TableValue);

	// Use minimum non-zero capacity 8 in order to simplify some calculations.
	// If alignment of the table value is bigger than 8, require capacity equal to this alignment - in order to calculate data table pointer porperly,
	// using simple formula "ptr_ + capacity_".
	var size_type constexpr c_min_non_zero_capacity= ( typeinfo</TableValue/>.align_of > 8s ? typeinfo</TableValue/>.align_of : 8s );

private:
	ContainerTag</ tup[ K, V ] /> key_value_tag_;

	HF hasher_factory_;

	// Control table following by data table.
	// Store it as raw byte8 pointer to avoid possible TBAA mistakes, cast it to proper pointer types later.
	$(byte8) ptr_= zero_init;

	size_type size_(0);
	size_type num_occupied_slots_(0); // size + number of tombstones.
	size_type capacity_(0); // Always must be power of two.
}

namespace hash_map_impl
{

// Loading factor representing in form numerator/denominator.
// Greater loading factor means longer lookup chains and thus longer lookup times.
// Smaller loading factor means faster lookups but more memory consumption.
// It can be increased if lookup algorithm is optimized.
var size_type constexpr c_max_loading_factor_numerator= 5s;
var size_type constexpr c_max_loading_factor_denominator= 8s;
static_assert( ( c_max_loading_factor_denominator & ( c_max_loading_factor_denominator - 1s ) ) == 0s, "Denominator should be power of two!" );

var size_type constexpr c_min_loading_factor_numerator= 1s;
var size_type constexpr c_min_loading_factor_denominator= 16s;
static_assert( ( c_min_loading_factor_denominator & ( c_min_loading_factor_denominator - 1s ) ) == 0s, "Denominator should be power of two!" );

// Each element of the control table is a byte.
// Its most significant bit is 0 if a table slot stores a value and 1 otherwise.
// For slots storing a value lower 7 bits are used to store some small hash portion.

type ControlTableElement= u8;

var ControlTableElement c_contents_empty		( 0b10000000u );
var ControlTableElement c_contents_value_removed( 0b11111111u );
var size_type c_control_element_non_value_bit	( 0b10000000u );

// On 64-bit systems use upper 57 bits to identify hash-table slot (H1).
// Use lower 7 bits (H2) as extra hash and store it in a control table slot, which helps speeding-up probing by minimizing necessity of proper key comparison.
//
// On 32-bit systems we can't just use upper 25 bits for hash-table slot identifying - it's not enough for large tables.
// So, we use here a different approach - use the whole hash value for hash-table slot identifying and upper 7 bits of it store in a control table slot.
// This effectively reduces number of unqieue bits stored in a control table slot for large tables, but it's still mostly fine.

fn enable_if( typeinfo</size_type/>.size_of == 8s ) get_hash1( size_type h ) : size_type
{
	return h >> 7u;
}

fn enable_if( typeinfo</size_type/>.size_of == 8s ) get_hash2( size_type h ) : size_type
{
	return h & size_type(0x7F);
}

fn enable_if( typeinfo</size_type/>.size_of == 4s ) get_hash1( size_type h ) : size_type
{
	return h;
}

fn enable_if( typeinfo</size_type/>.size_of == 4s ) get_hash2( size_type h ) : size_type
{
	return h  >> 25u;
}

fn calculate_capacity_for_given_size( size_type size ) : size_type
{
	// We require size for "size" elements plus at least one empty slot.
	// Also we shouldn't exceed maximum load factor.
	// Since we perform rounding to nearest power of two, result loading factor is usually less than maximum, which gives some space for further grow.
	// Also perform integer division with rounding-up.
	// Integer overflow on 64-bit platforms is here near impossible, on 32-bit platforms it's impossible considering address space limitation.
	var size_type capacity=
		( ( size + 1s ) * c_max_loading_factor_denominator + c_max_loading_factor_numerator - 1s ) / c_max_loading_factor_numerator;
	return get_nearest_power_of_two_size( capacity );
}

// Used for capacity calculation.
// Round up to nearest power of two.
fn get_nearest_power_of_two_size( size_type s ) : size_type
{
	// TODO - optimize this.
	var size_type mut res= 1s;
	while( res < s )
	{
		res <<= 1u;
	}
	return res;
}

} // namespace hash_map_impl

} // namespace ust
