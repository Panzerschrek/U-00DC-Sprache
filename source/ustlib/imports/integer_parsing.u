import "random_access_range.u"

namespace ust
{

// Extract integer from given range, dropping characters of this integer from start.
// Returns empty optional if failed to parse or faced an overflow.
template</type T/>
fn parse_and_extract_integer( array_view_imut</char8/> &mut range ) : optional</T/>
{
}

// Parse integer at start of given range.
// Returns empty optional if failed to parse or faced an overflow.
template</type T/>
fn parse_integer( array_view_imut</char8/> range ) : optional</T/>
{
}

// Parse the whole range as an integer.
// Returns empty optional if failed to parse or faced an overflow.
// Alse returns empty optional if have symbols trailing.
template</type T/>
fn parse_integer_exact( array_view_imut</char8/> mut range ) : optional</T/>
{
	auto res= parse_integer_impl</T/>( range );
	if( res.empty() )
	{
		return res;
	}
	if( !range.empty() )
	{
		return null_optional;
	}
	return res;
}

template</type T/>
fn parse_integer_impl( array_view_imut</char8/> &mut range ) : optional</T/>
{
	static_if( same_type</T, i32/> )
	{
		return parse_integer_impl_i32( range );
	}
	else static_if( same_type</T, u32/> )
	{
		return parse_integer_impl_u32( range );
	}
	else
	{
		static_assert( false, "Unhandled integer type!" );
	}
}

fn parse_integer_impl_i32( array_view_imut</char8/> &mut range ) : optional</i32/>
{
	if( !range.empty() && range.front() == '-' )
	{
		range.drop_front();
		if_var( res : parse_integer_impl_u32(range) )
		{
			if( res > 2147483648u )
			{
				return null_optional;
			}
			return i32(-res);
		}
	}
	else
	{
		if_var( res : parse_integer_impl_u32(range) )
		{
			if( res > 2147483647u )
			{
				return null_optional;
			}
			return i32(res);
		}
	}
	return null_optional;
}

fn parse_integer_impl_u32( array_view_imut</char8/> &mut range ) : optional</u32/>
{
	if( range.empty() )
	{
		return null_optional;
	}

	var char8 first_char= range.drop_and_get_front();
	if( first_char == '0' )
	{
		return u32(0);
	}
	if( !( first_char >= '1' && first_char <= '9' ) )
	{
		return null_optional;
	}

	var u32 mut result= u32(first_char) - u32('0');
	while( !range.empty() )
	{
		var char8 c= range.front();
		if( c >= '0' && c <= '9' )
		{
			if( result > 429496729u )
			{
				// Overflow detected.
				return null_optional;
			}
			var u32 mul10= result * 10u;
			var u32 add_digit= mul10 + (u32(c) - u32('0'));
			if( add_digit < mul10 )
			{
				// Overflow detected.
				return null_optional;
			}
			result= add_digit;
			range.drop_front();
		}
		else
		{
			break;
		}
	}

	return result;
}

} // namespace ust
