import "random_access_range.u"

namespace ust
{

// Extract integer from given range, dropping characters of this integer from start.
// Returns empty optional if failed to parse or faced an overflow.
template</type T, type C/>
fn parse_and_extract_integer( array_view_imut</C/> &mut range ) : optional</T/>
{
	auto mut range_copy= range;
	auto res= integer_parsing_impl::parse_integer</T/>( range_copy );
	if( !res.empty() )
	{
		range= range_copy;
	}
	return res;
}

// Parse integer at start of given range.
// Returns empty optional if failed to parse or faced an overflow.
template</type T, type C/>
fn parse_integer( array_view_imut</C/> mut range ) : optional</T/>
{
	return integer_parsing_impl::parse_integer</T/>( range );
}

template</type T, type C, size_type S/>
fn parse_integer( [ C, S ] arr ) : optional</T/>
{
	return parse_integer</T/>( array_view_imut</C/>( arr ) );
}

// Parse the whole range as an integer.
// Returns empty optional if failed to parse or faced an overflow.
// Alse returns empty optional if have symbols trailing.
template</type T, type C/>
fn parse_integer_exact( array_view_imut</C/> mut range ) : optional</T/>
{
	auto res= integer_parsing_impl::parse_integer</T/>( range );
	if( res.empty() )
	{
		return res;
	}
	if( !range.empty() )
	{
		return null_optional;
	}
	return res;
}

template</type T, type C, size_type S/>
fn parse_integer_exact( [ C, S ] arr ) : optional</T/>
{
	return parse_integer_exact</T/>( array_view_imut</C/>( arr ) );
}

namespace integer_parsing_impl
{

// Implementation functions, do not use directly!

template</type T, type C/>
fn parse_integer( array_view_imut</C/> &mut range ) : optional</T/>
{
	// Parse integers smaller than 32-bit using 32-bit parser - for simplicity.
	static_if( same_type</T, i8/> )
	{
		if_var( num : parse_integer_i32( range ) )
		{
			if( num < -128 || num > 127 )
			{
				return null_optional;
			}
			return i8(num);
		}
		return null_optional;
	}
	else static_if( same_type</T, u8/> )
	{
		if_var( num : parse_integer_u32( range ) )
		{
			if( num > 255u )
			{
				return null_optional;
			}
			return u8(num);
		}
		return null_optional;
	}
	else static_if( same_type</T, i16/> )
	{
		if_var( num : parse_integer_i32( range ) )
		{
			if( num < -32768 || num > 32767 )
			{
				return null_optional;
			}
			return i16(num);
		}
		return null_optional;
	}
	else static_if( same_type</T, u16/> )
	{
		if_var( num : parse_integer_u32( range ) )
		{
			if( num > 65535u )
			{
				return null_optional;
			}
			return u16(num);
		}
		return null_optional;
	}
	else static_if( same_type</T, i32/> )
	{
		return parse_integer_i32( range );
	}
	else static_if( same_type</T, u32/> )
	{
		return parse_integer_u32( range );
	}
	else static_if( same_type</T, i64/> )
	{
		return parse_integer_i64( range );
	}
	else static_if( same_type</T, u64/> )
	{
		return parse_integer_u64( range );
	}
	else static_if( same_type</T, ssize_type/> )
	{
		if( typeinfo</ssize_type/>.size_of == typeinfo</i32/>.size_of )
		{
			if_var( res : parse_integer_i32( range ) )
			{
				return ssize_type(res);
			}
			return null_optional;
		}
		else
		{
			if_var( res : parse_integer_i64( range ) )
			{
				return ssize_type(res);
			}
			return null_optional;
		}
	}
	else static_if( same_type</T, size_type/> )
	{
		if( typeinfo</size_type/>.size_of == typeinfo</i32/>.size_of )
		{
			if_var( res : parse_integer_u32( range ) )
			{
				return size_type(res);
			}
			return null_optional;
		}
		else
		{
			if_var( res : parse_integer_u64( range ) )
			{
				return size_type(res);
			}
			return null_optional;
		}
	}
	else
	{
		static_assert( false, "Unhandled integer type!" );
	}
}

fn parse_integer_i32( array_view_imut</char8/> &mut range ) : optional</i32/>;
fn parse_integer_i64( array_view_imut</char8/> &mut range ) : optional</i64/>;
fn parse_integer_u32( array_view_imut</char8/> &mut range ) : optional</u32/>;
fn parse_integer_u64( array_view_imut</char8/> &mut range ) : optional</u64/>;

fn parse_integer_i32( array_view_imut</char16/> &mut range ) : optional</i32/>;
fn parse_integer_i64( array_view_imut</char16/> &mut range ) : optional</i64/>;
fn parse_integer_u32( array_view_imut</char16/> &mut range ) : optional</u32/>;
fn parse_integer_u64( array_view_imut</char16/> &mut range ) : optional</u64/>;

fn parse_integer_i32( array_view_imut</char32/> &mut range ) : optional</i32/>;
fn parse_integer_i64( array_view_imut</char32/> &mut range ) : optional</i64/>;
fn parse_integer_u32( array_view_imut</char32/> &mut range ) : optional</u32/>;
fn parse_integer_u64( array_view_imut</char32/> &mut range ) : optional</u64/>;

} // namespace integer_parsing_imp

} // namespace ust
