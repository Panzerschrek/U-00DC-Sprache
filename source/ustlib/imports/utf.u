import "string.u"

// Utilities for working with utf-8, utf-16, utf-32.

namespace ust
{

namespace utf
{

// Push a code point into an UTF-8 sequence.
// TODO - add a version of this function which checks for errors.
fn push_code_point_to_string( string8 &mut str, char32 code_point );

// Push a code point into an UTF-16 sequence.
// TODO - add a version of this function which checks for errors.
fn push_code_point_to_string( string16 &mut str, char32 code_point );

// Push a code point into an UTF-32 sequence.
fn push_code_point_to_string( string32 &mut str, char32 code_point );

// Extract a code point from an UTF-8 sequence (if can) and modify input string view (remove bytes at front forming this code point).
// If can't extract, returns null symbol. In any case given string is advanced, if it isn't empty.
fn extract_code_point_or_null_from_string( string_view8 &mut str ) : char32;

// Extract a code point from an UTF-16 sequence (if can) and modify input string view (remove bytes at front forming this code point).
// If can't extract, returns null symbol. In any case given string is advanced, if it isn't empty.
fn extract_code_point_or_null_from_string( string_view16 &mut str ) : char32;

// Same as for UTF-8 and UTF-16, but just extract one symbol.
fn extract_code_point_or_null_from_string( string_view32 &mut str ) : char32;

// Get a code point from an UTF-8 sequence (if can).
// If can't get, returns null symbol.
fn get_code_point_or_null_from_string( string_view8 str ) : char32;

// Get a code point from an UTF-16 sequence (if can).
// If can't get, returns null symbol.
fn get_code_point_or_null_from_string( string_view16 str ) : char32;

// Same as for UTF-8 and UTF-16, but just get one symbol.
fn get_code_point_or_null_from_string( string_view32 str ) : char32;

} // namespace utf

} // namespace ust
