namespace ust
{

template</type T/>
fn constexpr enable_if( math_impl::is_float</T/>() )
nan() : T
{
	return T(0) / T(0);
}

template</type T/>
fn constexpr enable_if( math_impl::is_float</T/>() )
is_nan( T x ) : bool
{
	return x != x;
}

template</type T/>
fn constexpr enable_if( math_impl::is_float</T/>() )
plus_inf() : T
{
	return T( 1) / T(0);
}

template</type T/>
fn constexpr enable_if( math_impl::is_float</T/>() )
minus_inf() : T
{
	return T(-1) / T(0);
}

template</type T/>
fn constexpr enable_if( math_impl::is_numeric</T/>() )
abs( T x ) : T
{
	return ( x >= T(0) ? x : -x );
}

fn sqrt( f32 x ) : f32 { return ust_sqrt_f32_impl( x ); }
fn sqrt( f64 x ) : f64 { return ust_sqrt_f64_impl( x ); }

fn pow( f32 x, f32 exp ) : f32 { return ust_pow_f32_impl( x, exp ); }
fn pow( f64 x, f64 exp ) : f64 { return ust_pow_f64_impl( x, exp ); }

fn exp( f32 x ) : f32 { return ust_exp_f32_impl( x ); }
fn exp( f64 x ) : f64 { return ust_exp_f64_impl( x ); }

fn exp2( f32 x ) : f32 { return ust_exp2_f32_impl( x ); }
fn exp2( f64 x ) : f64 { return ust_exp2_f64_impl( x ); }

fn expm1( f32 x ) : f32 { return ust_expm1_f32_impl( x ); }
fn expm1( f64 x ) : f64 { return ust_expm1_f64_impl( x ); }

fn log( f32 x ) : f32 { return ust_log_f32_impl( x ); }
fn log( f64 x ) : f64 { return ust_log_f64_impl( x ); }

fn log2( f32 x ) : f32 { return ust_log2_f32_impl( x ); }
fn log2( f64 x ) : f64 { return ust_log2_f64_impl( x ); }

fn log10( f32 x ) : f32 { return ust_log10_f32_impl( x ); }
fn log10( f64 x ) : f64 { return ust_log10_f64_impl( x ); }

fn log1p( f32 x ) : f32 { return ust_log1p_f32_impl( x ); }
fn log1p( f64 x ) : f64 { return ust_log1p_f64_impl( x ); }

fn sin( f32 x ) : f32 { return ust_sin_f32_impl( x ); }
fn sin( f64 x ) : f64 { return ust_sin_f64_impl( x ); }

fn cos( f32 x ) : f32 { return ust_cos_f32_impl( x ); }
fn cos( f64 x ) : f64 { return ust_cos_f64_impl( x ); }

fn tan( f32 x ) : f32 { return ust_tan_f32_impl( x ); }
fn tan( f64 x ) : f64 { return ust_tan_f64_impl( x ); }

fn asin( f32 x ) : f32 { return ust_asin_f32_impl( x ); }
fn asin( f64 x ) : f64 { return ust_asin_f64_impl( x ); }

fn acos( f32 x ) : f32 { return ust_acos_f32_impl( x ); }
fn acos( f64 x ) : f64 { return ust_acos_f64_impl( x ); }

fn atan( f32 x ) : f32 { return ust_atan_f32_impl( x ); }
fn atan( f64 x ) : f64 { return ust_atan_f64_impl( x ); }

fn atan2( f32 y, f32 x ) : f32 { return ust_atan2_f32_impl( y, x ); }
fn atan2( f64 y, f64 x ) : f64 { return ust_atan2_f64_impl( y, x ); }

// round downward
fn floor( f32 x ) : f32 { return ust_floor_f32_impl( x ); }
fn floor( f64 x ) : f64 { return ust_floor_f64_impl( x ); }

// round upward
fn ceil( f32 x ) : f32 { return ust_ceil_f32_impl( x ); }
fn ceil( f64 x ) : f64 { return ust_ceil_f64_impl( x ); }

// round to nearest integer
fn round( f32 x ) : f32 { return ust_round_f32_impl( x ); }
fn round( f64 x ) : f64 { return ust_round_f64_impl( x ); }

// round toward zero
fn trunc( f32 x ) : f32 { return ust_trunc_f32_impl( x ); }
fn trunc( f64 x ) : f64 { return ust_trunc_f64_impl( x ); }

// Fused multiply-add. Result = x * y + z.
fn fma( f32 x, f32 y, f32 z ) : f32 { return ust_fma_f32_impl( x, y, z ); }
fn fma( f64 x, f64 y, f64 z ) : f64 { return ust_fma_f64_impl( x, y, z ); }

//
// Byte swap functions. TODO - maybe move them into another file?
//

fn constexpr swap_bytes( u8 x ) : u8
{
	return x;
}

fn constexpr swap_bytes( i8 x ) : i8
{
	return x;
}

fn constexpr swap_bytes( byte8 x ) : byte8
{
	return x;
}

fn constexpr swap_bytes( u16 x ) : u16
{
	// LLVM optimizer is smart enough to replace this code with native byte swapping instruction, if it's available.
	return u16( ( u32(x) >> 8u ) | ( u32(x) << 8u ) );
}

fn constexpr swap_bytes( i16 x ) : i16
{
	return i16( swap_bytes( u16(x) ) );
}

fn constexpr swap_bytes( byte16 x ) : byte16
{
	return byte16( swap_bytes( u16(x) ) );
}

fn constexpr swap_bytes( u32 x ) : u32
{
	// LLVM optimizer is smart enough to replace this code with native byte swapping instruction, if it's available.
	return ( x >> 24u ) | ( ( x >> 8u ) & 0x0000FF00u ) | ( ( x << 8u ) & 0x00FF0000u ) | ( x << 24u );
}

fn constexpr swap_bytes( i32 x ) : i32
{
	return i32( swap_bytes( u32(x) ) );
}

fn constexpr swap_bytes( byte32 x ) : byte32
{
	return byte32( swap_bytes( u32(x) ) );
}

fn constexpr swap_bytes( u64 x ) : u64
{
	return
		( ( x >> 56u ) & 0x00000000000000FFu64 ) |
		( ( x >> 40u ) & 0x000000000000FF00u64 ) |
		( ( x >> 24u ) & 0x0000000000FF0000u64 ) |
		( ( x >>  8u ) & 0x00000000FF000000u64 ) |
		( ( x <<  8u ) & 0x000000FF00000000u64 ) |
		( ( x << 24u ) & 0x0000FF0000000000u64 ) |
		( ( x << 40u ) & 0x00FF000000000000u64 ) |
		( ( x << 56u ) & 0xFF00000000000000u64 );
}

fn constexpr swap_bytes( i64 x ) : i64
{
	return i64( swap_bytes( u64(x) ) );
}

fn constexpr swap_bytes( byte64 x ) : byte64
{
	return byte64( swap_bytes( u64(x) ) );
}

fn constexpr swap_bytes( ssize_type x ) : ssize_type
{
	static_if( typeinfo</ssize_type/>.size_of == typeinfo</i32/>.size_of )
	{
		return ssize_type( swap_bytes( i32(x) ) );
	}
	else
	{
		return ssize_type( swap_bytes( i64(x) ) );
	}
}

fn constexpr swap_bytes( size_type x ) : size_type
{
	static_if( typeinfo</size_type/>.size_of == typeinfo</u32/>.size_of )
	{
		return size_type( swap_bytes( u32(x) ) );
	}
	else
	{
		return size_type( swap_bytes( u64(x) ) );
	}
}

// TODO:
// * add hyperbolic trigonometric functions
// * add more classification functions - is_finite, is_infinity, is_normal, etc.
// * add more functions - error function, gamma function, etc.
// * add special functions with more precision/performance - lround, remquo, etc.
// * add constants - pi, e, etc.

namespace math_impl
{

template</ type T />
fn constexpr is_float() : bool
{
	static_if( typeinfo</T/>.is_fundamental )
	{
		return typeinfo</T/>.is_float;
	}
	else
	{
		return false;
	}
}

template</ type T />
fn constexpr is_numeric() : bool
{
	static_if( typeinfo</T/>.is_fundamental )
	{
		return typeinfo</T/>.is_numeric;
	}
	else
	{
		return false;
	}
}

} // namespace math_impl

} // namespace ust

// External implementation functions. Do not use directly!

fn nomangle ust_sqrt_f32_impl( f32 x ) : f32;
fn nomangle ust_sqrt_f64_impl( f64 x ) : f64;

fn nomangle ust_pow_f32_impl( f32 x, f32 exp ) : f32;
fn nomangle ust_pow_f64_impl( f64 x, f64 exp ) : f64;

fn nomangle ust_exp_f32_impl( f32 x ) : f32;
fn nomangle ust_exp_f64_impl( f64 x ) : f64;

fn nomangle ust_exp2_f32_impl( f32 x ) : f32;
fn nomangle ust_exp2_f64_impl( f64 x ) : f64;

fn nomangle ust_expm1_f32_impl( f32 x ) : f32;
fn nomangle ust_expm1_f64_impl( f64 x ) : f64;

fn nomangle ust_log_f32_impl( f32 x ) : f32;
fn nomangle ust_log_f64_impl( f64 x ) : f64;

fn nomangle ust_log2_f32_impl( f32 x ) : f32;
fn nomangle ust_log2_f64_impl( f64 x ) : f64;

fn nomangle ust_log10_f32_impl( f32 x ) : f32;
fn nomangle ust_log10_f64_impl( f64 x ) : f64;

fn nomangle ust_log1p_f32_impl( f32 x ) : f32;
fn nomangle ust_log1p_f64_impl( f64 x ) : f64;

fn nomangle ust_sin_f32_impl( f32 x ) : f32;
fn nomangle ust_sin_f64_impl( f64 x ) : f64;

fn nomangle ust_cos_f32_impl( f32 x ) : f32;
fn nomangle ust_cos_f64_impl( f64 x ) : f64;

fn nomangle ust_tan_f32_impl( f32 x ) : f32;
fn nomangle ust_tan_f64_impl( f64 x ) : f64;

fn nomangle ust_asin_f32_impl( f32 x ) : f32;
fn nomangle ust_asin_f64_impl( f64 x ) : f64;

fn nomangle ust_acos_f32_impl( f32 x ) : f32;
fn nomangle ust_acos_f64_impl( f64 x ) : f64;

fn nomangle ust_atan_f32_impl( f32 x ) : f32;
fn nomangle ust_atan_f64_impl( f64 x ) : f64;

fn nomangle ust_atan2_f32_impl( f32 y, f32 x ) : f32;
fn nomangle ust_atan2_f64_impl( f64 y, f64 x ) : f64;

fn nomangle ust_floor_f32_impl( f32 x ) : f32;
fn nomangle ust_floor_f64_impl( f64 x ) : f64;

fn nomangle ust_ceil_f32_impl( f32 x ) : f32;
fn nomangle ust_ceil_f64_impl( f64 x ) : f64;

fn nomangle ust_round_f32_impl( f32 x ) : f32;
fn nomangle ust_round_f64_impl( f64 x ) : f64;

fn nomangle ust_trunc_f32_impl( f32 x ) : f32;
fn nomangle ust_trunc_f64_impl( f64 x ) : f64;

fn nomangle ust_fma_f32_impl( f32 x, f32 y, f32 z ) : f32;
fn nomangle ust_fma_f64_impl( f64 x, f64 y, f64 z ) : f64;
