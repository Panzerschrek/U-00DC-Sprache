import "alloc.u"
import "condition_variable_impl.u"
import "shared_ptr_mt_mutex.u"

namespace ust
{

class condition_variable
{
public:
	fn constructor()
		( cv_= unsafe(
			byte_ptr_cast</ condition_variable_impl::condition_variable_t />(
				memory_allocate( typeinfo</condition_variable_impl::condition_variable_t/>.size_of ) ) ) )
	{
		unsafe( condition_variable_impl::initialize_condition_variable( $>(cv_) ) );
	}

	fn destructor()
	{
		unsafe( condition_variable_impl::destroy_condition_variable( $>(cv_) ) );
	}

	fn notify_one( this )
	{
		unsafe( condition_variable_impl::notify_one_condition_variable( $>(cv_) ) );
	}

	fn notify_all( this )
	{
		unsafe( condition_variable_impl::notify_all_condition_variable( $>(cv_) ) );
	}

	template</type T/>
	fn wait( this, shared_ptr_mt_mutex_impl::lock</T/> &mut l )
	{
		unsafe( condition_variable_impl::wait_condition_variable( $>(cv_), l.get_mutex_ptr() ) );
	}

private:
	$(condition_variable_impl::condition_variable_t) imut cv_;
}

} // namespace ust
