namespace ust
{

class arena_allocator
{
public:
	fn constructor();
	fn destructor();

	fn allocate( this, size_type size_bytes ) unsafe : $(byte8);

private:
	struct internal_state
	{
		$(byte8) current_block;
		size_type current_block_size;
		size_type current_block_position;
		// Store allocated blocks to free them later.
		size_type num_allocated_blocks;
		[ $(byte8), 64 ] allocated_blocks; // TODO - use less blocks, 64 is too many.
	}

	var size_type constexpr c_first_block_size = 128s;

private:
	// Require heap indirection in order to allow allocating in "imut" method.
	$(internal_state) s_;
}

} // namespace ust
