import "duration.u"
import "io_result.u"
import "inet_address.u"
import "native_socket.u"

namespace ust
{

class tcp_stream
{
public:
	// Connect to specified address.
	fn connect( socket_address& a ) : io_result</tcp_stream/>;

	fn constructor( native_socket_fd s ) unsafe; // constructor for internal usage.
	fn destructor();

	// Read into given buffer. May read less than expected and it's not an error. Returns number of bytes read.
	fn read( mut this, array_view_mut</byte8/> buf ) : io_result</size_type/>;

	// Write given buffer. May write less than expected and it's not an error. Returns number of bytes written.
	fn write( mut this, array_view_imut</byte8/> buf ) : io_result</size_type/>;

	// Read into given buffer, without extracting data from steam. May read less than expected and it's not an error. Returns number of bytes read.
	fn peek( mut this, array_view_mut</byte8/> buf ) : io_result</size_type/>;

	// Explicitly close stream (by moving this class instance) and return possible error.
	// This is necessary to handle errors, like if data sent previously wasn't delivered.
	fn close( byval this ) : io_result</void/>;

	// Check if stream is in non-blocking mode.
	fn is_nonblocking( this ) : io_result</bool/>;

	// Set non-blocking mode.
	fn set_nonblocking( mut this, bool nonblocking ) : io_result</void/>;

	// Get address to which this stream is bound.
	fn get_local_address( this ) : io_result</socket_address/>;

	// Get remote address to which this stream is connected.
	fn get_peer_address( this ) : io_result</socket_address/>;

	// Get time to live.
	fn get_ttl( this ) : io_result</u8/>;

	// Set time to live.
	fn set_ttl( mut this, u8 ttl ) : io_result</void/>;

	// Set read timeout for this stream.
	// If it's empty - wait forever.
	// Otherwise may return an error on read operations, if given timeout passes.
	fn set_read_timeout( mut this, optional</duration/> timeout ) : io_result</void/>;

	// Set write timeout for this stream.
	// If it's empty - wait forever.
	// Otherwise may return an error on write operations, if given timeout passes.
	fn set_write_timeout( mut this, optional</duration/> timeout ) : io_result</void/>;

	// Get nodelay property.
	fn get_nodelay( this ) : io_result</bool/>;

	// Set nodelay property.
	fn set_nodelay( mut this, bool nodelay ) : io_result</void/>;

	// Get handle to perform some system-specific operations with it. Do not try to close it!
	fn get_native_fd( this ) unsafe : native_socket_fd;

	// Take native handle and destroy this class instance. Caller is responsible for socket closing.
	fn take_native_fd( byval this ) unsafe : native_socket_fd;

private:
	native_socket_fd socket_;
}

} // namespace ust
