import "file_metadata.u"
import "random_access_range.u"
import "result.u"
import "type_traits.u"

namespace ust
{

enum io_error
{
	permission_denied,
	not_found,
	already_exists,
	other, // Some non-listed error code.
	// TODO - add other errors
}

template</type T/>
type file_result= result</T, io_error/>;

type file_path= array_view_imut</char8/>;

class file_readable
{
public:
	// Open existing file for reading.
	fn open( file_path path ) : file_result</file_readable/>;

public:
	fn constructor( native_file_handle handle ) unsafe; // constructor for internal usage.
	fn destructor();

public:
	fn get_metatada( this ) : file_result</file_metadata/>;

	fn read( mut this, array_view_mut</byte8/> buf ) : file_result</size_type/>;

	// May fail if file is not seekable (sequential).
	fn seek( mut this, u64 offset ) : file_result</void/>;

private:
	native_file_handle handle_;
}

class file_writeable
{
public:
	// Open existing file for writing.
	fn open( file_path path ) : file_result</file_writeable/>;
	// Create file or open an existing file with trunction for writing.
	fn create( file_path path ) : file_result</file_writeable/>;
	// Creates file for writing, but only if it doesn't exist.
	fn create_new( file_path path ) : file_result</file_writeable/>;

public:
	fn constructor( native_file_handle handle ) unsafe; // constructor for internal usage.
	fn destructor();

public:
	fn get_metatada( this ) : file_result</file_metadata/>;

	fn write( mut this, array_view_imut</byte8/> buf ) : file_result</size_type/>;

	// May fail if file is not seekable (sequential).
	fn seek( mut this, u64 offset ) : file_result</void/>;

private:
	native_file_handle handle_;
}

class file_readable_writeable
{
public:
	// Open existing file for reading/writing.
	fn open( file_path path ) : file_result</file_readable_writeable/>;
	// Create file or open an existing file with trunction for reading/writing.
	fn create( file_path path ) : file_result</file_readable_writeable/>;
	// Creates file for reading/writing, but only if it doesn't exist.
	fn create_new( file_path path ) : file_result</file_readable_writeable/>;

public:
	fn constructor( native_file_handle handle ) unsafe; // constructor for internal usage.
	fn destructor();

public:
	fn get_metatada( this ) : file_result</file_metadata/>;

	fn read( mut this, array_view_mut</byte8/> buf ) : file_result</size_type/>;
	fn write( mut this, array_view_imut</byte8/> buf ) : file_result</size_type/>;

	// May fail if file is not seekable (sequential).
	fn seek( mut this, u64 offset ) : file_result</void/>;

private:
	native_file_handle handle_;
}

// Native file handle, in platform-specific format.
type native_file_handle=
	type_select</
		constexpr_string_equals( compiler::target::os, "windows" ),
		$(byte8),
		i32 />;

// Request metadata for given path (file, directory, etc.).
fn get_metadata_for_path( file_path path ) : file_result</file_metadata/>;

// Create a single directory (but only if parent exists).
// Fails if given path exists but it's not a directory.
fn create_directory( file_path path ) : file_result</void/>;

// Remove file or link.
fn remove_file( file_path path ) : file_result</void/>;

// Remove an empty directory.
fn remove_directory( file_path path ) : file_result</void/>;

} // namespace ust
