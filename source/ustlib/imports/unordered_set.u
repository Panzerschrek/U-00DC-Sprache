import "unordered_map.u"

namespace ust
{

template</ type T />
class unordered_set
{
public:
	type this_type= unordered_set</ T />;
	type key_type= T;
	type value_type= T;

	static_assert( typeinfo</T/>.is_copy_constructible , "set type should be copyable" );
	static_assert( typeinfo</T/>.is_copy_assignable , "set type should be copyable" );

	// Factory method for creating unordered_set from given iterator.
	template</type Iterator/>
	fn from_iterator( Iterator mut it ) : auto
	{
		var this_type mut result;
		loop
		{
			auto mut next_result= it.next();
			if( next_result.empty() )
			{
				break;
			}
			result.insert( next_result.try_take() );
		}
		return result;
	}

public:
	// Default constructor.
	fn constructor() = default;
	// Copy constructor.
	fn constructor( mut this, this_type &imut other ) = default;
	// Copy assignment operator.
	op=( mut this, this_type &imut other ) = default;

	fn size( this ) : size_type
	{
		return impl_.size();
	}

	fn empty( this ) : bool
	{
		return impl_.empty();
	}

	op==( this_type& l, this_type& r ) : bool
	{
		return l.impl_ == r.impl_;
	}

	fn insert( mut this, T& key )
	{
		impl_.insert_new( key, void() );
	}

	fn exists( this, T& key ) : bool
	{
		return impl_.exists(key);
	}

	// Removes given key, if it existis.
	// Returns "true" if key was removed and "false" otherwise.
	fn drop_if_exists( mut this, T& key ) : bool
	{
		return impl_.drop_if_exists(key);
	}

	fn clear( mut this )
	{
		impl_.clear();
	}

	// "iter" method is declared as zero-param template to instantiate it lazily and thus avoid instantiation of iterator classes where it isn't necessary.

	template<//>
	fn iter( this ) : auto
	{
		return wrap_raw_iterator( unordered_set_raw_iterator</T/>( impl_.iter() ) );
	}

private:
	type Impl = unordered_map</T, void/>;

private:
	Impl impl_;
}

// Iterator over unordered set.
// Internally it is just a wrapper over unordered_map iterator.
template</type T/>
class unordered_set_raw_iterator
{
public:
	fn constructor( mut this, ImplIter mut impl ) @( reference_notation::pollution::param0_param_1_inner_reference )
		( impl_( move(impl) ) )
	{}

	fn nodiscard next( mut this )
		: optional_ref_imut</ T /> @( reference_notation::return_inner_references::param0_inner_reference0 )
	{
		auto next_res= impl_.next();
		if( next_res.empty() )
		{
			return null_optional_ref;
		}
		return next_res.try_deref().key();
	}

private:
	type ImplIter= iterator</ unordered_map</T, void/>::raw_iterator</false/> />;

private:
	ImplIter impl_;
}


} // namespace ust
