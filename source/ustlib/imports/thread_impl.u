// This file is used internally for low-level thread manipulations.
// Do not use types/functions from this file directly!

import "memory.u"
import "pthread.u"

namespace ust
{

namespace thread_impl
{

type thread_id= size_type;

type thread_start_function= fn( $(byte8) arg ) unsafe : $(byte8);

// Starts a new thread with specified function and its argument.
// Halts if can't start.
fn create_and_start_thread( thread_start_function func, $(byte8) arg ) unsafe : thread_id
{
	unsafe
	{
		var pthread_attr_t mut attr= zero_init;
		var pthread_t mut thread_id(0);

		halt if( ::pthread_attr_init( attr ) != 0 );
		halt if( ::pthread_create( thread_id, attr, func, arg ) != 0 );
		halt if( ::pthread_attr_destroy( attr ) != 0 );

		return thread_id;
	}
}

// Input thread id should be valid and thread shouldn't be joined yet.
fn join_and_destroy_thread( thread_id t ) unsafe
{
	halt if( unsafe( ::pthread_join( t, nullptr</$(byte8)/>() ) ) != 0 );
}

} // namespace thread_impl

} // namespace ust
