import "random_access_range.u"

namespace ust
{

// Some sort of hasher.
// All alternative implementations must have the same interface (implement the same methods).
// The hashing algorithm implemented by this class is determenistic, but isn't portable and may be changed.
// If one needs portable stable hashing, some other hasher implementation should be used instead.
//
// TODO - speed-up and improve this implementation.
//
class default_hasher
{
public:
	// Get current accumulated state.
	fn get( this ) : size_type
	{
		return state_;
	}

	// Reset internal state (discarding all previously accumulated values).
	fn reset( mut this )
	{
		state_= 0s;
	}

	// op() overloading for applying and accumulating scalars.

	op()( mut this, void v )
	{
		write( 0s );
		return v;
	}

	op()( mut this, bool b )
	{
		write( ( b ? 1s : 0s ) );
	}

	op()( mut this, i8 x )
	{
		write( size_type(x) );
	}

	op()( mut this, u8 x )
	{
		write( size_type(x) );
	}

	op()( mut this, i16 x )
	{
		write( size_type(x) );
	}

	op()( mut this, u16 x )
	{
		write( size_type(x) );
	}

	op()( mut this, i32 x )
	{
		write( size_type(x) );
	}

	op()( mut this, u32 x )
	{
		write( size_type(x) );
	}

	op()( mut this, i64 x )
	{
		this( u64(x) );
	}

	op()( mut this, u64 x )
	{
		static_if( typeinfo</i64/>.size_of == typeinfo</size_type/>.size_of )
		{
			write( size_type(x) );
		}
		else
		{
			// Write low and high parts separatly if size_type is 32-bit.
			write( size_type(x) );
			write( size_type( x >> 32u ) );
		}
	}

	op()( mut this, i128 x )
	{
		this( u128(x) );
	}

	op()( mut this, u128 x )
	{
		// Write 128-bit values as pair of 64-bit values.
		this( u64(x) );
		this( u64( x >> 64u ) );
	}

	op()( mut this, size_type x )
	{
		write( x );
	}

	op()( mut this, ssize_type x )
	{
		write( size_type(x) );
	}

	op()( mut this, char8 x )
	{
		write( size_type(x) );
	}

	op()( mut this, char16 x )
	{
		write( size_type(x) );
	}

	op()( mut this, char32 x )
	{
		write( size_type(x) );
	}

	op()( mut this, byte8 x )
	{
		write( size_type(u8(x)) );
	}

	op()( mut this, byte16 x )
	{
		write( size_type(u16(x)) );
	}

	op()( mut this, byte32 x )
	{
		write( size_type(u32(x)) );
	}

	op()( mut this, byte64 x )
	{
		static_if( typeinfo</byte64/>.size_of == typeinfo</size_type/>.size_of )
		{
			write( size_type(x) );
		}
		else
		{
			write( size_type(x) );
			write( size_type( x >> 32u ) );
		}
	}

	op()( mut this, byte128 x )
	{
		this( u128(x) );
	}

	op()( mut this, f32 x )
	{
		// TODO - fix this.
		// Using bitcasts isn't correct, since different bit representations may be equal (+-0).
		this( byte32(x) );
	}

	op()( mut this, f64 x )
	{
		// TODO - fix this.
		// Using bitcasts isn't correct, since different bit representations may be equal (+-0).
		this( byte64(x) );
	}

	// It's necessary to implement methods for byte-ranges, since it may be more effective to hash the whole range, instead to hashing values one by one.

	op()( mut this, array_view_imut</byte8/> range )
	{
		// For now just perform dumb calculation.
		foreach( b : range )
		{
			this( b );
		}
	}

	op()( mut this, array_view_imut</byte16/> range )
	{
		// For now just perform dumb calculation.
		foreach( b : range )
		{
			this( b );
		}
	}

	op()( mut this, array_view_imut</byte32/> range )
	{
		// For now just perform dumb calculation.
		foreach( b : range )
		{
			this( b );
		}
	}

	op()( mut this, array_view_imut</byte64/> range )
	{
		// For now just perform dumb calculation.
		foreach( b : range )
		{
			this( b );
		}
	}

	op()( mut this, array_view_imut</byte128/> range )
	{
		// For now just perform dumb calculation.
		foreach( b : range )
		{
			this( b );
		}
	}

private:
	fn write( mut this, size_type x )
	{
		// Some sort of MurmurHash3.
		// TODO - use 64-bit version if can.

		var u32 mut k( x );
		k*= 0xcc9e2d51u;
		k= (k << 15u ) | (k >> 17u);
		k*= 0x1b873593u;

		var u32 mut s( state_ );
		s ^= u32( k );
		s= (s << 13u ) | (s >> 19u);
		s= s * 5u + 0xe6546b64u;

		state_= size_type(s);
	}

private:
	size_type state_= 0s;
}

} // namespace ust
