import "alloc.u"
import "container_utils.u"
import "optional.u"
import "thread_impl.u"

namespace ust
{

// Given functor should be callable via ().
// Functor classes should have op() with "byval this" or "imut this".
// Function pointers are also supported.
// This class supports function-like objects returning values (references for now are not supported).
// Functors storing references inside are supported.

template</ type Func, type ResultType />
class thread
{
	static_assert( !non_sync</Func/>, "passing non_sync functor into another thread" );

	// Normally it's fine to create a variable holding second order references inside.
	// But it's not fine for the thread class, since second order references may be accessed in another thread created by this class.
	// This may cause race conditions in case if a thread class instance owner tries to access the same variable,
	// which is referenced via second order reference passed to this thread class instance.
	// So, for now just forbid second order references in thread function types, in order to avoid this.
	static_assert( typeinfo</Func/>.reference_indirection_depth <= 1s, "Reference indirection depth greater than 1 isn't supported for the thread class" );

	// For now it's too complex to deal with reference notation, just forbid returning references inside return value.
	static_assert( typeinfo</ResultType/>.reference_tag_count == 0s, "Returning types with references inside isn't supported for the thread class" );

public:
	fn constructor( mut this, Func mut func ) @(c_constructor_pollution)
	( impl_= nullptr</Impl/>() )
	{
		unsafe
		{
			// Allocate and initialize Impl.
			impl_= byte_ptr_cast</Impl/>( memory_allocate( typeinfo</Impl/>.size_of ) );
			var Impl &mut impl= $>(impl_);
			move_into_uninitialized( impl, Impl( move(func) ) );

			// Create system thread.
			impl.thread_handle= thread_impl::create_and_start_thread( thread_function, ptr_cast_to_byte8(impl_) );
		}
	}

	// Thread class is obviously non-copyable.
	fn constructor( mut this, this_type &imut other )= delete;
	op=( mut this, this_type &imut other )= delete;

	// Implement "join" as byval this-call method to enforce user to move thread to join it and avoid calling "join" again.
	fn join( byval mut this ) : ResultType
	{
		unsafe( thread_impl::join_and_destroy_thread( $>(impl_).thread_handle ) );

		auto res= unsafe( $>(impl_) ).result.try_take();

		// Free and zero Impl in order to avoid doing this in destructor.
		unsafe( call_destructor( $>(impl_) ) );
		unsafe( memory_free( ptr_cast_to_byte8( impl_ ) ) );
		impl_= nullptr</Impl/>();

		return res;
	}

	fn destructor()
	{
		if( impl_ != nullptr</Impl/>() )
		{
			// Join it and free Impl if it wasn't done previously.
			unsafe( thread_impl::join_and_destroy_thread( $>(impl_).thread_handle ) );
			unsafe( call_destructor( $>(impl_) ) );
			unsafe( memory_free( ptr_cast_to_byte8( impl_ ) ) );
		}
	}

private:
	type this_type= thread</ Func, ResultType />;
	struct Impl
	{
		optional</Func/> func;
		optional</ResultType/> result;
		thread_impl::thread_handle thread_handle= zero_init;

		fn constructor( Func mut in_func ) @(c_constructor_pollution)
			( func(move(in_func)) )
		{}

		// Run and destroy function, initialize result.
		// This function may be called only once.
		fn run( mut this )
		{
			// Move function in call to support non-copyable byval functors.
			// Function is destroyed just after call.
			result.reset( func.try_take()() );
		}
	}

	auto constexpr c_reference_tag_count= typeinfo</Func/>.reference_tag_count;
	static_assert( typeinfo</Func/>.reference_tag_count == typeinfo</Impl/>.reference_tag_count );

	auto c_constructor_pollution= reference_notation::pollution::param0_param1_all_inner_references</ c_reference_tag_count />();

private:
	auto constexpr is_windows= constexpr_string_equals( compiler::target::os, "windows" );

	fn enable_if(is_windows) thread_function( $(byte8) impl_ptr ) unsafe call_conv("system") : u32
	{
		unsafe( cast_ref_unsafe</Impl/>( $>(impl_ptr) ) ).run();
		return 0u;
	}

	fn enable_if(!is_windows) thread_function( $(byte8) impl_ptr ) unsafe : $(byte8)
	{
		unsafe( cast_ref_unsafe</Impl/>( $>(impl_ptr) ) ).run();
		return nullptr</byte8/>();
	}

private:
	ContainerTag</Impl/> container_tag_;

	// Store content indirectly, because we send raw pointer to it to thread function.
	$(Impl) impl_;
}

// Thread creation helper.
// Return type is deduced based on given function.
template</ type Func />
fn make_thread( Func mut func ) : auto
{
	type ReturnType= typeof( move(func)() );
	return thread</ Func, ReturnType />( move(func) );
}

} // namespace ust
