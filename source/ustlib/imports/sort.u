import "assert.u"
import "compare.u"
import "random_access_range.u"

namespace ust
{

// Generic "is_sorted" overloading for types other than "random_access_range".
// It works only for types with "range" method returing proper "random_access_range" - like "vector" or "string".
template</type T/>
fn is_sorted( T& container ) : bool
{
	return is_sorted( container.range() );
}

// "is_sorted" overloading for arrays.
template</type T, size_type S/>
fn is_sorted( [ T, S ] & arr ) : bool
{
	return is_sorted( random_access_range</T, false/>( arr ) );
}

template</type T/>
fn is_sorted( random_access_range</T, false/> range ) : bool
{
	return is_sorted( range, default_compare</T/>() );
}

// "is_sorted" overloading for mutable ranges.
template</type T/>
fn is_sorted( random_access_range</T, true/> range ) : bool
{
	return is_sorted( random_access_range</T, false/>( range ), default_compare</T/>() );
}

// This function checks if given range is sorted according to given comparator.
// Time complexity is linear.
template</type T, type Compare/>
fn is_sorted( random_access_range</T, false/> range, Compare& comp ) : bool
{
	if( range.size() <= 1s )
	{
		return true;
	}

	for( var size_type mut i= 0s, i_end = range.size() - 1s; i < i_end; ++i )
	{
		// Use unchecked indexing for slightly better performance.
		if( comp( unsafe( range.index_unchecked( i + 1s ) ), unsafe( range.index_unchecked( i ) ) ) )
		{
			return false;
		}
	}

	return true;
}

// "is_sorted_by_key" overloading for containers
template</type T, type KeyProvider/>
fn is_sorted_by_key( T& container, KeyProvider mut key_provider ) : bool
{
	return is_sorted_by_key( container.range(), move(key_provider) );
}

// Check if given range is sorted by key obtained via given key provider function.
// This function accepts a single value and should return a value or a reference with operator <=> defined for its type.
template</type T, type KeyProvider/>
fn is_sorted_by_key( random_access_range</T, false/> range, KeyProvider mut key_provider ) : bool
{
	return is_sorted( range, compare_by_key</T, KeyProvider/>{ .key_provider= move(key_provider) } );
}

// Generic sort overloading for types other than "random_access_range".
// It works only for types with "range" method returing proper "random_access_range" - like "vector" or "string".
template</type T/>
fn sort( T &mut container )
{
	sort( container.range() );
}

// Sorting overloading for arrays.
template</type T, size_type S/>
fn sort( [ T, S ] &mut arr )
{
	sort( random_access_range</T, true/>( arr ) );
}

template</type T/>
fn sort( random_access_range</T, true/> range )
{
	unsafe( sort_impl::do_sort( range.data(), range.data() + range.size(), default_compare</T/>() ) );
}

template</type T, type Compare/>
fn sort( random_access_range</T, true/> range, Compare& comp )
{
	unsafe( sort_impl::do_sort( range.data(), range.data() + range.size(), comp ) );
}

// sort_by_key overloading for containers
template</type T, type KeyProvider/>
fn sort_by_key( T &mut container, KeyProvider mut key_provider )
{
	sort_by_key( container.range(), move(key_provider) );
}

// Sort by key obtained via given key provider function.
// This function accepts a single value and should return a value or a reference with operator <=> defined for its type.
template</type T, type KeyProvider/>
fn sort_by_key( random_access_range</T, true/> range, KeyProvider mut key_provider )
{
	unsafe( sort_impl::do_sort(
		range.data(),
		range.data() + range.size(),
		compare_by_key</T, KeyProvider/>{ .key_provider= move(key_provider) } ) );
}

namespace sort_impl
{

/*
Simple quicksort implementation. Average complexity - O(log(n)), worst case complexity - O(n^2).
 TODO:
 * Use more simple sorting algorithm for small number of elements.
 * Select median element wisely.
*/
// Input pointers should be part of the same memory region (array, vector, etc.). start <= end.
template</type T, type Compare/>
fn do_sort( $(T) mut start, $(T) mut end, Compare& comp ) unsafe
{
	loop
	{
		debug_assert( start <= end );
		auto size= unsafe( end - start );

		if( size <= ssize_type(1) )
		{
			return;
		}
		if( size == ssize_type(2) )
		{
			unsafe
			{
				var T &mut l= $>(start);
				var T &mut r= $>(start + 1);

				if( !safe( comp( cast_imut(l), cast_imut(r) ) ) )
				{
					swap( l, r );
				}
			}
			return;
		}

		unsafe
		{
			if( size >= ssize_type(8) )
			{
				// Try to select middle element trying first, last, middle. Put such middle element at the last position.
				// Doing so we fix quadratic complexity for sorted, almost sorted, reverse-sorted arrays.
				var T &mut first= $>(start);
				var T &mut last= $>(end - 1s);
				var T &mut middle= $>( start + ((end - start) >> 1s) );

				var bool fl= safe( comp( cast_imut(first), cast_imut(last  ) ) );
				var bool lm= safe( comp( cast_imut(last ), cast_imut(middle) ) );
				var bool fm= safe( comp( cast_imut(first), cast_imut(middle) ) );

				if( (fm && !lm) || (!fm && lm) )
				{
					// "middle" is middle.
					swap( last, middle );
				}
				else if( (fl && !fm) || (!fl && fm) )
				{
					// "first" is middle.
					swap( last, first );
				}
				else
				{
					// "last" is middle.
				}
			}

			// Assuming the middle element is at the last position.
			// Compare all elements against it and place them at left or right range part.

			// Perform operations with raw pointers, because it seems to be the fastest way to do so.
			var $(T) last= end - 1s, mut lo= start, mut hi= last;

			loop
			{
				if( safe( comp( cast_imut( unsafe( $>(lo) ) ), cast_imut( unsafe( $>(last) ) ) ) ) )
				{
					++lo;
					if( lo == hi )
					{
						break;
					}
				}
				else
				{
					--hi;
					if( lo == hi )
					{
						break;
					}

					swap( $>(lo), $>(hi) );
				}
			}

			// At end put the middle element at split position.
			if( hi != last )
			{
				swap( $>(hi), $>(last) );
			}

			// TODO - expand middle subrange by cheking if all element are the same.
			// This should speed-up cases with ranges containing a lot of identical elements.

			// Avoid deep recursion. Perform recursive call for smaller range, perform next loop interation for larger range.
			// In both cases process subranges excluding "hi" position, since it now contains the middle element.
			auto mut hi1= hi + 1s;

			while(hi1 < end && !safe( comp( unsafe( $>(hi) ), unsafe( $>(hi1) ) ) ) )
			{
				++hi1;
			}

			if( hi - start < end - hi1 )
			{
				do_sort( start, hi, comp );
				start= hi1;
			}
			else
			{
				do_sort( hi1, end, comp );
				end= hi;
			}
		}
	}
}

} // namespace sort_impl

} // namespace ust
