//##success_test
import "../imports/variant.u"
import "../imports/box.u"
import "../imports/string.u"

class S
{
public:
	// HACK! convert reference to pointer because we can not put struct with reference inside into container.
	fn constructor( i32 &mut x )
		(ptr_= $<(x) )
	{}

	fn destructor()
	{
		unsafe{ $>(ptr_)= 0; }
	}

private:
	$(i32) ptr_;
}

struct DC
{
	i32 x= -1;
	f32 y= 3.14f;
	u64 z(123456);
}

struct IntVec4
{
	[ i32, 4 ] v;
}

// ust::max is not fully constexpr because it returns reference.
fn constexpr ConstexprMax( size_type a, size_type b ) : size_type
{
	if( a > b ){ return a; }
	return b;
}

type IntOrS= ust::variant</ tup[ i32, S ] />;

type VariantU8= ust::variant</ tup[ u8 ] />;
static_assert( typeinfo</ VariantU8 />.size_of == 2s * typeinfo</ u8 />.size_of );
static_assert( typeinfo</ VariantU8 />.align_of == typeinfo</ u8 />.align_of );

type VariantU32= ust::variant</ tup[ u32 ] />;
static_assert( typeinfo</ VariantU32 />.size_of == 2s * typeinfo</ u32 />.size_of );
static_assert( typeinfo</ VariantU32 />.align_of == typeinfo</ u32 />.align_of );

type VariantIntVec4= ust::variant</ tup[ IntVec4 ] />;
static_assert( typeinfo</ VariantIntVec4 />.size_of == typeinfo</ IntVec4 />.size_of + typeinfo</ IntVec4 />.align_of );
static_assert( typeinfo</ VariantIntVec4 />.align_of == typeinfo</ IntVec4 />.align_of );

type VariantDCOrIntVec4= ust::variant</ tup[ DC, IntVec4 ] />;
static_assert( typeinfo</ VariantDCOrIntVec4 />.size_of == ConstexprMax( typeinfo</ DC />.size_of, typeinfo</ IntVec4 />.align_of ) + ConstexprMax( typeinfo</ DC />.align_of,  typeinfo</ IntVec4 />.align_of ) );
static_assert( typeinfo</ VariantDCOrIntVec4 />.align_of == ConstexprMax( typeinfo</ DC />.align_of, typeinfo</ IntVec4 />.align_of ) );

struct SomeNonSync non_sync {}
static_assert( non_sync</ SomeNonSync /> );
static_assert( non_sync</ ust::variant</ tup[ u32, SomeNonSync ] /> /> );
static_assert( non_sync</ ust::variant</ tup[ SomeNonSync, bool, $(char8) ] /> /> );

fn nomangle main() : i32
{
	{
		var ust::variant</ tup[ i32, f32 ] />
			vi(4),
			vf( 0.5f );

		halt if( !vi.has</i32/>() );
		halt if(  vi.has</f32/>() );
		halt if(  vi.get</i32/>().empty() );
		halt if( !vi.get</f32/>().empty() );
		halt if(  vi.get</i32/>().try_deref() != 4 );
		halt if( vi.try_get</i32/>() != 4 );

		halt if( !vf.has</f32/>() );
		halt if(  vf.has</i32/>() );
		halt if( !vf.get</i32/>().empty() );
		halt if(  vf.get</f32/>().empty() );
		halt if(  vf.get</f32/>().try_deref() != 0.5f );
		halt if( vf.try_get</f32/>() != 0.5f );
	}
	{ // Can modify contents of variant.
		var ust::variant</ tup[ i32, f32 ] /> mut vi(66), mut vf(7.5f);

		vi.get</i32/>().try_deref() /= 11;
		halt if( vi.get</i32/>().try_deref() != 6 );
		vi.try_get</i32/>()= 786;
		halt if( vi.try_get</i32/>() != 786 );

		vf.get</f32/>().try_deref() *= 2.0f;
		halt if( vf.get</f32/>().try_deref() != 15.0f );
		vf.try_get</f32/>()= 56.3f;
		halt if( vf.try_get</f32/>() != 56.3f );
	}
	{ // Variant calls destructor.
		var i32 mut x= 66;
		{
			var IntOrS s( S(x) );
			halt if( s.get</S/>().empty() );
		}
		halt if( x != 0 );
	}
	{
		var IntOrS i(66);
		halt if( i.get</i32/>().empty() );
		halt if( i.get</i32/>().try_deref() != 66 );
	}
	{ // Destructor called in assignment.

		var i32 mut x= 99;

		var IntOrS mut v( S(x) );
		halt if( v.get</S/>().empty() );
		halt if( x != 99 );

		v= 32;
		halt if( !v.get</S/>().empty() );
		halt if(  v.get</i32/>().empty() );
		halt if(  v.get</i32/>().try_deref() != 32 );
		halt if( x != 0 );
	}
	{ // Destructor called after assignment.

		var i32 mut x= 521;
		{
			var IntOrS mut v(55);
			halt if( v.get</i32/>().empty() );
			halt if( v.get</i32/>().try_deref() != 55 );

			v= S(x);
			halt if( !v.get</i32/>().empty() );
			halt if(  v.get</S/>().empty());
		}
		halt if( x != 0 );
	}
	{ // Variant is default constructible if first element is default constructible.
		var ust::variant</ tup[ DC, S ] /> dc;
		halt if( dc.get</DC/>().empty() );
		halt if( dc.get</DC/>().try_deref().x != -1 );
		halt if( dc.get</DC/>().try_deref().y != 3.14f );
		halt if( dc.get</DC/>().try_deref().z != u64(123456) );
	}
	{ // Copy constructor vor variant.
		var ust::variant</ tup[ i32, f32 ] /> vi(4), vf( 0.5f );
		var ust::variant</ tup[ i32, f32 ] /> vic(vi), vfc(vf);

		halt if(  vic.get</i32/>().empty() );
		halt if( !vic.get</f32/>().empty() );
		halt if(  vic.get</i32/>().try_deref() != 4 );

		halt if( !vfc.get</i32/>().empty() );
		halt if(  vfc.get</f32/>().empty() );
		halt if(  vfc.get</f32/>().try_deref() != 0.5f );
	}
	{ // Copy assignment for variant.
		var ust::variant</ tup[ i32, f32 ] /> mut v0( 33 ), v1(34.0f); // Different index of variant.

		halt if( v0.get</i32/>().empty() );
		halt if( v0.get</i32/>().try_deref() != 33 );
		halt if( v1.get</f32/>().empty() );
		halt if( v1.get</f32/>().try_deref() != 34.0f );

		v0= v1;
		halt if( v0.get</f32/>().empty() );
		halt if( v0.get</f32/>().try_deref() != 34.0f );
	}
	{
		var ust::variant</ tup[ i32, f32 ] /> mut v0( 11 ), v1(12); // Both variants have same index.

		halt if( v0.get</i32/>().empty() );
		halt if( v0.get</i32/>().try_deref() != 11 );
		halt if( v1.get</i32/>().empty() );
		halt if( v1.get</i32/>().try_deref() != 12 );

		v0= v1;
		halt if( v0.get</i32/>().empty() );
		halt if( v0.get</i32/>().try_deref() != 12 );
	}
	{ // ==
		static_assert( typeinfo</ ust::variant</ tup[ i32, f32, ust::string8 ] /> />.is_equality_comparable );
		auto nan= 0.0f / 0.0f;
		var ust::variant</ tup[ i32, f32, ust::string8 ] /> v0(5), v1(5), v2(33), v3(5.0f), v4(5.0f), v5(0.0f), v6(-0.0f), v7(nan), v8(nan), v9(ust::string8("foo")), v10(ust::string8("foo")), v11(ust::string8("wdw"));

		// variant == variant

		// Self-equality
		halt if( v0 != v0 );
		halt if( v1 != v1 );
		halt if( v2 != v2 );
		halt if( v3 != v3 );
		halt if( v4 != v4 );
		halt if( v5 != v5 );
		halt if( v6 != v6 );
		halt if( v7 == v7 ); // NaN
		halt if( v8 == v8 ); // NaN
		halt if( v9 != v9 );
		halt if( v10 != v10 );
		halt if( v11 != v11 );

		// i32 == i32
		halt if( v0 != v1 );
		halt if( v0 == v2 );
		halt if( v2 == v1 );

		// f32 == f32
		halt if( v3 != v4 );
		halt if( v3 == v5 );
		halt if( v5 != v6 );
		halt if( v7 == v8 );

		// string8 == string8
		halt if( v9 != v10 );
		halt if( v11 == v10 );

		// Different types of elements
		halt if( v0 == v3 );
		halt if( v1 == v9 );
		halt if( v11 == v5 );

		// variant == value
		halt if( v0 != 5 );
		halt if( v0 == 6 );
		halt if( v2 != 33 );
		halt if( v3 != 5.0f );
		halt if( v4 == -999.0f );
		halt if( v5 != -0.0f );
		halt if( v6 !=  0.0f );
		halt if( v7 == nan );
		halt if( v8 == nan );
		halt if( v9 != ust::string8("foo") );
		halt if( v9 == ust::string8("f00") );
		halt if( v10 != ust::string8("foo") );
		halt if( v11 != ust::string8("wdw") );
		halt if( v11 == ust::string8("WDW") );
		halt if( v11 == ust::string8("") );
		halt if( v1 == 5.0f );
		halt if( v5 == ust::string8() );
		halt if( v11 == 33 );

		// value == variant
		halt if( 5 != v0 );
		halt if( 6 == v0 );
		halt if( 33 != v2 );
		halt if( 5.0f != v3 );
		halt if( -999.0f == v4 );
		halt if(  0.0f != v5 );
		halt if( -0.0f != v6 );
		halt if( nan == v7 );
		halt if( nan == v8 );
		halt if( ust::string8("foo") != v9 );
		halt if( ust::string8("f00") == v9 );
		halt if( ust::string8("foo") != v10 );
		halt if( ust::string8("wdw") != v11 );
		halt if( ust::string8("WDW") == v11);
		halt if( ust::string8("") == v11 );
		halt if( 5.0f == v1 );
		halt if( ust::string8() == v5 );
		halt if( 33 == v11 );
	}
	{ // try_move

		var ust::variant</ tup[ ust::box</i32/>, f32 ] /> mut v( 0.25f );
		halt if( v.get</f32/>().empty() );

		var f32 x= move(v).try_move</f32/>();
		halt if( x != 0.25f );

	}
	return 0;
}
