//##fail_test
import "../imports/optional.u"
import "../imports/string.u"

var [ [ [ char8, 2 ], 2 ], 1 ] pollution[ [ "0a", "1_" ] ];

struct RI
{
	i32 &imut r;
	fn constructor( this, i32 &imut in_r ) @(pollution) ( r= in_r ) {}
}

struct RM
{
	i32 &mut r;
	fn constructor( this, i32 &mut in_r ) @(pollution) ( r= in_r ) {}
}

class C{}

fn nomangle main() : i32
{
	{ // constructor does reference-pollution.
		var i32 mut x= 0;
		var ust::optional</RM/> mut opt( RM(x) );

		var i32& y= x; //expect_error ReferenceProtectionError
	}
	{ // "reset" does reference-pollution.
		var i32 mut x= 0;
		var ust::optional</RM/> mut opt;

		opt.reset( RM(x) );
		++x; //expect_error ReferenceProtectionError
	}
	{ // "reset" does reference-pollution.
		var i32 mut x= 0;
		var ust::optional</RI/> mut opt;

		opt.reset( RI(x) );
		++x; //expect_error ReferenceProtectionError
	}
	{ // optional saves mutability.
		var ust::optional</ i32 /> imut opt(0);
		opt.try_deref()= 0; //##expect_error ExpectedReferenceValue
	}
	{ // as_ref creates value linked with original optional
		var ust::optional</ i32 /> mut opt(12);
		auto ref= opt.as_ref();

		// Can not modify original optional because reference to it exists
		opt.try_deref(); //##expect_error ReferenceProtectionError
	}
	{ // try_take requires mutable optional
		var ust::optional</ i32 /> opt(14);

		opt.try_take(); //##expect_error CouldNotSelectOverloadedFunction
	}
	{ // == for non-equality-comarable type.
		var C c;
		var ust::optional</C/> c_opt(c), empty_opt;

		c_opt == empty_opt; //##expect_error OperationNotSupportedForThisType
		empty_opt != c_opt; //##expect_error OperationNotSupportedForThisType

		c == c_opt; //##expect_error NoMatchBinaryOperatorForGivenTypes
		c != empty_opt; //##expect_error NoMatchBinaryOperatorForGivenTypes

		c_opt == c; //##expect_error NoMatchBinaryOperatorForGivenTypes
		empty_opt != c; //##expect_error NoMatchBinaryOperatorForGivenTypes
	}
	{

		var [ char8, 3 ] mut chars= "UJM";
		var ust::array_view_mut</char8/> chars_view= chars;
		var ust::optional</ ust::optional_ref_imut</ ust::array_view_mut</char8/> /> /> opt( ust::optional_ref_imut</ ust::array_view_mut</char8/> />(chars_view) );

		var char8& c= opt.try_deref().try_deref()[0s]; // Create a reference pointing to "chars".
		// Error here - create second order reference node in call for "chars".
		opt.empty(); //##expect_error ReferenceProtectionError
	}
	{
		var i32 mut y= 0;

		var ust::optional</i32/> mut o;
		auto &mut ref= o.deref_or(y); // Reference both to "0" and "y".

		// Can't modify or access these variables, since a reference to them exist.
		o.empty(); //##expect_error ReferenceProtectionError
		++y; //##expect_error ReferenceProtectionError
	}
	{
		var ust::optional</i32/> o;
		// "deref_or" may return a reference to its alternative.
		// In this case we create a local reference to a temporary variable passed as alternative.
		auto& ref= o.deref_or( 65 ); //##expect_error DestroyedVariableStillHasReferences
	}
	{
		var ust::optional</i32/> mut o( 67890 );
		// Taken value should'n be discarded.
		o.try_take(); //##expect_error DiscardingValueMarkedAsNodiscard
	}

	return 0;
}
