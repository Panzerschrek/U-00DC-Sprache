//##success_test
import "../imports/assert.u"
import "../imports/binary_search.u"

fn nomangle main() : i32
{

	{
		var [ i32, 5 ] arr[ 0, 1, 2, 3, 4 ];
		var ust::array_view_imut</i32/> range= arr;

		assert( ust::binary_search::first_greater_or_equal( range, -2 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range, -1 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range, 0 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range, 1 ) == 1s );
		assert( ust::binary_search::first_greater_or_equal( range, 2 ) == 2s );
		assert( ust::binary_search::first_greater_or_equal( range, 3 ) == 3s );
		assert( ust::binary_search::first_greater_or_equal( range, 4 ) == 4s );
		assert( ust::binary_search::first_greater_or_equal( range, 5 ) == 5s );
		assert( ust::binary_search::first_greater_or_equal( range, 6 ) == 5s );
		assert( ust::binary_search::first_greater_or_equal( range, 7 ) == 5s );

		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(4s), -2 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(4s), -1 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(4s), 0 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(4s), 1 ) == 1s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(4s), 2 ) == 2s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(4s), 3 ) == 3s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(4s), 4 ) == 4s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(4s), 5 ) == 4s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(4s), 6 ) == 4s );

		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(3s), -2 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(3s), -1 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(3s), 0 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(3s), 1 ) == 1s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(3s), 2 ) == 2s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(3s), 3 ) == 3s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(3s), 4 ) == 3s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(3s), 5 ) == 3s );

		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(2s), -2 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(2s), -1 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(2s), 0 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(2s), 1 ) == 1s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(2s), 2 ) == 2s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(2s), 3 ) == 2s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(2s), 4 ) == 2s );

		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(1s), -2 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(1s), -1 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(1s), 0 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(1s), 1 ) == 1s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(1s), 2 ) == 1s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(1s), 3 ) == 1s );

		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(0s), -2 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(0s), -1 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(0s), 0 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(0s), 1 ) == 0s );
		assert( ust::binary_search::first_greater_or_equal( range.subrange_end(0s), 2 ) == 0s );
	}
	return 0;
}
