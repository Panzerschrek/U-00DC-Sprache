//##success_test
import "../imports/assert.u"
import "../imports/binary_search.u"

fn nomangle main() : i32
{

	{
		var [ i32, 32 ] arr[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ];
		var ust::array_view_imut</i32/> range= arr;

		// For each possible subrange search for position for each possible number.
		for( var size_type mut start= 0s; start < range.size(); ++start )
		{
			for( var size_type mut end= start; end < range.size(); ++end )
			{
				auto subrange= range.subrange( start, end );
				foreach( el : arr )
				{
					assert( ust::binary_search::first_greater_or_equal( subrange, el ) == FirstGreaterOrEqualLinear( subrange, el ) );
				}
				assert( ust::binary_search::first_greater_or_equal( subrange, range.front() - 2 ) == 0s );
				assert( ust::binary_search::first_greater_or_equal( subrange, range.front() - 1 ) == 0s );
				assert( ust::binary_search::first_greater_or_equal( subrange, range.back() + 1 ) == subrange.size() );
				assert( ust::binary_search::first_greater_or_equal( subrange, range.back() + 2 ) == subrange.size() );
			}
		}
	}

	return 0;
}

template</type T/>
fn FirstGreaterOrEqualLinear( ust::array_view_imut</T/> r, T& el ) : size_type
{
	for( var size_type mut i= 0s; i < r.size(); ++i )
	{
		if( el <= r[i] )
		{
			return i;
		}
	}
	return r.size();
}
