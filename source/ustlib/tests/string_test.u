//##success_test
import "../imports/string.u"

fn AcceptStringOnly( ust::string8 str )
{
	halt if( str != "rtgbg__" );
}

fn nomangle main() : i32
{
	{ // string is default-constructible. Default state is empty.
		var ust::string8  s8 ;
		var ust::string16 s16;
		var ust::string32 s32;

		halt if( !s8 .empty() );
		halt if( !s16.empty() );
		halt if( !s32.empty() );
	}
	{ // string is constructible from char array.
		var ust::string8  s8 ( "jedem das seine" );
		var ust::string16 s16( "u16 строка"u16 );

		halt if( s8 .empty() );
		halt if( s16.empty() );
		halt if( s8  != "jedem das seine" );
		halt if( s16 != "u16 строка"u16 );
	}
	{ // Char array convertible to string.
		AcceptStringOnly( "rtgbg__" );

		var ust::string16 str= "B N --r"u16;
		halt if( str != "B N --r"u16 );
	}
	{ // String is copy-constructible.
		var ust::string32 s0( "xdcfvg "u32 );
		var ust::string32 s1(s0);

		halt if( s0 != s1 );
		halt if( s1 != "xdcfvg "u32 );
	}
	{ // String is copy-assignable.
		var ust::string8 mut s0, s1( "qwerty" );

		halt if( ! s0.empty() );
		s0= s1;
		halt if( s0.empty() );
		halt if( s0 != "qwerty" );

		var ust::string8 s2;
		s0= s2;
		halt if( !s0.empty() );
		halt if( s0 != "" );
	}
	{ // String is fill-constructible.

		var ust::string8 s( 7s, "a"[0u] );
		halt if( s.empty() );
		halt if( s != "aaaaaaa" );
	}
	{ // Can assign char array to string.
		var ust::string16 mut s;

		halt if( !s.empty() );
		s= "a + a"u16;
		halt if( s.empty() );
		halt if( !( "a + a"u16 == s ) );

		auto& arr= "quick brown fox jumps over the lazy dog"u16;

		s= arr;
		halt if( arr != s );
	}
	{ // front/back
		var ust::string32 mut s( "R"u32 );
		halt if( s.front() != "R"u32[0u] );
		halt if( s.back () != "R"u32[0u] );
		s.push_back( "t"u32[0u] );
		halt if( s.front() != "R"u32[0u] );
		halt if( s.back () != "t"u32[0u] );
		s[0s]= "Ä"u32[0u];
		halt if( s.front() != "Ä"u32[0u] );
		halt if( s.back () != "t"u32[0u] );
	}
	{ // push_back/ pop_back
		var ust::string8 mut s;

		halt if( s != "" ); halt if( s.size() != 0s );
		s.push_back( "Q"[0u] );
		halt if( s != "Q" ); halt if( s.size() != 1s );
		s.push_back( "u"[0u] );
		halt if( s != "Qu" ); halt if( s.size() != 2s );
		s.push_back( 3s, "e"[0u] );
		halt if( s != "Queee" ); halt if( s.size() != 5s );
		halt if( s.pop_back() != "e"[0u] );
		halt if( s != "Quee" ); halt if( s.size() != 4s );
		s.drop_back();
		halt if( s != "Que" ); halt if( s.size() != 3s );
		s.push_back( 7s, "!"[0u] );
		halt if( s != "Que!!!!!!!" ); halt if( s.size() != 10s );
		s.drop_back( 9s );
		halt if( s != "Q" ); halt if( s.size() != 1s );
		s.drop_back();
		halt if( s != "" ); halt if( s.size() != 0s );
	}
	{ // resize
		var ust::string16 mut s;
		halt if( s != ""u16 );

		s.resize( 4s, ","u16[0u] );
		halt if( s != ",,,,"u16 );
		s.resize( 6s, "r"u16[0u] );
		halt if( s != ",,,,rr"u16 );
		s.resize( 1s, " "u16[0u] );
		halt if( s != ","u16 );
	}
	{ // swap
		var ust::string8 mut s("0123456789");

		s.swap( 2s, 7s );
		halt if( s != "0173456289" );
		s.swap( 1s, 1s );
		halt if( s != "0173456289" );
		s.swap( 0s, 8s );
		halt if( s != "8173456209" );
	}
	{ // Indexing.
		var ust::string8 s0("HjN"), mut s1("tyuio");

		halt if( s0[0s] != "H"[0u] );
		halt if( s0[1s] != "j"[0u] );
		halt if( s0[2s] != "N"[0u] );

		s1[2s]= "&"[0u]; // Can modify.
		halt if( s1 != "ty&io" );
	}
	{ // +
		var ust::string16 s0("foo"u16), s1("-bar"u16);
		auto s2= s0 + s1; // string + string
		halt if( s2 != "foo-bar"u16 );

		var ust::string16 s3= s2 + "_RT"u16; // string + array
		halt if( s3 != "foo-bar_RT"u16 );

		var ust::string16 s4= "ÜÄÖ"u16 + s1; // array + string
		halt if( s4 != "ÜÄÖ-bar"u16 );
	}
	{ // +=
		var ust::string32 mut s0("üÜ__/"u32), mut s1("325abc"u32);
		s0+= s1; // string += string
		halt if( s0 != "üÜ__/325abc"u32 );

		var ust::string32 mut s2(">"u32);
		s2+= "bfrtkhr"u32; // string + array
		halt if( s2 != ">bfrtkhr"u32 );
	}

	{ // Compare.
		var ust::string8 a("ada"), b("a"), c("ADA"), d("ada"), e("adam");
		halt if( a == b );
		halt if( a == c );
		halt if( a != d );
		halt if( a == e );

		halt if( e != "adam" );
		halt if( "adam" != e );
		halt if( !( e == "adam" ) );
		halt if( !( "adam" == e ) );
	}
	{
		var ust::random_access_range_imut</char8/> range( "RaNgE" );
		var ust::string8 mut str(range); // Construct from char range.
		// Compare with char range.
		halt if( str != range );
		halt if( range != str );
		halt if( !( range == str ) );
		halt if( !( str == range ) );

		// Concatenation with range.
		str+= range;
		halt if( str != "RaNgERaNgE" );
		str= range + ust::string8("W");
		halt if( str != "RaNgEW" );
		str= ust::string8("W") + range;
		halt if( str != "WRaNgE" );
	}
	{ // Order compare
		halt if( ust::string8("") < ust::string8("") );
		halt if( ust::string8("") > ust::string8("") );
		halt if( !( ust::string8("") <= ust::string8("") ) );
		halt if( !( ust::string8("") >= ust::string8("") ) );

		// Difference in first symbol.
		halt if( !( ust::string8("a") < ust::string8("b") ) );
		halt if( !( ust::string8("a0123") < ust::string8("b") ) );
		halt if( !( ust::string8("a") < ust::string8("b0123") ) );
		halt if( ust::string8("734") < ust::string8("120") );
		halt if( ust::string8("94B") < ust::string8("84") );

		// Difference in non-first symbol.
		halt if( !( ust::string8("0123v567") < ust::string8("0123w567") ) );
		halt if( !( ust::string8("aaFbb") < ust::string8("aaQaa") ) );
		halt if( ust::string8("bbrX7tt") < ust::string8("bbrX2") );
		halt if( ust::string8("013f") < ust::string8("010f") );

		// Difference in last symbol.
		halt if( !( ust::string8("9518470") < ust::string8("9518475") ) );
		halt if( ust::string8("013") < ust::string8("010") );

		// Substring is always less than full string.
		halt if( !( ust::string8("a") < ust::string8("abc") ) );
		halt if( ust::string8("qwerty") < ust::string8("qwe") );
		halt if( !( ust::string8("") < ust::string8("another string") ) ); // empty string is less than all other strings.

		halt if( !( ust::string8("a") <= ust::string8("b") ) );
		halt if( !( ust::string8("abcd") <= ust::string8("b") ) );
		halt if( !( ust::string8("01A") <= ust::string8("01B") ) );
		halt if( !( ust::string8("22rTX") <= ust::string8("22rX") ) );
		halt if( !( ust::string8("lolw") <= ust::string8("lolwat") ) );
		halt if( !( ust::string8("jrfhwaqQ") <= ust::string8("jrfhwaqQ") ) );
		halt if( ust::string8("d") <= ust::string8("a") );
		halt if( ust::string8("57r8") <= ust::string8("57f8") );
	}
	{
		var [ [ ust::string8, 2 ], 9 ] string_pairs
		[
			[ "", "" ],
			[ "QwE", "QwE" ],
			[ "a", "b" ],
			[ "ab0", "ab1" ],
			[ "abcQrtg", "abcZ" ],
			[ "str", "str054534" ],
			[ "wtfggt", "wt" ],
			[ "", "nonempty" ],
			[ "NonEmpty2", "" ],
		];

		foreach( &pair : string_pairs )
		{
			auto l = pair[0] <  pair[1];
			auto le= pair[0] <= pair[1];
			auto g = pair[0] >  pair[1];
			auto ge= pair[0] >= pair[1];
			auto eq= pair[0] == pair[1];
			auto ne= pair[0] != pair[1];

			// Opposite conditions.
			halt if( eq == ne );
			halt if( l == ge );
			halt if( g == le );

			halt if( g & l ); // Can not be greater and less simultaneously.
			halt if( l & eq ); // Can not be less and equal simultaneously.
			halt if( g & eq ); // Can not be greater and equal simultaneously.
			halt if( eq & !le ); // If equal, should be also less and equal.
			halt if( eq & !ge ); // If equal, should be also greater and equal.
			halt if( ne & le == ge ); // If not equal, less equal and greater equal should not be same.
			halt if( le & ge & !eq ); // If less equal and greater equal, should be also equal.
		}
	}
	{ // substr.
		var ust::string8 s( "abcdef012345" );
		auto l= s.substr( 0s, 6s );
		halt if( l != "abcdef" );
		halt if( s.substr( 6s, 12s ) != "012345" );
		halt if( l.substr( 1s, 4s ) != s.substr( 1s, 4s ) );
		halt if( s.substr( 2s, 10s ) != "cdef0123" );
		halt if( s.substr( 7s, s.size() ) != "12345" );
		halt if( !s.substr( 8s, 8s ).empty() );
	}
	{ // concat.
		var [ ust::string_view8, 4 ] parts[ "Quick", "Brown", "Fox", "Jumps" ];

		var ust::string8 parts_concatenated= ust::string8::concat( parts );
		halt if( parts_concatenated != "QuickBrownFoxJumps" );
		halt if( parts_concatenated.size() != 18s );
	}
	{ // concat.
		var [ ust::string_view8, 5 ] parts[ "1", "22", "333", "4444", "55555" ];

		var ust::string8 parts_concatenated= ust::string8::concat( parts );
		halt if( parts_concatenated != "122333444455555" );
		halt if( parts_concatenated.size() != 15s );
	}
	{ // concat.
		var [ ust::string_view8, 6 ] parts[ "abc", "", "def", "", "", "ghij" ];

		var ust::string8 parts_concatenated= ust::string8::concat( parts );
		halt if( parts_concatenated != "abcdefghij" );
		halt if( parts_concatenated.size() != 10s );
	}
	{ // concat.
		var [ ust::string_view8, 0 ] parts[];

		var ust::string8 parts_concatenated= ust::string8::concat( parts );
		halt if( parts_concatenated != "" );
		halt if( parts_concatenated.size() != 0s );
	}
	{ // concat.
		var [ ust::string_view8, 2 ] parts[ "", "" ];

		var ust::string8 parts_concatenated= ust::string8::concat( parts );
		halt if( parts_concatenated != "" );
		halt if( parts_concatenated.size() != 0s );
	}
	{ // concat helper.

		var ust::string8 c1= ust::concat( "7uuj" );
		halt if( c1 != "7uuj" );

		var ust::string8 c2= ust::concat( "aa aa", "bbb" );
		halt if( c2 != "aa aabbb" );

		var ust::string8 c3= ust::concat( "TT", "-", "33" );
		halt if( c3 != "TT-33" );

		var ust::string8 c4= ust::concat( "4", "8", "15", "16" );
		halt if( c4 != "481516" );

		var ust::string8 c5= ust::concat( "Schlaf", "mein", "Freund", "und", "träume" );
		halt if( c5 != "SchlafmeinFreundundträume" );

		var ust::string8 c6= ust::concat( "es", "gibt", "nichts", "mehr", "zu", "tun" );
		halt if( c6 != "esgibtnichtsmehrzutun" );

		var ust::string8 c7= ust::concat( "mit ", "etwas ", "Laub ", "bedeckt, ", "im ", "Wald ", "versteckt" );
		halt if( c7 != "mit etwas Laub bedeckt, im Wald versteckt" );

		var ust::string8 c8= ust::concat( "Verzeih ", "mir, ", "dass ", "ich ", "bin, ", "was ", "ich ", "bin" );
		halt if( c8 != "Verzeih mir, dass ich bin, was ich bin" );
	}
	{ // concat helper - string16.

		var ust::string16 c1= ust::concat( "7uuj"u16 );
		halt if( c1 != "7uuj"u16 );

		var ust::string16 c2= ust::concat( "aa aa"u16, "bbb"u16 );
		halt if( c2 != "aa aabbb"u16 );

		var ust::string16 c3= ust::concat( "TT"u16, "-"u16, "33"u16 );
		halt if( c3 != "TT-33"u16 );

		var ust::string16 c4= ust::concat( "4"u16, "8"u16, "15"u16, "16"u16 );
		halt if( c4 != "481516"u16 );

		var ust::string16 c5= ust::concat( "Schlaf"u16, "mein"u16, "Freund"u16, "und"u16, "träume"u16 );
		halt if( c5 != "SchlafmeinFreundundträume"u16 );
	}
	{ // concat helper - string32.

		var ust::string32 c1= ust::concat( "7uuj"u32 );
		halt if( c1 != "7uuj"u32 );

		var ust::string32 c2= ust::concat( "aa aa"u32, "bbb"u32 );
		halt if( c2 != "aa aabbb"u32 );

		var ust::string32 c3= ust::concat( "TT"u32, "-"u32, "33"u32 );
		halt if( c3 != "TT-33"u32 );

		var ust::string32 c4= ust::concat( "4"u32, "8"u32, "15"u32, "16"u32 );
		halt if( c4 != "481516"u32 );

		var ust::string32 c5= ust::concat( "Schlaf"u32, "mein"u32, "Freund"u32, "und"u32, "träume"u32 );
		halt if( c5 != "SchlafmeinFreundundträume"u32 );
	}
	{ // Reverse iterator.
		var ust::string8 s= "ABCDE";
		auto s_reversed= ust::string8::from_iterator( s.iter_reverse() );
		halt if( s_reversed != "EDCBA" );
	}
	{ // Reverse iterator which modifies values.
		var ust::string8 mut s= "ABCDE";
		var ust::string8 mut s_reversed;
		foreach( &mut el : s.iter_reverse() )
		{
			el= char8( u32(el) + 3u );
			s_reversed.push_back(el);
		}
		halt if( s != "DEFGH" );
		halt if( s_reversed != "HGFED" );
	}
	return 0;
}
