//##success_test
import "../imports/arena_allocated_array.u"

fn nomangle main() call_conv( "C" ) : i32
{
	{ // Fill constructor.
		var ust::arena_allocator allocator;
		var ust::arena_allocated_array</i32/> a( allocator, 4s, 561 );

		halt if( a.empty() );
		halt if( a.size() != 4s );
		halt if( a[0s] != 561 );
		halt if( a[1s] != 561 );
		halt if( a[2s] != 561 );
		halt if( a[3s] != 561 );
	}
	{ // Fill constructor for large size.
		var ust::arena_allocator allocator;
		var ust::arena_allocated_array</i32/> a( allocator, 1024s * 1024s * 16s, 13 );

		halt if( a.empty() );
		halt if( a.size() != 1024s * 1024s * 16s );

		var i32 mut sum= 0;
		foreach( el : a )
		{
			sum+= el;
		}

		halt if( sum != 13 * i32(1024s * 1024s * 16s) );
	}
	{ // Fill constructor for empty array.
		var ust::arena_allocator allocator;
		var ust::arena_allocated_array</f64/> a( allocator, 0s, 11.2 );

		halt if( !a.empty() );
		halt if( a.size() != 0s );
	}
	{ // Modify contained values.

		var ust::arena_allocator allocator;
		var ust::arena_allocated_array</u32/> mut a( allocator, 3s, 0u );

		halt if( a.size() != 3s );
		halt if( a.front() != 0u );
		halt if( a.back() != 0u );
		halt if( a[1s] != 0u );

		a.front() = 67u;
		a[2s]= 873458u;

		halt if( a[0s] != 67u );
		halt if( a.back() != 873458u );
		halt if( a[1s] != 0u );

		foreach( &mut v : a )
		{
			v+= 10u;
		}

		halt if( a[0s] != 77u );
		halt if( a[1s] != 10u );
		halt if( a[2s] != 873468u );
	}
	{ // "range" method.
		var ust::arena_allocator allocator;
		var ust::arena_allocated_array</i32/> a( allocator, 5s, 11 );

		auto r= a.range();

		static_assert( same_type</ typeof(r), ust::random_access_range_imut</i32/> /> );

		halt if( r.size() != 5s );
		foreach( &el : r )
		{
			halt if( el != 11 );
		}
	}
	{ // "range" method for mutable instance.
		var ust::arena_allocator allocator;
		var ust::arena_allocated_array</i32/> mut a( allocator, 52s, -67 );

		{
			auto r= a.range();

			static_assert( same_type</ typeof(r), ust::random_access_range_mut</i32/> /> );

			halt if( r.size() != 52s );
			foreach( &mut el : r )
			{
				halt if( el != -67 );
				el*= -2;
			}
		}

		foreach( &el : a )
		{
			halt if( el != 134 );
		}
	}

	return 0;
}
