//##success_test
import "../imports/mixin_utils.u"

fn nomangle main() : i32
{
	// Default state is empty.
	{
		var ust::mixin_utils::static_string</32s/> s{};
		static_assert( s == "" );
	}

	// Can append strings and compare agaist strings.
	{
		var ust::mixin_utils::static_string</32s/> mut s;
		s+= "foo";
		s+= "66";
		halt if( s != "foo66" );
		halt if( s == "foo" );
		halt if( s == "66" );
		halt if( "foo66" != s );
		halt if( "foo" == s );
		halt if( "66" == s );
	}

	// Append a decimal number.
	{
		var ust::mixin_utils::static_string</32s/> mut s;
		s.append_decimal_number( 13 );
		halt if( s != "13" );
	}
	{
		var ust::mixin_utils::static_string</32s/> mut s;
		s.append_decimal_number( -1 );
		halt if( s != "-1" );
	}
	{
		var ust::mixin_utils::static_string</32s/> mut s;
		s.append_decimal_number( -17543 );
		halt if( s != "-17543" );
	}
	{
		var ust::mixin_utils::static_string</32s/> mut s;
		s.append_decimal_number( 0 );
		halt if( s != "0" );
	}
	{
		var ust::mixin_utils::static_string</32s/> mut s;
		s.append_decimal_number( 0u );
		halt if( s != "0" );
	}
	{
		var ust::mixin_utils::static_string</32s/> mut s;
		s.append_decimal_number( 100u );
		halt if( s != "100" );
	}
	{
		var ust::mixin_utils::static_string</32s/> mut s;
		s.append_decimal_number( 2147483647u );
		halt if( s != "2147483647" );
	}
	{
		var ust::mixin_utils::static_string</32s/> mut s;
		s.append_decimal_number( 2147483648u );
		halt if( s != "2147483648" );
	}
	{
		var ust::mixin_utils::static_string</32s/> mut s;
		s.append_decimal_number( -774612927736889278i64 );
		halt if( s != "-774612927736889278" );
	}
	{
		var ust::mixin_utils::static_string</32s/> mut s;
		s.append_decimal_number( -9223372036854775808i64 );
		halt if( s != "-9223372036854775808" );
	}
	{
		var ust::mixin_utils::static_string</32s/> mut s;
		s.append_decimal_number( 18446744073709551614u64 );
		halt if( s != "18446744073709551614" );
	}

	// Number is appended, not written from start.
	{
		var ust::mixin_utils::static_string</32s/> mut s;
		s+= "yyU";
		s.append_decimal_number( 5u );
		halt if( s != "yyU5" );
		s.append_decimal_number( 34u16 );
		halt if( s != "yyU534" );
	}

	// static_string methods are constexpr.
	static_assert( NumToStringConstexpr(0u) == "0u" );
	static_assert( NumToStringConstexpr(1u) == "1u" );
	static_assert( NumToStringConstexpr(10u) == "10u" );
	static_assert( NumToStringConstexpr(12345u) == "12345u" );
	static_assert( NumToStringConstexpr(9876u) == "9876u" );

	return 0;
}

fn constexpr NumToStringConstexpr( u32 x ) : ust::mixin_utils::static_string</32s/>
{
	var ust::mixin_utils::static_string</32s/> mut s;
	s.append_decimal_number(x);
	s+= "u";
	return s;
}
