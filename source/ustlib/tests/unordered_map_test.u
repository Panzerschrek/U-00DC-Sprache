//##success_test
import "../imports/stdout.u"
import "../imports/string.u"
import "../imports/string_conversions.u"
import "../imports/unordered_map.u"
import "../imports/vector.u"


struct OneBitHash
{
	i32 x;
	fn constructor( i32 in_x ) ( x= in_x ) {}

	op==( OneBitHash& a, OneBitHash& b ) : bool { return a.x == b.x; }

	template</type Hasher/>
	fn hash( this, Hasher &mut hasher )
	{
		ust::apply_value_to_hasher( hasher, size_type( x & 1 ) );
	}
}

class C
{
	// noncopyable by default.
	fn constructor( i32 in_x ) ( x= in_x ) {}

	i32 x;
}

class RandGenerator
{
public:
	fn Next( mut this ) : u32
	{
		state_= ( 22695477u * state_ + 1u ) & 0x7FFFFFFFu;
		return state_ >> 16u;
	}

private:
	u32 state_= 0u;
}

fn nomangle main() : i32
{
	{
		var ust::unordered_map</ i32, i32 /> mut m;
		halt if( ! m.empty() );

		m.insert( 55, -7 );
		halt if( m.size() != 1s );

		{
			auto find_result= m.find( 66 );
			halt if( !find_result.empty() );
		}
		{
			auto find_result= m.find( 55 );
			halt if( find_result.empty() );
			halt if( find_result.try_deref() != -7 );
		}
		m.clear();
		halt if( ! m.empty() );
		halt if( !m.find( 55 ).empty() );
	}
	{
		var ust::unordered_map</ i32, ust::string8 /> mut m;

		m.insert(   58, "foo" );
		m.insert(    1, "wtf" );
		m.insert(   45, "45" );
		m.insert( 1256, "ArT" );
		m.insert( 1997, "InEx" );

		halt if( m.find(   58 ).empty() ); halt if( m[  58] != "foo" );
		halt if( m.find(    1 ).empty() ); halt if( m[   1] != "wtf" );
		halt if( m.find(   45 ).empty() ); halt if( m[ 45 ] != "45" );
		halt if( m.find( 1256 ).empty() ); halt if( m[1256] != "ArT" );
		halt if( m.find( 1997 ).empty() ); halt if( m[1997] != "InEx" );

		m.erase(    1 ); halt if( !m.find(    1 ).empty() );
		m.erase(   45 ); halt if( !m.find(   45 ).empty() );
		m.erase( 1997 ); halt if( !m.find( 1997 ).empty() );
		m.erase( 1256 ); halt if( !m.find( 1256 ).empty() );
		m.erase(   58 ); halt if( !m.find(   58 ).empty() );
	}
	{ // There is "exists" method.

		var ust::unordered_map</ i32, f32 /> mut m;

		halt if( m.exists( 55 ) );
		m.insert( 55, 0.25f );
		halt if( !m.exists( 55 ) );

		halt if( m.exists( -24 ) );
		m.insert( -24, 789.0f );
		halt if( !m.exists( -24 ) );
		halt if( !m.exists( 55 ) );

		halt if( m.exists( 79110 ) );
		m.insert( 79110, -0.33f );
		halt if( !m.exists( 79110 ) );
		halt if( !m.exists( -24 ) );
		halt if( !m.exists( 55 ) );

		m.erase( -24 );
		halt if( m.exists( -24 ) );

		m.erase( 79110 );
		halt if( m.exists( 79110 ) );

		m.erase( 55 );
		halt if( m.exists( 55 ) );
	}
	{ // Test for hash collisions. Key type 'OneBitHash' have only 1 bit for hash.
		var ust::unordered_map</ OneBitHash, i32 /> mut m;

		var i32 mut i(0);
		while( i < 256 )
		{
			m.insert( OneBitHash(i), i * i );
			++i;
		}
		i= 0;
		while( i < 256 )
		{
			auto ref= m.find( OneBitHash(i) );
			halt if( ref.empty() );
			halt if( ref.try_deref() != i * i );
			++i;
		}

		m.erase( OneBitHash(66) );
		halt if( !m.find( OneBitHash(66) ).empty() );
		halt if(  m.find( OneBitHash(65) ).empty() );
		halt if(  m.find( OneBitHash(67) ).empty() );

		m.erase( OneBitHash(101) );
		halt if( !m.find( OneBitHash(101) ).empty() );
		halt if(  m.find( OneBitHash(100) ).empty() );
		halt if(  m.find( OneBitHash(102) ).empty() );
	}
	{ // Can modify map value.
		var ust::unordered_map</ i32, ust::string8 /> mut m;
		m.insert( 17, "abc" );
		halt if( m.find(17).try_deref() != "abc" );

		m[17]+= "DEF";
		halt if( m.find(17).try_deref() != "abcDEF" );
		halt if( m[17] != "abcDEF" );

		m.find(17).try_deref()+= "ghi";
		halt if( m.find(17).try_deref() != "abcDEFghi" );
		halt if( m[17] != "abcDEFghi" );
	}
	{ // Iteration

		var ust::unordered_map</ i32, ust::string8 /> mut m;
		m.insert( 11, "A" );
		m.insert( 22, "B" );
		m.insert( 33, "C" );

		var size_type mut iterations(0);
		foreach( mut e : m )
		{
			auto val= e.value();
			e.value()= val + val;
			++iterations;
		}
		halt if( iterations != m.size() );
		halt if( m[11] != "AA" );
		halt if( m[22] != "BB" );
		halt if( m[33] != "CC" );
	}
	{ // Iteration with one-bit hash.

		var ust::unordered_map</ OneBitHash, ust::string8 /> mut m;
		m.insert( OneBitHash(0), "A" );
		m.insert( OneBitHash(1), "B" );
		m.insert( OneBitHash(2), "C" );
		m.insert( OneBitHash(3), "D" );
		m.insert( OneBitHash(4), "E" );

		var size_type mut iterations(0);
		foreach( mut e : m )
		{
			auto val= e.value();
			e.value()= val + val;
			++iterations;
		}
		halt if( iterations != m.size() );
		halt if( m[OneBitHash(0)] != "AA" );
		halt if( m[OneBitHash(1)] != "BB" );
		halt if( m[OneBitHash(2)] != "CC" );
		halt if( m[OneBitHash(3)] != "DD" );
		halt if( m[OneBitHash(4)] != "EE" );
	}
	{ // Iteration with continue

		var ust::unordered_map</ i32, ust::string8 /> mut m;
		m.insert( 7, "A" );
		m.insert( 2, "B" );
		m.insert( 5, "C" );

		auto mut res= 0;
		auto mut iterations= 0s;
		foreach( e : m )
		{
			++iterations;
			if( e.value() == "B" ){ continue; }
			res+= e.key();
		}
		halt if( iterations != m.size() );
		halt if( res != 7 + 5 );
	}
	{ // "insert" may replace value.
		var ust::unordered_map</ ust::string8, i32 /> mut m;
		m.insert( "a", 22 );
		halt if( m["a"] != 22 );

		m.insert( "a", 55 );
		halt if( m["a"] != 55 );

		m.erase( "a" );
		halt if( !m.find("a").empty() );

		m.insert( "a", 666 );
		halt if( m["a"] != 666 );
	}
	{ // obtain value as "erase" result
		var ust::unordered_map</ i32, i32 /> mut m;
		m.insert( 66, 88888 );
		halt if( m.erase( 66 ) != 88888 );
	}
	{ // "drop" method
		var ust::unordered_map</ i32, i32 /> mut m;
		m.insert( 10, 1024 );
		halt if( m.empty() );

		m.drop(10);
		halt if( !m.empty() );

		m.insert( 5, 32 );
		halt if( m.size() != 1s );
	}
	{ // noncopyable value

		var ust::unordered_map</i32, C/> mut m;

		m.insert( 66, C(6) );
		m.insert( 777, C(7) );
		m.insert( 1, C(1) );

		halt if( m[66].x != 6 );
		halt if( m[777].x != 7 );
		halt if( m[1].x != 1 );

		m.insert( 66, C(0) );
		halt if( m[66].x != 0 );

		m[777]= C(777);
		halt if( m[777].x != 777 );
	}
	{ // Test insertion/removal of many identical numbers.

		var ust::unordered_map</u32, i32/> mut m;

		var RandGenerator mut gen;

		for( var size_type mut i= 0s; i < (1s << 24u); ++i )
		{
			// Randomly insert or remove numbers in range [0;256)
			var u32 val= gen.Next();
			var u32 num= val & 255u;
			if( ( val & 512u ) != 0u )
			{
				m.insert( num, -i32(num) );
			}
			else if( m.exists( num ) )
			{
				m.erase( num );
			}
		}

		var i32 mut combination= 0;
		foreach( &el : m )
		{
			combination*= el.value();
			combination+= el.value();
		}

		// Print result of iteration in order to prevent iteration loop to be optimized-out.
		ust::stdout_print( ust::concat( "Result combination: ", ust::to_string8(combination), "\n" ) );
	}
	{
		// Fill map, then remove most of the elements, then iterate it many times.
		// Iteration time should be reasonable.

		var ust::unordered_map</u32, i32/> mut m;

		var RandGenerator mut gen;

		var ust::vector</u32/> mut keys;

		for( var size_type mut i= 0s; i < (1s << 20u); ++i )
		{
			var u32 val= gen.Next() | ( gen.Next() << 16u );
			keys.push_back(val);

			m.insert( val, -3 * i32(val) );
		}

		// Remove all elements except first 16.
		for( var size_type mut i= 16s; i < keys.size() && m.size() > 16s; ++i )
		{
			if( m.exists( keys[i] ) )
			{
				m.erase( keys[i] );
			}
		}

		// Iterate map many times. It should be fast, since map contains only few elements.
		var i32 mut combination= 0;
		for( var size_type mut i= 0s; i < (1s << 16u); ++i )
		{
			foreach( &el : m )
			{
				combination*= el.value();
				combination+= el.value();
			}
		}

		// Print result of iteration in order to prevent iteration loop to be optimized-out.
		ust::stdout_print( ust::concat( "Result combination: ", ust::to_string8(combination), "\n" ) );
	}
	{
		// Fill map, then clear, then iterate it many times.
		// Iteration time should be reasonable.

		var ust::unordered_map</u32, i32/> mut m;

		var RandGenerator mut gen;

		for( var size_type mut i= 0s; i < (1s << 20u); ++i )
		{
			var u32 val= gen.Next() | ( gen.Next() << 16u );
			m.insert( val, -3 * i32(val) );
		}

		m.clear();

		// Iterate map many times. It should be fast, since map is empty.
		var i32 mut combination= 0;
		for( var size_type mut i= 0s; i < (1s << 16u); ++i )
		{
			foreach( &el : m )
			{
				combination*= el.value();
				combination+= el.value();
			}
		}

		// Print result of iteration in order to prevent iteration loop to be optimized-out.
		ust::stdout_print( ust::concat( "Result combination: ", ust::to_string8(combination), "\n" ) );
	}
	{ // Test insertion/removal of many elements with somewhat intermediate chance of identical elements.

		var ust::unordered_map</u32, i32/> mut m;

		var RandGenerator mut gen;

		// Since we have 16-bit random values and 24-bit of iterations we process each number 256 times in average.
		for( var size_type mut i= 0s; i < (1s << 24u); ++i )
		{
			var u32 val= gen.Next();
			if( ( gen.Next() & 1u ) != 0u )
			{
				m.insert( val, -i32(val) );
			}
			else if( m.exists( val ) )
			{
				m.erase( val );
			}
		}

		var i32 mut combination= 0;
		foreach( &el : m )
		{
			combination*= el.value();
			combination+= el.value();
		}

		// Print result of iteration in order to prevent iteration loop to be optimized-out.
		ust::stdout_print( ust::concat( "Result combination: ", ust::to_string8(combination), "\n" ) );
	}
	{ // Test with many searches for not so many elements.

		var ust::unordered_map</u32, i32/> mut m;

		var RandGenerator mut gen;

		// Since we have 16-bit random values and 16-bit of iterations we should roughly have any number in the table.
		for( var size_type mut i= 0s; i < (1s << 16s); ++i )
		{
			var u32 val= gen.Next();
			if( ( gen.Next() & 1u ) != 0u )
			{
				m.insert( val, -i32(val) );
			}
			else if( m.exists( val ) )
			{
				m.erase( val );
			}
		}

		// Perform roughly 4096 searches for each number.
		var i32 mut combination= 0;
		for( var size_type mut i= 0s; i < (1s << 28s); ++i )
		{
			if_var( &val : m.find( gen.Next() ) )
			{
				combination*= val;
				combination+= val;
			}
		}

		// Print result of iteration in order to prevent iteration loop to be optimized-out.
		ust::stdout_print( ust::concat( "Result combination: ", ust::to_string8(combination), "\n" ) );
	}

	return 0;
}
