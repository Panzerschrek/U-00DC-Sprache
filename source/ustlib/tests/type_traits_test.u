//##success_test
import "../imports/type_traits.u"
import "../imports/box_nullable.u"

type I16= i16;

enum SomeEnum_u8 : u8 { A, B, C }

struct EmptyStruct{}
type EmptyStructAlias0= EmptyStruct;
type EmptyStructAlias1= EmptyStruct;

struct NonEmptyStruct{ i32 x; i32 y; }

class A polymorph {}
class B : A {}
class C : B {}

class F interface{}
class G interface{}
class H interface{}
class I : F, G {}
class J : I, H {}
class K : J {}
class L abstract {}

class LargeClassWithMethods
{
	fn Bar( mut this ){}
	fn EmptyStatic(){}
	fn SomeUnsafe( this ) unsafe{}
}

//
// type_select
//

static_assert( same_type</ ust::type_select</ true, i32, bool />, i32 /> );
static_assert( same_type</ ust::type_select</ false, i32, bool />, bool /> );
auto val_true= true;
auto val_false= false;
static_assert( same_type</ ust::type_select</ val_true, tup[f32, f64], [ i32, 2 ] />, tup[f32, f64] /> );
static_assert( same_type</ ust::type_select</ val_false, tup[f32, f64], [ i32, 2 ] />, [ i32, 2 ] /> );

//
// is_parent_for
//

static_assert( !ust::is_parent_for</ u32, u64 />() );
static_assert( !ust::is_parent_for</ u64, u32 />() );
static_assert( !ust::is_parent_for</ bool, A />() );

static_assert(  ust::is_parent_for</ A, B />() );
static_assert( !ust::is_parent_for</ B, A />() );
static_assert( !ust::is_parent_for</ A, C />() );
static_assert(  ust::is_parent_for</ B, C />() );

static_assert(  ust::is_parent_for</ F, I />() );
static_assert(  ust::is_parent_for</ G, I />() );
static_assert( !ust::is_parent_for</ H, I />() );
static_assert(  ust::is_parent_for</ H, J />() );
static_assert(  ust::is_parent_for</ I, J />() );
static_assert( !ust::is_parent_for</ F, J />() );
static_assert( !ust::is_parent_for</ G, J />() );
static_assert(  ust::is_parent_for</ J, K />() );
static_assert( !ust::is_parent_for</ I, K />() );
static_assert( !ust::is_parent_for</ F, K />() );
static_assert( !ust::is_parent_for</ G, K />() );
static_assert( !ust::is_parent_for</ H, K />() );
static_assert( !ust::is_parent_for</ K, H />() );

//
// is_ancestor_for
//

static_assert( !ust::is_ancestor_for</ u32, u64 />() );
static_assert( !ust::is_ancestor_for</ u64, u32 />() );
static_assert( !ust::is_ancestor_for</ bool, A />() );

static_assert(  ust::is_ancestor_for</ A, B />() );
static_assert( !ust::is_ancestor_for</ B, A />() );
static_assert(  ust::is_ancestor_for</ A, C />() );
static_assert(  ust::is_ancestor_for</ B, C />() );

static_assert(  ust::is_ancestor_for</ F, I />() );
static_assert(  ust::is_ancestor_for</ G, I />() );
static_assert( !ust::is_ancestor_for</ H, I />() );
static_assert(  ust::is_ancestor_for</ H, J />() );
static_assert(  ust::is_ancestor_for</ I, J />() );
static_assert(  ust::is_ancestor_for</ F, J />() );
static_assert(  ust::is_ancestor_for</ G, J />() );
static_assert(  ust::is_ancestor_for</ J, K />() );
static_assert(  ust::is_ancestor_for</ I, K />() );
static_assert(  ust::is_ancestor_for</ F, K />() );
static_assert(  ust::is_ancestor_for</ G, K />() );
static_assert(  ust::is_ancestor_for</ H, K />() );
static_assert( !ust::is_ancestor_for</ K, H />() );

//
// is_abstract
//

static_assert( !ust::is_abstract</void/>() );
static_assert( !ust::is_abstract</bool/>() );
static_assert( !ust::is_abstract</i32/>() );
static_assert( !ust::is_abstract</f64/>() );
static_assert( !ust::is_abstract</byte16/>() );
static_assert( !ust::is_abstract</char8/>() );
static_assert( !ust::is_abstract</ [u8, 16] />() );
static_assert( !ust::is_abstract</ tup[] />() );
static_assert( !ust::is_abstract</ tup[ void, bool, [ i16, 7 ], f32] />() );
static_assert( !ust::is_abstract</ $(i128) />() );
static_assert( !ust::is_abstract</ fn( F& f ) />() );
static_assert( !ust::is_abstract</ SomeEnum_u8 />() );
static_assert( !ust::is_abstract</ A />() );
static_assert( !ust::is_abstract</ K />() );
static_assert( !ust::is_abstract</ [ A, 17 ] />() );
static_assert( !ust::is_abstract</ [ [ K, 3 ], 2 ] />() );
static_assert( !ust::is_abstract</ tup[ A, B, K ] />() );
static_assert( ust::is_abstract</ F />() );
static_assert( ust::is_abstract</ L />() );
static_assert( ust::is_abstract</ [ F, 17 ] />() );
static_assert( ust::is_abstract</ [ [ L, 3 ], 2 ] />() );
static_assert( ust::is_abstract</ tup[ A, L, B ] />() );

//
// Have field
//

static_assert( !ust::class_have_field( typeinfo</ EmptyStruct />.fields_list, "some_field" ) );
static_assert(  ust::class_have_field( typeinfo</ NonEmptyStruct />.fields_list, "x" )  );
static_assert(  ust::class_have_field( typeinfo</ NonEmptyStruct />.fields_list, "y" ) );
static_assert( !ust::class_have_field( typeinfo</ NonEmptyStruct />.fields_list, "z" ) );

//
// is_typeinfo_type
//

static_assert( !ust::is_class_typeinfo_type</ i32 />() );
static_assert( !ust::is_class_typeinfo_type</ typeof( typeinfo</i32/> ) />() );
static_assert( !ust::is_class_typeinfo_type</ EmptyStruct />() );
static_assert( ust::is_class_typeinfo_type</ typeof( typeinfo</EmptyStruct/> ) />() );

static_assert( !ust::is_array_typeinfo_type</ i32 />() );
static_assert( !ust::is_array_typeinfo_type</ typeof( typeinfo</i32/> ) />() );
static_assert( !ust::is_array_typeinfo_type</ EmptyStruct />() );
static_assert( ust::is_array_typeinfo_type</ typeof( typeinfo</ [ i32, 2 ] /> ) />() );
static_assert( ust::is_array_typeinfo_type</ typeof( typeinfo</ [ A, 2 ] /> ) />() );

static_assert( !ust::is_tuple_typeinfo_type</ i32 />() );
static_assert( !ust::is_tuple_typeinfo_type</ typeof( typeinfo</i32/> ) />() );
static_assert( !ust::is_tuple_typeinfo_type</ EmptyStruct />() );
static_assert( ust::is_tuple_typeinfo_type</ typeof( typeinfo</ tup[] /> ) />() );
static_assert( ust::is_tuple_typeinfo_type</ typeof( typeinfo</ tup[ i32, f64 ] /> ) />() );
static_assert( ust::is_tuple_typeinfo_type</ typeof( typeinfo</ tup[ A ] /> ) />() );
static_assert( ust::is_tuple_typeinfo_type</ typeof( typeinfo</ tup[ [ i32, 2 ], tup[ u16, bool ] ] /> ) />() );

//
// HaveMethod
//

static_assert( !ust::class_have_method</ LargeClassWithMethods, fn() />( "Foo" ) );
static_assert( !ust::class_have_method</ LargeClassWithMethods, fn( i32 x ) />( "Bar" ) );
static_assert(  ust::class_have_method</ LargeClassWithMethods, fn( LargeClassWithMethods &mut c ) />( "Bar" ) );
static_assert(  ust::class_have_method</ LargeClassWithMethods, fn() />( "EmptyStatic" ) );
static_assert( !ust::class_have_method</ LargeClassWithMethods, fn( i32 x ) />( "EmptyStatic" ) );
static_assert( !ust::class_have_method</ LargeClassWithMethods, fn() unsafe />( "EmptyStatic" ) );
static_assert(  ust::class_have_method</ LargeClassWithMethods, fn( LargeClassWithMethods &imut c ) unsafe />( "SomeUnsafe" ) );
static_assert( !ust::class_have_method</ LargeClassWithMethods, fn( LargeClassWithMethods &imut c ) />( "SomeUnsafe" ) );
static_assert(  ust::class_have_method</ LargeClassWithMethods, fn( LargeClassWithMethods &mut c ) />( "destructor" ) );

fn nomangle main() : i32
{
	var LargeClassWithMethods mut c;
	c.Bar();
	c.EmptyStatic();
	unsafe( c.SomeUnsafe() );

	return 0;
}
