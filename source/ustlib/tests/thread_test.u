//##success_test
import "../imports/thread.u"
import "../imports/shared_ptr_mt.u"
import "../imports/sort.u"
import "../imports/stdout.u"
import "../imports/string_conversions.u"
import "../imports/vector.u"

fn Bar(){}

type IntShared= ust::shared_ptr_mt_mut</i32/>;

struct CallableObject
{
	IntShared x;
	op()( this )
	{
		auto mut l= x.lock_mut();
		++l.deref();
	}
}

fn Get42() : i32
{
	return 42;
}

struct Incrementer
{
	IntShared ptr;
	op()( this )
	{
		auto mut lock= ptr.lock_mut();
		++lock.deref();
	}
}

struct FloatMultiplier
{
	f32& f;
	f32 x;

	op()( this ) : f32
	{
		return f * x;
	}
}

class NonCopyableFunctor
{
public:
	fn constructor( u32 x )
		( x_= x )
	{}

	op()( this ) : u32
	{
		return x_ * x_ + 2u * x_;
	}

private:
	u32 x_;
}

static_assert( !typeinfo</NonCopyableFunctor/>.is_copy_constructible );


class NonCopyableByvalThisFunctor
{
public:
	fn constructor( f64 x )
		( x_= x )
	{}

	op()( byval mut this ) : f64
	{
		return x_ * x_ + 2.0 * x_;
	}

private:
	f64 x_;
}

static_assert( !typeinfo</NonCopyableByvalThisFunctor/>.is_copy_constructible );

thread_local i32 some_thread_local_variable= 9999;

fn ModifyThreadLocalVariable() : i32
{
	unsafe
	{
		// Should have initial value of the variable.
		halt if( some_thread_local_variable != 9999 );

		for( auto mut i= 0s; i < 65536s; ++i )
		{
			some_thread_local_variable+= i32( i & 43s );
		}
		return some_thread_local_variable;
	}
}

fn nomangle main() call_conv( "C" ) : i32
{
	{
		// Can create thread for function.
		auto thread= ust::make_thread( Bar );
	}
	{
		// Can create thread for callable object.
		var IntShared x(0);
		var i32 mut y= 0;
		var CallableObject mut obj{ .x= x };

		{
			auto thread= ust::make_thread( move(obj) );
			// While thread is alive, we can do something.
			++y;
		}
		halt if( x.lock_imut().deref() != 1 );
		halt if( y != 1 );
	}
	{
		// Can create thread for lambda.
		var IntShared x(0);
		var i32 mut y= 0;

		auto mut thread= ust::make_thread(
			lambda[=]()
			{
				auto mut l= x.lock_mut();
				l.deref()= 33;
			});

		move(thread).join();

		halt if( x.lock_imut().deref() != 33 );
	}
	{
		// Can get result of thread.
		auto mut thread= ust::make_thread( Get42 );
		var i32 res= move(thread).join();
		halt if( res != 42 );
	}
	{
		// Can create thread for lambda with captured reference.
		var i32 mut y= 55, y_ref= y;

		auto mut thread= ust::make_thread(
			lambda[&]() : i32
			{
				return y_ref * y_ref;
			} );

		static_assert( typeinfo</typeof(thread)/>.reference_tag_count == 1s ); // Holds a reference.

		auto res= move(thread).join();

		halt if( res != 55 * 55 );
	}
	{
		// Can create thread for lambda with captured mutable reference.
		var i32 mut y= 0;

		auto mut thread= ust::make_thread( lambda[&]() { y= 12345; } );

		static_assert( typeinfo</typeof(thread)/>.reference_tag_count == 1s ); // Holds a reference.

		move(thread).join();

		halt if( y != 12345 );
	}
	{
		// Can create thread for non-copyable functional object.

		auto mut thread= ust::make_thread( NonCopyableFunctor( 786u ) );
		var u32 res= move(thread).join();

		halt if( res != 786u * 786u + 2u * 786u );
	}
	{
		// Can create thread for non-copyable "byval this" functional object.

		auto mut thread= ust::make_thread( NonCopyableByvalThisFunctor( -7.0 ) );
		var f64 res= move(thread).join();

		halt if( res != (-7.0) * (-7.0) + 2.0 * (-7.0) );
	}
	{
		// Multiple concurrent threads.
		var IntShared ptr(0);
		var size_type mut i(0);
		var ust::vector</ ust::thread</ Incrementer, void /> /> mut threads;
		while( i < 64s )
		{
			var Incrementer incrementer{ .ptr= ptr };
			threads.push_back( ust::make_thread(incrementer) );
			++i;
		}

		while( ptr.lock_imut().deref() < 4 ) {} // Wait a bit.

		threads.clear(); // Make join here.
		halt if( ptr.lock_imut().deref() != 64 );
	}
	{
		// Multiple concurrent threads with single reference to a stack variable.
		var f32 mut v= 6.25f;

		var ust::vector</ ust::thread</ FloatMultiplier, f32 /> /> mut threads;
		if(false)
		{
			// Silence "Reference pollution for outer variables inside loop" error.
			threads.push_back( ust::make_thread( FloatMultiplier{ .f= v, .x= 0.0f } ) );
		}

		for( auto mut i= 0s; i < 16s; ++i )
		{
			threads.push_back( ust::make_thread( FloatMultiplier{ .f= v, .x= f32(i) } ) );
		}

		for( var size_type mut i= 0s, i_end= threads.size(); i < i_end; ++i )
		{
			auto res= threads.pop_back().join();
			halt if( res != f32(i_end - 1s - i) * v );
		}
	}
	{
		// Run several threads, each of them works with its own copy of a thread-local variable.

		unsafe{ some_thread_local_variable = 123456; }

		var ust::vector</ ust::thread</ fn() : i32, i32 /> /> mut threads;
		for( auto mut i= 0s; i < 16s; ++i )
		{
			threads.push_back( ust::make_thread( ModifyThreadLocalVariable ) );
		}

		// Get results of each thread.
		var ust::vector</i32/> mut results;
		while( !threads.empty() )
		{
			results.push_back( threads.pop_back().join() );
		}

		// Should get identical results.
		foreach( res : cast_imut(results) )
		{
			halt if( res != cast_imut(results).front() );
		}

		// The value of this thread-local variable in this thread shouldn't be changed.
		unsafe{ halt if( some_thread_local_variable != 123456 ); }
	}

	{
		var ust::thread_id this_thread= ust::get_current_thread_id();

		// Start threads, where on each of them "get_current_thread_id" is called.
		var ust::vector</ ust::thread</ fn() : ust::thread_id, ust::thread_id /> /> mut threads;
		for( auto mut i= 0s; i < 8s; ++i )
		{
			threads.push_back( ust::make_thread( ust::get_current_thread_id ) );
		}

		// Get results of each thread.
		var ust::vector</ust::thread_id/> mut results;
		while( !threads.empty() )
		{
			var ust::thread_id self_id= threads.back().get_id();
			var ust::thread_id returned_id= threads.pop_back().join();
			// Result of "get_id" method should be identical to the result of "get_current_thread_id" call within this thread.
			halt if( self_id != returned_id );
			results.push_back( returned_id );
		}

		// All threads should have id distinct from this thread id.
		foreach( id : results )
		{
			halt if( id == this_thread );
		}

		// Sort and remove duplicates. Ensure, that all ids are unqies.
		var size_type size_before= results.size();

		ust::sort( results );
		results.remove_adjacent_duplicates();

		halt if( results.size() != size_before );
	}

	var u32 number_of_available_cpus= ust::get_number_of_available_cpus();
	ust::stdout_print( ust::concat( "Number of available CPUs: ", ust::to_string8(number_of_available_cpus), "\n" ) );
	halt if ( number_of_available_cpus == 0u );

	// Sleep.
	{
		ust::stdout_print( "Going to sleep for 2.5 seconds\n" );
		ust::sleep( ust::duration::from_milliseconds( 2500u64 ) );
		ust::stdout_print( "Done sleeping\n" );
	}

	return 0;
}
