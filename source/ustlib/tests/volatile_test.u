//##success_test
import "../imports/volatile.u"

fn DoBoolTest()
{
	var bool mut x= false;
	ust::volatile_write( x, true );
	ust::volatile_write( x, true );
	ust::volatile_read( x );
	ust::volatile_read( x );
	halt if( ust::volatile_read( x ) != true );
	ust::volatile_write( x, false );
	ust::volatile_write( x, false );
	ust::volatile_read( x );
	ust::volatile_read( x );
	halt if( ust::volatile_read( x ) != false );
}

template</type T/>
fn DoIntsTest()
{
	var T mut x= zero_init;
	ust::volatile_write( x, T(33) );
	ust::volatile_write( x, T(33) );
	ust::volatile_read( x );
	ust::volatile_read( x );
	halt if( ust::volatile_read( x ) != T(33) );
}

template</type T/>
fn DoFloatsTest()
{
	var T mut x= zero_init;
	ust::volatile_write( x, T(2.718281828) );
	ust::volatile_write( x, T(2.718281828) );
	ust::volatile_read( x );
	ust::volatile_read( x );
	halt if( ust::volatile_read( x ) != T(2.718281828) );
}

template</type T/>
fn DoCharsTest()
{
	var T mut x= zero_init;
	ust::volatile_write( x, T('a') );
	ust::volatile_write( x, T('a') );
	ust::volatile_read( x );
	ust::volatile_read( x );
	halt if( ust::volatile_read( x ) != T('a') );
}

template<//> type interer_type_for_byte_type</  byte8/> =   u8;
template<//> type interer_type_for_byte_type</ byte16/> =  u16;
template<//> type interer_type_for_byte_type</ byte32/> =  u32;
template<//> type interer_type_for_byte_type</ byte64/> =  u64;
template<//> type interer_type_for_byte_type</byte128/> = u128;

template</type T/>
fn DoBytesTest()
{
	type IntT= interer_type_for_byte_type</T/>;

	var T mut x= zero_init;
	ust::volatile_write( x, T(IntT(114)) );
	ust::volatile_write( x, T(IntT(114)) );
	ust::volatile_read( x );
	ust::volatile_read( x );
	halt if( ust::volatile_read( x ) != T(IntT(114)) );
}

fn nomangle main() call_conv( "C" ) : i32
{
	DoBoolTest();

	DoIntsTest</  i8/>();
	DoIntsTest</  u8/>();
	DoIntsTest</ i16/>();
	DoIntsTest</ u16/>();
	DoIntsTest</ i32/>();
	DoIntsTest</ u32/>();
	DoIntsTest</ i64/>();
	DoIntsTest</ u64/>();
	DoIntsTest</i128/>();
	DoIntsTest</u128/>();
	DoIntsTest</ssize_type/>();
	DoIntsTest</size_type/>();

	DoFloatsTest</f32/>();
	DoFloatsTest</f64/>();

	DoCharsTest</char8/>();
	DoCharsTest</char16/>();
	DoCharsTest</char32/>();

	DoBytesTest</  byte8/>();
	DoBytesTest</ byte16/>();
	DoBytesTest</ byte32/>();
	DoBytesTest</ byte64/>();
	DoBytesTest</byte128/>();

	return 0;
}
