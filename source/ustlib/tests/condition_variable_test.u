//##success_test
import "../imports/condition_variable.u"
import "../imports/thread.u"
import "../imports/semaphore.u"

fn nomangle main() : i32
{
	{
		auto m= ust::make_shared_ptr_mt_mutex( false );

		var ust::condition_variable cv;

		var ust::semaphore semaphore(0u);

		// Create a thread, which waits in loop until shared value is not "true".
		auto t= ust::make_thread(
			lambda[m, &cv, &semaphore]()
			{
				auto mut lock= m.lock();
				semaphore.release(); // Notify main thread that we are ready.
				loop
				{
					if( lock.deref() )
					{
						break;
					}
					else
					{
						cv.wait( lock );
					}
				}
			} );

		// Use a semaphore to wait until created thread reaches waiting loop.
		// This is necessary to ensure that waiting function is entered before we set value of shared variable.
		semaphore.acquire();

		// On current thread set shared value to "true" and notify waiting thread.
		with( mut lock : m.lock() )
		{
			lock.deref()= true;
		}
		cv.notify_one();
	}

	return 0;
}
