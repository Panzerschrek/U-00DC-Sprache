//##success_test
import "../imports/binary_heap.u"
import "../imports/math.u"
import "../imports/sort.u"
import "../imports/vector.u"

type IntRange= ust::random_access_range_mut</i32/>;
type IntRangeImut= ust::random_access_range_imut</i32/>;

class RandGenerator
{
public:
	fn Next( mut this ) : u32
	{
		state_= ( 22695477u * state_ + 1u ) & 0x7FFFFFFFu;
		return state_ >> 16u;
	}

private:
	u32 state_= 0u;
}

fn CompareAbs( i32 l, i32 r ) : bool
{
	return ust::abs(l) < ust::abs(r);
}

struct CompareGreater
{
	op()( this, i32 l, i32 r ) : bool
	{
		return l > r;
	}
}

fn nomangle main() : i32
{
	{ // Sort empty array.
		var [ i32, 0 ] mut arr[ ];
		ust::binary_heap::sort( arr );
		halt if( !ust::is_sorted( arr ) );
	}
	{ // Sort array from one element.
		var [ i32, 1 ] mut arr[ 45254 ];
		ust::binary_heap::sort( arr );
		halt if( !ust::is_sorted( arr ) );
	}

	// All combinations of 2 elements.
	for( auto mut i0= 0; i0 < 2; ++i0 )
	{
		for( auto mut i1= 0; i1 < 2; ++i1 )
		{
			var [ i32, 2 ] mut arr[ i0, i1 ];
			ust::binary_heap::sort( arr );
			halt if( !ust::is_sorted( arr ) );
		}
	}

	// All combinations of 3 elements.
	for( auto mut i0= 0; i0 < 3; ++i0 )
	{
		for( auto mut i1= 0; i1 < 3; ++i1 )
		{
			for( auto mut i2= 0; i2 < 3; ++i2 )
			{
				var [ i32, 3 ] mut arr[ i0, i1, i2 ];
				ust::binary_heap::sort( arr );
				halt if( !ust::is_sorted( arr ) );
			}
		}
	}

	// All combinations of 4 elements.
	for( auto mut i0= 0; i0 < 4; ++i0 )
	{
		for( auto mut i1= 0; i1 < 4; ++i1 )
		{
			for( auto mut i2= 0; i2 < 4; ++i2 )
			{
				for( auto mut i3= 0; i3 < 4; ++i3 )
				{
					var [ i32, 4 ] mut arr[ i0, i1, i2, i3 ];
					ust::binary_heap::sort( arr );
					halt if( !ust::is_sorted( arr ) );
				}
			}
		}
	}

	// All combinations of 5 elements.
	for( auto mut i0= 0; i0 < 5; ++i0 )
	{
		for( auto mut i1= 0; i1 < 5; ++i1 )
		{
			for( auto mut i2= 0; i2 < 5; ++i2 )
			{
				for( auto mut i3= 0; i3 < 5; ++i3 )
				{
					for( auto mut i4= 0; i4 < 5; ++i4 )
					{
						var [ i32, 5 ] mut arr[ i0, i1, i2, i3, i4 ];
						ust::binary_heap::sort( arr );
						halt if( !ust::is_sorted( arr ) );
					}
				}
			}
		}
	}

	// All combinations of 6 elements.
	for( auto mut i0= 0; i0 < 6; ++i0 )
	{
		for( auto mut i1= 0; i1 < 6; ++i1 )
		{
			for( auto mut i2= 0; i2 < 6; ++i2 )
			{
				for( auto mut i3= 0; i3 < 6; ++i3 )
				{
					for( auto mut i4= 0; i4 < 6; ++i4 )
					{
						for( auto mut i5= 0; i5 < 6; ++i5 )
						{
							var [ i32, 6 ] mut arr[ i0, i1, i2, i3, i4, i5 ];
							ust::binary_heap::sort( arr );
							halt if( !ust::is_sorted( arr ) );
						}
					}
				}
			}
		}
	}

	// All combinations of 7 elements.
	for( auto mut i0= 0; i0 < 7; ++i0 )
	{
		for( auto mut i1= 0; i1 < 7; ++i1 )
		{
			for( auto mut i2= 0; i2 < 7; ++i2 )
			{
				for( auto mut i3= 0; i3 < 7; ++i3 )
				{
					for( auto mut i4= 0; i4 < 7; ++i4 )
					{
						for( auto mut i5= 0; i5 < 7; ++i5 )
						{
							for( auto mut i6= 0; i6 < 7; ++i6 )
							{
								var [ i32, 7 ] mut arr[ i0, i1, i2, i3, i4, i5, i6 ];
								ust::binary_heap::sort( arr );
								halt if( !ust::is_sorted( arr ) );
							}
						}
					}
				}
			}
		}
	}

	// All combinations of 6 elements for floats.
	for( auto mut i0= 0; i0 < 6; ++i0 )
	{
		for( auto mut i1= 0; i1 < 6; ++i1 )
		{
			for( auto mut i2= 0; i2 < 6; ++i2 )
			{
				for( auto mut i3= 0; i3 < 6; ++i3 )
				{
					for( auto mut i4= 0; i4 < 6; ++i4 )
					{
						for( auto mut i5= 0; i5 < 6; ++i5 )
						{
							var [ f32, 6 ] mut arr[ f32(i0), f32(i1), f32(i2), f32(i3), f32(i4), f32(i5) ];
							ust::binary_heap::sort( arr );
							halt if( !ust::is_sorted( arr ) );
						}
					}
				}
			}
		}
	}

	{ // All elements are same.
		var [ i32, 50 ] mut arr= zero_init;
		ust::binary_heap::sort( arr );
		halt if( !ust::is_sorted( arr ) );
	}
	{ // Cases, where all elements are same, except one element which is greater than others.
		auto num= 100;
		for( auto mut i= 0; i < num; ++i )
		{
			var [ i32, num ] mut arr= zero_init;
			arr[ u32(i) ]= 1;
			ust::binary_heap::sort( arr );
			halt if( !ust::is_sorted( arr ) );
		}
	}
	{ // Cases, where all elements are same, except one element which is less than others.
		auto num= 100;
		for( auto mut i= 0; i < num; ++i )
		{
			var [ i32, num ] mut arr= zero_init;
			arr[ u32(i) ]= -1;
			ust::binary_heap::sort( arr );
			halt if( !ust::is_sorted( arr ) );
		}
	}
	{ // Sort sorted array.
		auto num= 150;
		var [ i32, num ] mut arr= zero_init;
		for( auto mut i= 0; i < num; ++i )
		{
			arr[ u32(i) ]= i;
		}
		halt if( !ust::is_sorted( arr ) );
		ust::binary_heap::sort( arr );
		halt if( !ust::is_sorted( arr ) );
	}

	{ // Sort reverse-sorted array.
		auto num= 133;
		var [ i32, num ] mut arr= zero_init;
		for( auto mut i= 0; i < num; ++i )
		{
			arr[ u32(i) ]= num - i;
		}

		ust::binary_heap::sort( arr );
		halt if( !ust::is_sorted( arr ) );
	}
	{ // Sort array with only two values - 0 or 1.
		auto num= 107;
		var [ i32, num ] mut arr= zero_init;
		for( auto mut i= 0; i < num; ++i )
		{
			arr[ u32(i) ]= i & 1;
		}

		ust::binary_heap::sort( arr );
		halt if( !ust::is_sorted( arr ) );
	}
	{ // Sort sorted array with only two values - 0 or 1.
		auto num= 120;
		var [ i32, num ] mut arr= zero_init;
		for( auto mut i= 0; i < num; ++i )
		{
			arr[ u32(i) ]= i * 2 / num;
		}

		ust::binary_heap::sort( arr );
		halt if( !ust::is_sorted( arr ) );
	}
	{ // Sort reverse-sorted array with only two values - 0 or 1.
		auto num= 106;
		var [ i32, num ] mut arr= zero_init;
		for( auto mut i= 0; i < num; ++i )
		{
			arr[ u32(i) ]= ( num - 1 - i ) * 2 / num;
		}

		ust::binary_heap::sort( arr );
		halt if( !ust::is_sorted( arr ) );
	}
	{ // Test for complexity. Sort array of million pseudo-random numbers.
		var ust::vector</i32/> mut vec;
		vec.resize( size_type( 1024 * 1024 ), 0 );

		var RandGenerator mut gen;
		foreach( &mut i : vec )
		{
			i= i32(gen.Next());
		}

		ust::binary_heap::sort( vec );
		halt if( !ust::is_sorted( vec ) );
	}
	{ // Test for complexity. Sort array of million pseudo-random f64 numbers.
		var ust::vector</f64/> mut vec;
		vec.resize( size_type( 1024 * 1024 ), 0.0 );

		var RandGenerator mut gen;
		foreach( &mut i : vec )
		{
			i= f64(gen.Next());
		}

		ust::sort( vec );
		halt if( !ust::is_sorted( vec ) );
	}
	{ // Test for complexity. Sort already sorted array.
		var ust::vector</i32/> mut vec;
		vec.resize( 1024s * 256s, 0 );

		{
			auto mut n= 0;
			foreach( &mut i : vec )
			{
				i= n;
				++n;
			}
		}

		ust::binary_heap::sort( vec );
		halt if( !ust::is_sorted( vec ) );
	}
	{ // Test for complexity. Sort reverse-sorted array.
		var ust::vector</i32/> mut vec;
		vec.resize( 1024s * 256s, 0 );

		{
			auto mut n= i32(vec.size());
			foreach( &mut i : vec )
			{
				i= n;
				--n;
			}
		}

		ust::binary_heap::sort( vec );
		halt if( !ust::is_sorted( vec ) );
	}
	{ // Sort, using custom comparator in form of function pointer.
		auto num= 113;
		var[ i32, num ] mut arr= zero_init;

		var RandGenerator mut gen;
		foreach( &mut i : arr )
		{
			i= i32( gen.Next() - 16384u );
		}

		ust::binary_heap::sort( IntRange(arr), CompareAbs );
		halt if( !ust::is_sorted( IntRangeImut(arr), CompareAbs ) );
	}
	{ // Sort by key, using custom key provider in form of function pointer.
		auto num= 113;
		var[ i32, num ] mut arr= zero_init;

		var RandGenerator mut gen;
		foreach( &mut i : arr )
		{
			i= i32( gen.Next() - 16384u );
		}

		var ( fn( i32 x ) : i32 ) abs_func= ust::abs</i32/>;
		var ( fn( i32 l, i32 r ) : bool ) comp= CompareAbs;

		ust::binary_heap::sort_by_key( IntRange(arr), abs_func );
		halt if( !ust::is_sorted( IntRangeImut(arr), CompareAbs ) );
	}
	{ // Sort, using custom comparator in form of functional object.
		auto num= 99;
		var[ i32, num ] mut arr= zero_init;

		var RandGenerator mut gen;
		foreach( &mut i : arr )
		{
			i= i32(gen.Next());
		}

		ust::binary_heap::sort( IntRange(arr), CompareGreater() );
		halt if( !ust::is_sorted( IntRangeImut(arr), CompareGreater() ) );
	}

	return 0;
}
