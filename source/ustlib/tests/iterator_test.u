//##success_test
import "../imports/math.u"
import "../imports/optional.u"
import "../imports/optional_ref.u"
import "../imports/random_access_range.u"
import "../imports/string.u"
import "../imports/vector.u"
import "../imports/unordered_set.u"

type IntRangeMut = ust::random_access_range_mut </i32/>;
type IntRangeImut= ust::random_access_range_imut</i32/>;

type FloatRangeMut = ust::random_access_range_mut </f32/>;
type FloatRangeImut= ust::random_access_range_imut</f32/>;

class NonCopyable
{
	i32 x;
	fn constructor( i32 in_x ) ( x= in_x ) {}
}

static_assert( !typeinfo</NonCopyable/>.is_copy_constructible );

template</type T/>
fn constexpr GetNextMethodIndex() : size_type
{
	auto mut index= 0s;
	for( &func : typeinfo</T/>.functions_list )
	{
		if( ust::constexpr_string_equals( func.name, "next" ) )
		{
			return index;
		}
		++index;
	}
	halt; // Not found.
}

template</type T/> fn IsOptional( ust::optional</T/>& t ) : bool
{
	return true;
}

template</type T/> fn IsOptional( T& t ) : bool
{
	return false;
}

template</type T/> fn IsOptionalRefMut( ust::optional_ref</T, true/>& t ) : bool
{
	return true;
}

template</type T/> fn IsOptionalRefMut( T& t ) : bool
{
	return false;
}

template</type T/> fn IsOptionalRefImut( ust::optional_ref</T, false/>& t ) : bool
{
	return true;
}

template</type T/> fn IsOptionalRefImut( T& t ) : bool
{
	return false;
}

class C
{
	i32 x;
	fn constructor( i32 in_x ) ( x= in_x ) {}
}

struct CWrapper
{
	C c;
}

class CSequenceIterator
{
public:
	fn next( mut this ) : ust::optional</C/>
	{
		if( x >= 10 )
		{
			return ust::null_optional;
		}
		var ust::optional</C/> res( C(x) );
		++x;
		return res;
	}

private:
	i32 x= 0;
}

class CSequenceIteratorCreator
{
	fn iter() : auto
	{
		return ust::wrap_raw_iterator( CSequenceIterator() );
	}
}

struct IVec2
{
	i32 x;
	i32 y;

	fn GetY( this ) : i32&
	{
		return y;
	}
}

fn SquareInt( i32 x ) : i32
{
	return x * x;
}

fn generator FirstNInts( u32 n ) : u32
{
	for( auto mut i= 0u; i < n; ++i )
	{
		yield i;
	}
}

fn generator VecEvenElements( ust::vector</u32/> &mut vec ) : u32 &mut
{
	foreach( &mut el : vec )
	{
		if( el % 2u == 0u )
		{
			yield el;
		}
	}
}

class NonCopyableIterator
{
public:
	fn constructor( u32 limit )
		( limit_= limit, current_= 0u )
	{
	}

	fn next( mut this ) : ust::optional</u32/>
	{
		if( current_ == limit_ )
		{
			return ust::null_optional;
		}
		var u32 res= current_ * current_ + current_;
		++current_;
		return res;
	}

private:
	u32 limit_;
	u32 current_;
}

static_assert( !typeinfo</NonCopyableIterator/>.is_copy_constructible );
static_assert( !typeinfo</NonCopyableIterator/>.is_copy_assignable );

fn nomangle main() : i32
{
	{ // Basic iteration.
		var [ i32, 4 ] ints[ 44, 33, 22, 11 ];
		auto mut it= IntRangeImut( ints ).iter();
		var size_type mut num_iterations= 0s;
		loop
		{
			var ust::optional_ref_imut</i32/> ref= it.next();
			if( ref.empty() )
			{
				break;
			}
			halt if( ref.try_deref() != ints[ num_iterations ] );
			++num_iterations;
		}
		halt if( num_iterations != 4s );
	}
	{ // Basic iteration with mutation.
		var [ i32, 4 ] mut ints[ 10, 11, 12, 13 ];
		var size_type mut num_iterations= 0s;
		with( mut it : IntRangeMut( ints ).iter() )
		{
			loop
			{
				var ust::optional_ref_mut</i32/> ref= it.next();
				if( ref.empty() )
				{
					break;
				}
				ref.try_deref() *= 3;
				++num_iterations;
			}
		}
		halt if( num_iterations != 4s );
		halt if( ints[0] != 30 );
		halt if( ints[1] != 33 );
		halt if( ints[2] != 36 );
		halt if( ints[3] != 39 );
	}
	{ // Basic iteration with foreach.
		var [ i32, 4 ] ints[ 44, 33, 22, 11 ];
		var size_type mut num_iterations= 0s;
		foreach( &i : IntRangeImut( ints ) )
		{
			halt if( i != ints[ num_iterations ] );
			++num_iterations;
		}
		halt if( num_iterations != 4s );
	}
	{ // Basic iteration with mutation via foreacg.
		var [ i32, 4 ] mut ints[ 10, 11, 12, 13 ];
		var size_type mut num_iterations= 0s;
		foreach( &mut i : IntRangeMut( ints ) )
		{
			i*= 3;
			++num_iterations;
		}
		halt if( num_iterations != 4s );
		halt if( ints[0] != 30 );
		halt if( ints[1] != 33 );
		halt if( ints[2] != 36 );
		halt if( ints[3] != 39 );
	}
	{ // Immutable iteration over noncopyable type.
		var [ NonCopyable, 3 ] arr[ (43), (54), (65) ];
		var size_type mut num_iterations= 0s;
		foreach( &v : ust::array_view_imut</NonCopyable/>( arr ) )
		{
			halt if( v.x != arr[num_iterations].x );
			++num_iterations;
		}
		halt if( num_iterations != 3s );
	}
	{ // Mutable iteration over noncopyable type.
		var [ NonCopyable, 3 ] mut arr[ (0), (0), (0) ];
		var size_type mut num_iterations= 0s;
		foreach( &mut v : ust::array_view_mut</NonCopyable/>( arr ) )
		{
			v.x= i32(num_iterations) * 10;
			++num_iterations;
		}
		halt if( num_iterations != 3s );
		halt if( arr[0].x != 0 );
		halt if( arr[1].x != 10 );
		halt if( arr[2].x != 20 );
	}
	{ // Inspect result types.
		var IntRangeImut range;
		auto mut it= range.iter();
		auto next_res= it.next();
		halt if( IsOptional(next_res) );
		halt if( !IsOptionalRefImut(next_res) );
		halt if( IsOptionalRefMut(next_res) );
	}
	{ // Inspect result types.
		var IntRangeMut range;
		auto mut it= range.iter();
		auto next_res= it.next();
		halt if( IsOptional(next_res) );
		halt if( IsOptionalRefImut(next_res) );
		halt if( !IsOptionalRefMut(next_res) );
	}
	{ // Iterator is copyable.
		var [ i32, 4 ] ints[ 44, 33, 22, 11 ];
		auto mut it= IntRangeImut( ints ).iter();
		auto mut it_copy= it; // Make copy.

		// Iterate over copy.
		var size_type mut num_iterations= 0s;
		loop
		{
			var ust::optional_ref_imut</i32/> ref= it_copy.next();
			if( ref.empty() )
			{
				break;
			}
			halt if( ref.try_deref() != ints[ num_iterations ] );
			++num_iterations;
		}
		halt if( num_iterations != 4s );

		// Iterate over original iterator.
		num_iterations= 0s;
		loop
		{
			var ust::optional_ref_imut</i32/> ref= it.next();
			if( ref.empty() )
			{
				break;
			}
			halt if( ref.try_deref() != ints[ num_iterations ] );
			++num_iterations;
		}
		halt if( num_iterations != 4s );
	}
	{
		// Should properly handle iterator returning values.
		var size_type mut num_iterations= 0s;
		foreach( c : CSequenceIteratorCreator() )
		{
			halt if( c.x != i32(num_iterations) );
			++num_iterations;
		}
		halt if( num_iterations != 10s );
	}
	{
		// Should properly handle iterator returning values and create a reference for temp value.
		var size_type mut num_iterations= 0s;
		foreach( &c : CSequenceIteratorCreator() )
		{
			halt if( c.x != i32(num_iterations) );
			++num_iterations;
		}
		halt if( num_iterations != 10s );
	}
	{
		// Should properly handle iterator returning values and move such values.
		var ust::vector</C/> mut values;
		var size_type mut num_iterations= 0s;
		foreach( mut c : CSequenceIteratorCreator() )
		{
			values.push_back( move(c) );
		}
		halt if( values.size() != 10s );

		num_iterations= 0s;
		foreach( &c : values )
		{
			halt if( c.x != i32(num_iterations) );
			++num_iterations;
		}
		++num_iterations;
	}
	{ // "first" method.
		var [ i32, 4 ] ints[ 88, 44, 22, 11 ];
		halt if( IntRangeImut(ints).iter().first().try_deref() != 88 );
	}
	{ // "first" method for empty sequence - should return nothing.
		halt if( !IntRangeImut().iter().first().empty() );
	}
	{ // "last" method.
		var [ i32, 4 ] ints[ 88, 44, 22, 11 ];
		halt if( IntRangeImut(ints).iter().last().try_deref() != 11 );
	}
	{ // "last" method for empty sequence - should return nothing.
		halt if( !IntRangeImut().iter().last().empty() );
	}
	{ // Count for sequence of known length.
		var [ i32, 42 ] arr= zero_init;
		halt if( IntRangeImut(arr).iter().count() != 42s );
	}
	{ // Count for sequence of with possible dynamic length.
		halt if( CSequenceIteratorCreator().iter().count() != 10s );
	}
	{ // Collect into vector.
		var [ i32, 4 ] ints[ 88, 44, 22, 11 ];
		var ust::vector</i32/> vec= IntRangeImut(ints).iter().collect</ ust::vector</i32/> />();
		halt if( vec.size() != 4s );
		halt if( vec[0s] != 88 );
		halt if( vec[1s] != 44 );
		halt if( vec[2s] != 22 );
		halt if( vec[3s] != 11 );
	}
	{ // Collect into vector for empty sequence.
		var [ i32, 0 ] ints[ ];
		auto vec= IntRangeImut(ints).iter().collect</ ust::vector</i32/> />();
		halt if( vec.size() != 0s );
	}
	{ // Collect into vector for noncopyable type.
		var ust::vector</C/> vec= CSequenceIteratorCreator().iter().collect</ ust::vector</C/> />();
		halt if( vec.size() != 10s );
		for( auto mut i= 0s; i < 10s; ++i )
		{
			halt if( vec[i].x != i32(i) );
		}
	}
	{ // Collect into unordered set. Result should be deduplicated.
		var [ i32, 6 ] ints[ 15, 23, -5, 15, 23, 125 ];
		auto ints_set= IntRangeImut(ints).iter().collect</ ust::unordered_set</i32/> />();
		halt if( ints_set.size() != 4s );
		halt if( !ints_set.exists( 15 ) );
		halt if( !ints_set.exists( 23 ) );
		halt if( !ints_set.exists( -5 ) );
		halt if( !ints_set.exists( 125 ) );
	}
	{ // Collect into string.
		auto str= ust::string_view8( "Gott muss ein Arschloch sein" ).iter().collect</ ust::string8 />();
		halt if( str != "Gott muss ein Arschloch sein" );
	}
	{ // Collect with type conversion.
		var [ [ char8, 3 ], 3 ] arrays[ "foo", "bar", "Baz" ];
		var ust::vector</ ust::string8 /> strings= ust::array_view_imut</ [ char8, 3 ] />(arrays).iter().collect</ ust::vector</ ust::string8 /> />();
		halt if( strings.size() != 3s );
		halt if( strings[0s] != "foo" );
		halt if( strings[1s] != "bar" );
		halt if( strings[2s] != "Baz" );
	}
	{ // Collect into vector, using only type template name.
		var [ i32, 4 ] ints[ 88, 44, 22, 11 ];
		var ust::vector</i32/> vec= IntRangeImut(ints).iter().collect</ ust::vector />();
		halt if( vec.size() != 4s );
		halt if( vec[0s] != 88 );
		halt if( vec[1s] != 44 );
		halt if( vec[2s] != 22 );
		halt if( vec[3s] != 11 );
	}
	{ // Collect into unordered set, using only type template name.
		var [ i32, 6 ] ints[ 15, 23, -5, 15, 23, 125 ];
		auto ints_set= IntRangeImut(ints).iter().collect</ ust::unordered_set />();
		halt if( ints_set.size() != 4s );
		halt if( !ints_set.exists( 15 ) );
		halt if( !ints_set.exists( 23 ) );
		halt if( !ints_set.exists( -5 ) );
		halt if( !ints_set.exists( 125 ) );
	}
	{ // "all" method.
		var [ i32, 4 ] ints[ 5, -3, 77, 11 ];
		var i32 zero= 0;
		var bool all_positive= IntRangeImut(ints).iter().all( lambda[&]( i32 x ) : bool { return x > zero; } );
		halt if( all_positive );
		var bool all_odd= IntRangeImut(ints).iter().all( lambda[=]( i32& x ) : bool { return ( x & 1 ) != zero; } );
		halt if( !all_odd );
	}
	{ // "all" method for empty sequence - should return "true".
		var bool all_empty= IntRangeImut().iter().all( lambda( i32 x ) : bool { return false; } );
		halt if( !all_empty );
	}
	{ // "any" method.
		var [ i32, 4 ] ints[ 5, -3, 77, 11 ];
		var i32 zero= 0;
		var bool any_positive= IntRangeImut(ints).iter().any( lambda[&]( i32 x ) : bool { return x > zero; } );
		halt if( !any_positive );
		var bool any_even= IntRangeImut(ints).iter().any( lambda[=]( i32& x ) : bool { return ( x & 1 ) == zero; } );
		halt if( any_even );
	}
	{ // "any" method for empty sequence - should return "false".
		var bool any_empty= IntRangeImut().iter().any( lambda( i32& x ) : bool { return true; } );
		halt if( any_empty );
	}
	{ // "fold" method.
		var [ i32, 4 ] ints[ 67, 5, 123, -11 ];
		var i32 sum= IntRangeImut(ints).iter().fold( 100, lambda( i32 x, i32 y ) : i32 { return x + y; } );
		halt if( sum != 100 + 67 + 5 + 123 - 11 );
	}
	{ // "fold" method - calculate product.
		var [ i32, 4 ] ints[ 13, 5, 20, 7 ];
		var i32 product= IntRangeImut(ints).iter().fold( 3, lambda( i32 x, i32 y ) : i32 { return x * y; } );
		halt if( product != 3 * 13 * 5 * 20 * 7 );
	}
	{ // "fold" method for non-commutative function.
		var [ i32, 4 ] ints[ 67, 5, 123, -11 ];
		var i32 diff= IntRangeImut(ints).iter().fold( 1000, lambda( i32& x, i32& y ) : i32 { return x - y; } );
		halt if( diff != 1000 - 67 - 5 - 123 + 11 );
	}
	{ // "fold" for empty sequence returns initial value.
		var i32 res= IntRangeImut().iter().fold( 1234, lambda( i32 x, i32 y ) : i32 { return x + y; } );
		halt if( res != 1234 );
	}
	{ // "filter" method.
		var [ i32, 5 ] ints[ 67, -1234, 5, 123, -11 ];
		auto non_negative_ints=
			IntRangeImut(ints)
			.iter()
			.filter( lambda( i32& x ) : bool { return x > 0; } )
			.collect</ ust::vector</i32/> /> ();
		halt if( non_negative_ints.size() != 3s );
		halt if( non_negative_ints[0s] != 67 );
		halt if( non_negative_ints[1s] != 5 );
		halt if( non_negative_ints[2s] != 123 );
	}
	{ // "filter" method with capturing lambda insize.
		var [ i32, 11 ] ints[ 5, 16, 99, 786, 100, 674, 105, 33, -55, -77, 91 ];
		var i32 center= 100;
		auto near_center=
			IntRangeImut(ints)
			.iter()
			.filter( lambda[&]( i32& x ) : bool { return ust::abs( x - center ) < 10; } )
			.collect</ ust::vector</i32/> /> ();
		halt if( near_center.size() != 4s );
		halt if( near_center[0s] != 99 );
		halt if( near_center[1s] != 100 );
		halt if( near_center[2s] != 105 );
		halt if( near_center[3s] != 91 );
	}
	{ // "map" method for values.
		var [ i32, 3 ] ints[ 7, 5, 3 ];
		auto floats=
			IntRangeImut(ints)
			.iter()
			.map( lambda( i32 x ) : f32 { return f32(x); } )
			.collect</ ust::vector</f32/> />();
		halt if( floats.size() != 3s );
		halt if( floats[0s] != 7.0f );
		halt if( floats[1s] != 5.0f );
		halt if( floats[2s] != 3.0f );
	}
	{ // "map" for immutable reference mapping.
		var[ IVec2, 3 ] vecs[ { .x=1, .y=2 }, { .x=3, .y=4 }, { .x=5, .y=6 } ];
		var size_type mut i= 0s;
		foreach( &y : ust::random_access_range_imut</IVec2/>(vecs).iter().map( lambda( IVec2& vec ) : i32& { return vec.y; } ) )
		{
			halt if( y != i32(i) * 2 + 2 );
			++i;
		}
	}
	{ // "map" for mutable reference mapping.
		var[ IVec2, 5 ] mut vecs= zero_init;
		{
			var size_type mut i= 0s;
			auto mut it= ust::random_access_range_mut</IVec2/>(vecs).iter().map( lambda( IVec2 &mut vec ) : i32 &mut { return vec.x; } );
			loop
			{
				auto next_res= it.next();
				if( next_res.empty() )
				{
					break;
				}
				next_res.try_deref()= i32(i) * 5;
				++i;
			}
		}

		halt if( vecs[0].x !=  0 );
		halt if( vecs[1].x !=  5 );
		halt if( vecs[2].x != 10 );
		halt if( vecs[3].x != 15 );
		halt if( vecs[4].x != 20 );
	}
	{ // "map" for source iterator producing move-only values.
		auto wrappers=
			CSequenceIteratorCreator()
			.iter()
			.map(
				lambda( C mut c ) : CWrapper
				{
					var CWrapper wrapper{ .c= move(c) };
					return wrapper;
				} )
			.collect</ ust::vector</ CWrapper /> />();

		halt if( wrappers.size() != 10s );
		auto mut i= 0;
		foreach( &wrapper : wrappers )
		{
			halt if( wrapper.c.x != i );
			++i;
		}
	}
	{ // "map" method with function pointer.
		var [ i32, 4 ] ints[ 5, 42, -11, 17 ];
		auto squares=
			IntRangeImut(ints)
			.iter()
			.map( SquareInt )
			.collect</ ust::vector</i32/> />();
		halt if( squares.size() != 4s );
		halt if( squares[0s] != 25 );
		halt if( squares[1s] != 1764 );
		halt if( squares[2s] != 121 );
		halt if( squares[3s] != 289 );
	}
	{ // "map" for immutable reference mapping using function pointer for member function.
		var[ IVec2, 3 ] vecs[ { .x= 0, .y= 1 }, { .x= 0, .y= 4 }, { .x= 0, .y= 9 } ];
		var i32 mut i= 0;
		foreach( &y : ust::random_access_range_imut</IVec2/>(vecs).iter().map( IVec2::GetY ) )
		{
			halt if( y != (i + 1) * (i + 1) );
			++i;
		}
	}
	{ // "filter_map" method.
		var [ i32, 7 ] ints[ -3, 42, 87, -34, -76, 77, -11 ];
		auto non_negative_floats=
			IntRangeImut(ints)
			.iter()
			.filter_map(
				lambda[]( i32& x ) : ust::optional</f32/>
				{
					if( x < 0 ) { return ust::null_optional; }
					return f32(x);
				} )
			.collect</ ust::vector</f32/> />();
		var [ f32, 3 ] expected_result[ 42.0f, 87.0f, 77.0f ];
		halt if( non_negative_floats.range() != expected_result );
	}
	{ // "filter_map" method for references.
		var[ IVec2, 4 ] vecs[ { .x= 34, .y= 0 }, { .x= -11, .y= 77 }, { .x= 83, .y= 9 }, { .x= -64, .y= -67 } ];
		auto zero= 0;
		auto non_negative_xs=
			ust::random_access_range_imut</IVec2/>(vecs)
			.iter()
			.filter_map(
				lambda[&zero]( IVec2& vec ) : ust::optional_ref_imut</i32/>
				{
					if( vec.x < zero ) { return ust::null_optional_ref; }
					return ust::optional_ref_imut</i32/>(vec.x);
				} )
			.collect</ ust::vector</i32/> />();
		var [ i32, 2 ] expected_result[ 34, 83 ];
		halt if( non_negative_xs.range() != expected_result );
	}
	{ // "filter_map" for non-copyable value.
		auto c_vec=
			CSequenceIteratorCreator()
			.iter()
			.filter_map(
				lambda( C mut c ) : ust::optional</CWrapper/>
				{
					if( (c.x & 1) != 0 ) { return ust::null_optional; }
					var CWrapper wrapper{ .c= move(c) };
					return wrapper;
				})
				.collect</ ust::vector</CWrapper/> />();
			halt if( c_vec.size() != 5s );
			auto mut i= 0;
			foreach( &c_wrapper : c_vec )
			{
				halt if( c_wrapper.c.x != i * 2 );
				++i;
			}
	}
	{ // "chain" method.
		var [ i32, 3 ] ints0[ 11, 22, 33 ];
		var [ i32, 4 ] ints1[ 44, 55, 66, 77 ];
		auto ints_combined=
			IntRangeImut(ints0)
			.iter()
			.chain( IntRangeImut(ints1).iter() )
			.collect</ ust::vector</i32/> />();
		var [ i32, 7 ] expected_result[ 11, 22, 33, 44, 55, 66, 77 ];
		halt if( ints_combined.range() != expected_result );
	}
	{ // "chain" method for mutation.
		var [ i32, 3 ] mut ints0[ 11, 22, 33 ];
		var [ i32, 4 ] mut ints1[ 44, 55, 66, 77 ];
		foreach ( &mut i : IntRangeMut(ints0).iter().chain( IntRangeMut(ints1).iter() ) )
		{
			i*= -2;
		}
		halt if( ints0[0] != -22 );
		halt if( ints0[1] != -44 );
		halt if( ints0[2] != -66 );
		halt if( ints1[0] != -88 );
		halt if( ints1[1] != -110 );
		halt if( ints1[2] != -132 );
		halt if( ints1[3] != -154 );
	}
	{ // "find" method
		var [ i32, 7 ] ints[ 3, 5, 124, 6, 7, 76, 11052 ];
		auto threshold= 34;
		auto val=
			IntRangeImut(ints)
			.iter()
			.find(
				lambda[&]( i32& x ) : bool
				{
					return x >= threshold;
				}
			);
		halt if( val.empty() );
		halt if( val.try_deref() != 124 );
	}
	{ // "find" method found nothing
		var [ i32, 7 ] ints[ 3, 5, 124, 6, 7, 76, 11052 ];
		auto threshold= -5544;
		auto val=
			IntRangeImut(ints)
			.iter()
			.find(
				lambda[=]( i32& x ) : bool
				{
					return x <= threshold;
				}
			);
		halt if( !val.empty() );
	}
	{ // "find" method for empty sequence
		auto val=
			IntRangeImut()
			.iter()
			.find(
				lambda[=]( i32 x ) : bool
				{
					return x == 0;
				}
			);
		halt if( !val.empty() );
	}
	{ // "find" method for mutable sequence.
		var [ i32, 7 ] mut ints[ 3, 5, 124, 6, 7, 76, 11052 ];
		{
			auto threshold= 34;
			auto val=
				IntRangeMut(ints)
				.iter()
				.find(
					lambda[&]( i32& x ) : bool
					{
						return x >= threshold;
					}
				);
			halt if( val.empty() );
			halt if( val.try_deref() != 124 );
			val.try_deref() = 0;
		}
		halt if( ints[2] != 0 );
	}
	{ // "find" method for values sequence.
		var ust::optional</C/> val= CSequenceIteratorCreator().iter().find( lambda( C& c ) : bool { return c.x == 4; } );
		halt if( val.empty() );
		halt if( val.try_deref().x != 4 );
	}
	{ // "position" method
		var [ i32, 7 ] ints[ 3, 5, 124, 6, 7, 76, 11052 ];
		auto threshold= 34;
		var ust::optional</size_type/> pos=
			IntRangeImut(ints)
			.iter()
			.position(
				lambda[&]( i32& x ) : bool
				{
					return x >= threshold;
				}
			);
		halt if( pos.empty() );
		halt if( pos.try_deref() != 2s );
	}
	{ // "position" method found nothing
		var [ i32, 7 ] ints[ 3, 5, 124, 6, 7, 76, 11052 ];
		auto threshold= -5544;
		auto pos=
			IntRangeImut(ints)
			.iter()
			.position(
				lambda[=]( i32& x ) : bool
				{
					return x <= threshold;
				}
			);
		halt if( !pos.empty() );
	}
	{ // "position" method for values sequence.
		var ust::optional</size_type/> pos=
			CSequenceIteratorCreator()
			.iter()
			.position(
				lambda( C c ) : bool
				{
					return c.x == 7;
				} );
		halt if( pos.empty() );
		halt if( pos != 7s );
	}
	{ // "limit" method - limit is less than sequence size.
		var [ i32, 4 ] ints[ 44, 33, 22, 11 ];
		auto limit_result=
			IntRangeImut(ints)
			.iter()
			.limit(2s)
			.collect</ ust::vector</i32/> />();
		var [ i32, 2 ] expected_result[ 44, 33 ];
		halt if( limit_result.range() != expected_result );
	}
	{ // "limit" method - limit is greater than sequence size.
		var [ i32, 4 ] ints[ 44, 33, 22, 11 ];
		auto limit_result=
			IntRangeImut(ints)
			.iter()
			.limit(200s)
			.collect</ ust::vector</i32/> />();
		var [ i32, 4 ] expected_result[ 44, 33, 22, 11 ];
		halt if( limit_result.range() != expected_result );
	}
	{ // "limit" method - limit is zero.
		var [ i32, 4 ] ints[ 44, 33, 22, 11 ];
		auto limit_result=
			IntRangeImut(ints)
			.iter()
			.limit(0s)
			.collect</ ust::vector</i32/> />();
		halt if( !limit_result.empty() );
	}
	{ // "limit" method - modify sequence.
		var [ i32, 4 ] mut ints[ 5, 25, 125, 625 ];
		foreach( &mut i : IntRangeMut(ints).iter().limit(3s) )
		{
			i*= -1;
		}
		halt if( ints[0] != -5 );
		halt if( ints[1] != -25 );
		halt if( ints[2] != -125 );
		halt if( ints[3] != 625 );
	}
	{ // "limit" method for values sequence.
		auto c_objects=
			CSequenceIteratorCreator()
			.iter()
			.limit(7s)
			.collect</ ust::vector</C/> />();
		halt if( c_objects.size() != 7s );
		for( auto mut i= 0; i < 7; ++i )
		{
			halt if( c_objects[ size_type(i) ].x != i );
		}
	}
	{ // "skip" method - size is less than sequence size.
		var [ i32, 4 ] ints[ 44, 33, 22, 11 ];
		auto skip_result=
			IntRangeImut(ints)
			.iter()
			.skip(2s)
			.collect</ ust::vector</i32/> />();
		var [ i32, 2 ] expected_result[ 22, 11 ];
		halt if( skip_result.range() != expected_result );
	}
	{ // "skip" method - size is greater than sequence size.
		var [ i32, 4 ] ints[ 44, 33, 22, 11 ];
		auto skip_result=
			IntRangeImut(ints)
			.iter()
			.skip(200s)
			.collect</ ust::vector</i32/> />();
		halt if( !skip_result.empty() );
	}
	{ // "skip" method - size is zero.
		var [ i32, 4 ] ints[ 44, 33, 22, 11 ];
		auto skip_result=
			IntRangeImut(ints)
			.iter()
			.skip(0s)
			.collect</ ust::vector</i32/> />();
		halt if( skip_result.range() != ints );
	}
	{ // "skip" method - modify sequence.
		var [ i32, 4 ] mut ints[ 5, 25, 125, 625 ];
		foreach( &mut i : IntRangeMut(ints).iter().skip(2s) )
		{
			i*= -1;
		}
		halt if( ints[0] != 5 );
		halt if( ints[1] != 25 );
		halt if( ints[2] != -125 );
		halt if( ints[3] != -625 );
	}
	{ // "skip" method for values sequence.
		auto c_objects=
			CSequenceIteratorCreator()
			.iter()
			.skip(5s)
			.collect</ ust::vector</C/> />();
		halt if( c_objects.size() != 5s );
		for( auto mut i= 0; i < 5; ++i )
		{
			halt if( c_objects[ size_type(i) ].x != 5 + i );
		}
	}
	{ // "nth" method.
		var [ i32, 4 ] ints[ 44, 33, 22, 11 ];
		auto el= IntRangeImut(ints).iter().nth(2s);
		halt if( el.empty() );
		halt if( el.try_deref() != 22 );
	}
	{ // "nth" method for zero inidex.
		var [ i32, 4 ] ints[ 44, 33, 22, 11 ];
		auto el= IntRangeImut(ints).iter().nth(0s);
		halt if( el.empty() );
		halt if( el.try_deref() != 44 );
	}
	{ // "nth" method - found nothing.
		var [ i32, 4 ] ints[ 44, 33, 22, 11 ];
		auto el= IntRangeImut(ints).iter().nth(200s);
		halt if( !el.empty() );
	}
	{ // "nth" method - modify sequence.
		var [ i32, 4 ] mut ints[ 5, 10, 15, 20 ];
		IntRangeMut(ints).iter().nth(1s).try_deref()= 0;
		halt if( ints[1] != 0 );
	}
	{ // "nth" method for values sequence.
		auto el= CSequenceIteratorCreator().iter().nth(6s);
		halt if( el.empty() );
		halt if( el.try_deref().x != 6 );
	}
	{ // "nth" method for values sequence - out of range.
		auto el= CSequenceIteratorCreator().iter().nth(100500s);
		halt if( !el.empty() );
	}
	// "zip" iterator.
	{
		var [ i32, 4 ] ints[ 5, 25, 125, 625 ];
		var [ f32, 3 ] floats[ -1.0f, -2.0f, -3.0f ];
		var [ tup[ i32, f32 ], 3 ] expected_result[ [ 5, -1.0f ], [ 25, -2.0f ], [ 125, -3.0f ] ];

		auto mut i= 0u;
		foreach( pair : IntRangeImut(ints).iter().zip( FloatRangeImut(floats).iter() ) )
		{
			static_assert( same_type</ typeof(pair), ust::iterator_impl::zip_iterator_pair</ i32, true, false, f32, true, false /> /> );

			halt if( pair.first != expected_result[i][0] );
			halt if( pair.second != expected_result[i][1] );
			++i;
		}
		halt if( i != 3u );
	}
	// "zip" iterator has 0 iterations for empty first sequence.
	{
		var [ f32, 3 ] floats[ -1.0f, -2.0f, -3.0f ];

		auto count= IntRangeImut().iter().zip( FloatRangeImut(floats).iter() ).count();
		halt if( count != 0s );
	}
	// "zip" iterator has 0 iterations for empty second sequence.
	{
		var [ i32, 4 ] ints[ 5, 25, 125, 625 ];
		auto count= IntRangeImut(ints).iter().zip( FloatRangeImut().iter() ).count();
		halt if( count != 0s );
	}
	// "zip" iterator with size limited by first sequence.
	{
		var [ i32, 25 ] ints= zero_init;
		var [ f32, 10 ] floats= zero_init;

		halt if( IntRangeImut(ints).iter().zip( FloatRangeImut(floats).iter() ).count() != 10s );
	}
	// "zip" iterator with size limited by second sequence.
	{
		var [ i32, 15 ] ints= zero_init;
		var [ f32, 34 ] floats= zero_init;

		halt if( IntRangeImut(ints).iter().zip( FloatRangeImut(floats).iter() ).count() != 15s );
	}
	// "zip" iterator - mutate both values.
	{
		var [ i32, 4 ] mut ints[ 5, 25, 125, 625 ];
		var [ f32, 3 ] mut floats[ -1.0f, -2.0f, -3.0f ];

		auto mut i= 0u;
		foreach( pair : IntRangeMut(ints).iter().zip( FloatRangeMut(floats).iter() ) )
		{
			static_assert( same_type</ typeof(pair), ust::iterator_impl::zip_iterator_pair</ i32, true, true, f32, true, true /> /> );
			pair.first*= 2;
			pair.second *= -1.0f;
			++i;
		}
		halt if( i != 3u );
		halt if( ints[0] != 10 );
		halt if( ints[1] != 50 );
		halt if( ints[2] != 250 );
		halt if( ints[3] != 625 );
		halt if( floats[0] != 1.0f );
		halt if( floats[1] != 2.0f );
		halt if( floats[2] != 3.0f );
	}
	// "zip" iterator - mutate first sequence.
	{
		var [ i32, 3 ] mut ints= zero_init;
		var [ f32, 3 ] floats[ 2.0f, 4.0f, 8.0f ];

		auto mut i= 0u;
		foreach( pair : IntRangeMut(ints).iter().zip( FloatRangeImut(floats).iter() ) )
		{
			static_assert( same_type</ typeof(pair), ust::iterator_impl::zip_iterator_pair</ i32, true, true, f32, true, false /> /> );
			pair.first= i32( pair.second );
			++i;
		}
		halt if( i != 3u );
		halt if( ints[0] != 2 );
		halt if( ints[1] != 4 );
		halt if( ints[2] != 8 );
	}
	// "zip" iterator - mutate second sequence.
	{
		var [ i32, 3 ] ints[ 5, 25, 125 ];
		var [ f32, 3 ] mut floats= zero_init;

		auto mut i= 0u;
		foreach( pair : IntRangeImut(ints).iter().zip( FloatRangeMut(floats).iter() ) )
		{
			static_assert( same_type</ typeof(pair), ust::iterator_impl::zip_iterator_pair</ i32, true, false, f32, true, true /> /> );
			pair.second= f32(pair.first);
			++i;
		}
		halt if( i != 3u );
		halt if( floats[0] != 5.0f );
		halt if( floats[1] != 25.0f );
		halt if( floats[2] != 125.0f );
	}
	// "zip" iterator for both value-sequences.
	{
		auto mut i= 0;
		auto mut it= CSequenceIteratorCreator().iter().zip( CSequenceIteratorCreator().iter() );
		loop
		{
			if_var( &pair : it.next() )
			{
				static_assert( same_type</ typeof(pair), ust::iterator_impl::zip_iterator_pair</ C, false, true, C, false, true /> /> );
				halt if( pair.first.x != i );
				halt if( pair.second.x != i );
				++i;
			}
			else
			{
				break;
			}
		}
		halt if( i != 10 );
	}
	// Iterator for generator.
	{
		auto mut it= ust::make_iterator_for_generator( FirstNInts(6u) );
		for( auto mut i= 0u; i < 6u; ++i )
		{
			halt if( it.next() != i );
		}
	}
	// Iterator for generator which captures a reference.
	{
		var ust::vector</u32/> mut v= ust::make_array( 7u, 88u, 65u, 17u, 1u, 55u, 78u, 66u );
		foreach( &mut el : ust::make_iterator_for_generator( VecEvenElements(v) ) )
		{
			halt if( el % 2u != 0u );
			el= 0u;
		}
		halt if( v[1s] != 0u );
		halt if( v[6s] != 0u );
		halt if( v[7s] != 0u );
	}
	// "foreach" macro for non-copyable iterator.
	{
		var ust::vector</u32/> mut vec;
		foreach( n : ust::wrap_raw_iterator( NonCopyableIterator(5u) ) )
		{
			vec.push_back(n);
		}
		halt if( vec.size() != 5s );
		halt if( vec[0s] != 0u );
		halt if( vec[1s] != 2u );
		halt if( vec[2s] != 6u );
		halt if( vec[3s] != 12u );
		halt if( vec[4s] != 20u );
	}

	return 0;
}
