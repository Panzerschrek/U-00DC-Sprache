//##success_test
import "../imports/atomic.u"

fn nomangle main() : i32
{
	{
		var i32 mut x=-77;
		halt if( ust::atomic_read( x ) != -77 );
		ust::atomic_write( x, 55 );
		halt if( ust::atomic_read( x ) != 55 );
	}
	{
		var u32 mut x=99u;
		halt if( ust::atomic_read( x ) != 99u );
		ust::atomic_write( x, 99999999u );
		halt if( ust::atomic_read( x ) != 99999999u );
	}
	{
		var u32 mut x= 0u;
		halt if( ust::atomic_add( x, 56u ) !=  0u );
		halt if( ust::atomic_sub( x,  6u ) != 56u );
		halt if( ust::atomic_inc( x ) != 50u );
		halt if( ust::atomic_dec( x ) != 51u );
		halt if( ust::atomic_read(x) != 50u );
	}
	{
		var i32 mut x= 0;
		halt if( ust::atomic_add( x, 56 ) !=  0 );
		halt if( ust::atomic_sub( x, 66 ) != 56 );
		halt if( ust::atomic_inc( x ) != -10 );
		halt if( ust::atomic_dec( x ) != - 9 );
		halt if( ust::atomic_read(x) != -10 );
	}
	{
		var size_type mut x= 0s;
		halt if( ust::atomic_add( x, 56s ) !=  0s );
		halt if( ust::atomic_sub( x,  6s ) != 56s );
		halt if( ust::atomic_inc( x ) != 50s );
		halt if( ust::atomic_dec( x ) != 51s );
		halt if( ust::atomic_read(x) != 50s );
	}
	{
		var ssize_type mut x(0);
		halt if( ust::atomic_add( x, ssize_type(56) ) != ssize_type( 0) );
		halt if( ust::atomic_sub( x, ssize_type(66) ) != ssize_type(56) );
		halt if( ust::atomic_inc( x ) != ssize_type(-10) );
		halt if( ust::atomic_dec( x ) != ssize_type(-9) );
		halt if( ust::atomic_read(x) != ssize_type(-10) );
	}
	{
		var i32 mut x= 22, mut y= 22;
		halt if( ust::atomic_compare_exchange_strong( x, y, 7 ) != true );
		halt if( ust::atomic_read(x) !=  7 );
		halt if( ust::atomic_read(y) != 22 );
	}
	{
		var i32 mut x= 111, mut y= 77;
		halt if( ust::atomic_compare_exchange_strong( x, y, 7 ) != false );
		halt if( ust::atomic_read(x) != 111 );
		halt if( ust::atomic_read(y) != 111 );
	}
	{
		var u32 mut x= 14u, mut y= 14u;
		halt if( ust::atomic_compare_exchange_strong( x, y, 85u ) != true );
		halt if( ust::atomic_read(x) != 85u );
		halt if( ust::atomic_read(y) != 14u );
	}
	{
		var u32 mut x= 521u, mut y= 66u;
		halt if( ust::atomic_compare_exchange_strong( x, y, 55524u ) != false );
		halt if( ust::atomic_read(x) != 521u );
		halt if( ust::atomic_read(y) != 521u );
	}
	{
		var byte32 mut x= byte32(14), mut y= byte32(14);
		halt if( ust::atomic_compare_exchange_strong( x, y, byte32(85) ) != true );
		halt if( ust::atomic_read(x) != byte32(85) );
		halt if( ust::atomic_read(y) != byte32(14) );
	}
	{
		var byte32 mut x= byte32(521), mut y= byte32(66);
		halt if( ust::atomic_compare_exchange_strong( x, y, byte32(55524) ) != false );
		halt if( ust::atomic_read(x) != byte32(521) );
		halt if( ust::atomic_read(y) != byte32(521) );
	}
	{
		var ssize_type mut x(14), mut y(14);
		halt if( ust::atomic_compare_exchange_strong( x, y, ssize_type(85) ) != true );
		halt if( ust::atomic_read(x) != ssize_type(85) );
		halt if( ust::atomic_read(y) != ssize_type(14) );
	}
	{
		var ssize_type mut x(521), mut y(66);
		halt if( ust::atomic_compare_exchange_strong( x, y, ssize_type(55524) ) != false );
		halt if( ust::atomic_read(x) != ssize_type(521) );
		halt if( ust::atomic_read(y) != ssize_type(521) );
	}
	{
		var size_type mut x= 14s, mut y= 14s;
		halt if( ust::atomic_compare_exchange_strong( x, y, 85s ) != true );
		halt if( ust::atomic_read(x) != 85s );
		halt if( ust::atomic_read(y) != 14s );
	}
	{
		var size_type mut x= 521s, mut y= 66s;
		halt if( ust::atomic_compare_exchange_strong( x, y, 55524s ) != false );
		halt if( ust::atomic_read(x) != 521s );
		halt if( ust::atomic_read(y) != 521s );
	}
	{
		var byte32 mut b(123);
		halt if( ust::atomic_read( b ) != byte32(123) );
		ust::atomic_write( b, byte32(54) );
		halt if( ust::atomic_read( b ) != byte32(54) );
	}
	static_if( typeinfo</size_type/>.size_of == 8s )
	{
		var byte64 mut b(12345678910u64);
		halt if( ust::atomic_read( b ) != byte64(12345678910u64) );
		ust::atomic_write( b, byte64(33000000000000u64) );
		halt if( ust::atomic_read( b ) != byte64(33000000000000u64) );
	}
	{
		var char16 mut c= zero_init, mut d= zero_init;
		var $(char16) mut c_ptr= $<(c), mut d_ptr= $<(d);

		halt if( ust::atomic_read( c_ptr ) != $<(c) );
		ust::atomic_write( c_ptr, d_ptr );
		halt if( ust::atomic_read( c_ptr ) != $<(d) );
	}

	return 0;
}
