//##fail_test
import "../imports/string.u"
import "../imports/unordered_map.u"

class C
{
	// noncopyable by default.
	fn constructor( i32 in_x ) ( x= in_x ) {}

	i32 x;
}

class NonCopyableKey
{
	// Class is noncopyable by default.
	struct hasher
	{
		fn hash( NonCopyableKey& s ) : size_type { return 0s; }
	}
	op==( NonCopyableKey& a, NonCopyableKey& b ) : bool { return true; }
}

type BrokenUnorderedMap= ust::unordered_map</NonCopyableKey, i32/>; //##expect_error TemplateContext

fn nomangle main() : i32
{

	{ // Try to copy noncopyable container. It is noncopyable because of noncopyable value.
		var ust::unordered_map</i32, C/> m;
		auto m_copy= m; //##expect_error CopyConstructValueOfNoncopyableType
	}
	{ // Iterator has reference to map.
		var ust::unordered_map</i32, i32/> mut m;
		auto i_imut= cast_imut(m).iter();
		auto i_mut = m.iter(); //##expect_error ReferenceProtectionError
	}
	{ // Iterator has reference to map.
		var ust::unordered_map</i32, i32/> mut m;
		auto i= m.iter();
		m.insert_or_update( 0, 5 ); //##expect_error ReferenceProtectionError
	}
	{ // "retain" method doesn't allow to use "unsafe" function.
		var ust::unordered_map</u32, f32/> mut m;
		m.retain( lambda( u32& k, f32& v ) unsafe : bool { return true; } ); //##expect_error TemplateContext
	}
	{ // Function given for "retain" method modifies itself.
		var ust::unordered_map</u32, f32/> mut m;
		m.retain( lambda mut ( u32& k, f32& v ) : bool { return true; } ); //##expect_error TemplateContext
	}
	{ // Function given for "retain" method tries to modify given key.
		var ust::unordered_map</u32, f32/> mut m;
		m.retain( lambda( u32 &mut k, f32& v ) : bool { return true; } ); //##expect_error TemplateContext
	}
	{ // Function given for "retain" has invalid signature.
		var ust::unordered_map</u32, f32/> mut m;
		m.retain( lambda( f32& v ) : bool { return true; } ); //##expect_error TemplateContext
	}
	{ // Function given for "retain" has invalid signature.
		var ust::unordered_map</u32, f32/> mut m;
		m.retain( lambda( u32& k ) : bool { return true; } ); //##expect_error TemplateContext
	}
	{ // Function given for "retain" has invalid signature.
		var ust::unordered_map</u32, f32/> mut m;
		m.retain( lambda( u32& k, f32& v, char8 c ) : bool { return true; } ); //##expect_error TemplateContext
	}
	{ // Function given for "retain" doesn't return "bool".
		var ust::unordered_map</u32, f32/> mut m;
		m.retain( lambda( u32& k, f32& v ) {} ); //##expect_error TemplateContext
	}
	{ // A value given to "retain" method is not a function.
		var ust::unordered_map</u32, f32/> mut m;
		m.retain( 76u ); //##expect_error TemplateContext
	}

	return 0;
}
