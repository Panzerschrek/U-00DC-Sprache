//##success_test
import "../imports/composite.u"
import "../imports/string.u"

class NonCopyable
{
public:
	fn constructor(i32 x) (x_= x) {}
	fn GetX(this) : i32 { return x_; }

private:
	i32 x_;
}

struct Ref
{
	i32& r;
}

fn nomangle main() : i32
{
	//
	// make_array test
	//

	{ // 0 elements
		var [bool, 0] constexpr arr = ust::make_array</bool/>();
		ust::ignore_unused(arr);
	}
	{ // 0 elements
		var [f64, 0] constexpr arr = ust::make_array</f64/>();
		ust::ignore_unused(arr);
	}
	{ // 1 element
		var [i32, 1] constexpr arr = ust::make_array(524);
		halt if(arr[0] != 524);
	}
	{ // 2 elements
		var [f32, 2] constexpr arr = ust::make_array(45.3f, 66.7f);
		halt if(arr[0] != 45.3f);
		halt if(arr[1] != 66.7f);
	}
	{ // 3 elements
		var [u32, 3] constexpr arr = ust::make_array(888u, 999u, 222u);
		halt if(arr[0] != 888u);
		halt if(arr[1] != 999u);
		halt if(arr[2] != 222u);
	}
	{ // 4 elements
		var [char8, 4] constexpr arr = ust::make_array("S"c8, "P"c8, "Q"c8, "R"c8);
		halt if(arr[0] != "S"c8);
		halt if(arr[1] != "P"c8);
		halt if(arr[2] != "Q"c8);
		halt if(arr[3] != "R"c8);
	}
	{ // 5 elements
		var [i32, 5] constexpr arr = ust::make_array(1, 2, 3, 4, 5);
		halt if(arr[0] != 1);
		halt if(arr[1] != 2);
		halt if(arr[2] != 3);
		halt if(arr[3] != 4);
		halt if(arr[4] != 5);
	}
	{ // 6 elements
		var [bool, 6] constexpr arr = ust::make_array(true, true, false, true, false, false);
		halt if(arr[0] != true);
		halt if(arr[1] != true);
		halt if(arr[2] != false);
		halt if(arr[3] != true);
		halt if(arr[4] != false);
		halt if(arr[5] != false);
	}
	{ // 7 elements
		var [f32, 7] constexpr arr = ust::make_array(0.0f, 1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f);
		halt if(arr[0] != 0.0f);
		halt if(arr[1] != 1.0f);
		halt if(arr[2] != 2.0f);
		halt if(arr[3] != 3.0f);
		halt if(arr[4] != 4.0f);
		halt if(arr[5] != 5.0f);
		halt if(arr[6] != 6.0f);
	}
	{ // 8 elements
		var [u64, 8] constexpr arr = ust::make_array(7u64, 6u64, 5u64, 4u64, 3u64, 2u64, 1u64, 0u64);
		halt if(arr[0] != 7u64);
		halt if(arr[1] != 6u64);
		halt if(arr[2] != 5u64);
		halt if(arr[3] != 4u64);
		halt if(arr[4] != 3u64);
		halt if(arr[5] != 2u64);
		halt if(arr[6] != 1u64);
		halt if(arr[7] != 0u64);
	}
	{ // make_array for non-copyable type.
		var [NonCopyable, 2] arr = ust::make_array(NonCopyable(11), NonCopyable(22));
		halt if(arr[0].GetX() != 11);
		halt if(arr[1].GetX() != 22);
	}
	{ // make_array for string class.
		var [ust::string8, 3] arr = ust::make_array(ust::string8("Quick"), ust::string8("Brown"), ust::string8("Fox"));
		halt if(arr[0] != "Quick");
		halt if(arr[1] != "Brown");
		halt if(arr[2] != "Fox");
	}
	{ // make_array with implicit type.
		var [ust::string8, 3] arr = ust::make_array</ust::string8/>("Jumps", "Over", "The");
		halt if(arr[0] != "Jumps");
		halt if(arr[1] != "Over");
		halt if(arr[2] != "The");
	}
	{ // make_array for arrays.
		var [[char8, 4], 2] constexpr arr = ust::make_array("ABCD", "0123");
		halt if(arr[0] != ust::string8("ABCD"));
		halt if(arr[1] != ust::string8("0123"));
	}
	{ // make_array for types with references inside.
		var i32 x= 1, y= 2;
		var Ref rx{ .r= x }, ry{ .r= y };
		auto arr= ust::make_array( rx, ry );
		halt if( arr[0].r != 1 );
		halt if( arr[1].r != 2 );
	}

	//
	// make_tuple test
	//

	{ // 0 elements
		var tup[] constexpr t = ust::make_tuple();
		ust::ignore_unused(t);
	}
	{ // 1 element
		var tup[i32] constexpr t = ust::make_tuple(765i32);
		halt if(t[0] != 765);
	}
	{ // 2 elements
		var tup[u64, f32] constexpr t = ust::make_tuple(98u64, 0.25f);
		halt if(t[0] != 98u64);
		halt if(t[1] != 0.25f);
	}
	{ // 3 elements
		var tup[u32, bool, f64] constexpr t = ust::make_tuple(55u, false, 354.1);
		halt if(t[0] != 55u);
		halt if(t[1] != false);
		halt if(t[2] != 354.1);
	}
	{ // 4 elements
		var tup[f32, i16, char8, tup[]] constexpr t = ust::make_tuple(0.001f, 546i16, "G"c8, ust::make_tuple());
		halt if(t[0] != 0.001f);
		halt if(t[1] != 546i16);
		halt if(t[2] != "G"c8);
		//halt if(t[3] != ust::make_tuple());
	}
	{ // 5 elements
		var tup[tup[f32], bool, bool, f64, i32] constexpr t = ust::make_tuple(ust::make_tuple(15.0f), false, true, 55.5, 315263);
		halt if(t[0][0] != ust::make_tuple(15.0f)[0]);
		halt if(t[1] != false);
		halt if(t[2] != true);
		halt if(t[3] != 55.5);
		halt if(t[4] != 315263);
	}
	{ // 6 elements
		var tup[i8, u8, i16, u16, i32, u32] constexpr t = ust::make_tuple(0i8, 1u8, 2i16, 3u16, 4i32, 5u32);
		halt if(t[0] != 0i8);
		halt if(t[1] != 1u8);
		halt if(t[2] != 2i16);
		halt if(t[3] != 3u16);
		halt if(t[4] != 4i32);
		halt if(t[5] != 5u32);
	}
	{ // 7 elements
		var tup[char8, char16, char32, bool, f32, f64, void] constexpr t = ust::make_tuple("Q"c8, "W"c16, "E"c32, true, -34.4f, 34.4, void());
		halt if(t[0] != "Q"c8);
		halt if(t[1] != "W"c16);
		halt if(t[2] != "E"c32);
		halt if(t[3] != true);
		halt if(t[4] != -34.4f);
		halt if(t[5] != 34.4);
		halt if(t[6] != void());
	}
	{ // 8 elements
		var tup[void, char8, u8, u16, u32, u64, u128, bool] constexpr t = ust::make_tuple(void(), "~"c8, 6u8, 7u16, 8u32, 9u64, 10u128, true);
		halt if(t[0] != void());
		halt if(t[1] != "~"c8);
		halt if(t[2] != 6u8);
		halt if(t[3] != 7u16);
		halt if(t[4] != 8u32);
		halt if(t[5] != 9u64);
		halt if(t[6] != 10u128);
		halt if(t[7] != true);
	}
	{ // make_tuple for non-copyable type.
		var tup[NonCopyable] t= ust::make_tuple(NonCopyable(66));
		halt if(t[0].GetX() != 66);
	}
	{ // make_tuple for non-copyable type.
		var tup[NonCopyable, NonCopyable] t= ust::make_tuple(NonCopyable(11), NonCopyable(22));
		halt if(t[0].GetX() != 11);
		halt if(t[1].GetX() != 22);
	}
	{ // make_tuple for non-copyable type.
		var tup[NonCopyable, NonCopyable, NonCopyable] t= ust::make_tuple(NonCopyable(-11), NonCopyable(-22), NonCopyable(-33));
		halt if(t[0].GetX() != -11);
		halt if(t[1].GetX() != -22);
		halt if(t[2].GetX() != -33);
	}
	{ // make_tuple for non-copyable type.
		var tup[void, char8, u8, u16, u32, u64, NonCopyable, bool] t = ust::make_tuple(void(), "~"c8, 6u8, 8u16, 8u32, 9u64, NonCopyable(123), false);
		halt if(t[6].GetX() != 123);
	}
	{ // make_tuple for string class
		var tup[u32, ust::string8] t = ust::make_tuple(66u, ust::string8("fgbww6!"));
		halt if(t[0] != 66u);
		halt if(t[1] != "fgbww6!");
	}
	{ // make_tuple for arrays
		var tup[[char8, 4], [char8, 7]] constexpr t = ust::make_tuple("1234", "ABCDEF!");
		halt if(t[0] != ust::string8("1234"));
		halt if(t[1] != ust::string8("ABCDEF!"));
	}

	{ // Make array of tuples
		var [ tup[f32, bool], 3 ] constexpr arr= ust::make_array(ust::make_tuple(0.25f, true), ust::make_tuple(1.25f, false), ust::make_tuple(77.8f, true));
		halt if(arr[0][0] != 0.25f);
		halt if(arr[0][1] != true);
		halt if(arr[1][0] != 1.25f);
		halt if(arr[1][1] != false);
		halt if(arr[2][0] != 77.8f);
		halt if(arr[2][1] != true);
	}
	{ // Make tuple of arrays
		var tup[ [i32, 2], [u64, 3] ] constexpr t= ust::make_tuple(ust::make_array(6, 9), ust::make_array(6u64, 88u64, 123u64));
		halt if(t[0][0] != 6);
		halt if(t[0][1] != 9);
		halt if(t[1][0] != 6u64);
		halt if(t[1][1] != 88u64);
		halt if(t[1][2] != 123u64);
	}
	{ // make_tuple for types with references inside.
		var i32 x= 11, y= 22;
		var Ref rx{ .r= x }, ry{ .r= y };
		auto arr= ust::make_tuple( rx, ry );
		halt if( arr[0].r != 11 );
		halt if( arr[1].r != 22 );
	}


	// homogeneous_tuple test
	static_assert( same_type</ ust::homogeneous_tuple</i32, 0s/>, tup[] /> );
	static_assert( same_type</ ust::homogeneous_tuple</f32, 1s/>, tup[ f32 ] /> );
	static_assert( same_type</ ust::homogeneous_tuple</bool, 2s/>, tup[ bool, bool ] /> );
	static_assert( same_type</ ust::homogeneous_tuple</tup[], 3s/>, tup[ tup[], tup[], tup[] ] /> );
	static_assert( same_type</ ust::homogeneous_tuple</char8, 4s/>, tup[ char8, char8, char8, char8 ] /> );
	static_assert( same_type</ ust::homogeneous_tuple</void, 5s/>, tup[ void, void, void, void, void ] /> );
	static_assert( same_type</ ust::homogeneous_tuple</NonCopyable, 6s/>, tup[ NonCopyable, NonCopyable, NonCopyable, NonCopyable, NonCopyable, NonCopyable ] /> );
	static_assert( same_type</ ust::homogeneous_tuple</u64, 7s/>, tup[ u64, u64, u64, u64, u64, u64, u64 ] /> );
	static_assert( same_type</ ust::homogeneous_tuple</[ i32, 4 ], 8s/>, tup[ [ i32, 4 ], [ i32, 4 ], [ i32, 4 ], [ i32, 4 ], [ i32, 4 ], [ i32, 4 ], [ i32, 4 ], [ i32, 4 ] ] /> );

	// A variant with mixin-generated name.
	static_assert( same_type</ ust::homogeneous_tuple</u32, 15s/>, tup[ u32, u32, u32, u32, u32, u32, u32, u32, u32, u32, u32, u32, u32, u32, u32 ] /> );

	return 0;
}
