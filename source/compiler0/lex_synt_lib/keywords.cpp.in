#include <unordered_set>
#include "../../lex_synt_lib_common/assert.hpp"
#include "program_string.hpp"
#include "keywords.hpp"

namespace U
{

namespace
{

const std::unordered_set<std::string_view> g_keywords_set
{
@KEYWORDS_LIST_STRINGS@
};

const std::string_view g_keywords[ size_t(Keywords::LastKeyword) ]
{
@KEYWORDS_LIST_STRINGS@
};

} // namespace

bool IsKeyword( const std::string_view str )
{
	return g_keywords_set.count( str ) != 0;
}

std::string_view Keyword( const Keywords keyword )
{
	U_ASSERT( keyword < Keywords::LastKeyword );
	return g_keywords[ size_t(keyword) ];
}

bool operator==( Keywords keyword, const std::string_view str )
{
	return Keyword( keyword ) == str;
}

bool operator==( const std::string_view str, Keywords keyword )
{
	return keyword == str;
}

bool operator!=( Keywords keyword, const std::string_view str )
{
	return Keyword( keyword ) != str;
}

bool operator!=( const std::string_view str, Keywords keyword )
{
	return keyword != str;
}

} // namespace U
