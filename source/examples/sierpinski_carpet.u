// This example program generates a Sierpiński carpet and prints it into the console.
// Make sure it's wide enough to display it!

import "/main_wrapper.u"
import "/stdout.u"
import "/utf.u"

pretty_main
{
	var Carpet mut carpet= zero_init;

	GenerateCarpet( carpet );

	ust::stdout_print( "Here is your Sierpiński carpet:\n\n" );

	var ust::string8 mut s;

	for( var size_type mut dst_row= 0s; dst_row < c_carpet_size / 2s; ++dst_row )
	{
		for( var size_type mut column= 0s; column < c_carpet_size; ++column )
		{
			var bool b0= carpet[ dst_row * 2s + 0s ][column];
			var bool b1= carpet[ dst_row * 2s + 1s ][column];
			var char32 mut c= ' 'c32;
			if( b0 & b1 ) { c= '█'c32; }
			if( b0 & !b1 ) { c= '▀'c32; }
			if( !b0 & b1 ) { c= '▄'c32; }
			ust::utf::push_code_point_to_string( s, c );
		}
		s.push_back( '\n' );
		ust::stdout_print( s );
		s.clear();
	}

	for( var size_type mut column= 0s; column < c_carpet_size; ++column )
	{
		var bool b= carpet[ c_carpet_size - 1s ][column];
		var char32 c= ( b ? '▀'c32 : ' 'c32 );
		ust::utf::push_code_point_to_string( s, c );
	}

	s.push_back( '\n' );
	ust::stdout_print( s );

	return 0;
}

var size_type c_carpet_power= 4s;
var size_type c_carpet_size= Pow3( c_carpet_power );

type CarpetRow= [ bool, c_carpet_size ];
type Carpet= [ CarpetRow, c_carpet_size ];

fn GenerateCarpet( Carpet &mut carpet )
{
	carpet[0s][0s]= true;
	for( var size_type mut level= 0s, mut region_size= 1s; level < c_carpet_power; ++level, region_size *= 3s )
	{
		CopyRegion( carpet, 0s, 0s, 1s * region_size, 0s * region_size, region_size, region_size );
		CopyRegion( carpet, 0s, 0s, 2s * region_size, 0s * region_size, region_size, region_size );

		CopyRegion( carpet, 0s, 0s, 0s * region_size, 1s * region_size, region_size, region_size );
		CopyRegion( carpet, 0s, 0s, 2s * region_size, 1s * region_size, region_size, region_size );

		CopyRegion( carpet, 0s, 0s, 0s * region_size, 2s * region_size, region_size, region_size );
		CopyRegion( carpet, 0s, 0s, 1s * region_size, 2s * region_size, region_size, region_size );
		CopyRegion( carpet, 0s, 0s, 2s * region_size, 2s * region_size, region_size, region_size );
	}
}

fn CopyRegion(
	Carpet &mut carpet,
	size_type src_x, size_type src_y,
	size_type dst_x, size_type dst_y,
	size_type size_x, size_type size_y )
{
	for( var size_type mut dy= 0s; dy < size_y; ++dy )
	{
		var size_type src_row_index= src_y + dy;
		var size_type dst_row_index= dst_y + dy;
		for( var size_type mut dx= 0s; dx < size_x; ++dx )
		{
			auto val= carpet[src_row_index][src_x + dx];
			carpet[dst_row_index][dst_x + dx]= val;
		}
	}
}

fn constexpr Pow3( size_type p ) : size_type
{
	var size_type mut res= 1s;
	for( var size_type mut i= 0s; i < p; ++i )
	{
		res *= 3s;
	}
	return res;
}
