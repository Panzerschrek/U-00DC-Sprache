// This example demonstraits usage of lambdas.

import "/assert.u"
import "/stdout.u"

fn nomangle main() : i32
{
	// Basic non-capture lambda.
	{
		auto div=
			lambda( u32 a, u32 b ) : u32
			{
				return a / b;
			};

		assert( div( 78u, 3u ) == 78u / 3u );
		auto x= div( 124u, 5u ) * 2u;
		assert( x == 124u / 5u * 2u );
	}

	// Lambda with capure by copy.
	{
		var i32 mut x= 15, mut y= 7;
		auto f= lambda[=]( i32 a ) : i32 { return a * x + y; };
		// Since lambda captures by copy, modifying source variables doesn't affect lambda.
		x= 0;
		y= 0;
		assert( f( 5 ) == 5 * 15 + 7 );
		assert( f( -12 ) == -12 * 15 + 7 );
	}

	// Lambda which may mutate captured by copy variables.
	{
		var u32 x= 1u;
		auto mut f=
			lambda [=] mut () : u32
			{
				x <<= 1u; // Change captured copy here.
				return x;
			};
		assert( f() == 2u );
		assert( f() == 4u );
		assert( f() == 8u );
		assert( x == 1u ); // The source variable should not be modified.
	}

	// Lambda with capture by reference.
	{
		var u64 x( 12345 );
		auto f= lambda[&]( f64 a ) : f64 { return f64(x) / a; };
		static_assert( typeinfo</ typeof(f) />.reference_tag_count == 1s ); // 1 reference is captured.
		assert( f( 0.25 ) == 12345.0 / 0.25 );
		assert( f( 7.0 ) == 12345.0 / 7.0 );
	}

	// Lambda with capture by mutable reference.
	// Mutability of captured reference is determined by the mutability of the source variable.
	{
		var f32 mut x= 1.5f;
		// It is possible to pass lambda directly into a function.
		RunFunc( lambda[&](){ x *= 3.0f; } );
		// After lambda call source variable is modified.
		assert( x == 1.5f * 3.0f );
	}

	// Lambda with two captured mutable references returns these references.
	{
		var i32 mut x= 0, mut y= 0;
		auto f=
			lambda[&]( bool cond ) : i32 &mut
			{
				return select( cond ? x : y );
			};

		f( true )= 16;
		assert( x == 16 );
		assert( y == 0 );

		f( false )= 100;
		assert( x == 16 );
		assert( y == 100 );
	}

	// Lambda with capture list.
	{
		var i32 mut x= 778, mut y= 0;
		{
			// Capture "x" explicitly by value and "y" by reference.
			auto f=
				lambda[x, &y] ()
				{
					y= x; // Update the value of an external variable.
				};
			x= 555; // Can modify "x" here, since the lambda captured only copy of it.
			f(); // Should update "y" in this call.
		}
		assert( x == 555 );
		assert( y == 778 );
	}

	// Expressions in capture list.
	{
		auto x= 675;
		auto y= 33;
		auto mut z= 0;
		// Arbitrary expressions may be used to initialize lambda captures.
		// It may be usefull for move-initialization of captures.
		auto f=
			lambda[ x_scaled= x * 4, y, &z= z, w= -5 ]()
			{
				z= x_scaled + y + w;
			};
		f();
		assert( z == 675 * 4 + 33 - 5 );
	}

	// "byval" lambda.
	{
		auto x= 33;
		auto f=
			lambda[=] byval mut () : i32
			{
				x*= 2; // Mutate captured "x", but because this lambda is "byval", this mutation is not observable.
				return x;
			};
		// Copy lambda in each call.
		assert( f() == 66 );
		assert( f() == 66 );
	}

	// Move captured variable in "byval" lambda.
	{
		auto f=
			lambda[ x= 123 ] byval mut () : i32
			{
				return move(x);
			};
		assert( f() == 123 );
	}

	{ // A lambda may be constexpr if it satisfies constexpr function requirements.
		auto shift_val= 7u;
		auto shift= lambda[=]( u32 x ) : u32 { return x << shift_val; };
		static_assert( shift(13u) == 13u << 7u );
		static_assert( shift(98u) == 98u << 7u );
	}

	// Call global lambda object.
	assert( unsafe( global_unsafe_lambda() ) == 667766 );

	return 0;
}

template</type Func/>
fn RunFunc( Func& func )
{
	func();
}

// Use lambda to initialize global variable.
auto two_powers=
	lambda() : [ u32, 8 ]
	{
		// There is no any limit for lambda body complexity.
		// All constructions as for usual functions are allowed.
		var [ u32, 8 ] mut res= zero_init;
		for( auto mut i= 0u; i < 8u; ++i )
		{
			res[ size_type(i) ]= 1u << i;
		}
		return res;
	} (); // Call the lambda directly after its declaration.

static_assert( two_powers[0] ==   1u );
static_assert( two_powers[1] ==   2u );
static_assert( two_powers[2] ==   4u );
static_assert( two_powers[3] ==   8u );
static_assert( two_powers[4] ==  16u );
static_assert( two_powers[5] ==  32u );
static_assert( two_powers[6] ==  64u );
static_assert( two_powers[7] == 128u );

// A lambda object may still be constexpr even if its body doesn't satisfy constexpr function requirements.
// But such lambda can't be called in constexpr context.
auto constexpr global_unsafe_lambda =
	lambda() unsafe : i32
	{
		// Using unsafe block prevents this lambda op() to be constexpr.
		return unsafe( UnsafeFunc() );
	};

fn UnsafeFunc() : i32
{
	return 667766;
}
