if( ${CMAKE_BUILD_TYPE} STREQUAL Debug )
	set( SPRACHE_COMPILER_OPT_OPTIONS -O0 -g )
else()
	set( SPRACHE_COMPILER_OPT_OPTIONS -O2 )
endif()

file( GLOB EXAMPLES_SOURCES "*.u" )

file( RELATIVE_PATH CURRENT_SUBDIR ${CMAKE_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR} )

foreach( EXAMPLE_SOURCE ${EXAMPLES_SOURCES} )

	file( RELATIVE_PATH EXAMPLE_SOURCE_RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${EXAMPLE_SOURCE} )
	set( DEP_FILE ${CMAKE_CURRENT_BINARY_DIR}/${EXAMPLE_SOURCE_RELATIVE}.d )

	add_custom_command(
		OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${EXAMPLE_SOURCE_RELATIVE}.o
		DEPENDS ${EXAMPLE_SOURCE} Compiler${CURRENT_COMPILER_GENERATION}
		COMMAND
			Compiler${CURRENT_COMPILER_GENERATION}
			${SPRACHE_COMPILER_OPT_OPTIONS}
			${SPRACHE_COMPILER_PIC_OPTIONS}
			${EXAMPLE_SOURCE}
			-o ${CURRENT_SUBDIR}/${EXAMPLE_SOURCE_RELATIVE}.o
			-MF ${DEP_FILE}
			--verify-module
			--include-dir ${CMAKE_CURRENT_SOURCE_DIR}/../ustlib/
		WORKING_DIRECTORY ${CMAKE_BINARY_DIR} # Hack! cmake produces ninja build file with content like "examples/hello_world.u.o:", but launches custom command in current binary directory
		DEPFILE ${DEP_FILE}
		)

	get_filename_component( EXAMPLE_SOURCE_BASE_NAME ${EXAMPLE_SOURCE_RELATIVE} NAME_WE )
	set( EXAMPLE_EXECUTABLE ${EXAMPLE_SOURCE_BASE_NAME}${CURRENT_COMPILER_GENERATION} )

	add_executable( ${EXAMPLE_EXECUTABLE} ../tests/dummy.cpp ${EXAMPLE_SOURCE} ${EXAMPLE_SOURCE_RELATIVE}.o )
	add_dependencies( ${EXAMPLE_EXECUTABLE} Compiler${CURRENT_COMPILER_GENERATION} )


endforeach()
