import "/assert.u"
import "/enum_string_conversions.u"
import "/main_wrapper.u"
import "/stdout.u"
import "/string_conversions.u"
import "/sm_async_net/runner.uh"
import "/sm_async_net/udp_socket.uh"

pretty_main
{
	return sm_async_net::Main();
}

namespace sm_async_net
{

fn Main() : i32
{
	ust::stdout_print( "sm_async_net tests\n" );

	RunnerCreation_Test0::Run();
	RunnerTaskAdd_Test0::Run();
	RunnerTaskAdd_Test1::Run();
	RunnerTaskAdd_Test2::Run();
	RunnerTaskAdd_Test3::Run();
	AddTaskFreeFunction_Test0::Run();
	AddTaskFreeFunction_Test1::Run();
	UDPSocket_Test0::Run();

	return 0;
}

namespace RunnerCreation_Test0
{

fn Run()
{
	// Runner is default-constructible.

	var runner r;
}

}

namespace RunnerTaskAdd_Test0
{

fn Run()
{
	var runner r;

	// Adding a task doesn't require "r" instance to be mutable.
	r.add_task( Func() );
}

fn async Func() {}

}

namespace RunnerTaskAdd_Test1
{

fn Run()
{
	// Add a single task into a runner and wait for it to finish.

	var runner r;

	var ust::shared_atomic_variable</bool/> v(false);

	r.add_task( Func(v) );

	// Use a crude way to wait - via "thread_yield".
	while( !v.read() )
	{
		ust::yield_current_thread();
	}
}

fn async Func( ust::shared_atomic_variable</bool/> v )
{
	yield;
	yield;
	ust::stdout_print( "BasicRunnerAddAndEnsureExecutionFunc\n" );
	yield;
	yield;
	yield;
	ust::stdout_print( "BasicRunnerAddAndEnsureExecutionFunc - finish\n" );
	v.write( true );
}

}

namespace RunnerTaskAdd_Test2
{

fn Run()
{
	// Add multiple tasks into a runner and wait for them to finish.

	var runner r;

	var ust::shared_atomic_variable</u32/> v(0u);

	var u32 count= 1024u;

	for( auto mut i= 0u; i < count; ++i )
	{
		r.add_task( Func(v) );
	}

	// Use a crude way to wait - via "thread_yield".
	while( v.read() < count )
	{
		ust::yield_current_thread();
	}
}

fn async Func( ust::shared_atomic_variable</u32/> v )
{
	yield;
	v.inc();
	yield;
}

}

namespace RunnerTaskAdd_Test3
{

fn Run()
{
	// Add a single task having internal async calls into a runner and wait for it to finish.

	var runner r;

	var ust::shared_atomic_variable</bool/> v(false);

	r.add_task( Func0(v) );

	// Use a crude way to wait - via "thread_yield".
	while( !v.read() )
	{
		ust::yield_current_thread();
	}
}

fn async Func0( ust::shared_atomic_variable</bool/> mut v )
{
	Func1( move(v) ).await;
}

fn async Func1( ust::shared_atomic_variable</bool/> mut v )
{
	Func2( move(v) ).await;
}

fn async Func2( ust::shared_atomic_variable</bool/> mut v )
{
	Func3( move(v) ).await;
}

fn async Func3( ust::shared_atomic_variable</bool/> v )
{
	v.write( true );
}

}

namespace AddTaskFreeFunction_Test0
{

fn Run()
{
	// Add a task, which internally adds a new root task via "add_task" free function.

	var runner r;

	var ust::shared_atomic_variable</u32/> v(0u);

	r.add_task( Func0(v) );

	// Use a crude way to wait - via "thread_yield".
	while( v.read() != 3u )
	{
		ust::yield_current_thread();
	}
}

fn async Func0( ust::shared_atomic_variable</u32/> v )
{
	add_task( Func1( v ) );
	v.add( 1u );
}

fn async Func1( ust::shared_atomic_variable</u32/> v )
{
	v.add( 2u );
}

}

namespace AddTaskFreeFunction_Test1
{

fn Run()
{
	// Add several tasks, each of them internally adds several new root tasks via "add_task" free function.

	var runner r;

	var ust::shared_atomic_variable</u32/> v(0u);

	for( auto mut i= 0u; i < 4u; ++i )
	{
		r.add_task( Func0(v) );
	}

	// Use a crude way to wait - via "thread_yield".
	while( v.read() < 12u )
	{
		ust::yield_current_thread();
	}
}

fn async Func0( ust::shared_atomic_variable</u32/> v )
{
	for( auto mut i= 0u; i < 3u; ++i )
	{
		add_task( Func1( v ) );
	}
}

fn async Func1( ust::shared_atomic_variable</u32/> v )
{
	v.inc();
}

}

namespace UDPSocket_Test0
{

fn Run()
{
	// Create regular socket on the main thread, create an async one on runner thread.
	// Use blocking operation on the main thread.

	var runner r;

	var ust::socket_address_v4 address( GetLoopbackIpAddress(), GetNextPort() );

	var ust::udp_socket mut server_socket= ust::udp_socket::create_and_bind( address ).try_take();

	r.add_task( Func( address ) );

	var [ char8, 32 ] mut buf= zero_init;
	var ust::array_view_mut</char8/> buf_range= buf;

	result_match( server_socket.receive( buf_range.to_byte8_range() ) )
	{
		Ok( bytes_received ) ->
		{
			assert( bytes_received == buf_range.size(), ust::concat( "Received unexpected number of bytes ", ust::to_string8(bytes_received) ) );
		},
		Err( e ) ->
		{
			assert( false, ust::concat( "Failed to receive message to from socket! Error code: ", ust::enum_to_string(e) ) );
		}
	}
}

auto& message= "Hello from async UDP socket!";

fn async Func( ust::socket_address_v4 server_address )
{
	var udp_socket mut client_socket= udp_socket::create_v4().try_take();

	var ust::string_view8 message_range= message;

	result_match( client_socket.send_to( server_address, message_range.to_byte8_range() ).await )
	{
		Ok( bytes_sent ) ->
		{
			assert( bytes_sent == message_range.size(), ust::concat( "Sent unexpected number of bytes ", ust::to_string8(bytes_sent) ) );
		},
		Err( e ) ->
		{
			assert( false, ust::concat( "Failed to send message to socket! Error code: ", ust::enum_to_string(e) ) );
		}
	}
}

}

fn GetLoopbackIpAddress() : ust::ip_address_v4
{
	return ust::ip_address_v4( ust::make_array( 127u8, 0u8, 0u8, 1u8 ) );
}

fn GetNextPort() : u16
{
	unsafe
	{
		var u16 res= g_port_counter;
		++g_port_counter;
		return res;
	}
}

var u16 mut g_port_counter( 59000s + 500s * compiler::generation );

} // namespace sm_async_net
