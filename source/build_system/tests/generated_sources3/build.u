import "/build_system.uh"

fn GetPackageInfo( BK::BuildSystemInterface &mut build_system_interface ) : BK::PackageInfo
{
	var BK::BuildTarget mut exe
	{
		.name= "exe",
		.target_type= BK::BuildTargetType::Executable,
		.source_files= ust::make_array</ust::string8/>( "exe/main.u" ),
		.private_dependencies= ust::make_array( BK::DependencyName{ .name= "lib" } ),
	};

	// Generate public header for this library.
	var ust::string8 generated_public_header= "lib.uh";
	auto& contents= "fn Foo() : i32;";

	var BK::BuildTarget mut lib
	{
		.name= "lib",
		.target_type= BK::BuildTargetType::Library,
		.source_files= ust::make_array</ust::string8/>( "lib/lib.u" ),
		.generated_public_header_files= ust::make_array( generated_public_header ),
	};

	auto mut out_file=
		ust::concat(
			build_system_interface.GetCurrentPackageBuildTargetGeneratedPublicHeadersDirectory( lib.name ),
			"/",
			generated_public_header );

	var BK::CustomBuildStep mut generate_source_step
	{
		.comment= "generate " + generated_public_header,
		.output_files= ust::make_array( out_file ),
		.command= BK::CustomBuildStep::GenerateFileCommand{ .destination_path= out_file, .contents= contents, },
	};

	return BK::PackageInfo
	{
		.build_targets= ust::make_array( move(exe), move(lib) ),
		.custom_build_steps= ust::make_array( move(generate_source_step) ),
	};
}
