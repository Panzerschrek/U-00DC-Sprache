import "/build_system.uh"

fn GetPackageInfo( BK::BuildSystemInterface &mut build_system_interface ) : BK::PackageInfo
{
	// Exe depends on a library as external library.
	// Doing this has little sense, but it should be doable.

	var BK::BuildTarget mut lib
	{
		.target_type = BK::BuildTargetType::ObjectFile,
		.name= "lib",
		.source_files= ust::make_array</ust::string8/>( "lib/src/lib.u" ),
		.public_include_directories= ust::make_array</ust::string8/>( "lib/imports" ),
	};

	var ust::string8 lib_file= ust::concat( build_system_interface.GetCurrentPackageBuildDirectory(), "/", lib.name, ".o" );

	var BK::BuildTarget mut exe
	{
		.target_type = BK::BuildTargetType::Executable,
		.name= "exe",
		.source_files= ust::make_array</ust::string8/>( "exe/main.u" ),
		.external_libraries= ust::make_array</ust::string8/>( lib_file )
	};

	return BK::PackageInfo{ .build_targets= ust::make_array( move(lib), move(exe) ) };
}
