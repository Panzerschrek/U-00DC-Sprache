import "/build_system.uh"

fn GetPackageInfo( BK::BuildSystemInterface &mut build_system_interface ) : BK::PackageInfo
{
	ust::ignore_unused( build_system_interface );

	// Depend on two versions of the same package, but use them in different build targets.

	var BK::PackageName sub_package_1
	{
		.name_base= BK::GlobalVersionedPackageName{ .name= "two_returner", .version(0u, 1u) },
	};

	var BK::PackageName sub_package_2
	{
		.name_base= BK::GlobalVersionedPackageName{ .name= "two_returner", .version(0u, 2u) },
	};

	var BK::BuildTarget mut exe1
	{
		.name= "exe1",
		.target_type = BK::BuildTargetType::Executable,
		.source_files= ust::make_array</ust::string8/>( "exe1/main.u" ),
		.private_dependencies= ust::make_array( BK::DependencyName{ .name= "two_returner", .package_name= sub_package_1 } )
	};

	var BK::BuildTarget mut exe2
	{
		.name= "exe2",
		.target_type = BK::BuildTargetType::Executable,
		.source_files= ust::make_array</ust::string8/>( "exe2/main.u" ),
		.private_dependencies= ust::make_array( BK::DependencyName{ .name= "two_returner", .package_name= sub_package_2 } )
	};

	return BK::PackageInfo
	{
		.build_targets= ust::make_array( move(exe1), move(exe2) ),
		.package_dependencies= ust::make_array</BK::PackageDependency/>( sub_package_1, sub_package_2 )
	};
}
