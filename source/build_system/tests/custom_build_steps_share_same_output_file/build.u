import "/build_system.uh"

fn GetPackageInfo( BK::BuildSystemInterface &mut build_system_interface ) : BK::PackageInfo
{
	// Error here - two build steps produce the same output file, which isn't allowed.

	auto mut in_file_a= ust::concat( build_system_interface.GetCurrentPackageSourceDirectory(), "/", "file_a.txt" );
	auto mut in_file_b= ust::concat( build_system_interface.GetCurrentPackageSourceDirectory(), "/", "file_b.txt" );
	auto mut out_file= ust::concat( build_system_interface.GetCurrentPackageBuildDirectory(), "/", "some_file_final.txt" );

	auto mut program= ust::concat( build_system_interface.GetConfigurationOption( "tests_libs_directory" ).try_deref(), "/", "BuildSystemTestFileGenerationTool" );

	var BK::CustomBuildStep mut step0
	{
		.comment= "step0",
		.input_files= ust::make_array( in_file_a ),
		.output_files= ust::make_array( out_file ),
		.command= BK::CustomBuildStep::ExeCommand
		{
			.exe_path= program,
			.command_line= ust::make_array( move(in_file_a), "-o", out_file, "-n", "2" ),
		}
	};
	var BK::CustomBuildStep mut step1
	{
		.comment= "step1",
		.input_files= ust::make_array( in_file_b ),
		.output_files= ust::make_array( out_file ),
		.command= BK::CustomBuildStep::ExeCommand
		{
			.exe_path= move(program),
			.command_line= ust::make_array( move(in_file_b), "-o", out_file, "-n", "3" ),
		}
	};

	return BK::PackageInfo { .custom_build_steps= ust::make_array( move(step0), move(step1) ), };
}
