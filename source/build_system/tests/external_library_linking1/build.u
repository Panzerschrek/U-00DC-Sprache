import "/build_system.uh"

fn GetPackageInfo( BK::BuildSystemInterface &mut build_system_interface ) : BK::PackageInfo
{
	var ust::string8 libs_dir = build_system_interface.GetConfigurationOption( "tests_libs_directory" ).try_deref();
	var ust::string8 libs_postfix= build_system_interface.GetConfigurationOption( "tests_libs_postfix" ).try_deref();

	var ust::string8 mut library_name;
	var BK::TargetTriple target_triple = build_system_interface.GetTargetTriple();
	if( target_triple.operating_system == "windows" )
	{
		if( target_triple.environment == "msvc" )
		{
			library_name = ust::concat( "BuildSystemTestsSharedLibrary", libs_postfix, ".lib" ); // Interface static library for shared library.
		}
		else
		{
			library_name = ust::concat( "libBuildSystemTestsSharedLibrary", libs_postfix, ".dll.a" ); // Interface static library for shared library - MinGW version.
		}
	}
	else
	{
		library_name = ust::concat( "libBuildSystemTestsSharedLibrary", libs_postfix, ".so" );
	}
	var ust::string8 library = ust::concat( libs_dir, "/", library_name );

	var BK::BuildTarget mut exe
	{
		.target_type = BK::BuildTargetType::Executable,
		.name= "exe",
		.source_files= ust::make_array</ust::string8/>( "main.u" ),
		.external_libraries= ust::make_array</ust::string8/>(library)
	};

	return BK::PackageInfo{ .build_targets= ust::make_array( move(exe) ) };
}
