import "/build_system.uh"

fn GetPackageInfo( BK::BuildSystemInterface &mut build_system_interface ) : BK::PackageInfo
{
	auto libs_dir = build_system_interface.GetConfigurationOption( "tests_libs_directory" );

	var ust::string_view8 mut library_name;
	var BK::TargetTriple target_triple = build_system_interface.GetTargetTriple();
	if( target_triple.operating_system == "windows" && target_triple.environment == "msvc" )
	{
		library_name = "BuildSystemTestsStaticLibrary.lib";
	}
	else
	{
		library_name = "libBuildSystemTestsStaticLibrary.a";
	}
	var ust::string8 external_library = libs_dir.try_deref() + "/" + library_name;

	var BK::BuildTarget mut exe
	{
		.name= "exe",
		.target_type = BK::BuildTargetType::Executable,
		.source_files= ust::make_array</ust::string8/>( "exe/main.u" ),
		.private_dependencies= ust::make_array</BK::DependencyName/>( BK::DependencyName{ .name= "lib" } ),
	};

	var BK::BuildTarget mut lib
	{
		.name= "lib",
		.target_type = BK::BuildTargetType::Library,
		.source_files= ust::make_array</ust::string8/>( "lib/src/lib.u" ),
		.public_include_directories= ust::make_array</ust::string8/>( "lib/imports" ),
		.external_libraries= ust::make_array</ust::string8/>( external_library ),
	};

	return BK::PackageInfo{ .build_targets= ust::make_array( move(exe), move(lib) ) };
}
