import "/build_system.uh"

fn GetPackageInfo( BK::BuildSystemInterface &mut build_system_interface ) : BK::PackageInfo
{
	// Single build target depends on two build targets of different versions.
	// In such case this dependencies should be unified too.

	ust::ignore_unused( build_system_interface );

	var BK::PackageName mut two_returner01{ .name_base= BK::GlobalVersionedPackageName{ .name= "two_returner", .version( 0u, 1u ) } };
	var BK::PackageName mut two_returner02{ .name_base= BK::GlobalVersionedPackageName{ .name= "two_returner", .version( 0u, 2u ) } };

	var BK::BuildTarget mut exe
	{
		.target_type = BK::BuildTargetType::Executable,
		.name= "unification_test",
		.source_files= ust::make_array</ust::string8/>( "exe/main.u" ),
		.private_dependencies= ust::make_array(
			BK::DependencyName{ .name= "two_returner", .package_name= two_returner01 },
			BK::DependencyName{ .name= "two_returner", .package_name= two_returner02 } ),
	};

	return BK::PackageInfo
	{
		.build_targets= ust::make_array( move(exe) ),
		.package_dependencies= ust::make_array</BK::PackageDependency/>( move(two_returner01), move(two_returner02) ),
	};
}
