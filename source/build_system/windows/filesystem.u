import "/string_conversions.u"
import "../filesystem.uh"
import "../path.uh"
import "wide_string.uh"
import "windows.uh"

namespace BK
{

fn MakePathAbsolute( ust::string_view8 path ) : ust::string8
{
	if( path.size() >= 2s && path[0s] >= "A"c8 && path[0s] <= "Z"c8 && path[1s] == ":"c8 )
	{
		// Already an absolute path strting with drive letter.
		// TODO - support universal paths.
		return path;
	}

	return GetCurrentDirectory() + "/" + path;
}

fn EnsureDirectoryExists( Logger &mut logger, ust::string_view8 path ) : bool
{
	var ust::string8 path_absolute= MakePathAbsolute( path );

	// Optimistically assume that we need to create only one directory.
	if( EnsureSingleDirectoryExists( path_absolute ) )
	{
		return true;
	}

	// Failed to create it. Try to create all directories in given path.

	auto components= SplitPathIntoComponents( path_absolute );

	var ust::string8 mut path_iterative= components.front();
	path_iterative+= "/";

	foreach( &component : components.range().subrange_start(1s) )
	{
		path_iterative+= component;
		path_iterative+= "/";
		if( !EnsureSingleDirectoryExists( path_iterative ) )
		{
			logger.LogInfo( "Failed to create directory \"" + ( path_iterative + "\": " ) );
			return false;
		}
	}

	return true;
}

fn EnsureSingleDirectoryExists( ust::string_view8 path_absolute ) : bool
{
	var WideString mut path_null_terminated= UTF8ToWideString( path_absolute );
	path_null_terminated.push_back( WCHAR(0) );

	var i32 res= unsafe( ::CreateDirectoryW( path_null_terminated.data(), ust::nullptr</ü_SECURITY_ATTRIBUTES/>() ) );
	// TODO - what if path exists but it's a file?
	return res == 1 || unsafe( GetLastError() ) == DWORD(ERROR_ALREADY_EXISTS);
}

fn WriteFile( Logger &mut logger, ust::string_view8 path, ust::string_view8 contents ) : bool
{
	var WideString mut path_null_terminated = UTF8ToWideString( path );
	path_null_terminated.push_back( WCHAR(0) );

	var HANDLE handle = unsafe( ::CreateFileW(
		path_null_terminated.data(),
		GENERIC_WRITE,
		DWORD(FILE_SHARE_READ),
		ust::nullptr</ü_SECURITY_ATTRIBUTES/>(),
		DWORD(CREATE_ALWAYS),
		0u,
		ust::nullptr</byte8/>() ) );
	if( ust::is_nullptr(handle) || handle == GetInvalidHandle() )
	{
		logger.LogError( "Failed to open file \"" + (path + ( "\" for writing, error: " + ust::to_string8( unsafe( GetLastError() ) ) ) ) );
		return false;
	}

	// TODO - check for errors.
	// TODO - write in loop.
	var DWORD mut bytes_written = 0u;
	unsafe( ::WriteFile(
		handle,
		ust::ptr_cast_to_byte8( contents.data() ),
		DWORD(contents.size()),
		$<(bytes_written),
		ust::nullptr</ü_OVERLAPPED/>() ) );

	unsafe( ::CloseHandle(handle) );

	return true;
}

fn ReadFile( ust::string_view8 path ) : ust::optional</ust::string8/>
{
	var WideString mut path_null_terminated = UTF8ToWideString( path );
	path_null_terminated.push_back( WCHAR(0) );

	var HANDLE handle = unsafe( ::CreateFileW(
		path_null_terminated.data(),
		GENERIC_READ,
		DWORD(FILE_SHARE_READ),
		ust::nullptr</ü_SECURITY_ATTRIBUTES/>(),
		DWORD(OPEN_EXISTING),
		DWORD(FILE_FLAG_SEQUENTIAL_SCAN),
		ust::nullptr</byte8/>() ) );
	if( ust::is_nullptr(handle) || handle == GetInvalidHandle() )
	{
		return ust::null_optional;
	}

	var LARGE_INTEGER mut file_size= zero_init;

	if( unsafe( ::GetFileSizeEx( handle, $<(file_size) ) ) == 0 )
	{
		unsafe( ::CloseHandle(handle) );
		return ust::null_optional;
	}

	var ust::string8 mut res( size_type( u64( file_size.union_contents[0] ) ), "\0"c8 );

	// TODO - check for errors.
	var DWORD mut bytes_read = 0u;
	unsafe( ::ReadFile(
		handle,
		ust::ptr_cast_to_byte8( res.data() ),
		DWORD(res.size()),
		$<(bytes_read),
		ust::nullptr</ü_OVERLAPPED/>() ) );

	unsafe( ::CloseHandle(handle) );

	return move(res);
}

fn GetFileModificationTime( ust::string_view8 path ) : ust::optional</FileModificationTime/>
{
	var WideString mut path_null_terminated = UTF8ToWideString( path );
	path_null_terminated.push_back( WCHAR(0) );

	var ü_WIN32_FILE_ATTRIBUTE_DATA mut file_atributes= zero_init;

	auto res =
		unsafe( ::GetFileAttributesExW(
			path_null_terminated.data(),
			GET_FILEEX_INFO_LEVELS::GetFileExInfoStandard,
			ust::ptr_cast_to_byte8( $<(file_atributes) ) ) );

	if( res == 0 )
	{
		return ust::null_optional;
	}

	return (u64(file_atributes.ftLastWriteTime.dwHighDateTime) << 32u) | u64(file_atributes.ftLastWriteTime.dwLowDateTime);
}

fn GetCurrentDirectory() : ust::string8
{
	// Perform first call to get required size.
	auto size_required = unsafe( ::GetCurrentDirectoryW( 0u, ust::nullptr</WCHAR/>() ) );
	if( size_required == 0u )
	{
		halt;
	}

	var WideString mut res;
	res.resize( size_type(size_required), WCHAR(0) );

	// Perform second call to get actual data.
	auto chars_written = unsafe( ::GetCurrentDirectoryW( DWORD(res.size()), res.data() ) );
	if( chars_written == 0u )
	{
		halt;
	}

	var size_type mut len= 0s;
	while( len < res.size() && res[len] != WCHAR(0) )
	{
		++len;
	}

	res.resize( len, WCHAR( " "c8 ) );
	return WideStringToUTF8( res );
}

// Produces INVALID_HANDLE_VALUE.
fn GetInvalidHandle() : HANDLE
{
	static_assert( typeinfo</ size_type />.size_of == typeinfo</HANDLE/>.size_of );

	// Make -1.
	var size_type mut s(0);
	--s;

	var HANDLE mut handle= zero_init;

	unsafe( ust::memory_copy(
		ust::ptr_cast_to_byte8( $<(handle) ),
		ust::ptr_cast_to_byte8( $<(s) ),
		typeinfo</ HANDLE />.size_of ) );

	return handle;
}

} // namespace BK
