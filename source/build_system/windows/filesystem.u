import "../filesystem.uh"
import "windows.uh"

namespace BK
{

fn EnsureDirectoryExists( ust::string_view8 path ) : bool
{
	// TODO - handle case with composed path name, like some/long/path

	var ust::string8 mut path_null_terminated= path;
	path_null_terminated+= "\0";

	var i32 res= unsafe( ::CreateDirectoryA( path_null_terminated.data(), ust::nullptr</ü_SECURITY_ATTRIBUTES/>() ) );
	if( res == 1 )
	{
		return true;
	}

	var DWORD err = unsafe( GetLastError() );
	if( err == DWORD(ERROR_ALREADY_EXISTS) )
	{
		return true;
	}

	return false;
}

fn WriteFile( ust::string_view8 path, ust::string_view8 contents ) : bool
{
	var ust::string8 mut path_null_terminated = path;
	path_null_terminated+= "\0";

	var HANDLE handle = unsafe( ::CreateFileA(
		path_null_terminated.data(),
		GENERIC_WRITE,
		DWORD(FILE_SHARE_READ),
		ust::nullptr</ü_SECURITY_ATTRIBUTES/>(),
		DWORD(CREATE_ALWAYS),
		0u,
		ust::nullptr</byte8/>() ) );
	if( ust::is_nullptr(handle) )
	{
		return false;
	}

	// TODO - check for errors.
	// TODO - write in loop.
	var DWORD mut bytes_written = 0u;
	unsafe( ::WriteFile(
		handle,
		ust::ptr_cast_to_byte8( contents.data() ),
		DWORD(contents.size()),
		$<(bytes_written),
		ust::nullptr</ü_OVERLAPPED/>() ) );

	unsafe( ::CloseHandle(handle) );

	return true;
}

} // namespace BK
