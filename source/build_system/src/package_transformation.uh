import "/unordered_map.u"
import "../imports/build_system.uh"
import "logger.uh"

namespace BK
{

struct PackageAbsoluteName
{
	ust::variant</ tup[ RootPackage, GlobalVersionedPackageName ] /> name_base;
	ust::string8 path;

	struct RootPackage{}

	type hasher= PackageAbsoluteNameHasher;

	op<=>( PackageAbsoluteName& l, PackageAbsoluteName& r ) : i32
	{
		if( l.name_base != r.name_base )
		{
			// Different bases - compare them.
			if_var( &l_global_versioned_package : l.name_base.get</GlobalVersionedPackageName/>() )
			{
				if_var( &r_global_versioned_package : r.name_base.get</GlobalVersionedPackageName/>() )
				{
					// If these are two global versioned packages - compare name/version.
					return l_global_versioned_package <=> r_global_versioned_package;
				}
			}

			// global <=> root or root <=> global comparison.
			return ( l.name_base.has</ RootPackage />() ? (1) : (-1) );
		}
		// Same base names - compare paths within base package.
		return l.path <=> r.path;
	}
}

struct BuildTargetAbsoluteName
{
	PackageAbsoluteName package_name;
	ust::string8 name;

	type hasher= PackageAbsoluteNameHasher;

	op<=>( BuildTargetAbsoluteName& l, BuildTargetAbsoluteName& r ) : i32
	{
		if( l.package_name != r.package_name )
		{
			return l.package_name <=> r.package_name;
		}
		return l.name <=> r.name;
	}
}

struct PackageAbsoluteNameHasher
{
	fn hash( PackageAbsoluteName& n ) : size_type
	{
		return ust::default_hasher::hash( n.path );
	}
	fn hash( BuildTargetAbsoluteName& n ) : size_type
	{
		// TODO - imporove this.
		return ust::default_hasher::hash( n.package_name ) ^ ust::default_hasher::hash( n.name );
	}
}

// Workspace info in form which is much better to work with.
// TODO - use other name?
struct WorkspaceInfo
{
	struct BuildTarget
	{
		BuildTargetType target_type;

		// Paths are normalized and the whole list is sorted.
		ust::vector</ust::string8/> source_files;

		// Calculated based on source file paths.
		ust::string8 sources_directory;

		// Paths are normalized and the whole list is sorted.
		ust::vector</ust::string8/> public_include_directories;

		// List of direct public dependencies. It's sorted and deduplicated.
		ust::vector</BuildTargetAbsoluteName/> public_dependencies;

		// List of direct private dependencies. It's sorted and deduplicated.
		ust::vector</BuildTargetAbsoluteName/> private_dependencies;

		// List of all public dependencies, including transitive public dependencies. It's sorted and deduplicated.
		ust::vector</BuildTargetAbsoluteName/> public_dependencies_including_transitive;

		// List of all private dependencies and all transitive public dependencies of these dependencies.
		// Dependencies which are also public or transitive public dependencies aren't listed.
		// It's sorted and deduplicated.
		ust::vector</BuildTargetAbsoluteName/> private_dependencies_including_transitive_public_dependencies;

		// Includes names of all shared library dependencies needed to be linked.
		// This includes also shared library dependencies of private library dependencies.
		// It's sorted and deduplicated.
		ust::vector</BuildTargetAbsoluteName/> shared_library_dependencies_to_link;

		// External libraries list - sorted and deduplicated.
		ust::vector</ust::string8/> external_libraries;

		// List of all external libraries to link, including libraries of dependencies (except shared library dependencies).
		// This list is sorted and deduplicated.
		ust::vector</ust::string8/> all_external_libraries_to_link;
	}

	ust::unordered_map</BuildTargetAbsoluteName, BuildTarget/> build_targets;
}

// Performs package info transformation, normalization and validation.
// Returns false if package isn't valid.
fn TransformAndValidatePackageInfo(
	Logger &mut logger,
	PackageInfo& package_info,
	PackageAbsoluteName& package_absolute_name,
	WorkspaceInfo &mut workspace_info ) : bool;

// Checks if dependencies are correct (there is no loops, missing dependencies, incorrect dependencies).
// Also it populates various lists of transitive dependencies.
// Returns false on error.
fn ProcessWorkspaceDependenciesGraph( Logger &mut logger, WorkspaceInfo &mut workspace ) : bool;

// Given current package name and package name within it calculate result package absolute name.
// Returns empty optional if can't do this.
fn ResolvePackageAbsoluteName(
	Logger &mut logger,
	PackageAbsoluteName& parent_package_absolute_name,
	PackageName& package_name ) : ust::optional</PackageAbsoluteName/>;

} // namespace BK
