import "/assert.u"
import "/hash_map.u"
import "/path_utils.u"
import "/scoped_array.u"
import "/string_conversions.u"
import "build_graph.uh"
import "filesystem.uh"
import "make_dep_file.uh"
import "process.uh"


namespace BK
{

fn nodiscard PerformGraphBuild(
	Logger &mut logger,
	BuildGraph& build_graph,
	ust::optional_ref_imut</BuildGraph/> prev_build_graph_opt,
	u32 max_number_of_parallel_jobs ) : bool
{
	// Collect dep-files.
	scoped_array ust::optional</MakeDepFile/> mut nodes_dep_files[ build_graph.nodes.size() ];
	foreach( pair : build_graph.nodes.iter().zip( nodes_dep_files.iter() ) )
	{
		pair.second= LoadAndParseDepFile( logger, pair.first.dep_file );
	}

	scoped_array bool mut nodes_to_rebuild[ build_graph.nodes.size() ]( false );

	if_var( &prev_build_graph : prev_build_graph_opt )
	{
		// Has previous graph state. Determine nodes to rebuild based on file modification times.
		var FilesModificationTime files_with_modification_time = CollectFilesModificationTime( build_graph, nodes_dep_files );

		// Mark nodes to rebuild.
		for( auto mut i= 0s; i < build_graph.nodes.size(); ++i ) label nodes_loop
		{
			var BuildGraph::Node& node= build_graph.nodes[i];
			var ust::optional</MakeDepFile/>& dep_file_opt= nodes_dep_files[i];

			var bool &mut need_to_rebuild = nodes_to_rebuild[i];

			// Check if we have this node in the previous build graph state.
			// If not - rebuild is required.
			// This may be if for example a new file to build was added, or if command line was changed.
			// TODO - speed-up this, avoid using linear search.
			var bool mut has_this_node_in_prev_build_graph = false;
			foreach( &prev_node : prev_build_graph.nodes )
			{
				if( prev_node == node ) // Compare all, including even command-line args, comment, input/output files.
				{
					has_this_node_in_prev_build_graph= true;
					break;
				}
			}

			if( !has_this_node_in_prev_build_graph )
			{
				logger.LogVerbose( ust::concat( "Command \"", node.comment, "\" seems to be missing in the previous build graph - mark for rebuild." ) );
				need_to_rebuild= true;
				continue label nodes_loop;
			}

			if( !node.dep_file.empty() && dep_file_opt.empty() )
			{
				// No dep file where it should be - rebuild is needed.
				logger.LogVerbose( ust::concat( "No dep file for command \"", node.comment, "\" - mark for rebuild." ) );
				need_to_rebuild= true;
				continue label nodes_loop;
			}

			if_var( &dep_file : dep_file_opt )
			{
				if( files_with_modification_time[dep_file.destination].empty() )
				{
					logger.LogVerbose( ust::concat( "No output file \"", dep_file.destination, "\" for command \"", node.comment, "\" - mark for rebuild." ) );
					need_to_rebuild= true;
					continue label nodes_loop;
				}
				foreach( &dependency : dep_file.dependencies )
				{
					if( files_with_modification_time[dependency].empty() )
					{
						logger.LogVerbose( ust::concat( "No input file \"", dependency, "\" for command \"", node.comment, "\" - mark for rebuild." ) );
						need_to_rebuild= true;
						continue label nodes_loop;
					}
				}
			}

			foreach( &input_file : node.input_files )
			{
				if( files_with_modification_time[input_file].empty() )
				{
					logger.LogVerbose( ust::concat( "No input file \"", input_file, "\" for command \"", node.comment, "\" - mark for rebuild." ) );
					need_to_rebuild= true;
					continue label nodes_loop;
				}
			}

			foreach( &output_file : node.output_files )
			{
				if( files_with_modification_time[output_file].empty() )
				{
					logger.LogVerbose( ust::concat( "No output file \"", output_file, "\" for command \"", node.comment, "\" - mark for rebuild." ) );
					need_to_rebuild= true;
					continue label nodes_loop;
				}
			}

			if( !IsSpecialBuildCommand( node.program ) ) // Program file is also input file.
			{
				if( files_with_modification_time[node.program].empty() )
				{
					logger.LogVerbose( ust::concat( "No program file \"", node.program, "\" for command \"", node.comment, "\" - mark for rebuild." ) );
					need_to_rebuild= true;
					continue label nodes_loop;
				}
			}

			// At this point we have all files needed present. Compare their timesmaps.

			var FileModificationTime mut min_output_modification_time= FileModificationTime::max();
			var FileModificationTime mut max_input_modification_time= FileModificationTime::min();

			foreach( &output_file : node.output_files )
			{
				ust::min_assign( min_output_modification_time, files_with_modification_time[output_file].try_deref() );
			}

			foreach( &input_file : node.input_files )
			{
				ust::max_assign( max_input_modification_time, files_with_modification_time[input_file].try_deref() );
			}

			if( !IsSpecialBuildCommand( node.program ) ) // Program file is also input file.
			{
				ust::max_assign( max_input_modification_time, files_with_modification_time[node.program].try_deref() );
			}

			if_var( &dep_file : dep_file_opt )
			{
				ust::min_assign( min_output_modification_time, files_with_modification_time[dep_file.destination].try_deref() );
				foreach( &dependency : dep_file.dependencies )
				{
					ust::max_assign( max_input_modification_time, files_with_modification_time[dependency].try_deref() );
				}
			}

			// Rebuild is requiret if the newest changed input file is newer than the oldest changed output file.
			// Use >= instead of > in order to handle case with not enough precision in timestamps.
			need_to_rebuild = max_input_modification_time >= min_output_modification_time;
			if( need_to_rebuild )
			{
				logger.LogVerbose( ust::concat( "One of input files of the command \"", node.comment, "\" is newer than one of output files - mark for rebuild." ) );
			}
		}

		// Mark also nodes for rebuild if their dependent nodes are needed to be rebuilt.
		{
			// Create a map for graph traversal speed-up.
			var FileToNodesMap input_file_to_node_id_map= BuildInputFileToNodeIndexMap( build_graph, nodes_dep_files );

			// Push initial nodes to rebuild to stack.
			var ust::vector</size_type/> mut stack;
			for( auto mut i = 0s; i < build_graph.nodes.size(); ++i )
			{
				if( nodes_to_rebuild[i] )
				{
					logger.LogVerbose( ust::concat( "Push node \"", build_graph.nodes[i].comment, "\" to search stack." ) );
					stack.push_back(i);
				}
			}

			// Since we mark visited nodes and thus visit them only once, infinite loop isn't possible here - in case of bad graph with cycles.
			scoped_array bool mut visited_nodes[ build_graph.nodes.size() ]( false );
			while( !stack.empty() )
			{
				var size_type node_id= stack.pop_back();

				if( visited_nodes[node_id] )
				{
					continue;
				}
				visited_nodes[node_id]= true;

				var BuildGraph::Node& node= build_graph.nodes[node_id];
				var ust::optional</MakeDepFile/>& dep_file_opt= nodes_dep_files[node_id];

				logger.LogVerbose( ust::concat( "Visit node \"", node.comment, "\"." ) );

				if( !nodes_to_rebuild[node_id] )
				{
					nodes_to_rebuild[node_id]= true;

					logger.LogVerbose( ust::concat( "Mark command \"", node.comment, "\" for rebuild, since one of its dependencies is also marked for rebuild." ) );
				}

				// If this node is marked for rebuild - mark for rebuild also nodes which use outputs of this node as inputs.

				foreach( &output_file : node.output_files )
				{
					if_var( &nodes : input_file_to_node_id_map.find( output_file ) )
					{
						stack.append( nodes.iter() );
					}
				}

				if_var( &dep_file : dep_file_opt )
				{
					if_var( &nodes : input_file_to_node_id_map.find( dep_file.destination ) )
					{
						stack.append( nodes.iter() );
					}
				}
			}
		}
	}
	else
	{
		// No previous build graph. Rebuild all.
		logger.LogVerbose( "No previous build graph state - perform full rebuild." );

		foreach( &mut need_to_rebuild : nodes_to_rebuild )
		{
			need_to_rebuild= true;
		}
	}

	// Perform rebuild.
	{
		// Create a map for graph traversal speed-up.
		var FileToNodesMap output_file_to_node_id_map= BuildOutputFileToNodeIndexMap( build_graph, nodes_dep_files );

		scoped_array BuildGraphNodeState mut nodes_state[ build_graph.nodes.size() ]( BuildGraphNodeState::Ready );
		var size_type mut num_nodes_to_rebuild= 0s;
		for( auto mut i= 0s; i < build_graph.nodes.size(); ++i )
		{
			if( nodes_to_rebuild[i] )
			{
				nodes_state[i] = BuildGraphNodeState::RebuildRequired;
				++num_nodes_to_rebuild;
			}
		}

		if( num_nodes_to_rebuild == 0s )
		{
			logger.LogInfo( "Nothing to do" );
			return true;
		}

		var ust::string8 num_nodes_to_rebuild_str= ust::to_string8(num_nodes_to_rebuild);
		logger.LogVerbose( ust::concat( "Has ", num_nodes_to_rebuild_str, " nodes to rebuild." ) );

		auto mut process_group_opt= CreateProcessGroup( logger );
		if( process_group_opt.empty() )
		{
			logger.LogError( "Failed to create process group!" );
			return false;
		}
		var ProcessGroupInterface &mut process_group= process_group_opt.try_deref();

		var size_type mut build_steps_started= 0s, mut build_steps_finished= 0s;

		loop label build_loop
		{
			// Try starting new processes, until number of running processes is less than limit.
			while( process_group.GetNumberOfRunningProcesses() < size_type(max_number_of_parallel_jobs) &&
				build_steps_started < num_nodes_to_rebuild )
			{
				// Select a node to rebuild - which dependencies are all ready.
				// TODO - speed-up this, replace linear search with something more satisfying.
				var size_type mut node_to_rebuild_index = build_graph.nodes.size();
				for( auto mut i= 0s; i < build_graph.nodes.size(); ++i )
				{
					if( nodes_state[i] == BuildGraphNodeState::RebuildRequired )
					{
						var BuildGraph::Node& node= build_graph.nodes[i];
						var ust::optional</MakeDepFile/>& dep_file_opt= nodes_dep_files[i];

						var bool mut can_start_rebuild= true;

						foreach( &input_file : node.input_files )
						{
							if_var( &input_nodes : output_file_to_node_id_map.find( input_file ) )
							{
								foreach( input_node : input_nodes )
								{
									can_start_rebuild &= nodes_state[input_node] == BuildGraphNodeState::Ready;
								}
							}
						}
						if( !IsSpecialBuildCommand( node.program ) ) // Program file is also input file.
						{
							if_var( &input_nodes : output_file_to_node_id_map.find( node.program ) )
							{
								foreach( input_node : input_nodes )
								{
									can_start_rebuild &= nodes_state[input_node] == BuildGraphNodeState::Ready;
								}
							}
						}

						if_var( &dep_file : dep_file_opt )
						{
							foreach( &dependency : dep_file.dependencies )
							{
								if_var( &input_nodes : output_file_to_node_id_map.find( dependency ) )
								{
									foreach( input_node : input_nodes )
									{
										can_start_rebuild &= nodes_state[input_node] == BuildGraphNodeState::Ready;
									}
								}
							}
						}

						if( can_start_rebuild )
						{
							node_to_rebuild_index= i;
							break;
						}
					}
				}

				if( node_to_rebuild_index >= build_graph.nodes.size() )
				{
					// Can't select node to rebuild.
					if( build_steps_finished < build_steps_started )
					{
						// There are still running processes.
						// This means that we may need to wait for some dependency to be finished in order to select next node to rebuild.
						break;
					}
					else
					{
						// There is no running processes and we can't select next node to rebuild.
						// This means that we likely have a dependency loop.
						break label build_loop;
					}
				}

				nodes_state[node_to_rebuild_index]= BuildGraphNodeState::RebuildInProgress;

				var BuildGraph::Node& node_to_rebuild = build_graph.nodes[node_to_rebuild_index];

				logger.LogInfo(
					ust::concat(
						"[",
						ust::to_string8( build_steps_started + 1s ),
						"/",
						num_nodes_to_rebuild_str,
						"] Building \"",
						node_to_rebuild.comment,
						"\"." ) );

				++build_steps_started;

				if( node_to_rebuild.program == SpecialBuildCommands::copy_file )
				{
					var ust::optional</ust::filesystem_path_view/> parent_path= ust::path::get_parent_path( node_to_rebuild.command_line[0s] );
					if( parent_path.empty() ||
						!EnsureDirectoryExists( logger, parent_path.try_deref() ) ||
						!CopyFile( logger, node_to_rebuild.command_line[0s], node_to_rebuild.command_line[1s] ) )
					{
						logger.LogError( ust::concat( "Command \"", node_to_rebuild.comment, "\" execution failed." ) );
						return false;
					}
					nodes_state[node_to_rebuild_index]= BuildGraphNodeState::Ready;
					++build_steps_finished;
				}
				else if( node_to_rebuild.program == SpecialBuildCommands::generate_file )
				{
					var ust::optional</ust::filesystem_path_view/> parent_path= ust::path::get_parent_path( node_to_rebuild.command_line[0s] );
					if( parent_path.empty() ||
						!EnsureDirectoryExists( logger, parent_path.try_deref() ) ||
						!WriteFile( logger, node_to_rebuild.command_line[0s], node_to_rebuild.command_line[1s] ) )
					{
						logger.LogError( ust::concat( "Command \"", node_to_rebuild.comment, "\" execution failed." ) );
						return false;
					}
					nodes_state[node_to_rebuild_index]= BuildGraphNodeState::Ready;
					++build_steps_finished;
				}
				else
				{
					if( !process_group.StartProcess(
						logger, node_to_rebuild_index, node_to_rebuild.program, node_to_rebuild.command_line ) )
					{
						logger.LogError( ust::concat( "Failed to start process for command \"", node_to_rebuild.comment, "\"." ) );
						return false;
					}
				}
			}

			// Do work with processes. Potentially wait for output or finish.
			if( !process_group.DoWork( logger ) )
			{
				logger.LogError( "Process group DoWork error!" );
				return false;
			}

			// Extract finished processes.
			loop
			{
				if_var( &finished_process_id : process_group.TakeFinishedProcess() )
				{
					assert( finished_process_id < build_graph.nodes.size() );
					assert( nodes_state[finished_process_id] == BuildGraphNodeState::RebuildInProgress );
					nodes_state[finished_process_id]= BuildGraphNodeState::Ready;
					logger.LogVerbose( ust::concat( "Finished building \"", build_graph.nodes[ finished_process_id ].comment, "\"." ) );
					++build_steps_finished;
				}
				else
				{
					break;
				}
			}

			if( build_steps_finished >= num_nodes_to_rebuild )
			{
				// Nothing left.
				break;
			}
		}

		// Last check to be sure all was really built (may not be true for bad graphs with cycles).
		// It's strictly necessary, since custom build steps may create dependency loops.
		for( auto mut i= 0s; i < build_graph.nodes.size(); ++i )
		{
			if( nodes_state[i] != BuildGraphNodeState::Ready )
			{
				logger.LogError(
					ust::concat(
						"Broken build graph - node \"",
						build_graph.nodes[i].comment,
						"\" was not built, likely due to dependency loops.") );
				return false;
			}
		}
	}

	// Succcessfuly performed the build.
	return true;
}

type FilesModificationTime= ust::hash_map</ ust::filesystem_path, ust::optional</FileModificationTime/> />;

fn CollectFilesModificationTime(
	BuildGraph& build_graph,
	ust::array_view_imut</ust::optional</MakeDepFile/>/> nodes_dep_files ) : FilesModificationTime
{
	assert( build_graph.nodes.size() == nodes_dep_files.size() );

	// Collect and deduplicate all files.
	var FilesModificationTime mut files_with_modification_time;

	foreach( &node : build_graph.nodes )
	{
		foreach( &file : node.input_files )
		{
			files_with_modification_time.insert_new( file, ust::null_optional );
		}
		foreach( &file : node.output_files )
		{
			files_with_modification_time.insert_new( file, ust::null_optional );
		}
		if( !IsSpecialBuildCommand( node.program ) ) // Program file is also input file.
		{
			files_with_modification_time.insert_new( node.program, ust::null_optional );
		}
	}

	foreach( &dep_file_opt : nodes_dep_files )
	{
		if_var( &dep_file : dep_file_opt )
		{
			files_with_modification_time.insert_new( dep_file.destination, ust::null_optional );
			foreach( &dependency : dep_file.dependencies )
			{
				files_with_modification_time.insert_new( dependency, ust::null_optional );
			}
		}
	}

	// Get modification times for all files.
	foreach( &mut map_value : files_with_modification_time )
	{
		var ust::optional</FileModificationTime/> modification_time = GetFileModificationTime( map_value.key() );
		map_value.value() = modification_time;
	}

	return files_with_modification_time;
}

type FileToNodesMap= ust::hash_map</ust::filesystem_path, ust::vector</size_type/>/>;

fn BuildInputFileToNodeIndexMap(
	BuildGraph& build_graph,
	ust::array_view_imut</ust::optional</MakeDepFile/>/> nodes_dep_files ) : FileToNodesMap
{
	assert( build_graph.nodes.size() == nodes_dep_files.size() );

	var FileToNodesMap mut input_file_to_node_id_map;
	for( auto mut i = 0s; i < build_graph.nodes.size(); ++i )
	{
		var BuildGraph::Node& node= build_graph.nodes[i];
		var ust::optional</MakeDepFile/>& dep_file_opt= nodes_dep_files[i];

		foreach( &input_file : node.input_files )
		{
			input_file_to_node_id_map.find_or_construct_default( input_file ).push_back(i);
		}

		if( !IsSpecialBuildCommand( node.program ) ) // Program file is also input file.
		{
			input_file_to_node_id_map.find_or_construct_default( node.program ).push_back(i);
		}

		if_var( &dep_file : dep_file_opt )
		{
			foreach( &dependency : dep_file.dependencies )
			{
				input_file_to_node_id_map.find_or_construct_default( dependency ).push_back(i);
			}
		}
	}

	return input_file_to_node_id_map;
}

fn BuildOutputFileToNodeIndexMap(
	BuildGraph& build_graph,
	ust::array_view_imut</ust::optional</MakeDepFile/>/> nodes_dep_files ) : FileToNodesMap
{
	assert( build_graph.nodes.size() == nodes_dep_files.size() );

	var FileToNodesMap mut output_file_to_node_id_map;
	for( auto mut i = 0s; i < build_graph.nodes.size(); ++i )
	{
		var BuildGraph::Node& node= build_graph.nodes[i];
		var ust::optional</MakeDepFile/>& dep_file_opt= nodes_dep_files[i];

		foreach( &output_file : node.output_files )
		{
			output_file_to_node_id_map.find_or_construct_default( output_file ).push_back(i);
		}

		if_var( &dep_file : dep_file_opt )
		{
			output_file_to_node_id_map.find_or_construct_default( dep_file.destination ).push_back(i);
		}
	}

	return output_file_to_node_id_map;
}

fn LoadAndParseDepFile( Logger &mut logger, ust::filesystem_path_view dep_file_path ) : ust::optional</MakeDepFile/>
{
	if( dep_file_path.empty() )
	{
		return ust::null_optional;

	}
	var ust::optional</ust::string8/> file_contents= ReadFile( dep_file_path );
	if( file_contents.empty() )
	{
		// Dep file is not created yet.
		logger.LogVerbose( ust::concat( "No dependency file \"", dep_file_path, "\"." ) );
		return ust::null_optional;
	}

	var ust::optional</MakeDepFile/> dep_file_opt= ParseMakeDepFileContents( file_contents.try_deref() );
	if( dep_file_opt.empty() )
	{
		logger.LogError( ust::concat( "Failed to parse dep file \"", dep_file_path, "\"" ) );
	}
	return dep_file_opt;
}

fn IsSpecialBuildCommand( ust::string_view8 command_name ) : bool
{
	return command_name.size() >= 2s && command_name[0s] == '?' && command_name[1s] == '?';
}

enum BuildGraphNodeState
{
	Ready,
	RebuildRequired,
	RebuildInProgress,
}

} // namespace BK
