import "/path_utils.u"
import "make_dep_file.uh"
import "path.uh"

namespace BK
{

fn ParseMakeDepFileContents( ust::string_view8 mut file_contents ) : ust::optional</MakeDepFile/>
{
	var MakeDepFile mut res;

	SkipWhitespaces( file_contents );
	res.destination= ust::path::normalize( ParsePath( file_contents ) );

	SkipWhitespaces( file_contents );
	if( file_contents.empty() || file_contents.front() != ":"c8 )
	{
		return ust::null_optional;
	}
	file_contents.drop_front(); // Skip :

	auto mut prev_s = file_contents.size();
	loop
	{
		SkipWhitespaces( file_contents );
		if( file_contents.empty() )
		{
			break;
		}

		res.dependencies.push_back( ust::path::normalize( ParsePath( file_contents ) ) );

		auto new_s = file_contents.size();
		if( new_s == prev_s )
		{
			return ust::null_optional; // Something is really broken, since we can't advance.
		}
		prev_s= new_s;
	}

	return res;
}

fn ParsePath( ust::string_view8 &mut s ) : ust::filesystem_path
{
	var ust::filesystem_path mut res;
	while( !s.empty() )
	{
		var char8 c= s.front();
		if( IsWhitespaceChar(c) )
		{
			break;
		}
		else if( c == ":"c8 && s.size() >= 2s && s[1s] == " "c8 )
		{
			// "Allow : inside paths, but skip : at the and (before space).
			// Do so, since we need to support Windows paths.
			break;
		}
		else if( c == "\\"c8 && s.size() >= 2s )
		{
			if( s[1s] == "\n"c8 )
			{
				break;
			}
			s.drop_front();
			res.push_back( s.drop_and_get_front() );
		}
		else if( c == "$"c8 && s.size() >= 2s )
		{
			s.drop_front();
			res.push_back( s.drop_and_get_front() );
		}
		else
		{
			s.drop_front();
			res.push_back( c );
		}
	}
	return res;
}

fn SkipWhitespaces( ust::string_view8 &mut s )
{
	while( !s.empty() )
	{
		var char8 c= s.front();
		if( IsWhitespaceChar(c) )
		{
			s.drop_front();
		}
		else if( c == "\\"c8 && s.size() >= 2s && s[1s] == "\n"c8 )
		{
			s.drop_front();
			s.drop_front();
		}
		else
		{
			break;
		}
	}
}

fn IsWhitespaceChar( char8 c ) : bool
{
	return c == " "c8 || c == "\t"c8 || c == "\n"c8;
}

} // namespace BK
