// Crossplatform filesystem-related functions.

import "/enum_string_conversions.u"
import "/file.u"
import "/file_helpers.u"
import "/path_utils.u"
import "/string_conversions.u"
import "filesystem.uh"

namespace BK
{

fn MakePathAbsolute( ust::filesystem_path_view path ) : ust::filesystem_path
{
	if( ust::path::is_absolute( path ) )
	{
		return path;
	}

	return ust::path::join( ust::get_current_directory(), path );
}

fn nodiscard EnsureDirectoryExists( Logger &mut logger, ust::filesystem_path_view path ) : bool
{
	auto create_res= ust::create_directory_with_parents( path );
	if( create_res.is_error() )
	{
		logger.LogInfo( ust::concat( "Failed to create directory \"", path, "\": ", ust::enum_to_string( create_res.try_deref_error() ) ) );
		return false;
	}

	return true;
}

fn nodiscard WriteFile( Logger &mut logger, ust::filesystem_path_view path, ust::string_view8 contents ) : bool
{
	if_var( &e : ust::write_string_view_to_file( path, contents ).as_error_ref() )
	{
		logger.LogError( ust::concat( "Failed to write file \"", path, "\" error: ", ust::enum_to_string( e ) ) );
		return false;
	}
	return true;
}

fn nodiscard CopyFile(
	Logger &mut logger, ust::filesystem_path_view destination_path, ust::filesystem_path_view source_path ) : bool
{
	// TODO - maybe also touch file modification timestamp?
	if_var( &e : ust::copy_file( source_path, destination_path ).as_error_ref() )
	{
		logger.LogError( ust::concat( "Failed to copy file \"", source_path, "\" into \"", destination_path, "\", error: ", ust::enum_to_string( e ) ) );
		return false;
	}
	return true;
}

fn nodiscard ReadFile( ust::filesystem_path_view path ) : ust::optional</ust::string8/>
{
	result_match( ust::read_file_to_string( path ) )
	{
		Ok(s) -> { return s; },
		Err(e) -> { ust::ignore_unused(e); return ust::null_optional; },
	}
}

fn GetFileModificationTime( ust::filesystem_path_view path ) : ust::optional</FileModificationTime/>
{
	result_match( ust::get_metadata_for_path( path ) )
	{
		Ok(v) -> { return v.modification_time; },
		Err(e) -> { ust::ignore_unused(e); return ust::null_optional; },
	}
}

} // namespace BK
