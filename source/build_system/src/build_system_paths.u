import "/string_conversions.u"
import "build_system_paths.uh"

namespace BK
{

fn GetPackageSourceDirectory( BuildSystemPaths& paths, PackageAbsoluteName& package_name ) : ust::string8
{
	var ust::string8 mut res;

	if( package_name.name_base.has</ PackageAbsoluteName::RootPackage />() )
	{
		res= paths.root_package_source_directory;
	}
	else if_var( &global_versioned_package : package_name.name_base.get</ GlobalVersionedPackageName />() )
	{
		res= paths.packages_repository_directory;
		res+= "/";
		res+= global_versioned_package.name;
		res+= "/";
		res+= StringifySemanticVersion( global_versioned_package.version );
	}
	else
	{
		// Unhandled package base name.
		halt;
	}

	if( !package_name.path.empty() )
	{
		res+= "/";
		res+= package_name.path;
	}

	return res;
}

fn GetPackageBuildDirectory(
	ust::string_view8 root_package_build_directory, PackageAbsoluteName& package_name ) : ust::string8
{
	var ust::string8 mut res= root_package_build_directory;

	if( package_name.name_base.has</ PackageAbsoluteName::RootPackage />() )
	{
		// Root package - build it in the root directory.
	}
	else if_var( &global_versioned_package : package_name.name_base.get</ GlobalVersionedPackageName />() )
	{
		// Put build directories of all global packages into a subdirectory.
		res+= "/";
		res+= "global.packages"; // Use directory with dot to avoid name conflicts with subpackages and build targets.
		res+= "/";
		res+= global_versioned_package.name;
		res+= "/";
		res+= StringifySemanticVersion( global_versioned_package.version );
	}
	else
	{
		// Unhandled package base name.
		halt;
	}

	if( !package_name.path.empty() )
	{
		res+= "/";
		res+= package_name.path;
	}
	return res;
}

fn GetBuildTargetBuildFilesDirectory(
	ust::string_view8 root_package_build_directory, BuildTargetAbsoluteName& target_name ) : ust::string8
{
	return
		ust::concat(
			GetPackageBuildDirectory( root_package_build_directory, target_name.package_name ),
			"/",
			target_name.name,
			".dir" ); // Use postfix with dot. Since dots in target names aren't allowed, we prevent possible file name conflict.
}

fn GetBuildTargetGeneratedSourcesDirectory(
	ust::string_view8 root_package_build_directory, BuildTargetAbsoluteName& build_target_name ) : ust::string8
{
	return
		ust::concat(
			GetBuildTargetBuildFilesDirectory( root_package_build_directory, build_target_name ),
			"/",
			"generated.sources" );
}

fn GetBuildTargetGeneratedSourcesBuildDirectory(
	ust::string_view8 root_package_build_directory, BuildTargetAbsoluteName& build_target_name ) : ust::string8
{
	return
		ust::concat(
			GetBuildTargetBuildFilesDirectory( root_package_build_directory, build_target_name ),
			"/",
			"generated.sources.build" );
}

fn GetBuildTargetGeneratedPublicHeadersDirectory(
	ust::string_view8 root_package_build_directory, BuildTargetAbsoluteName& build_target_name ) : ust::string8
{
	return
		ust::concat(
			GetBuildTargetBuildFilesDirectory( root_package_build_directory, build_target_name ),
			"/",
			"generated.public_headers" );
}

fn StringifySemanticVersion( SemanticVersion& v ) : ust::string8
{
	return
		ust::concat(
			ust::to_string8( v.major ),
			".",
			ust::to_string8( v.minor ),
			".",
			ust::to_string8( v.patch ),
			".",
			ust::to_string8( v.tweak ) );
}

} // namespace BK
