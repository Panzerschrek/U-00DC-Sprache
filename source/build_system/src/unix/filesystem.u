// Platform-dependent filesystem-related functions.

import "/enum_string_conversions.u"
import "/file.u"
import "/path_utils.u"
import "/string_conversions.u"
import "../filesystem.uh"
import "../path.uh"
import "unix.uh"


namespace BK
{

fn MakePathAbsolute( ust::filesystem_path_view path ) : ust::filesystem_path
{
	if( !path.empty() && path.front() == "/"c8 )
	{
		return path;
	}

	return ust::concat( ust::get_current_directory(), "/", path );
}

fn nodiscard EnsureDirectoryExists( Logger &mut logger, ust::filesystem_path_view path ) : bool
{
	var ust::filesystem_path path_absolute= MakePathAbsolute( path );

	// Optimistically assume that we need to create only one directory.
	if( ust::create_directory( path_absolute ).is_ok() )
	{
		return true;
	}

	// Failed to create it. Try to create all directories in given path.

	var ust::filesystem_path mut path_iterative;
	foreach( &component : ust::path::components_iter( path_absolute ) )
	{
		path_iterative+= "/";
		path_iterative+= component;
		auto create_res= ust::create_directory( path_iterative );
		if( create_res.is_error() )
		{
			logger.LogInfo( ust::concat( "Failed to create directory \"", path_iterative, "\": ", ust::enum_to_string( create_res.try_deref_error() ) ) );
			return false;
		}
	}

	return true;
}

fn GetCurrentExecutablePath() : ust::filesystem_path
{
	auto mut link_path_nt= "/proc/self/exe\0";

	var ust::filesystem_path mut res;
	res.resize( 256s, "\0"c8 );
	for( auto mut i= 0s; i < 8s; ++i )
	{
		auto len = unsafe( ::readlink( $<(link_path_nt[0]), res.data(), res.size() ) );
		if( len < ssize_type(0) )
		{
			return "";
		}
		if( size_type(len) >= res.size() )
		{
			// Possible truncation.
			auto new_size= res.size() * 2s;
			res.resize( new_size, "\0"c8 );
			continue;
		}

		res.resize( size_type(len), " "c8 );
		return res;
	}

	return "";
}

} // namespace BK
