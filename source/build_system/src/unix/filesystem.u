import "/string_conversions.u"
import "../filesystem.uh"
import "../path.uh"
import "errno.uh"
import "unix.uh"
import "stat.uh"


namespace BK
{

fn MakePathAbsolute( ust::string_view8 path ) : ust::string8
{
	if( !path.empty() && path.front() == "/"c8 )
	{
		return path;
	}

	return ust::concat( GetCurrentDirectory(), "/", path );
}

fn EnsureDirectoryExists( Logger &mut logger, ust::string_view8 path ) : bool
{
	var ust::string8 path_absolute= MakePathAbsolute( path );

	// Optimistically assume that we need to create only one directory.
	if( EnsureSingleDirectoryExists( path_absolute ) )
	{
		return true;
	}

	// Failed to create it. Try to create all directories in given path.

	var ust::string8 mut path_iterative;
	foreach( &component : SplitPathIntoComponents( path_absolute ) )
	{
		path_iterative+= "/";
		path_iterative+= component;
		if( !EnsureSingleDirectoryExists( path_iterative ) )
		{
			logger.LogInfo( ust::concat( "Failed to create directory \"", path_iterative, "\": " ) );
			return false;
		}
	}

	return true;
}

fn EnsureSingleDirectoryExists( ust::string_view8 path_absolute ) : bool
{
	var ust::string8 mut path_null_terminated= path_absolute;
	path_null_terminated+= "\0";

	var i32 res= unsafe( ::mkdir( path_null_terminated.data(), 0o755u ) );
	if( res == 0 )
	{
		return true;
	}

	var i32 errno = BKGetErrno();
	if( errno == EEXIST )
	{
		// If given path already exists, check if it's a directory and not a file, symlink or something else.
		return unsafe( BKIsDirectory(path_null_terminated.data() ) );
	}

	return false;
}

fn WriteFile( Logger &mut logger, ust::string_view8 path, ust::string_view8 contents ) : bool
{
	var ust::string8 mut path_null_terminated = path;
	path_null_terminated+= "\0";

	var i32 fd = unsafe( ::open( path_null_terminated.data(), O_WRONLY | O_CREAT | O_TRUNC, 0o755u ) );
	if( fd == -1 )
	{
		logger.LogError( ust::concat( "Failed to open file \"", path, "\" for writing, error: ", ust::to_string8( BKGetErrno() ) ) );
		return false;
	}

	// Perform writing in loop in order to handle cases where less than needed bytes were written.
	for( auto mut offset = 0s; offset < contents.size(); )
	{
		var ssize_type write_res = unsafe( ::write(
			fd,
			ust::ptr_cast_to_byte8( contents.data() ) + offset,
			contents.size() - offset ) );

		if( write_res < ssize_type(0) )
		{
			// Write failed.
			logger.LogError( ust::concat( "Failed to write to file \"", path, "\", error: ", ust::to_string8( BKGetErrno() ) ) );
			unsafe( ::close(fd) );
			return false;
		}

		offset+= size_type(write_res);
	}

	unsafe( ::close(fd) );

	return true;
}

fn CopyFile( Logger &mut logger, ust::string_view8 destination_path, ust::string_view8 source_path ) : bool
{
	var ust::string8 mut source_path_null_terminated = source_path;
	source_path_null_terminated+= "\0";

	var i32 fd_source = unsafe( ::open( source_path_null_terminated.data(), O_RDONLY, 0u ) );
	if( fd_source == -1 )
	{
		logger.LogError( ust::concat( "Failed to open file \"", source_path, "\" for reading, error: ", ust::to_string8( BKGetErrno() ) ) );
		return false;
	}

	var i64 source_file_size= unsafe( BKGetFileSize( fd_source ) );
	if( source_file_size < 0i64 )
	{
		logger.LogError( ust::concat( "Failed to get file size for \"", source_path, "\"." ) );
		unsafe( ::close(fd_source) );
		return false;
	}

	var ust::string8 mut destination_path_null_terminated = destination_path;
	destination_path_null_terminated+= "\0";

	var i32 fd_destination = unsafe( ::open( destination_path_null_terminated.data(), O_WRONLY | O_CREAT | O_TRUNC, 0o755u ) );
	if( fd_destination == -1 )
	{
		logger.LogError( ust::concat( "Failed to open file \"", destination_path, "\" for writing, error: ", ust::to_string8( BKGetErrno() ) ) );
		unsafe( ::close( fd_source ) );
		return false;
	}

	for( var off_t mut offset(0); offset < off_t(source_file_size); )
	{
		var ssize_type bytes_sent= unsafe( ::sendfile( fd_destination, fd_source, $<(offset), size_t( off_t(source_file_size) - offset ) ) );
		if( bytes_sent <= ssize_type(0) )
		{
			logger.LogError( ust::concat( "sendfile failed for destination \"", destination_path, "\" and source \"", source_path, "\", error: ", ust::to_string8( BKGetErrno() ) ) );
			unsafe( ::close( fd_source ) );
			unsafe( ::close( fd_destination ) );
			return false;
		}
	}

	unsafe( ::close( fd_source ) );
	unsafe( ::close( fd_destination ) );
	return true;
}

fn ReadFile( ust::string_view8 path ) : ust::optional</ust::string8/>
{
	var ust::string8 mut path_null_terminated = path;
	path_null_terminated+= "\0";

	var i32 fd = unsafe( ::open( path_null_terminated.data(), O_RDONLY, 0u ) );
	if( fd == -1 )
	{
		return ust::null_optional;
	}

	var i64 size = unsafe( BKGetFileSize( fd ) );
	if( size < 0i64 )
	{
		unsafe( ::close(fd) );
		return ust::null_optional;
	}

	var ust::string8 mut contents( size_type(size), "\0"c8 );

	// Perform reading in loop in order to handle cases where less than needed bytes were read.
	for( auto mut offset = 0s; offset < contents.size(); )
	{
		var ssize_type read_res = unsafe( ::read(
			fd,
			ust::ptr_cast_to_byte8( contents.data() ) + offset,
			contents.size() - offset ) );

		if( read_res < ssize_type(0) )
		{
			// Read filed.
			unsafe( ::close(fd) );
			return ust::null_optional;
		}

		offset+= size_type(read_res);
	}

	unsafe( ::close(fd) );

	return move(contents);
}

fn GetCurrentDirectory() : ust::string8
{
	var ust::string8 mut res;
	res.resize( 256s, "\0"c8 );
	for( auto mut i= 0s; i < 8s; ++i )
	{
		auto call_res = unsafe( ::getcwd( res.data(), res.size() ) );
		if( ust::is_nullptr(call_res) )
		{
			if( BKGetErrno() == ERANGE )
			{
				// Not enough space - double it and call the function again.
				auto new_size= res.size() * 2s;
				res.resize( new_size, "\0"c8 );
				continue;
			}
			else
			{
				// "getcwd" failed for some other reason.
				halt;
			}
		}

		var size_type mut len= 0s;
		while( len < res.size() && res[len] != "\0"c8 )
		{
			++len;
		}

		res.resize( len, " "c8 );
		return res;
	}

	// Failed to retrieve current directory.
	halt;
}

fn GetFileModificationTime( ust::string_view8 path ) : ust::optional</FileModificationTime/>
{
	var ust::string8 mut path_null_terminated = path;
	path_null_terminated+= "\0";

	var u64 res= unsafe( BKGetFileModificationTimeImpl( path_null_terminated.data() ) );

	if( res == 0u64 )
	{
		return ust::null_optional;
	}

	return res;
}

fn GetCurrentExecutablePath() : ust::string8
{
	auto mut link_path_nt= "/proc/self/exe\0";

	var ust::string8 mut res;
	res.resize( 256s, "\0"c8 );
	for( auto mut i= 0s; i < 8s; ++i )
	{
		auto len = unsafe( ::readlink( $<(link_path_nt[0]), res.data(), res.size() ) );
		if( len < ssize_type(0) )
		{
			return "";
		}
		if( size_type(len) >= res.size() )
		{
			// Possible truncation.
			auto new_size= res.size() * 2s;
			res.resize( new_size, "\0"c8 );
			continue;
		}

		res.resize( size_type(len), " "c8 );
		return res;
	}

	return "";
}

} // namespace BK
