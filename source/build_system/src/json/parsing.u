import "/utf.u"
import "parsing.uh"

namespace BK
{

fn ParseJson( ust::string_view8 mut json_text ) : ust::optional</JsonValue/>
{
	return ParseJsonImpl( json_text );
}

fn ParseJsonImpl( ust::string_view8 &mut text ) : ust::optional</JsonValue/>
{
	SkipWhitespaces( text );
	if( text.empty() )
	{
		return ust::null_optional;
	}

	switch( text.front() )
	{
		'n' ->
		{
			// Null
			var ust::string_view8 expected= "null";
			if( !text.starts_with( expected ) )
			{
				return ust::null_optional;
			}
			text= text.subrange_end( expected.size() );
			return JsonValue( JsonValue::Null() );
		},
		'f' ->
		{
			// Bool false
			var ust::string_view8 expected= "false";
			if( !text.starts_with( expected ) )
			{
				return ust::null_optional;
			}
			text= text.subrange_end( expected.size() );
			return JsonValue( false );
		},
		't' ->
		{
			// Bool true
			var ust::string_view8 expected= "true";
			if( !text.starts_with( expected ) )
			{
				return ust::null_optional;
			}
			text= text.subrange_end( expected.size() );
			return JsonValue( true );
		},
		'0' ... '9', '-' ->
		{
			// Number
			auto mut num= ParseJsonNumber( text );
			if( num.empty() )
			{
				return ust::null_optional;
			}
			return JsonValue( num.try_take() );
		},
		'"' ->
		{
			auto mut str= ParseJsonString( text );
			if( str.empty() )
			{
				return ust::null_optional;
			}
			return JsonValue( str.try_take() );
		},
		'[' ->
		{
			// Array
			text.drop_front();

			SkipWhitespaces( text );
			if( text.empty() )
			{
				return ust::null_optional;
			}

			var JsonValue::Array mut array;

			if( text.front() == ']' )
			{
				text.drop_front();
			}
			else
			{
				loop
				{
					auto mut sub_value= ParseJsonImpl( text );
					if( sub_value.empty() )
					{
						return ust::null_optional;
					}
					array.push_back( sub_value.try_take() );

					SkipWhitespaces( text );
					if( text.empty() )
					{
						return ust::null_optional;
					}
					if( text.front() == ',' )
					{
						text.drop_front();
						continue;
					}
					if( text.front() == ']' )
					{
						text.drop_front();
						break;
					}
					return ust::null_optional;
				}
			}

			return JsonValue( move(array) );
		},
		'{' ->
		{
			// Object
			text.drop_front();

			SkipWhitespaces( text );
			if( text.empty() )
			{
				return ust::null_optional;
			}

			var JsonValue::Object mut object;

			if( text.front() == '}' )
			{
				text.drop_front();
			}
			else
			{
				loop
				{
					SkipWhitespaces( text );
					auto mut key= ParseJsonString( text );
					if( key.empty() )
					{
						return ust::null_optional;
					}

					SkipWhitespaces( text );
					if( text.empty() || text.front() != ':' )
					{
						return ust::null_optional;
					}
					text.drop_front();

					auto mut value= ParseJsonImpl( text );
					if( value.empty() )
					{
						return ust::null_optional;
					}
					object.insert_or_update( key.try_take(), value.try_take() );

					SkipWhitespaces( text );
					if( text.empty() )
					{
						return ust::null_optional;
					}
					if( text.front() == ',' )
					{
						text.drop_front();
						continue;
					}
					if( text.front() == '}' )
					{
						text.drop_front();
						break;
					}
					return ust::null_optional;
				}
			}

			return JsonValue( move(object) );
		},
		default -> { return ust::null_optional; },
	}
}

fn SkipWhitespaces( ust::string_view8 &mut text )
{
	while( !text.empty() )
	{
		switch( text.front() )
		{
			' ', '\t', '\r', '\n' -> { text.drop_front(); },
			default -> { break; }
		}
	}
}

fn ParseJsonNumber( ust::string_view8 &mut text ) : ust::optional</JsonValue::Number/>
{
	var f64 mut sign= 1.0;
	if( text.front() == '-' )
	{
		sign= -1.0;
		text.drop_front();
	}

	if( text.empty() )
	{
		return ust::null_optional;
	}

	var f64 mut num(0);
	while( !text.empty() )
	{
		var char8 c= text.front();
		if( c >= '0' && c <= '9' )
		{
			num= num * 10.0 + f64( u32(c) - u32( '0' ) );
			text.drop_front();
		}
		else
		{
			break;
		}
	}

	var i32 mut decimal_point_position= 0;
	if( !text.empty() && text.front() == '.' )
	{
		text.drop_front();

		if( text.empty() )
		{
			return ust::null_optional;
		}

		while( !text.empty() )
		{
			var char8 c= text.front();
			if( c >= '0' && c <= '9' )
			{
				num= num * 10.0 + f64( u32(c) - u32( '0' ) );
				++decimal_point_position;
				text.drop_front();
			}
			else
			{
				break;
			}
		}
	}

	if( !text.empty() && ( text.front() == 'e' || text.front() == 'E' ) )
	{
		text.drop_front();

		if( text.empty() )
		{
			return ust::null_optional;
		}

		var bool mut exponent_is_negative= false;
		if( text.front() == '-' )
		{
			exponent_is_negative= true;
			text.drop_front();
		}
		else if( text.front() == '+' )
		{
			exponent_is_negative= false;
			text.drop_front();
		}

		if( text.empty() )
		{
			return ust::null_optional;
		}

		var i32 mut exponent= 0;
		while( !text.empty() )
		{
			var char8 c= text.front();
			if( c >= '0' && c <= '9' )
			{
				exponent= exponent * 10 + ( i32(c) - i32( '0' ) );
				text.drop_front();
			}
			else
			{
				break;
			}
		}

		if( exponent_is_negative )
		{
			exponent = -exponent;
		}
		decimal_point_position-= exponent;
	}

	// For double calculate only powers > 0, because pow( base, positive ) is always integer and has exact double representation.
	// pow( base, negative ) may have not exact double representation (1/10 for example).
	// Example:
	// 3 / 10 - right
	// 3 * (1/10) - wrong
	if( decimal_point_position >= 0 )
	{
		return sign * (num / PowI( u64(10), u64(decimal_point_position) ) );
	}
	else
	{
		return sign * (num * PowI( u64(10), u64(-decimal_point_position) ) );
	}
}

fn ParseJsonString( ust::string_view8 &mut text ) : ust::optional</JsonValue::String/>
{
	if( text.empty() || text.front() != '"' )
	{
		return ust::null_optional;
	}
	text.drop_front();

	var ust::string8 mut res;

	if( text.empty() )
	{
		return ust::null_optional;
	}

	loop
	{
		if( text.empty() )
		{
			return ust::null_optional;
		}

		var char8 c= text.drop_and_get_front();

		switch( c )
		{
			'"' -> { break; },
			'\\' ->
			{
				if( text.empty() )
				{
					return ust::null_optional;
				}
				var char8 c_escaped= text.drop_and_get_front();
				switch( c_escaped )
				{
					'"', '\\', '/' -> { res.push_back( c_escaped ); },
					'b' -> { res.push_back( '\b' ); },
					'f' -> { res.push_back( '\f' ); },
					'n' -> { res.push_back( '\n' ); },
					'r' -> { res.push_back( '\r' ); },
					't' -> { res.push_back( '\t' ); },
					'u' ->
					{
						// A hex number.
						if( text.size() < 4s )
						{
							return ust::null_optional;
						}
						var u32 mut cc= 0u;
						for( auto mut i= 0u; i < 4u; ++i )
						{
							var char8 c= text.drop_and_get_front();
							if( c >= '0' && c <= '9' )
							{
								cc|= (u32(c) - u32('0')) << ( ( 3u - i ) * 4u );
							}
							else if( c >= 'a' && c <= 'f' )
							{
								cc|= (u32(c) + 10u - u32('a')) << ( ( 3u - i ) * 4u );
							}
							else if( c >= 'A' && c <= 'F' )
							{
								cc|= (u32(c) + 10u - u32('A')) << ( ( 3u - i ) * 4u );
							}
							else
							{
								return ust::null_optional;
							}
						}
						ust::utf::push_code_point_to_string( res, char32(cc) );
					},
					// Unknown escape sequence.
					default -> { return ust::null_optional; },
				}
			},
			// TODO - check for control characters.
			default -> { res.push_back( c ); },
		}
	}

	return res;
}

fn PowI( u64 base_, u64 pow ) : f64
{
	var f64 mut res= 1.0, mut p(base_);

	for( var u64 mut i(1); ; i <<= 1u, p*= p )
	{
		if( ( i & pow ) != 0u64 )
		{
			res*= p;
		}
		if( i >= pow )
		{
			break;
		}
	}

	return res;
}

} // namespace BK
