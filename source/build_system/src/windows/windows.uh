// This file contains some definitions from windows headers, which are used inside the build system.
// These definitions are manually copypasted from the result of the CPPHeaderConverter tool execution and somewhat tweaked.

fn nomangle CloseHandle( HANDLE hObject ) unsafe call_conv( "system" ) : BOOL;

fn nomangle ConnectNamedPipe( HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped ) unsafe call_conv( "system" ) : BOOL;

fn nomangle CopyFileW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists ) unsafe call_conv( "system" ) : BOOL;

fn nomangle CreateDirectoryA( LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes ) unsafe call_conv( "system" ) : BOOL;
fn nomangle CreateDirectoryW( LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes ) unsafe call_conv( "system" ) : BOOL;

fn nomangle CreateFileA( LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile ) unsafe call_conv( "system" ) : HANDLE;
fn nomangle CreateFileW( LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile ) unsafe call_conv( "system" ) : HANDLE;

fn nomangle CreateIoCompletionPort( HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads ) unsafe call_conv( "system" ) : HANDLE;

fn nomangle CreateNamedPipeA( LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes ) unsafe call_conv( "system" ) : HANDLE;
fn nomangle CreateNamedPipeW( LPCWSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes ) unsafe call_conv( "system" ) : HANDLE;

fn nomangle CreateProcessA( LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation ) unsafe call_conv( "system" ) : BOOL;
fn nomangle CreateProcessW( LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation ) unsafe call_conv( "system" ) : BOOL;

fn nomangle DuplicateHandle( HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwOptions ) unsafe call_conv( "system" ) : BOOL;

fn nomangle GetCurrentDirectoryA( DWORD nBufferLength, LPSTR lpBuffer ) unsafe call_conv( "system" ) : DWORD;
fn nomangle GetCurrentDirectoryW( DWORD nBufferLength, LPWSTR lpBuffer ) unsafe call_conv( "system" ) : DWORD;

fn nomangle GetCurrentProcess() unsafe call_conv( "system" ) : HANDLE;
fn nomangle GetCurrentProcessId() unsafe call_conv( "system" ) : DWORD;

fn nomangle GetExitCodeProcess( HANDLE hProcess, LPDWORD lpExitCode ) unsafe call_conv( "system" ) : BOOL;

fn nomangle GetFileAttributesExW( LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation ) unsafe call_conv( "system" ) : BOOL;

fn nomangle GetFileSizeEx( HANDLE hFile, PLARGE_INTEGER lpFileSize ) unsafe call_conv( "system" ) : BOOL;

fn nomangle GetLastError() unsafe call_conv( "system" ) : DWORD;

fn nomangle GetModuleFileNameW( HMODULE hModule, LPWSTR lpFilename, DWORD nSize ) unsafe call_conv( "system" ) : DWORD;

fn nomangle GetOverlappedResult( HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait ) unsafe call_conv( "system" ) : BOOL;

fn nomangle GetProcAddress( HMODULE hModule, LPCSTR lpProcName ) unsafe call_conv( "system" ) : $(byte8);

fn nomangle GetQueuedCompletionStatus( HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, PULONG_PTR lpCompletionKey, $(LPOVERLAPPED) lpOverlapped, DWORD dwMilliseconds ) unsafe call_conv( "system" ) : BOOL;

fn nomangle GetSystemInfo( LPSYSTEM_INFO lpSystemInfo ) unsafe call_conv( "system" ) : void;

fn nomangle LoadLibraryA( LPCSTR lpLibFileName ) unsafe call_conv( "system" ) : HMODULE;
fn nomangle LoadLibraryW( LPCWSTR lpLibFileName ) unsafe call_conv( "system" ) : HMODULE;

fn nomangle ReadFile( HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped ) unsafe call_conv( "system" ) : BOOL;

fn nomangle WaitForSingleObject( HANDLE hHandle, DWORD dwMilliseconds ) unsafe call_conv( "system" ) : DWORD;

fn nomangle WriteFile( HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped ) unsafe call_conv( "system" ) : BOOL;

struct HINSTANCE__ ordered
{
	i32 unused;
}

struct ü_FILETIME ordered
{
	DWORD dwLowDateTime;
	DWORD dwHighDateTime;
}

enum ü_GET_FILEEX_INFO_LEVELS : i32
{
	GetFileExInfoStandard,
	GetFileExMaxInfoLevel,
}

struct ü_LARGE_INTEGER ordered
{
	[ byte64, 1 ] union_contents;
}

struct ü_OVERLAPPED ordered
{
	ULONG_PTR Internal;
	ULONG_PTR InternalHigh;

	struct ü_anon_record_190 ordered
	{
		[ byte32, 2 ] union_contents;
	}
	ü_anon_record_190 ü_anon_field_636;

	HANDLE hEvent;
}

struct ü_PROCESS_INFORMATION ordered
{
	HANDLE hProcess;
	HANDLE hThread;
	DWORD dwProcessId;
	DWORD dwThreadId;
}

struct ü_SECURITY_ATTRIBUTES ordered
{
	DWORD nLength;
	LPVOID lpSecurityDescriptor;
	BOOL bInheritHandle;
}

struct ü_STARTUPINFOA ordered
{
	DWORD cb;
	LPSTR lpReserved;
	LPSTR lpDesktop;
	LPSTR lpTitle;
	DWORD dwX;
	DWORD dwY;
	DWORD dwXSize;
	DWORD dwYSize;
	DWORD dwXCountChars;
	DWORD dwYCountChars;
	DWORD dwFillAttribute;
	DWORD dwFlags;
	WORD wShowWindow;
	WORD cbReserved2;
	LPBYTE lpReserved2;
	HANDLE hStdInput;
	HANDLE hStdOutput;
	HANDLE hStdError;
}

struct ü_STARTUPINFOW ordered
{
	DWORD cb;
	LPWSTR lpReserved;
	LPWSTR lpDesktop;
	LPWSTR lpTitle;
	DWORD dwX;
	DWORD dwY;
	DWORD dwXSize;
	DWORD dwYSize;
	DWORD dwXCountChars;
	DWORD dwYCountChars;
	DWORD dwFillAttribute;
	DWORD dwFlags;
	WORD wShowWindow;
	WORD cbReserved2;
	LPBYTE lpReserved2;
	HANDLE hStdInput;
	HANDLE hStdOutput;
	HANDLE hStdError;
}

struct ü_SYSTEM_INFO ordered
{
	struct ü_anon_record_194 ordered
	{
		[ byte32, 1 ] union_contents;
	}
	ü_anon_record_194 ü_anon_field_700;
	DWORD dwPageSize;
	LPVOID lpMinimumApplicationAddress;
	LPVOID lpMaximumApplicationAddress;
	DWORD_PTR dwActiveProcessorMask;
	DWORD dwNumberOfProcessors;
	DWORD dwProcessorType;
	DWORD dwAllocationGranularity;
	WORD wProcessorLevel;
	WORD wProcessorRevision;
}

struct ü_WIN32_FILE_ATTRIBUTE_DATA ordered
{
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
}

type wchar_t = u16;
type BOOL = i32;
type BYTE = u8;
type CHAR = char8;
type DWORD = u32;
type DWORD_PTR = ULONG_PTR;
type FILETIME = ü_FILETIME;
type GET_FILEEX_INFO_LEVELS = ü_GET_FILEEX_INFO_LEVELS;
type HANDLE = $(byte8);
type HINSTANCE = $(HINSTANCE__);
type HMODULE = HINSTANCE;
type LARGE_INTEGER = ü_LARGE_INTEGER;
type LPBYTE = $(BYTE);
type LPCSTR = $(CHAR);
type LPCVOID = $(byte8);
type LPCWSTR = $(WCHAR);
type LPDWORD = $(DWORD);
type LPHANDLE = $(HANDLE);
type LPOVERLAPPED = $(ü_OVERLAPPED);
type LPPROCESS_INFORMATION = $(ü_PROCESS_INFORMATION);
type LPSECURITY_ATTRIBUTES = $(ü_SECURITY_ATTRIBUTES);
type LPSTARTUPINFOA = $(ü_STARTUPINFOA);
type LPSTARTUPINFOW = $(ü_STARTUPINFOW);
type LPSTR = $(CHAR);
type LPSYSTEM_INFO = $(ü_SYSTEM_INFO);
type LPVOID = $(byte8);
type LPWSTR = $(WCHAR);
type PLARGE_INTEGER = $(LARGE_INTEGER);
type PULONG_PTR = $(ULONG_PTR);
type ULONG_PTR = size_type;
type WCHAR = wchar_t;
type WORD = u16;

auto constexpr ERROR_BROKEN_PIPE = 109;
auto constexpr ERROR_INSUFFICIENT_BUFFER = 122;
auto constexpr ERROR_ALREADY_EXISTS = 183;
auto constexpr ERROR_IO_PENDING = 997;

auto constexpr DUPLICATE_SAME_ACCESS = 2;

auto constexpr FILE_FLAG_OVERLAPPED = 1073741824;
auto constexpr FILE_FLAG_SEQUENTIAL_SCAN = 0x08000000;

auto constexpr FILE_SHARE_READ = 1;
auto constexpr FILE_SHARE_WRITE = 2;
auto constexpr FILE_SHARE_DELETE = 4;

auto constexpr GENERIC_READ = 0x80000000u;
auto constexpr GENERIC_WRITE = 0x40000000u;
auto constexpr GENERIC_EXECUTE = 0x20000000u;
auto constexpr GENERIC_ALL = 0x10000000u;

auto constexpr INFINITE = -1;

auto constexpr CREATE_ALWAYS = 2;
auto constexpr OPEN_EXISTING = 3;
auto constexpr OPEN_ALWAYS = 4;

auto constexpr PIPE_ACCESS_INBOUND = 1;
auto constexpr PIPE_TYPE_BYTE = 0;
auto constexpr PIPE_UNLIMITED_INSTANCES = 255;

auto constexpr STARTF_USESTDHANDLES = 256;
