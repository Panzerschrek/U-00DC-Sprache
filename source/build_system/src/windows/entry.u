import "../entry.uh"
import "wide_string.uh"

// Use "wmain" in order to obtain command line in proper encoding, unlike "main" where args encoding isn't specified.
fn nomangle wmain( i32 argc, $($(WCHAR)) argv ) unsafe : i32
{
	auto args_utf8 =
		unsafe( BK::WMainArgsToStringView( argc, argv ) )
		.iter()
		.map( BK::WideStringToUTF8 )
		.collect</ ust::vector /> ();

	var ust::vector</ust::string_view8/> mut args_view_utf8;

	// Hack to prevent "ReferencePollutionOfOuterLoopVariable" error.
	if( false )
	{
		args_view_utf8.push_back( args_utf8.front() );
	}

	for( auto mut i= 0s; i < args_utf8.size(); ++i )
	{
		args_view_utf8.push_back( cast_imut(args_utf8)[i] );
	}

	return BK::Main( args_view_utf8.range().subrange_start(1s) );
}

namespace BK
{

// Convert args of a C-like "wmain" function into a vector of string views.
// "argv" should contain at least "argc" elements, each of them is a null-terminated string.
// Warning, reference checking for result inner reference tag dosn't work!
fn WMainArgsToStringView( i32 argc, $($(WCHAR)) argv ) unsafe : ust::vector</WideStringView/>
{
	var ust::vector</WideStringView/> mut res;
	for( auto mut i= 0; i < argc; ++i )
	{
		res.push_back( unsafe( NullTerminatedWideStringToStringView( $>( argv + i ) ) ) );
	}

	return res;
}

// Assuming "ptr" is a pointer to a null-terminated C wide string, convert it into view.
// Warning, reference checking for result inner reference tag dosn't work!
fn NullTerminatedWideStringToStringView( $(WCHAR) ptr ) unsafe : WideStringView
{
	unsafe
	{
		auto mut p= ptr;
		while( $>(p) != WCHAR(0) )
		{
			++p;
		}

		return WideStringView( ptr, size_type( p - ptr ) );
	}
}

} // namespace BK
