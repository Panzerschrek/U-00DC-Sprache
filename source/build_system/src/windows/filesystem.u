import "/file.u"
import "/file_helpers.u"
import "/string_conversions.u"
import "../filesystem.uh"
import "../path.uh"
import "invalid_handle.uh"
import "wide_string.uh"
import "windows.uh"

namespace BK
{

fn MakePathAbsolute( ust::string_view8 path ) : ust::string8
{
	if( path.size() >= 2s && path[0s] >= "A"c8 && path[0s] <= "Z"c8 && path[1s] == ":"c8 )
	{
		// Already an absolute path strting with drive letter.
		// TODO - support universal paths.
		return path;
	}

	return ust::concat( ust::get_current_directory(), "/", path );
}

fn EnsureDirectoryExists( Logger &mut logger, ust::string_view8 path ) : bool
{
	var ust::string8 path_absolute= MakePathAbsolute( path );

	// Optimistically assume that we need to create only one directory.
	if( EnsureSingleDirectoryExists( path_absolute ) )
	{
		return true;
	}

	// Failed to create it. Try to create all directories in given path.

	auto components= SplitPathIntoComponents( path_absolute );

	var ust::string8 mut path_iterative= components.front();
	path_iterative+= "/";

	foreach( &component : components.range().subrange_start(1s) )
	{
		path_iterative+= component;
		path_iterative+= "/";
		if( !EnsureSingleDirectoryExists( path_iterative ) )
		{
			logger.LogInfo( ust::concat( "Failed to create directory \"", path_iterative, "\": " ) );
			return false;
		}
	}

	return true;
}

fn EnsureSingleDirectoryExists( ust::string_view8 path_absolute ) : bool
{
	return ust::create_directory( path_absolute ).is_ok();
}

fn WriteFile( Logger &mut logger, ust::string_view8 path, ust::string_view8 contents ) : bool
{
	result_match( ust::write_string_view_to_file( path, contents ) )
	{
		Ok(v) -> { ust::ignore_unused(v); return true; },
		Err(e) ->
		{
			logger.LogError( ust::concat( "Failed to write file \"", path, "\" error: ", ust::to_string8( u32(e) ) ) );
			return false;
		},
	}
}

fn CopyFile( Logger &mut logger, ust::string_view8 destination_path, ust::string_view8 source_path ) : bool
{
	// TODO - maybe also touch file modification timestamp?
	result_match( ust::copy_file( source_path, destination_path ) )
	{
		Ok(v) -> { ust::ignore_unused(v); return true; },
		Err(e) ->
		{
			logger.LogError( ust::concat( "Failed to copy file \"", source_path, "\" into \"", destination_path, "\", error: ", ust::to_string8( u32(e) ) ) );
			return false;
		},
	}
}

fn ReadFile( ust::string_view8 path ) : ust::optional</ust::string8/>
{
	result_match( ust::read_file_to_string( path ) )
	{
		Ok(s) -> { return s; },
		Err(e) -> { ust::ignore_unused(e); return ust::null_optional; },
	}
}

fn GetFileModificationTime( ust::string_view8 path ) : ust::optional</FileModificationTime/>
{
	result_match( ust::get_metadata_for_path( path ) )
	{
		Ok(v) -> { return v.modification_time; },
		Err(e) -> { ust::ignore_unused(e); return ust::null_optional; },
	}
}

fn GetCurrentExecutablePath() : ust::string8
{
	var WideString mut res;
	res.resize( 256s, WCHAR(0) );
	for( auto mut i= 0s; i < 8s; ++i )
	{
		var DWORD size = unsafe( ::GetModuleFileNameW( ust::nullptr</HINSTANCE__/>(), res.data(), DWORD( res.size() ) ) );
		if( unsafe( GetLastError() ) == DWORD(ERROR_INSUFFICIENT_BUFFER) )
		{
			// Not enough space - increase it.
			auto new_size= res.size() * 2s;
			res.resize( new_size, WCHAR(0) );
			continue;
		}

		res.resize( size_type(size), WCHAR(0) );

		break;
	}

	return WideStringToUTF8( res );
}

} // namespace BK
