import "/file.u"
import "/string_conversions.u"
import "../filesystem.uh"
import "../path.uh"
import "invalid_handle.uh"
import "wide_string.uh"
import "windows.uh"

namespace BK
{

fn MakePathAbsolute( ust::string_view8 path ) : ust::string8
{
	if( path.size() >= 2s && path[0s] >= "A"c8 && path[0s] <= "Z"c8 && path[1s] == ":"c8 )
	{
		// Already an absolute path strting with drive letter.
		// TODO - support universal paths.
		return path;
	}

	return ust::concat( ust::get_current_directory(), "/", path );
}

fn EnsureDirectoryExists( Logger &mut logger, ust::string_view8 path ) : bool
{
	var ust::string8 path_absolute= MakePathAbsolute( path );

	// Optimistically assume that we need to create only one directory.
	if( EnsureSingleDirectoryExists( path_absolute ) )
	{
		return true;
	}

	// Failed to create it. Try to create all directories in given path.

	auto components= SplitPathIntoComponents( path_absolute );

	var ust::string8 mut path_iterative= components.front();
	path_iterative+= "/";

	foreach( &component : components.range().subrange_start(1s) )
	{
		path_iterative+= component;
		path_iterative+= "/";
		if( !EnsureSingleDirectoryExists( path_iterative ) )
		{
			logger.LogInfo( ust::concat( "Failed to create directory \"", path_iterative, "\": " ) );
			return false;
		}
	}

	return true;
}

fn EnsureSingleDirectoryExists( ust::string_view8 path_absolute ) : bool
{
	var WideString mut path_null_terminated= UTF8ToWideString( path_absolute );
	path_null_terminated.push_back( WCHAR(0) );

	var i32 res= unsafe( ::CreateDirectoryW( path_null_terminated.data(), ust::nullptr</ü_SECURITY_ATTRIBUTES/>() ) );
	// TODO - what if path exists but it's a file?
	return res == 1 || unsafe( GetLastError() ) == DWORD(ERROR_ALREADY_EXISTS);
}

fn WriteFile( Logger &mut logger, ust::string_view8 path, ust::string_view8 contents ) : bool
{
	var WideString mut path_null_terminated = UTF8ToWideString( path );
	path_null_terminated.push_back( WCHAR(0) );

	var HANDLE handle = unsafe( ::CreateFileW(
		path_null_terminated.data(),
		GENERIC_WRITE,
		DWORD(FILE_SHARE_READ),
		ust::nullptr</ü_SECURITY_ATTRIBUTES/>(),
		DWORD(CREATE_ALWAYS),
		0u,
		ust::nullptr</byte8/>() ) );
	if( ust::is_nullptr(handle) || handle == GetInvalidHandle() )
	{
		logger.LogError( ust::concat( "Failed to open file \"", path, "\" for writing, error: ", ust::to_string8( unsafe( GetLastError() ) ) ) );
		return false;
	}

	// TODO - check for errors.
	// TODO - write in loop.
	var DWORD mut bytes_written = 0u;
	unsafe( ::WriteFile(
		handle,
		ust::ptr_cast_to_byte8( contents.data() ),
		DWORD(contents.size()),
		$<(bytes_written),
		ust::nullptr</ü_OVERLAPPED/>() ) );

	unsafe( ::CloseHandle(handle) );

	return true;
}

fn CopyFile( Logger &mut logger, ust::string_view8 destination_path, ust::string_view8 source_path ) : bool
{
	var WideString mut destination_path_null_terminated = UTF8ToWideString( destination_path );
	destination_path_null_terminated.push_back( WCHAR(0) );

	var WideString mut source_path_null_terminated = UTF8ToWideString( source_path );
	source_path_null_terminated.push_back( WCHAR(0) );

	auto res = unsafe( ::CopyFileW( source_path_null_terminated.data(), destination_path_null_terminated.data(), BOOL(0) ) );
	if( res == 0 )
	{
		logger.LogError( ust::concat( "Failed to copy file from \"", source_path, "\" to \"", destination_path, "\", error: ", ust::to_string8( unsafe( GetLastError() ) ) ) );
		return false;
	}

	return true;
}

fn ReadFile( ust::string_view8 path ) : ust::optional</ust::string8/>
{
	var WideString mut path_null_terminated = UTF8ToWideString( path );
	path_null_terminated.push_back( WCHAR(0) );

	var HANDLE handle = unsafe( ::CreateFileW(
		path_null_terminated.data(),
		GENERIC_READ,
		DWORD(FILE_SHARE_READ),
		ust::nullptr</ü_SECURITY_ATTRIBUTES/>(),
		DWORD(OPEN_EXISTING),
		DWORD(FILE_FLAG_SEQUENTIAL_SCAN),
		ust::nullptr</byte8/>() ) );
	if( ust::is_nullptr(handle) || handle == GetInvalidHandle() )
	{
		return ust::null_optional;
	}

	var LARGE_INTEGER mut file_size= zero_init;

	if( unsafe( ::GetFileSizeEx( handle, $<(file_size) ) ) == 0 )
	{
		unsafe( ::CloseHandle(handle) );
		return ust::null_optional;
	}

	var ust::string8 mut res( size_type( u64( file_size.union_contents[0] ) ), "\0"c8 );

	// TODO - check for errors.
	var DWORD mut bytes_read = 0u;
	unsafe( ::ReadFile(
		handle,
		ust::ptr_cast_to_byte8( res.data() ),
		DWORD(res.size()),
		$<(bytes_read),
		ust::nullptr</ü_OVERLAPPED/>() ) );

	unsafe( ::CloseHandle(handle) );

	return move(res);
}

fn GetFileModificationTime( ust::string_view8 path ) : ust::optional</FileModificationTime/>
{
	result_match( ust::get_metadata_for_path( path ) )
	{
		Ok(v) -> { return v.modification_time; },
		Err(e) -> { ust::ignore_unused(e); return ust::null_optional; },
	}
}

fn GetCurrentExecutablePath() : ust::string8
{
	var WideString mut res;
	res.resize( 256s, WCHAR(0) );
	for( auto mut i= 0s; i < 8s; ++i )
	{
		var DWORD size = unsafe( ::GetModuleFileNameW( ust::nullptr</HINSTANCE__/>(), res.data(), DWORD( res.size() ) ) );
		if( unsafe( GetLastError() ) == DWORD(ERROR_INSUFFICIENT_BUFFER) )
		{
			// Not enough space - increase it.
			auto new_size= res.size() * 2s;
			res.resize( new_size, WCHAR(0) );
			continue;
		}

		res.resize( size_type(size), WCHAR(0) );

		break;
	}

	return WideStringToUTF8( res );
}

} // namespace BK
