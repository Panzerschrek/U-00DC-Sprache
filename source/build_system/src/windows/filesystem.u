// Platform-dependent filesystem-related functions.

import "../filesystem.uh"
import "wide_string.uh"
import "windows.uh"

namespace BK
{

fn GetCurrentExecutablePath( ust::string_view8 argv0 ) : ust::filesystem_path
{
	ust::ignore_unused(argv0);

	var WideString mut res;
	res.resize( 256s, WCHAR(0) );
	for( auto mut i= 0s; i < 8s; ++i )
	{
		var DWORD size = unsafe( ::GetModuleFileNameW( ust::nullptr</HINSTANCE__/>(), res.data(), DWORD( res.size() ) ) );
		if( unsafe( GetLastError() ) == DWORD(ERROR_INSUFFICIENT_BUFFER) )
		{
			// Not enough space - increase it.
			auto new_size= res.size() * 2s;
			res.resize( new_size, WCHAR(0) );
			continue;
		}

		res.resize( size_type(size), WCHAR(0) );

		break;
	}

	return WideStringToUTF8( res );
}

fn ResolveRelativeExecutablePath( ust::string_view8 path ) : ust::optional</ust::filesystem_path/>
{
	var WideString mut path_w= UTF8ToWideString( path );

	unsafe
	{
		var [ WCHAR, 32768 ] mut path_buffer= uninitialized; // Allocate enough space to avoid buffer overrun.

		ust::memory_copy(
			ust::ptr_cast_to_byte8( $<(path_buffer) ),
			ust::ptr_cast_to_byte8( path_w.data() ),
			path_w.size() * typeinfo</WCHAR/>.size_of );
		path_buffer[ path_w.size() ]= '\0'c16;

		var BOOL res= ::PathFindOnPathW( $<(path_buffer[0]), ust::nullptr</PCWSTR/>() );
		if( res != 1 )
		{
			return ust::null_optional;
		}

		var size_type mut size= 0s;
		while( size < typeinfo</ typeof(path_buffer) />.element_count && path_buffer[size] != '\0'c16 )
		{
			++size;
		}

		return WideStringToUTF8( WideStringView( $<(path_buffer[0]), size ) );
	}
}

} // namespace BK
