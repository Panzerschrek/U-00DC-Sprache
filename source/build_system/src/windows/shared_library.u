import "/string_conversions.u"
import "../shared_library.uh"
import "wide_string.uh"
import "windows.uh"

namespace BK
{

fn LoadSharedLibrary( Logger &mut logger, ust::string_view8 path ) : ust::optional</SharedLibrary/>
{
	var WideString mut path_null_terminated = UTF8ToWideString( path );
	path_null_terminated.push_back( WCHAR(0) );

	var HMODULE mut handle = unsafe( ::LoadLibraryW( path_null_terminated.data() ) );
	if( ust::is_nullptr(handle) )
	{
		logger.LogError( ust::concat( "LoadLibraryW error: ", ust::to_string8( unsafe( GetLastError() ) ) ) );
		return ust::null_optional;
	}

	return unsafe( SharedLibrary( ust::ptr_cast_to_byte8( handle ) ) );
}

fn SharedLibrary::LoadSymbol( imut this, Logger &mut logger, ust::string_view8 symbol_name ) : $(byte8)
{
	var ust::string8 mut symbol_null_terminated = symbol_name;
	symbol_null_terminated+= "\0";

	auto res = unsafe( ::GetProcAddress( ust::byte_ptr_cast</HINSTANCE__/>( system_handle_ ), symbol_null_terminated.data() ) );
	if( ust::is_nullptr(res) )
	{
		logger.LogError( ust::concat( "GetProcAddress error: ", ust::to_string8( unsafe( GetLastError() ) ) ) );
	}

	return res;
}

} // namespace BK
