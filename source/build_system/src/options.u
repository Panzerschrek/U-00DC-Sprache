import "/hash_set.u"
import "/integer_parsing.u"
import "/stdout.u"
import "/enum_string_conversions.u"
import "/vector.u"
import "options.uh"

namespace BK
{

fn GetHelpMessage() : ust::string_view8
{
	return g_help_message;
}

//
// Keep this up-to date with the options parsing code!
//

auto constexpr g_help_message=
	"Bürokratie - the Ü build system\n" +
	"\n" +
	"USAGE: u_..build_system [command] [options]\n" +
	"\n" +
	"COMMANDS:\n" +
	"  build                              - perform the build\n" +
	"  build_single <file>                - build a simple single-file program with no dependencies\n" +
	"  init                               - initialize a stub project\n" +
	"  help                               - show this message\n" +
	"\n" +
	"OPTIONS:\n" +
	"\n" +
	"  -q                                     - be quiet\n" +
	"  -v                                     - be verbose\n" +
	"  -h, --help                             - show this message\n" +
	"  -j <number>                            - max number of parallel build jobs. Use 0 for using all CPU cores.\n" +
	"  --build-configuration                  - select build configuration. Available configuarations are \"debug\", \"release\", \"min_size_release\". Default configuration is \"release\".\n" +
	"  --configuration-options                - provide path to configuration options JSON file\n" +
	"  --target-triple                        - select target triple in form of architecture-vendor-operating_system or architecture-vendor-operating_system-environment.\n" +
	"  --target-cpu                           - select target CPU. See Compiler's \"-mcpu\" option for more details.\n" +
	"  --project-directory <path>             - path to the root package directory. Default is current directory.\n" +
	"  --build-directory <path>               - custom path to the build directory. Default value is \"build\" subdirectory of the root package.\n" +
	"  --compiler-executable <path>           - custom path to the compiler executable\n" +
	"  --ustlib-path <path>                   - custom path to the ustlib directory\n" +
	"  --build-system-imports-path <path>     - custom path to the build system imports directory\n" +
	"  --packages-repository-directory <path> - provide path to packages repository directory\n" +
	"  --sysroot <path>                       - provide sysroot directory for the compiler (in order to find system libraries for linking)\n" +
	"  --host-sysroot <path>                  - provide sysroot directory for the compiler while compiling for host target triple (in order to find system libraries for linking)\n" +
	"  --release-optimization-level <level>   - specify optimization level for release builds. Available values are \"O2\" and \"O3\". Default value is \"O2\".\n" +
	"  --min-size-release-optimization-level <level> \n      - specify optimization level for min size release builds. Available values are \"Os\" and \"Oz\". Default value is \"Os\".\n" +
	" --halt-mode <mode>                      - specify halt mode. See compiler's help for more information.\n"
	;

fn ParseOptions( ust::array_view_imut</ust::string_view8/> mut args ) : ust::optional</Options/>
{
	//
	// Keep this up-to date with the help message!
	//

	if( args.empty() )
	{
		ust::stderr_print( "Error, expected command as first command-line parameter.\n" );
		return ust::null_optional;
	}

	var Options mut res;

	// Command should be always at first place.
	var ust::string_view8 command= args.front();
	if( command == "help" || command == "--help" )
	{
		res.command= Options::Command::Help;
		args.drop_front();
	}
	else if( command == "build" )
	{
		res.command= Options::Command::Build;
		args.drop_front();
	}
	else if( command == "build_single" )
	{
		res.command= Options::Command::BuildSingle;
		args.drop_front();
		if( args.empty() )
		{
			ust::stderr_print( "Error, missing an argument after \"build_single\".\n" );
			return ust::null_optional;
		}
		res.single_file_to_build= args.drop_and_get_front();
	}
	else if( command == "init" )
	{
		res.command= Options::Command::Init;
		args.drop_front();
	}
	else
	{
		ust::stderr_print( ust::concat( "Error, unknown command \"", command, "\".\n" ) );
		return ust::null_optional;
	}

	// Parse options after command.

	var bool mut help_short= false, mut help_long= false;
	var ust::string8 mut num_jobs;
	var ust::string8 mut build_configuration;
	var ust::string8 mut release_optimization_level;
	var ust::string8 mut min_size_release_optimization_level;
	var ust::string8 mut halt_mode;

	{
		var OptionsParser mut options_parser;

		options_parser.AddOption( "-q", res.quiet );
		options_parser.AddOption( "-v", res.verbose );
		options_parser.AddOption( "-h", help_short );
		options_parser.AddOption( "--help", help_long );
		options_parser.AddOption( "-j", num_jobs );
		options_parser.AddOption( "--build-configuration", build_configuration );
		options_parser.AddOption( "--configuration-options", res.configuration_options_file );
		options_parser.AddOption( "--target-triple", res.target_triple );
		options_parser.AddOption( "--target-cpu", res.target_cpu );
		options_parser.AddOption( "--compiler-executable", res.compiler_executable_path );
		options_parser.AddOption( "--build-directory", res.build_directory );
		options_parser.AddOption( "--project-directory", res.root_package_directory );
		options_parser.AddOption( "--ustlib-path", res.ustlib_path );
		options_parser.AddOption( "--build-system-imports-path", res.build_system_imports_path );
		options_parser.AddOption( "--packages-repository-directory", res.packages_repository_directory );
		options_parser.AddOption( "--sysroot", res.sysroot );
		options_parser.AddOption( "--host-sysroot", res.host_sysroot );
		options_parser.AddOption( "--release-optimization-level", release_optimization_level );
		options_parser.AddOption( "--min-size-release-optimization-level", min_size_release_optimization_level );
		options_parser.AddOption( "--halt-mode", halt_mode );

		if( !options_parser.Parse( args ) )
		{
			return ust::null_optional;
		}
	}

	res.help= help_short | help_long;

	if( !num_jobs.empty() )
	{
		if_var( num : ust::parse_integer_exact</u32/>( ust::string_view8(num_jobs) ) )
		{
			res.number_of_jobs= num;
		}
		else
		{
			ust::stderr_print( "Error, failed to parse number after \"-j\".\n" );
			return ust::null_optional;
		}
	}

	if( !build_configuration.empty() )
	{
		auto conf = StringToBuildConfiguration( build_configuration );
		if( conf.empty() )
		{
			ust::stderr_print( ust::concat( "Error, unknown build configuration \"", build_configuration, "\".\n" ) );
			return ust::null_optional;
		}
		res.build_configuration_extended.build_configuration= conf.try_deref();
	}

	if( !release_optimization_level.empty() )
	{
		if_var( o : ust::string_to_enum</BuildConfigurationExtended::ReleaseOptimisationLevel/>( release_optimization_level ) )
		{
			res.build_configuration_extended.release_optimization_level= o;
		}
		else
		{
			ust::stderr_print( ust::concat( "Error, unknown release optimization level \"", release_optimization_level, "\".\n" ) );
			return ust::null_optional;
		}
	}

	if( !min_size_release_optimization_level.empty() )
	{
		if_var( o : ust::string_to_enum</BuildConfigurationExtended::MinSizeReleaseOptimizationLevel/>( min_size_release_optimization_level ) )
		{
			res.build_configuration_extended.min_size_release_optimization_level= o;
		}
		else
		{
			ust::stderr_print( ust::concat( "Error, unknown min size release optimization level \"", min_size_release_optimization_level, "\".\n" ) );
			return ust::null_optional;
		}
	}

	if( !halt_mode.empty() )
	{
		if_var( h : ust::string_to_enum</BuildConfigurationExtended::HaltMode/>( halt_mode ) )
		{
			res.build_configuration_extended.halt_mode= h;
		}
		else
		{
			ust::stderr_print( ust::concat( "Error, unknown halt mode \"", halt_mode, "\".\n" ) );
			return ust::null_optional;
		}
	}

	return res;
}

fn StringToBuildConfiguration( ust::string_view8 s ) : ust::optional</BuildConfiguration/>
{
	// Use manual conversion because we use different case for string representation.
	if( s == "debug" )
	{
		return BuildConfiguration::Debug;
	}
	if( s == "release" )
	{
		return BuildConfiguration::Release;
	}
	if( s == "min_size_release" )
	{
		return BuildConfiguration::MinSizeRelease;
	}
	return ust::null_optional;
}

fn BuildConfigurationToString( BuildConfiguration c ) : ust::string_view8
{
	// Use manual conversion because we use different case for string representation.
	switch(c)
	{
		BuildConfiguration::Debug -> { return "debug"; },
		BuildConfiguration::Release -> { return "release"; },
		BuildConfiguration::MinSizeRelease -> { return "min_size_release"; },
	}
}

class OptionsParser
{
public:
	fn AddOption( mut this, ust::string8 mut name, ust::string8 &mut value ) @(c_add_option_pollution)
	{
		string_options_.push_back( StringOption{ .name= move(name), .value= value } );
	}

	fn AddOption( mut this, ust::string8 mut name, bool &mut value ) @(c_add_option_pollution)
	{
		bool_flag_options_.push_back( BoolFlagOption{ .name= move(name), .value= value } );
	}

	fn nodiscard Parse( this, ust::array_view_imut</ust::string_view8/> mut args ) : bool
	{
		var ust::hash_set</ust::string8/> mut prev_args;

		while( !args.empty() ) label args_non_empty
		{
			var ust::string_view8 arg= args.drop_and_get_front();

			// Ensure no args are duplicated.
			if( !prev_args.insert( arg ) )
			{
				ust::stderr_print( ust::concat( "Error, duplicated argument \"", arg, "\".\n" ) );
				return false;
			}

			// Search this arg in options of different kinds. If found it - continue to next iteration of the outer loop.

			foreach( &option : string_options_ )
			{
				if( arg == option.name )
				{
					if( args.empty() )
					{
						ust::stderr_print( ust::concat( "Error, missing an argument after \"", option.name, "\".\n" ) );
						return false;
					}
					option.value= args.drop_and_get_front();
					continue label args_non_empty;
				}
			}

			foreach( &option : bool_flag_options_ )
			{
				if( arg == option.name )
				{
					// No value is required after a boolean flag. Specifying such flag just sets its value to "true".
					option.value= true;
					continue label args_non_empty;
				}
			}

			// This arg wasn't found in options.

			ust::stderr_print( ust::concat( "Error, unrecognized option \"", arg, "\".\n" ) );
			return false;
		}
		return true;
	}

private:
	struct StringOption
	{
		ust::string8 name;
		ust::string8 &mut value;
	}

	struct BoolFlagOption
	{
		ust::string8 name;
		bool &mut value;
	}

	var [ ust::reference_notation::pollution_element, 1 ] c_add_option_pollution[ [ "0a", "2_" ] ];

private:
	ust::vector</StringOption/> @("a") string_options_;
	ust::vector</BoolFlagOption/> @("a") bool_flag_options_;
}

} // namespace BK
