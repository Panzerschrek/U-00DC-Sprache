import "path.uh"

namespace BK
{

fn IsAbsolutePath( ust::string_view8 path ) : bool
{
	if( ust::string_view8( compiler::target::os ) == "windows" )
	{
		// TODO - handle also universal paths.
		return path.size() >= 2s && path[0s] >= "A"c8 && path[0s] <= "Z"c8 && path[1s] == ":"c8;
	}
	else
	{
		return !path.empty() && path.front() == "/"c8;
	}
}

fn SplitPathIntoComponents( ust::string_view8 path )
	: ust::vector</ust::string_view8/> @( ust::reference_notation::return_inner_references::param0_inner_reference0 )
{
	var ust::vector</ust::string_view8/> mut res;

	// Hack to prevent "ReferencePollutionOfOuterLoopVariable" error.
	if(false)
	{
		res.push_back(path);
	}

	auto mut prev_component_start = 0s;
	for( var size_type mut i= 0s; i < path.size(); ++i )
	{
		var char8 c= path[i];
		if( c == "/"c8 || c == "\\"c8 )
		{
			auto component = path.subrange( prev_component_start, i );
			if( !component.empty() )
			{
				res.push_back( component );
			}
			prev_component_start= i + 1s;
		}
	}

	auto last_component = path.subrange( prev_component_start, path.size() );
	if( !last_component.empty() )
	{
		res.push_back( last_component );
	}

	return res;
}

fn NormalizePath( ust::string_view8 path ) : ust::string8
{
	auto components = SplitPathIntoComponents( path );

	var ust::vector</ust::string_view8/> mut components_normalized;

	// Hack to prevent "ReferencePollutionOfOuterLoopVariable" error.
	if(false)
	{
		components_normalized.push_back( components.front() );
	}

	foreach( &component : components )
	{
		if( component == "." )
		{} // Ignore it.
		else if( component == ".." )
		{
			if( !components_normalized.empty() )
			{
				// Remove last component.
				components_normalized.drop_back();
			}
			else
			{
				// Wrong path with too much "..".
				// We have nothing to do here - just preserve "..".
				components_normalized.push_back( component );
			}
		}
		else
		{
			components_normalized.push_back( component );
		}
	}

	var ust::string8 mut res;

	if( !path.empty() && path.front() == "/"c8 )
	{
		// Input path is absolute Unix path. Output should be absolute too.
		res+= "/";
	}

	foreach( &component : components_normalized )
	{
		if( !res.empty() && res.back() != "/"c8 )
		{
			res+= "/";
		}
		res+= component;
	}

	return res;
}

fn GetParentPath( ust::string_view8 mut path )
	: ust::string_view8 @( ust::reference_notation::return_inner_references::param0_inner_reference0 )
{
	if( !path.empty() && ( ( path.back() == "/"c8 || path.back() == "\\"c8 ) ) )
	{
		// It's a directory name with trailing slash - skip it.
		path.drop_back();
	}

	while( !path.empty() )
	{
		if( path.back() == "/"c8 || path.back() == "\\"c8 )
		{
			path.drop_back();
			break;
		}
		path.drop_back();
	}
	return path;
}

fn GetLastPathComponent( ust::string_view8 mut path )
	: ust::string_view8 @( ust::reference_notation::return_inner_references::param0_inner_reference0 )
{
	if( path.empty() )
	{
		return path;
	}

	// Handle trailing slash.
	if( path.back() == "/"c8 || path.back()  == "\\"c8 )
	{
		path.drop_back();
		if( path.empty() )
		{
			return path;
		}
	}

	var size_type mut split_pos= path.size() - 1s;

	loop
	{
		var char8 c= path[split_pos];
		if( c == "/"c8 || c == "\\"c8 )
		{
			// Found it.
			return path.subrange( split_pos + 1s, path.size() );
		}
		if( split_pos == 0s )
		{
			return path;
		}
		--split_pos;
	}
}

fn StripExtension( ust::string_view8 path )
	: ust::string_view8 @( ust::reference_notation::return_inner_references::param0_inner_reference0 )
{
	var ust::string_view8 mut result= path;
	while( !result.empty() )
	{
		var char8 c= result.back();
		if( c == "."c8 )
		{
			// Successfully stripped the extension.
			result.drop_back();
			return result;
		}
		if( c == "/"c8 || c ==  "\\"c8 )
		{
			// Reached path separator - means this path has no file extension.
			return path;
		}
		result.drop_back();
	}

	// No dot or separator found - return original path.
	return path;
}

} // namespace BK
