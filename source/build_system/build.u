import "/build_system.uh"

fn nomangle GetPackageInfo( BK::BuildSystemInterface& build_system_interface ) : BK::PackageInfo
{
	// Create a separate library for build system interface headers.
	var BK::BuildTarget mut lib_target
	{
		.name= "BuildSystemInterface",
		.target_type= BK::BuildTargetType::Library,
		.public_include_directories= ust::make_array</ust::string8/>( "imports" ),
	};

	var BK::BuildTarget mut target
	{
		.name= "BuildSystem" + build_system_interface.GetConfigurationOption( "name_suffix" ).deref_or( ust::string8() ),
		.target_type= BK::BuildTargetType::Executable,
		.private_dependencies= ust::make_array( BK::DependencyName{ .name= lib_target.name } ),
	};

	var [ ust::string_view8, 21 ] sources
	[
		"abort_signal_handler.u",
		"build_graph.u",
		"build_graph_serialization.u",
		"build_system_paths.u",
		"configuration_options.u",
		"json/parsing.u",
		"json/serialization.u",
		"json/value.u",
		"include_directories.u",
		"init_command.u",
		"language_server_workspace_info.u",
		"filesystem.u",
		"logger.u",
		"main.u",
		"make_dep_file.u",
		"options.u",
		"package_transformation.u",
		"path.u",
		"string_utils.u",
		"target_triple.u",
		"version_unification.u",
	];

	foreach( &s : sources )
	{
		target.source_files.push_back( ust::concat( "src/", s ) );
	}

	if( build_system_interface.GetTargetTriple().operating_system == "windows" )
	{
		var [ ust::string_view8, 6 ] sources_windows
		[
			"entry.u",
			"filesystem.u",
			"proc.u",
			"process.u",
			"shared_library.u",
			"wide_string.u",
		];

		foreach( &s : sources_windows )
		{
			target.source_files.push_back( ust::concat( "src/windows/", s ) );
		}
	}
	else
	{
		var [ ust::string_view8, 6 ] sources_unix
		[
			"entry.u",
			"errno.u",
			"filesystem.u",
			"proc.u",
			"process.u",
			"shared_library.u",
		];

		foreach( &s : sources_unix )
		{
			target.source_files.push_back( ust::concat( "src/unix/", s ) );
		}

		// Require "libdl.so" to call "dlopen" and "dlsym".
		target.external_libraries.push_back( "-ldl" );
	}

	return BK::PackageInfo{ .build_targets= ust::make_array( move(lib_target), move(target) ) };
}
