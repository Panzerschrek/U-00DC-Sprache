import "/sort.u"
import "/stdout.u"
import "build_graph.uh"
import "entry.uh"
import "filesystem.uh"
import "make_dep_file.uh"
import "options.uh"
import "package_transformation.uh"
import "path.uh"
import "process.uh"
import "shared_library.uh"
import "string_utils.uh"

namespace BK
{

// Place actual "main" code inside the "BK" namespace.
fn Main( ust::string_view8 exe_path, ust::array_view_imut</ust::string_view8/> args ) : i32
{
	var ust::optional</Options/> options_opt= ParseOptions( args );
	if( options_opt.empty() )
	{
		ust::stderr_print( "Failed to parse options.\n" );
		return -1;
	}

	var Options& options= options_opt.try_deref();

	if( options.command == Options::Command::Help || options.help )
	{
		ust::stdout_print( GetHelpMessage() );
		return 0;
	}

	var BuildSystemInterfaceImplementation mut bsi( options );

	bsi.logger_.LogInfo( "Bürokratie - the Ü build system!" );

	var ust::string8 exe_directory_path = MakePathAbsolute( ExtractExeDirectoryPath( exe_path ) );

	bsi.logger_.LogVerbose( "Build system executable directory path: \"" + exe_directory_path + "\"" );

	// For now use "Compiler1" as compiler default. TODO - allow to tune it.
	var ust::string8 default_compiler_executable_path = exe_directory_path + "/Compiler1";
	// "ustlib" is located in the root of the Üpackage.
	var ust::string8 default_ustlib_path = exe_directory_path + "../ustlib";
	// Build system imports are located in "/build_system/imports"
	var ust::string8 default_build_system_imports_path = exe_directory_path + "../build_system/imports";

	var BuildSystemPaths build_system_paths
	{
		.compiler_executable_path= NormalizePath(
			( options.compiler_executable_path.empty()
				? default_compiler_executable_path
				: MakePathAbsolute(options.compiler_executable_path) ) ),
		.ustlib_path= NormalizePath(
			( options.ustlib_path.empty()
				? default_ustlib_path
				: MakePathAbsolute(options.ustlib_path) ) ),
		.build_system_imports_path= NormalizePath(
			( options.build_system_imports_path.empty()
				? default_build_system_imports_path
				: MakePathAbsolute(options.build_system_imports_path) ) ),
	};

	// If "options.root_package_directory" is empty this will become current directory.
	var ust::string8 package_source_directory = NormalizePath( MakePathAbsolute( options.root_package_directory ) );

	// By default use "build" directory within root package directory.
	var ust::string8 package_build_directory_base =
		( options.build_directory.empty()
			? ( package_source_directory + "/build" )
			: NormalizePath( MakePathAbsolute( options.build_directory ) ) );

	if( !EnsureDirectoryExists( bsi.logger_, package_build_directory_base ) )
	{
		bsi.logger_.LogError( "Can't create build directory." );
		return -1;
	}

	// Create a subdirectory for configuration specified.
	var ust::string8 package_build_directory =
		package_build_directory_base + "/" + BuildConfigurationToString( options.build_configuration );

	if( !EnsureDirectoryExists( bsi.logger_, package_build_directory ) )
	{
		bsi.logger_.LogError( "Can't create build directory." );
		return -1;
	}

	bsi.logger_.LogVerbose( "Build project in \"" + package_source_directory + "\" using build directory \"" + package_build_directory + "\"" );

	// TODO - customize it based on package name?
	auto constexpr entry_func_name = "GetPackageInfoImpl";

	auto shared_library_opt = BuildAndLoadPackageBuildScript(
		bsi.logger_,
		build_system_paths,
		package_source_directory,
		// For now use directory for build configuration specified.
		// TODO - reuse build script shared libraries among configurations and target triples.
		package_build_directory,
		entry_func_name );
	if( shared_library_opt.empty() )
	{
		bsi.logger_.LogError( "Failed to load/build the build script shared library." );
		return -1;
	}

	auto mut func_raw_ptr= shared_library_opt.try_deref().LoadSymbol( bsi.logger_, entry_func_name );
	if( ust::is_nullptr(func_raw_ptr) )
	{
		bsi.logger_.LogError( "Failed to load function " + entry_func_name );
		return -1;
	}

	// A hacky way to cast byte8 pointer to a function pointer.
	var GetPackageInfoFunctionType mut func_ptr= zero_init;
	unsafe( ust::memory_copy(
		ust::ptr_cast_to_byte8( $<(func_ptr) ),
		ust::ptr_cast_to_byte8( $<(func_raw_ptr) ),
		typeinfo</ typeof(func_ptr) />.size_of ) );

	// Obtain package info by calling a shared library function.
	var ust::optional</PackageInfo/> package_info_opt= func_ptr( bsi );
	if( package_info_opt.empty() )
	{
		bsi.logger_.LogError( "Failed to get package info - build script returned empty optional." );
		return -1;
	}

	var ust::optional</PackageInfoTransformed/> package_info_transformed_opt=
		TransformAndValidatePackageInfo( bsi.logger_, package_info_opt.try_deref() );
	if( package_info_transformed_opt.empty() )
	{
		bsi.logger_.LogError( "Package is invald." );
		return -1;
	}

	var PackageInfoTransformed& package_info_transformed= package_info_transformed_opt.try_deref();

	// Create directories for intermediate files for each build target.
	foreach( &build_target_pair : package_info_transformed.build_targets )
	{
		auto& build_target_name= build_target_pair.key();
		auto dir_name= GetTargetBuildFilesDirectoryPath( package_build_directory, build_target_name );
		if( !EnsureDirectoryExists( bsi.logger_, dir_name ) )
		{
			bsi.logger_.LogError( "Can't create build directory for target \"" + build_target_name + "\"." );
			return -1;
		}
	}

	var ust::string8 build_graph_state_file_path= package_build_directory + "/build_graph.json";

	// Load previous build graph state.
	var ust::optional</BuildGraph/> mut prev_build_graph;
	if_var( &prev_build_graph_file : ReadFile( build_graph_state_file_path ) )
	{
		prev_build_graph= DeserializeBuildGraph( prev_build_graph_file );
		if( prev_build_graph.empty() )
		{
			bsi.logger_.LogError( "Failed to deserialize previous build graph state" );
		}
	}
	else
	{
		bsi.logger_.LogInfo( "Can't load previous build graph state" );
	}

	// Construct the build graph for the whole project.
	var BuildGraph mut build_graph;

	{
		// Collect and sort a list of build target names,
		// then iterate in this sorted order - to avoid generating build graph in non-deterministic hashtable order.
		var ust::vector</ust::string8/> mut build_target_names;
		foreach( &build_target_pair : package_info_transformed.build_targets )
		{
			build_target_names.push_back( build_target_pair.key() );
		}
		ust::sort( build_target_names );

		foreach( &build_target_name : build_target_names )
		{
			CreatePackageTargetBuildGraphNodes(
				build_system_paths,
				package_source_directory,
				package_build_directory,
				options.build_configuration,
				package_info_transformed,
				build_target_name,
				package_info_transformed.build_targets[ build_target_name ],
				build_graph );
		}
	}

	var i32 mut main_result= 0;

	// This executes the build.
	if( !PerformGraphBuild( bsi.logger_, build_graph, prev_build_graph.as_ref() ) )
	{
		bsi.logger_.LogError( "Build failed." );
		main_result= -1;
		// Do not return here, save build graph in case of build fail to reuse parts which were susscessfully built.
	}
	else
	{
		bsi.logger_.LogInfo( "Successfully finished the build!" );
	}

	if( prev_build_graph.empty() || prev_build_graph.try_deref() != build_graph )
	{
		// If build graph on disk is equal to what we have now, avoid re-writing it.

		bsi.logger_.LogVerbose( "Build graph seems to be updated. Rewrite it." );

		// TODO - maybe fail the build if failed to serialize the build graph?
		WriteFile(
			bsi.logger_,
			build_graph_state_file_path,
			SerializeBuildGraph( build_graph ) );
	}
	else
	{
		bsi.logger_.LogVerbose( "Skip updating on-disk build graph state." );
	}

	return main_result;
}

fn ExtractExeDirectoryPath( ust::string_view8 exe_path )
	: ust::string_view8 @( ust::reference_notation::return_inner_references::param0_inner_reference0 )
{
	var ust::string_view8 mut p = exe_path;
	while( !p.empty() && !( p.back() == "/"c8 || p.back() == "\\"c8 ) )
	{
		p.drop_back();
	}

	return p;
}

struct BuildSystemPaths
{
	ust::string8 compiler_executable_path;
	ust::string8 ustlib_path;
	ust::string8 build_system_imports_path;
}

fn BuildAndLoadPackageBuildScript(
	Logger &mut logger,
	BuildSystemPaths& build_system_paths,
	ust::string_view8 package_source_directory,
	ust::string_view8 package_build_directory,
	ust::string_view8 entry_func_name ) : ust::optional</SharedLibrary/>
{
	// TODO - select more catchy name for root build script file.
	auto constexpr build_script_file= "build.u";

	var ust::string8 build_script_file_full_path= ust::string8(package_source_directory) + "/" + build_script_file;

	// TODO - do we need to have this check here?
	if( GetFileModificationTime( build_script_file_full_path ).empty() )
	{
		logger.LogError( "Can not get modification time for \"" + build_script_file_full_path + "\" - file does not exists?" );
		return ust::null_optional;
	}

	var ust::string8 mut result_shared_library_path= package_build_directory;
	result_shared_library_path+= "/build.";
	result_shared_library_path+= GetNativeSharedLibraryExtension();

	var ust::string8 result_shared_library_dependency_file_path = GetDependencyFilePath( result_shared_library_path );

	// TODO - check also if compilation options were changed (including import directories).
	if( CheckRebuildIsNeededBasedOnDepFile( logger, result_shared_library_dependency_file_path ) )
	{
		logger.LogVerbose( "Building \"" + result_shared_library_path + "\"." );

		var ust::string8 build_script_wrapper_file_directory= ust::string8(package_build_directory) + "/build_script_wrapper_sources";
		if( ! EnsureDirectoryExists( logger, build_script_wrapper_file_directory ) )
		{
			return ust::null_optional;
		}

		var ust::string8 build_script_wrapper_header_file_directory= ust::string8(package_build_directory) + "/build_script_wrapper_headers";
		if( ! EnsureDirectoryExists( logger, build_script_wrapper_header_file_directory ) )
		{
			return ust::null_optional;
		}

		var ust::string8 build_script_wrapper_file_path= build_script_wrapper_file_directory + "/" + "build_script_wrapper.u";
		var ust::string8 build_script_header_file_path= build_script_wrapper_header_file_directory + "/" + "build_script_header.uh";

		// Create our own wrapper file to ensure that the function exported from the shared library has proper type.
		{
			var ust::string8 mut contents = "import \"/";
			contents+= build_script_file;
			contents+= "\"\n";
			contents+= "import \"/build_script_header.uh\"\n\n";
			contents+= "fn nomangle ";
			contents+= entry_func_name;
			contents+= "( BK::BuildSystemInterface &mut build_system_interface ) : ust::optional</BK::PackageInfo/>\n";
			// "GetPackageInfo" function itself may return "BK::PackageInfo", not optional of this type.
			contents += "{\n\treturn GetPackageInfo( build_system_interface );\n}\n";

			if( !WriteFile( logger, build_script_wrapper_file_path, contents ) )
			{
				logger.LogError( "Can't write build script wrapper file." );
				return ust::null_optional;
			}
		}

		// Create also header file. We need it to export entry function properly.
		{
			var ust::string8 mut contents = "import \"/build_system.uh\"\n\n";
			contents+= "fn nomangle ";
			contents+= entry_func_name;
			contents+= "( BK::BuildSystemInterface &mut build_system_interface ) : ust::optional</BK::PackageInfo/>;\n";

			if( !WriteFile( logger, build_script_header_file_path, contents ) )
			{
				logger.LogError( "Can't write build script wrapper header file." );
				return ust::null_optional;
			}
		}

		var ust::string8 internalize_preserve_option = ust::string8("--internalize-preserve=") + entry_func_name;

		// Use optimization level which was used to compile the build system executable.
		var ust::string8 mut optimization_level= "-O";
		optimization_level.push_back( compiler::options::optimization_level );

		var ust::vector</ust::string_view8/> mut compiler_args;
		// Add path to the package directory in order to import "build.u" inside the wrapper.
		compiler_args.push_back( "--include-dir" );
		compiler_args.push_back( package_source_directory );
		// Provide standard library imports.
		compiler_args.push_back( "--include-dir" );
		compiler_args.push_back( build_system_paths.ustlib_path );
		// Provide path to declarations of the build system interface.
		compiler_args.push_back( "--include-dir" );
		compiler_args.push_back( build_system_paths.build_system_imports_path );
		// Provide path to build script wrapper headers.
		compiler_args.push_back( "--include-dir" );
		compiler_args.push_back( build_script_wrapper_header_file_directory );

		compiler_args.push_back( build_script_wrapper_file_path );  // The file to buld.

		// Output.
		compiler_args.push_back( "-o" );
		compiler_args.push_back( result_shared_library_path );

		// Produce also a dependency file.
		compiler_args.push_back( "-MF" );
		compiler_args.push_back( result_shared_library_dependency_file_path );

		// Provide path to the directory with input file, in order to allow importing it.
		compiler_args.push_back( "--source-dir" );
		compiler_args.push_back( build_script_wrapper_file_directory );

		// Forbid importing anything outside include directories and source directories.
		compiler_args.push_back( "--prevent-imports-outside-given-directories" );

		// This requires compiler to be built with internal LLD (for now we don't support external linkers).
		compiler_args.push_back( "-filetype=dll" );
		// Run internalization in order to export only entry function.
		compiler_args.push_back( "--internalize" );
		compiler_args.push_back( internalize_preserve_option );
		compiler_args.push_back( optimization_level );

		// If the build system executable was compiled with debug information - generate it for the shared library too.
		if( compiler::options::generate_debug_info )
		{
			compiler_args.push_back( "-g" );
		}

		// Use the same target parameters for the shared library as for the build system executable.

		compiler_args.push_back( "--target-arch" );
		compiler_args.push_back( compiler::target::arch );

		compiler_args.push_back( "--target-vendor" );
		compiler_args.push_back( compiler::target::vendor );

		compiler_args.push_back( "--target-os" );
		compiler_args.push_back( compiler::target::os );

		compiler_args.push_back( "--target-environment" );
		compiler_args.push_back( compiler::target::environment );

		if( ust::string_view8( compiler::target::os ) != "windows" )
		{
			// It seems that position-independent code is always enabled on systems except Windows.
			// So, use this option for building the shared library.
			compiler_args.push_back( "--relocation-model" );
			compiler_args.push_back( "pic" );
		}

		if( ust::string_view8( compiler::target::environment ) == "msvc" )
		{
			// Do not generate ".lib" file - it's unnecessary, since we load the DLL dynamically.
			compiler_args.push_back( "-Wl,/NOIMPLIB" );
		}

		// Perform verification just to be sure nothing is broken.
		compiler_args.push_back( "--verify-module" );

		if( !RunExecutable( build_system_paths.compiler_executable_path, compiler_args ) )
		{
			logger.LogError( "Compiler execution failed." );
			return ust::null_optional;
		}
	}
	else
	{
		logger.LogVerbose( "Skip building \"" + result_shared_library_path + "\"." );
	}

	logger.LogVerbose( "Loading " + result_shared_library_path );

	auto shared_library_opt = LoadSharedLibrary( logger, result_shared_library_path );
	if( shared_library_opt.empty() )
	{
		logger.LogError( "Failed to load build script shared library." );
		return ust::null_optional;
	}

	return shared_library_opt;
}

fn CheckRebuildIsNeededBasedOnDepFile( Logger &mut logger, ust::string_view8 dep_file_path ) : bool
{
	var ust::optional</ust::string8/> file_contents= ReadFile( dep_file_path );
	if( file_contents.empty() )
	{
		// Dep file is not created yet.
		logger.LogVerbose( "No dependency file \"" + ust::string8(dep_file_path) + "\" - perform the build." );
		return true;
	}

	var ust::optional</MakeDepFile/> dep_file_opt= ParseMakeDepFileContents( file_contents.try_deref() );
	if( dep_file_opt.empty() )
	{
		logger.LogError( "Failed to parse dep file \"" + ust::string8(dep_file_path) + "\"" );
		return true;
	}

	var MakeDepFile& dep_file= dep_file_opt.try_deref();

	var ust::optional</FileModificationTime/> dst_modification_time_opt= GetFileModificationTime( dep_file.destination );
	if( dst_modification_time_opt.empty() )
	{
		// Destination deosn't exist.
		logger.LogVerbose( "No destination file \"" + dep_file.destination  + "\" - perform the build." );
		return true;
	}

	auto dst_modification_time = dst_modification_time_opt.try_deref();

	foreach( &dependency : dep_file.dependencies )
	{
		var ust::optional</FileModificationTime/> src_modification_time_opt= GetFileModificationTime( dependency );
		if( src_modification_time_opt.empty() )
		{
			// This source file is missing.
			// In some cases it's ok, like if an imported file was deleted together with deletion of the corresponding "import" directive.
			logger.LogVerbose( "No source file \"" + dependency  + "\" - perform the build." );
			return true;
		}
		if( src_modification_time_opt.try_deref() >= dst_modification_time )
		{
			logger.LogVerbose( "Source file \"" + dependency  + "\" is newer than the destination - perform the build." );
			return true;
		}
	}

	// Rebuild is not required if we reached this point.
	logger.LogVerbose( "No rebuild is required for dependency of the dep file \"" + ust::string8(dep_file_path) + "\"." );
	return false;
}

fn GetNativeSharedLibraryExtension() : ust::string_view8
{
	return( ust::string_view8( compiler::target::os ) == "windows" ? ust::string_view8("dll") : ust::string_view8("so") );
}

fn GetDependencyFilePath( ust::string_view8 path ) : ust::string8
{
	var ust::string8 mut res= path;
	res+= ".d";
	return res;
}

fn GetTargetBuildFilesDirectoryPath( ust::string_view8 package_build_directory, ust::string_view8 target_name ) : ust::string8
{
	var ust::string8 mut res= package_build_directory;
	res+= "/";
	res+= target_name;
	res+= ".dir"; // Use postfix with dot. Since dots in target names aren't allowed, we prevent possible file name conflict.
	return res;
}

fn CreatePackageTargetBuildGraphNodes(
	BuildSystemPaths& build_system_paths,
	ust::string_view8 package_source_directory,
	ust::string_view8 package_build_directory,
	BuildConfiguration build_configuration,
	PackageInfoTransformed& package_info,
	ust::string_view8 target_name,
	PackageInfoTransformed::BuildTarget& target,
	BuildGraph &mut build_graph )
{
	var ust::string8 target_build_files_directory= GetTargetBuildFilesDirectoryPath( package_build_directory, target_name );

	// Retrieve include directories.
	var ust::vector</ust::string8/> mut include_directories_prefixed;

	// Own include directories.
	ExtractDependenciesIncludeDirectories(
		package_info,
		package_source_directory,
		ust::make_array( BuildTargetFullName{ .name= target_name } ),
		include_directories_prefixed );

	// Include directories of all public dependencies.
	ExtractDependenciesIncludeDirectories(
		package_info,
		package_source_directory,
		target.public_dependencies_including_transitive,
		include_directories_prefixed );

	// Include directories of private dependencies.
	ExtractDependenciesIncludeDirectories(
		package_info,
		package_source_directory,
		target.private_dependencies_including_transitive_public_dependencies,
		include_directories_prefixed );

	var ust::string8 source_dir= NormalizePath( package_source_directory + ( "/" + target.sources_directory ) );

	var ust::vector</ust::string8/> mut bc_files;
	foreach( &source_file : target.source_files )
	{
		// Create nodes for compilation of each source file into a ".bc" file.

		var ust::string8 source_file_absolute= NormalizePath( ust::string8(package_source_directory) + "/" + source_file );
		var ust::string8 bc_file = NormalizePath( target_build_files_directory + "/" + source_file + ".bc" );

		bc_files.push_back( bc_file );

		var BuildGraph::Node mut node
		{
			.program= build_system_paths.compiler_executable_path,
			// Use a dep-file to track changes in imported files and trigger rebuild if one of them is changed.
			.dep_file= GetDependencyFilePath( bc_file ),
			.input_files= ust::make_array( source_file_absolute ),
			.output_files= ust::make_array( bc_file ),
			.comment= source_file + ".bc",
		};

		node.command_line.push_back( source_file_absolute );

		node.command_line.push_back( "-o" );
		node.command_line.push_back( bc_file );

		// Produce also a dependency file.
		node.command_line.push_back( "-MF" );
		node.command_line.push_back( node.dep_file );

		// Provide standard library imports.
		node.command_line.push_back( "--include-dir" );
		node.command_line.push_back( build_system_paths.ustlib_path );

		foreach( &include_dir_prefixed : include_directories_prefixed )
		{
			node.command_line.push_back( "--include-dir" );
			node.command_line.push_back( include_dir_prefixed );
		}

		// Provide path to source directory, in order to allow relative imports.
		node.command_line.push_back( "--source-dir" );
		node.command_line.push_back( source_dir );

		// Forbid importing anything outside include directories and source directories.
		node.command_line.push_back( "--prevent-imports-outside-given-directories" );

		// Produce an LLVM bitcode file.
		node.command_line.push_back( "-filetype=bc" );

		// TODO - disable "pic" by default for windows target.
		node.command_line.push_back( "--relocation-model" );
		node.command_line.push_back( "pic" );

		// Build configuration-dependent options.
		switch( build_configuration )
		{
			BuildConfiguration::Debug ->
			{
				// Generate debug information.
				node.command_line.push_back( "-g" );
				// No optimization at all - optimization makes debugging hard.
				node.command_line.push_back( "-O0" );
				// No LTO is used for debug builds.
			},
			BuildConfiguration::Release ->
			{
				// Run full optimization, but not by using O3 - it isn't much better than O2.
				node.command_line.push_back( "-O2" );
				// Prepare for LTO.
				node.command_line.push_back( "--lto-mode=prelink" );
			},
		}

		// Perform verification just to be sure nothing is broken.
		node.command_line.push_back( "--verify-module" );

		build_graph.nodes.push_back( move(node) );
	}

	// Combine multiple ".bc" files into single result.

	// TODO - fix this check, do not use host OS.
	var bool target_is_windows = ust::string_view8(compiler::target::os) == "windows";

	var ust::string8 mut result_target_file_path = NormalizePath( ust::string8(package_build_directory) + "/" + target_name );
	switch( target.target_type )
	{
		BuildTargetType::Executable ->
		{
			if( target_is_windows )
			{
				result_target_file_path+= ".exe";
			}
		},
		BuildTargetType::Library ->
		{
			result_target_file_path+= ".bc";
		},
		BuildTargetType::SharedLibrary ->
		{
			if( target_is_windows )
			{
				result_target_file_path+= ".dll";
			}
			else
			{
				result_target_file_path+= ".so";
			}
		},
	}

	var BuildGraph::Node mut node
	{
		.program= build_system_paths.compiler_executable_path,
		// Dep-files are needed only for cases where dependencies can't be specified statically, like for imports.
		// For an end-target like an executable dep-files isn't necessary.
		.dep_file= "",
		.output_files= ust::make_array( result_target_file_path ),
		.comment= target_name,
	};

	if( target.target_type == BuildTargetType::SharedLibrary && target_is_windows )
	{
		// Add also lib file to outputs.
		node.output_files.push_back( NormalizePath( ust::string8(package_build_directory) + "/" + target_name + ".lib" ) );
	}

	foreach( &bc_file : bc_files )
	{
		node.command_line.push_back( bc_file );
		node.input_files.push_back( bc_file );
	}

	// Libraries linking.
	switch( target.target_type )
	{
		BuildTargetType::Executable,
		BuildTargetType::SharedLibrary ->
		{
			// For executables and shared libraries perform linking with all public dependency libraries.
			foreach( &public_dependency : target.public_dependencies_including_transitive )
			{
				if_var( &dependency_build_target : package_info.build_targets.find( public_dependency.name ) )
				{
					if( dependency_build_target.target_type == BuildTargetType::Library )
					{
						var ust::string8 lib_file= NormalizePath( package_build_directory + ( "/" + ( public_dependency.name + ".bc" ) ) );

						node.command_line.push_back( lib_file );
						node.input_files.push_back( lib_file );
					}
				}
			}

			// Link shared library dependencies for executables and shared libraries.
			foreach( &shared_library_dependency : target.shared_library_dependencies_to_link )
			{
				if( target_is_windows )
				{
					var ust::string8 lib_file= NormalizePath( package_build_directory + ( "/" + ( shared_library_dependency.name + ".lib" ) ) );

					node.command_line.push_back( "-Wl," + lib_file );
					node.input_files.push_back( lib_file );
				}
				else
				{
					var ust::string8 so_file= NormalizePath( package_build_directory + ( "/" + ( shared_library_dependency.name + ".so" ) ) );

					node.command_line.push_back( "-Wl," + so_file );
					node.input_files.push_back( so_file );
				}
			}
		},
		BuildTargetType::Library ->
		{
			// Do not link public dependencies in libraries.
			// Instead propatage them to the terminal target - executable or shared library.
		},
	}

	// For all build target types link private library dependencies.
	// Link also all transitive public dependencies of these private dependencies.
	// Exception are libraries which are also public dependencies of this build target, they are not listed here.
	foreach( &private_dependency : target.private_dependencies_including_transitive_public_dependencies )
	{
		if_var( &dependency_build_target : package_info.build_targets.find( private_dependency.name ) )
		{
			if( dependency_build_target.target_type == BuildTargetType::Library )
			{
				var ust::string8 lib_file= NormalizePath( package_build_directory + ( "/" + ( private_dependency.name + ".bc" ) ) );

				node.command_line.push_back( lib_file );
				node.input_files.push_back( lib_file );

				// Internalize all symbols from private dependencies.
				node.command_line.push_back( "--internalize-symbols-from" );
				node.command_line.push_back( lib_file );
			}
		}
	}

	node.command_line.push_back( "-o" );
	node.command_line.push_back( result_target_file_path );

	// Read LLVM bitcode files (use the Ü compiler as bitcode files compiler).
	node.command_line.push_back( "--input-filetype=bc" );

	switch( target.target_type )
	{
		BuildTargetType::Executable ->
		{
			// This requires compiler to be built with internal LLD (for now we don't support external linkers).
			node.command_line.push_back( "-filetype=exe" );
		},
		BuildTargetType::Library ->
		{
			// Produce bitcode file.
			node.command_line.push_back( "-filetype=bc" );
		},
		BuildTargetType::SharedLibrary ->
		{
			// Produce shared librart file.
			node.command_line.push_back( "-filetype=dll" );
		},
	}

	// Internalization.
	switch( target.target_type )
	{
		BuildTargetType::Executable ->
		{
			// Run full internalization in order to export only "main".
			node.command_line.push_back( "--internalize" );
		},
		BuildTargetType::Library ->
		{
			// Internalize hidden symbols - to hide functions/variables which shouldn't be available outside this library.
			node.command_line.push_back( "--internalize-hidden" );
		},
		BuildTargetType::SharedLibrary ->
		{
			// Run internalization of hidden symbols.
			node.command_line.push_back( "--internalize-hidden" );
		},
	}

	// TODO - disable "pic" by default for windows target.
	node.command_line.push_back( "--relocation-model" );
	node.command_line.push_back( "pic" );

	// Build configuration-dependent options.
	switch( build_configuration )
	{
		BuildConfiguration::Debug ->
		{
			// Generate debug information.
			node.command_line.push_back( "-g" );
			// No optimization at all - optimization makes debugging hard.
			node.command_line.push_back( "-O0" );
			// No LTO is used for debug builds.
		},
		BuildConfiguration::Release ->
		{
			if( target.target_type == BuildTargetType::Library )
			{
				// Do not run optimization for library targets.
				// Individual optimization of their source files was performed earlier.
				// Full optimization will be performed while using this library in some other target kind, like in executable.
			}
			else
			{
				// Run full optimization, but not by using O3 - it isn't much better than O2.
				node.command_line.push_back( "-O2" );
				// Also run LTO.
				node.command_line.push_back( "--lto-mode=link" );
			}
		},
	}

	// Perform verification just to be sure nothing is broken.
	node.command_line.push_back( "--verify-module" );

	build_graph.nodes.push_back( move(node) );
}

fn ExtractDependenciesIncludeDirectories(
	PackageInfoTransformed& package_info,
	ust::string_view8 package_source_directory,
	ust::array_view_imut</BuildTargetFullName/> dependencies,
	ust::vector</ust::string8/> &mut include_directories_prefixed )
{
	foreach( &build_target_name : dependencies )
	{
		if_var( &build_target : package_info.build_targets.find( build_target_name.name ) )
		{
			foreach( &public_include_directory : build_target.public_include_directories )
			{
				// Prefix this directory with target name.
				// So, using
				//    import "some_target/some_file.uh"
				// will work.
				var ust::string8 mut path= NormalizePath( package_source_directory + ( "/" + public_include_directory ) );
				path+= g_include_dir_prefix_separator;
				path+= build_target_name.name;
				include_directories_prefixed.push_back( move(path) );
			}
		}
	}
}

auto constexpr g_include_dir_prefix_separator= "::"; // Use the same constant as within the compiler.

class BuildSystemInterfaceImplementation final : BuildSystemInterface
{
public:
	fn constructor( Options& options )
		( logger_(
			( options.verbose
				? Logger::Level::Verbose
				: ( options.quiet ? Logger::Level::Quiet : Logger::Level::Normal ) ) ),
		build_configuration_= options.build_configuration )
	{}

public: // BuildSystemInterface
	fn virtual final GetBuildConfiguration(this) : BuildConfiguration
	{
		return build_configuration_;
	}

	fn virtual final LogVerbose( mut this, ust::string_view8 message )
	{
		logger_.LogVerbose( message );
	}

	fn virtual final LogInfo( mut this, ust::string_view8 message )
	{
		logger_.LogInfo( message );
	}

	fn virtual final LogError( mut this, ust::string_view8 message )
	{
		logger_.LogError( message );
	}

public: // Provide direct access for some fields where it's safe to use them directly.
	Logger logger_;

	BuildConfiguration imut build_configuration_;

private:
}

} // namespace BK
