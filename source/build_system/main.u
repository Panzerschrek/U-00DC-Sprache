import "/stdout.u"
import "build_graph.uh"
import "entry.uh"
import "filesystem.uh"
import "make_dep_file.uh"
import "options.uh"
import "package_validation.uh"
import "process.uh"
import "shared_library.uh"
import "string_utils.uh"

namespace BK
{

// Place actual "main" code inside the "BK" namespace.
fn Main( ust::string_view8 exe_path, ust::array_view_imut</ust::string_view8/> args ) : i32
{
	var ust::optional</Options/> options_opt= ParseOptions( args );
	if( options_opt.empty() )
	{
		ust::stderr_print( "Failed to parse options.\n" );
		return -1;
	}

	var Options& options= options_opt.try_deref();

	if( options.help )
	{
		ust::stdout_print( GetHelpMessage() );
		return 0;
	}

	var Logger mut logger(
		( options.verbose
			? Logger::Level::Verbose
			: ( options.quiet ? Logger::Level::Quiet : Logger::Level::Normal ) ) );

	logger.LogInfo( "Bürokratie - the Ü build system!" );

	var ust::string8 exe_directory_path = MakePathAbsolute( ExtractExeDirectoryPath( exe_path ) );

	logger.LogVerbose( "Build system executable directory path: \"" + exe_directory_path + "\"" );

	// For now use "Compiler1" as compiler default. TODO - allow to tune it.
	var ust::string8 default_compiler_executable_path = exe_directory_path + "/Compiler1";
	// "ustlib" is located in the root of the Üpackage.
	var ust::string8 default_ustlib_path = exe_directory_path + "../ustlib";
	// Build system imports are located in "/build_system/imports"
	var ust::string8 default_build_system_imports_path = exe_directory_path + "../build_system/imports";

	var BuildSystemPaths build_system_paths
	{
		.compiler_executable_path=
			( options.compiler_executable_path.empty()
				? default_compiler_executable_path
				: MakePathAbsolute(options.compiler_executable_path) ),
		.ustlib_path=
			( options.ustlib_path.empty()
				? default_ustlib_path
				: MakePathAbsolute(options.ustlib_path) ),
		.build_system_imports_path=
			( options.build_system_imports_path.empty()
				? default_build_system_imports_path
				: MakePathAbsolute(options.build_system_imports_path) ),
	};

	// If "options.root_package_directory" is empty this will become current directory.
	var ust::string8 package_source_directory = MakePathAbsolute( options.root_package_directory );

	// By default use "build" directory within root package directory.
	var ust::string8 package_build_directory_base =
		( options.build_directory.empty()
			? ( package_source_directory + "/build" )
			: MakePathAbsolute( options.build_directory ) );

	if( !EnsureDirectoryExists( logger, package_build_directory_base ) )
	{
		logger.LogError( "Can't create build directory." );
		return -1;
	}

	// Create a subdirectory for configuration specified.
	var ust::string8 package_build_directory =
		package_build_directory_base + "/" + BuildConfigurationToString( options.build_configuration );

	if( !EnsureDirectoryExists( logger, package_build_directory ) )
	{
		logger.LogError( "Can't create build directory." );
		return -1;
	}

	logger.LogVerbose( "Build project in \"" + package_source_directory + "\" using build directory \"" + package_build_directory + "\"" );

	// TODO - customize it based on package name?
	auto constexpr entry_func_name = "GetPackageInfoImpl";

	auto shared_library_opt = BuildAndLoadPackageBuildScript(
		logger,
		build_system_paths,
		package_source_directory,
		// For now use directory for build configuration specified.
		// TODO - reuse build script shared libraries among configurations and target triples.
		package_build_directory,
		entry_func_name );
	if( shared_library_opt.empty() )
	{
		logger.LogError( "Failed to load/build the build script shared library." );
		return -1;
	}

	auto mut func_raw_ptr= shared_library_opt.try_deref().LoadSymbol( logger, entry_func_name );
	if( ust::is_nullptr(func_raw_ptr) )
	{
		logger.LogError( "Failed to load function " + entry_func_name );
		return -1;
	}

	// A hacky way to cast byte8 pointer to a function pointer.
	var GetPackageInfoFunctionType mut func_ptr= zero_init;
	unsafe( ust::memory_copy(
		ust::ptr_cast_to_byte8( $<(func_ptr) ),
		ust::ptr_cast_to_byte8( $<(func_raw_ptr) ),
		typeinfo</ typeof(func_ptr) />.size_of ) );

	var PackageInfo package_info= func_ptr();

	if( !PackageIsValid( logger, package_info ) )
	{
		logger.LogError( "Package is invald." );
		return -1;
	}

	var BuildGraph mut build_graph;
	foreach( &build_target : package_info.build_targets )
	{
		CreatePackageTargetBuildGraphNodes(
			build_system_paths,
			package_source_directory,
			package_build_directory,
			options.build_configuration,
			build_target,
			build_graph );
	}

	foreach( &build_target : package_info.build_targets )
	{
		if( !PerformPackageTargetBuild(
			logger,
			build_system_paths,
			package_source_directory,
			package_build_directory,
			options.build_configuration,
			build_target ) )
		{
			logger.LogError( "Failed to build target " + build_target.name + "!" );
			return -1;
		}
	}

	logger.LogInfo( "Successfully finished the build!" );

	return 0;
}

fn ExtractExeDirectoryPath( ust::string_view8 exe_path )
	: ust::string_view8 @( ust::reference_notation::return_inner_references::param0_inner_reference0 )
{
	var ust::string_view8 mut p = exe_path;
	while( !p.empty() && !( p.back() == "/"c8 || p.back() == "\\"c8 ) )
	{
		p.drop_back();
	}

	return p;
}

struct BuildSystemPaths
{
	ust::string8 compiler_executable_path;
	ust::string8 ustlib_path;
	ust::string8 build_system_imports_path;
}

fn BuildAndLoadPackageBuildScript(
	Logger &mut logger,
	BuildSystemPaths& build_system_paths,
	ust::string_view8 package_source_directory,
	ust::string_view8 package_build_directory,
	ust::string_view8 entry_func_name ) : ust::optional</SharedLibrary/>
{
	// TODO - select more catchy name for root build script file.
	auto constexpr build_script_file= "build.u";

	var ust::string8 build_script_file_full_path= ust::string8(package_source_directory) + "/" + build_script_file;

	// TODO - do we need to have this check here?
	if( GetFileModificationTime( build_script_file_full_path ).empty() )
	{
		logger.LogError( "Can not get modification time for \"" + build_script_file_full_path + "\" - file does not exists?" );
		return ust::null_optional;
	}

	var ust::string8 mut result_shared_library_path= package_build_directory;
	result_shared_library_path+= "/build.";
	result_shared_library_path+= GetNativeSharedLibraryExtension();

	var ust::string8 result_shared_library_dependency_file_path = GetDependencyFilePath( result_shared_library_path );

	// TODO - check also if compilation options were changed (including import directories).
	if( CheckRebuildIsNeededBasedOnDepFile( logger, result_shared_library_dependency_file_path ) )
	{
		logger.LogVerbose( "Building \"" + result_shared_library_path + "\"." );

		var ust::string8 build_script_wrapper_file_path= ust::string8(package_build_directory) + "/" + "build_script_wrapper.u";

		// Create our own wrapper file to ensure that the function exported from the shared library has proper type.
		{
			var ust::string8 mut build_script_wrapper_contents = "import \"/";
			build_script_wrapper_contents+= build_script_file;
			build_script_wrapper_contents+= "\"\n\n";
			build_script_wrapper_contents+= "fn nomangle ";
			build_script_wrapper_contents+= entry_func_name;
			build_script_wrapper_contents+= "() : BK::PackageInfo { return GetPackageInfo(); }";
			build_script_wrapper_contents+= "\n";

			if( !WriteFile( logger, build_script_wrapper_file_path, build_script_wrapper_contents ) )
			{
				logger.LogError( "Can't write build script wrapper file." );
				return ust::null_optional;
			}
		}

		var ust::string8 internalize_preserve_option = ust::string8("--internalize-preserve=") + entry_func_name;

		// Use optimization level which was used to compile the build system executable.
		var ust::string8 mut optimization_level= "-O";
		optimization_level.push_back( compiler::options::optimization_level );

		var ust::vector</ust::string_view8/> mut compiler_args;
		// Add path to the package directory in order to import "build.u" inside the wrapper.
		compiler_args.push_back( "--include-dir" );
		compiler_args.push_back( package_source_directory );
		// Provide standard library imports.
		compiler_args.push_back( "--include-dir" );
		compiler_args.push_back( build_system_paths.ustlib_path );
		// Provide path to declarations of the build system interface.
		compiler_args.push_back( "--include-dir" );
		compiler_args.push_back( build_system_paths.build_system_imports_path );

		compiler_args.push_back( build_script_wrapper_file_path );  // The file to buld.

		// Output.
		compiler_args.push_back( "-o" );
		compiler_args.push_back( result_shared_library_path );

		// Produce also a dependency file.
		compiler_args.push_back( "-MF" );
		compiler_args.push_back( result_shared_library_dependency_file_path );

		// This requires compiler to be built with internal LLD (for now we don't support external linkers).
		compiler_args.push_back( "-filetype=dll" );
		// Run internalization in order to export only entry function.
		compiler_args.push_back( "--internalize" );
		compiler_args.push_back( internalize_preserve_option );
		compiler_args.push_back( optimization_level );

		// If the build system executable was compiled with debug information - generate it for the shared library too.
		if( compiler::options::generate_debug_info )
		{
			compiler_args.push_back( "-g" );
		}

		// Use the same target parameters for the shared library as for the build system executable.

		compiler_args.push_back( "--target-arch" );
		compiler_args.push_back( compiler::target::arch );

		compiler_args.push_back( "--target-vendor" );
		compiler_args.push_back( compiler::target::vendor );

		compiler_args.push_back( "--target-os" );
		compiler_args.push_back( compiler::target::os );

		compiler_args.push_back( "--target-environment" );
		compiler_args.push_back( compiler::target::environment );

		if( ust::string_view8( compiler::target::os ) != "windows" )
		{
			// It seems that position-independent code is always enabled on systems except Windows.
			// So, use this option for building the shared library.
			compiler_args.push_back( "--relocation-model" );
			compiler_args.push_back( "pic" );
		}

		if( ust::string_view8( compiler::target::environment ) == "msvc" )
		{
			// Do not generate ".lib" file - it's unnecessary, since we load the DLL dynamically.
			compiler_args.push_back( "-Wl,/NOIMPLIB" );
		}

		if( !RunExecutable( build_system_paths.compiler_executable_path, compiler_args ) )
		{
			logger.LogError( "Compiler execution failed." );
			return ust::null_optional;
		}
	}
	else
	{
		logger.LogVerbose( "Skip building \"" + result_shared_library_path + "\"." );
	}

	logger.LogVerbose( "Loading " + result_shared_library_path );

	auto shared_library_opt = LoadSharedLibrary( logger, result_shared_library_path );
	if( shared_library_opt.empty() )
	{
		logger.LogError( "Failed to load build script shared library." );
		return ust::null_optional;
	}

	return shared_library_opt;
}

fn CheckRebuildIsNeededBasedOnDepFile( Logger &mut logger, ust::string_view8 dep_file_path ) : bool
{
	var ust::optional</ust::string8/> file_contents= ReadFile( dep_file_path );
	if( file_contents.empty() )
	{
		// Dep file is not created yet.
		logger.LogVerbose( "No dependency file \"" + ust::string8(dep_file_path) + "\" - perform the build." );
		return true;
	}

	var ust::optional</MakeDepFile/> dep_file_opt= ParseMakeDepFileContents( file_contents.try_deref() );
	if( dep_file_opt.empty() )
	{
		logger.LogError( "Failed to parse dep file \"" + ust::string8(dep_file_path) + "\"" );
		return true;
	}

	var MakeDepFile& dep_file= dep_file_opt.try_deref();

	var ust::optional</FileModificationTime/> dst_modification_time_opt= GetFileModificationTime( dep_file.destination );
	if( dst_modification_time_opt.empty() )
	{
		// Destination deosn't exist.
		logger.LogVerbose( "No destination file \"" + dep_file.destination  + "\" - perform the build." );
		return true;
	}

	auto dst_modification_time = dst_modification_time_opt.try_deref();

	foreach( &dependency : dep_file.dependencies )
	{
		var ust::optional</FileModificationTime/> src_modification_time_opt= GetFileModificationTime( dependency );
		if( src_modification_time_opt.empty() )
		{
			// This source file is missing.
			// In some cases it's ok, like if an imported file was deleted together with deletion of the corresponding "import" directive.
			logger.LogVerbose( "No source file \"" + dependency  + "\" - perform the build." );
			return true;
		}
		if( src_modification_time_opt.try_deref() >= dst_modification_time )
		{
			logger.LogVerbose( "Source file \"" + dependency  + "\" is newer than the destination - perform the build." );
			return true;
		}
	}

	// Rebuild is not required if we reached this point.
	logger.LogVerbose( "No rebuild is required for dependency of the dep file \"" + ust::string8(dep_file_path) + "\"." );
	return false;
}

fn GetNativeSharedLibraryExtension() : ust::string_view8
{
	return( ust::string_view8( compiler::target::os ) == "windows" ? ust::string_view8("dll") : ust::string_view8("so") );
}

fn GetDependencyFilePath( ust::string_view8 path ) : ust::string8
{
	var ust::string8 mut res= path;
	res+= ".d";
	return res;
}

fn CreatePackageTargetBuildGraphNodes(
	BuildSystemPaths& build_system_paths,
	ust::string_view8 package_source_directory,
	ust::string_view8 package_build_directory,
	BuildConfiguration build_configuration,
	BuildTarget& target,
	BuildGraph &mut build_graph )
{
	// For now just build all files together into result executable.
	// TODO - compile each source file individually and support incremental building for each of them.

	// TODO - fix this check, do not use host OS.
	var bool target_is_windows = ust::string_view8(compiler::target::os) == "windows";

	var ust::string8 mut result_target_file_path = ust::string8(package_build_directory) + "/" + target.name;
	if( target_is_windows )
	{
		result_target_file_path+= ".exe";
	}

	var BuildGraph::Node mut node
	{
		.program= build_system_paths.compiler_executable_path,
		.dep_file= GetDependencyFilePath( result_target_file_path ),
		.output_files= ust::make_array( result_target_file_path ), // TODO - normalize path.
	};

	foreach( &source_file : target.source_files )
	{
		var ust::string8 source_file_absolute= ust::string8(package_source_directory) + "/" + source_file;
		node.command_line.push_back( source_file_absolute );
		node.input_files.push_back( source_file_absolute ); // TODO - normalize path.
	}

	node.command_line.push_back( "-o" );
	node.command_line.push_back( result_target_file_path );

	// Produce also a dependency file.
	node.command_line.push_back( "-MF" );
	node.command_line.push_back( node.dep_file );

	// Provide standard library imports.
	node.command_line.push_back( "--include-dir" );
	node.command_line.push_back( build_system_paths.ustlib_path );

	switch( target.target_type )
	{
		// This requires compiler to be built with internal LLD (for now we don't support external linkers).
		BuildTargetType::Executable ->{ node.command_line.push_back( "-filetype=exe" ); },
	}

	// Run internalization in order to export only "main".
	node.command_line.push_back( "--internalize" );

	// TODO - disable "pic" by default for windows target.
	node.command_line.push_back( "--relocation-model" );
	node.command_line.push_back( "pic" );

	// Build configuration-dependent options.
	switch( build_configuration )
	{
		BuildConfiguration::Debug ->
		{
			// Generate debug information.
			node.command_line.push_back( "-g" );
			// No optimization at all - optimization makes debugging hard.
			node.command_line.push_back( "-O0" );
		},
		BuildConfiguration::Release ->
		{
			// Run full optimization, but not by using O3 - it isn't much better than O2.
			node.command_line.push_back( "-O2" );
		},
	}

	build_graph.nodes.push_back( move(node) );
}

// Returns true on success.
fn PerformPackageTargetBuild(
	Logger &mut logger,
	BuildSystemPaths& build_system_paths,
	ust::string_view8 package_source_directory,
	ust::string_view8 package_build_directory,
	BuildConfiguration build_configuration,
	BuildTarget& target ) : bool
{
	// TODO - fix this check, do not use host OS.
	var bool target_is_windows = ust::string_view8(compiler::target::os) == "windows";

	var ust::string8 mut result_target_file_path = ust::string8(package_build_directory) + "/" + target.name;

	if( target_is_windows )
	{
		result_target_file_path+= ".exe";
	}

	var ust::string8 result_dependency_file_path= GetDependencyFilePath( result_target_file_path );

	// TODO - check also if compilation options were changed (including import directories).
	if( CheckRebuildIsNeededBasedOnDepFile( logger, result_dependency_file_path ) )
	{
		// For now just build all files together into result executable.
		// TODO - compile each source file individually and support incremental building for each of them.

		var ust::vector</ust::string8/> mut source_files_absolute;
		foreach( &source_file : target.source_files )
		{
			source_files_absolute.push_back( ust::string8(package_source_directory) + "/" + source_file );
		}

		var ust::vector</ust::string_view8/> mut compiler_args;
		// Provide standard library imports.
		compiler_args.push_back( "--include-dir" );
		compiler_args.push_back( build_system_paths.ustlib_path );

		// Hack to prevent "ReferencePollutionOfOuterLoopVariable" error.
		if(false)
		{
			compiler_args.push_back( cast_imut(source_files_absolute).front() );
		}

		for( auto mut i = 0s; i < source_files_absolute.size(); ++i )
		{
			compiler_args.push_back( cast_imut(source_files_absolute)[i] );
		}

		compiler_args.push_back( "-o" );
		compiler_args.push_back( result_target_file_path );

		// Produce also a dependency file.
		compiler_args.push_back( "-MF" );
		compiler_args.push_back( result_dependency_file_path );

		// This requires compiler to be built with internal LLD (for now we don't support external linkers).
		// TODO - support other target types.
		compiler_args.push_back( "-filetype=exe" );

		// Run internalization in order to export only "main".
		compiler_args.push_back( "--internalize" );

		// TODO - disable "pic" by default for windows target.
		compiler_args.push_back( "--relocation-model" );
		compiler_args.push_back( "pic" );

		// Build configuration-dependent options.
		switch( build_configuration )
		{
			BuildConfiguration::Debug ->
			{
				// Generate debug information.
				compiler_args.push_back( "-g" );
				// No optimization at all - optimization makes debugging hard.
				compiler_args.push_back( "-O0" );
			},
			BuildConfiguration::Release ->
			{
				// Run full optimization, but not by using O3 - it isn't much better than O2.
				compiler_args.push_back( "-O2" );
			},
		}

		logger.LogInfo( "Building \"" + result_target_file_path + "\"" );

		if( !RunExecutable( build_system_paths.compiler_executable_path, compiler_args ) )
		{
			logger.LogError( "Compiler execution failed." );
			return false;
		}

		logger.LogInfo( "Successfully built \"" + result_target_file_path + "\"" );
	}
	else
	{
		logger.LogVerbose( "Skip building \"" + result_target_file_path + "\"" );
	}

	return true;
}

} // namespace BK
