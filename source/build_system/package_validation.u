import "package_validation.uh"
import "path.uh"

namespace BK
{

fn PackageIsValid( Logger &mut logger, PackageInfo& package_info ) : bool
{
	var bool mut ok= true;
	for( auto mut i= 0s; i < package_info.build_targets.size(); ++i )
	{
		var BuildTarget& build_target= package_info.build_targets[i];
		auto& current_name= build_target.name;

		if( !TargetNameIsValid( current_name ) )
		{
			logger.LogError( "Error, invalid build target name \"" + current_name + "\"!" );
			ok= false;
		}

		for( auto mut j= 0s; j < i; ++j )
		{
			if( current_name == package_info.build_targets[j].name )
			{
				logger.LogError( "Error, duplicated build target \"" + current_name + "\"!" );
				ok= false;
			}
		}

		var ust::vector</ust::string8/> mut prev_sources_normalized;
		foreach( source_name : build_target.source_files )
		{
			if( !TargetSourceNameIsValid( source_name ) )
			{
				logger.LogError( "Invalid, source name \"" + source_name + "\" of build target \"" + current_name + "\"!" );
				ok= false;
				continue;
			}

			var ust::string8 mut source_name_normalized = NormalizePath( source_name );

			foreach( &prev_source_name : prev_sources_normalized )
			{
				if( source_name_normalized == prev_source_name )
				{
					logger.LogError( "Error, duplicated source file \"" + source_name_normalized + "\" of the build target \"" + current_name + "\"!" );
					ok= false;
				}
			}
			prev_sources_normalized.push_back( move(source_name_normalized) );

		}
	}

	return ok;
}

fn TargetNameIsValid( ust::string_view8 name ) : bool
{
	if( name.empty() )
	{
		return false;
	}

	foreach( c : name )
	{
		// Prevent symbols which may have special meaning in paths.
		switch(c)
		{
			"."c8, // Dots are allowed in paths, but in target names they may be confusing.
			"/"c8,
			"\\"c8,
			":"c8,
			"\""c8,
			"'"c8,
			"<"c8,
			">"c8,
			"|"c8,
			"?"c8,
			"*"c8,
			"\0"c8
			-> { return false; },
			default -> {}
		}
	}

	return true;
}

fn TargetSourceNameIsValid( ust::string_view8 name ) : bool
{
	if( name.empty() )
	{
		return false;
	}

	if( name.front() == "/"c8 || name.front() == "\\"c8 )
	{
		// Do not allow absolute paths.
		return false;
	}

	if( name.size() >= 2s && name[0s] >= "A"c8 && name[0s] <= "Z"c8 && name[1s] == ":"c8 )
	{
		// Do not allow absolute Windows paths.
		return false;
	}

	// Disable "." and ".." in source file names.
	foreach( &component : SplitPathIntoComponents( name ) )
	{
		if( component == "." || component == ".." )
		{
			return false;
		}
	}

	// Further checks aren't really necessary.
	// If for example file name is invalid, it will not be found and build will fail.

	return true;
}

} // namespace BK
