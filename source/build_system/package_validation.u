import "/sort.u"
import "package_validation.uh"
import "path.uh"

namespace BK
{

fn PackageIsValid( Logger &mut logger, PackageInfo& package_info ) : bool
{
	var bool mut ok= true;

	var ust::vector</ ust::vector</ust::string8 /> /> mut prev_targets_source_directories;

	for( auto mut i= 0s; i < package_info.build_targets.size(); ++i )
	{
		var BuildTarget& build_target= package_info.build_targets[i];
		auto& target_name= build_target.name;

		if( !TargetNameIsValid( target_name ) )
		{
			logger.LogError( "Error, invalid build target name \"" + target_name + "\"!" );
			ok= false;
		}

		for( auto mut j= 0s; j < i; ++j )
		{
			if( target_name == package_info.build_targets[j].name )
			{
				logger.LogError( "Error, duplicated build target \"" + target_name + "\"!" );
				ok= false;
			}
		}

		if( !build_target.source_files.empty() )
		{
			// Check each source - if it's correct.
			var ust::vector</ust::string8/> mut prev_sources_normalized;
			foreach( source_name : build_target.source_files )
			{
				if( !TargetSourceNameIsValid( source_name ) )
				{
					logger.LogError( "Invalid, source name \"" + source_name + "\" of build target \"" + target_name + "\"!" );
					ok= false;
					continue;
				}

				// Check for duplicates.
				var ust::string8 mut source_name_normalized = NormalizePath( source_name );

				foreach( &prev_source_name : prev_sources_normalized )
				{
					if( source_name_normalized == prev_source_name )
					{
						logger.LogError( "Error, duplicated source file \"" + source_name_normalized + "\" of the build target \"" + target_name + "\"!" );
						ok= false;
					}
				}
				prev_sources_normalized.push_back( move(source_name_normalized) );
			}

			var ust::vector</ust::string8/> mut sources_directory= CalculateBuildTargetSourceFilesCommonDirectory( build_target.source_files );

			var ust::string8 mut sources_directory_str= "";
			foreach( &component : sources_directory )
			{
				sources_directory_str+= component;
				sources_directory_str+= "/";
			}

			logger.LogVerbose( "All sources of the build target \"" + target_name + "\" are located within directory \"" + sources_directory_str + "\"." );

			// Check for source directory conflict.
			foreach( &prev_source_directory : prev_targets_source_directories )
			{
				if( prev_source_directory == sources_directory )
				{
					logger.LogError( "Source directory \"" + sources_directory_str + "\" of the build target \"" + target_name + "\" is already used for some another target." );
					ok= false;
				}
				else if( sources_directory.size() < prev_source_directory.size() &&
					sources_directory == prev_source_directory.range().subrange_end( sources_directory.size() ) )
				{
					logger.LogError( "Source directory \"" + sources_directory_str + "\" of the build target \"" + target_name + "\" is a prefix of the source directory of some another target." );
					ok= false;
				}
				else if( sources_directory.size() > prev_source_directory.size() &&
					prev_source_directory == cast_imut(sources_directory).range().subrange_end( prev_source_directory.size() ) )
				{
					logger.LogError( "Source directory \"" + sources_directory_str + "\" of the build target \"" + target_name + "\" is located within the source directory of some another target." );
					ok= false;
				}
			}

			prev_targets_source_directories.push_back( move(sources_directory) );
		}
	}

	return ok;
}

fn GetAllTargetPublicDependencies(
	Logger &mut logger,
	PackageInfo& package_info,
	BuildTarget& build_target ) : ust::optional</ust::vector</BuildTargetFullName/>/>
{
	var ust::vector</BuildTargetFullName/> mut call_stack, mut result;
	if( !GetAllTargetPublicDependencies_r( logger, package_info, build_target, call_stack, result ) )
	{
		return ust::null_optional;
	}

	// Remove possible duplicates.
	ust::sort( result );
	result.remove_adjacent_duplicates();

	return move(result);
}

// Returns true on success.
fn GetAllTargetPublicDependencies_r(
	Logger &mut logger,
	PackageInfo& package_info,
	BuildTarget& build_target,
	ust::vector</BuildTargetFullName/> &mut call_stack,
	ust::vector</BuildTargetFullName/> &mut result ) : bool
{
	for( auto mut i= 0s; i < call_stack.size(); ++i )
	{
		if( build_target.name == call_stack[i].name )
		{
			var ust::string8 mut message= "Dependency loop detected: ";
			for( auto mut j= i; j < call_stack.size(); ++j )
			{
				message += "\"";
				message += call_stack[j].name;
				message += "\"";
				message += " -> ";
			}
			message += "\"";
			message += build_target.name;
			message += "\"";

			logger.LogError( message );

			return false;
		}
	}

	call_stack.push_back( BuildTargetFullName{ .name= build_target.name } );

	var bool mut ok= true;

	foreach( &public_dependency : build_target.public_dependencies )
	{
		if( public_dependency.name == build_target.name )
		{
			logger.LogError( "Build target \"" + build_target.name + "\" depends on itself." );
			ok= false;
			continue;
		}

		result.push_back(public_dependency);

		var bool mut found= false;
		// TODO - take dependencies from other packages too.
		foreach( &other_build_target : package_info.build_targets )
		{
			if( other_build_target.name == public_dependency.name )
			{
				ok&= GetAllTargetPublicDependencies_r( logger, package_info, other_build_target, call_stack, result );
				found= true;
				break;
			}
		}

		if( !found )
		{
			logger.LogError( "Dependency \"" + public_dependency.name + "\" of a build target \"" + build_target.name + "\" not found." );
			ok= false;
		}
	}

	call_stack.pop_back();
	return ok;
}

fn TargetNameIsValid( ust::string_view8 name ) : bool
{
	if( name.empty() )
	{
		return false;
	}

	foreach( c : name )
	{
		// Prevent symbols which may have special meaning in paths.
		switch(c)
		{
			"."c8, // Dots are allowed in paths, but in target names they may be confusing.
			"/"c8,
			"\\"c8,
			":"c8,
			"\""c8,
			"'"c8,
			"<"c8,
			">"c8,
			"|"c8,
			"?"c8,
			"*"c8,
			"\0"c8
			-> { return false; },
			default -> {}
		}
	}

	return true;
}

fn TargetSourceNameIsValid( ust::string_view8 name ) : bool
{
	if( name.empty() )
	{
		return false;
	}

	if( name.front() == "/"c8 || name.front() == "\\"c8 )
	{
		// Do not allow absolute paths.
		return false;
	}

	if( name.size() >= 2s && name[0s] >= "A"c8 && name[0s] <= "Z"c8 && name[1s] == ":"c8 )
	{
		// Do not allow absolute Windows paths.
		return false;
	}

	// Disable "." and ".." in source file names.
	foreach( &component : SplitPathIntoComponents( name ) )
	{
		if( component == "." || component == ".." )
		{
			return false;
		}
	}

	// Further checks aren't really necessary.
	// If for example file name is invalid, it will not be found and build will fail.

	return true;
}

fn CalculateBuildTargetSourceFilesCommonDirectory( ust::array_view_imut</ust::string8/> sources ) : ust::vector</ust::string8/>
{
	if( sources.empty() )
	{
		return ust::vector</ust::string8/>();
	}

	var ust::vector</ust::vector</ust::string8/>/> mut sources_splitted_per_component;
	foreach( &source : sources )
	{
		sources_splitted_per_component.push_back( SplitPathIntoComponents(source).iter().collect</ ust::vector</ ust::string8 /> />() );
	}

	if( sources_splitted_per_component.size() == 1s )
	{
		// Special case with only one file - remove last component (presumably file name) and return it.
		var ust::vector</ust::string8/> mut result= sources_splitted_per_component.pop_back();
		if( !result.empty() )
		{
			result.drop_back();
		}
		return result;
	}

	var ust::vector</ust::string8/> mut result;

	// Calculate common prefix for all files.

	for( auto mut i= 0s; ; ++i ) label component_loop
	{
		var ust::vector</ust::string8/>& first_source= sources_splitted_per_component.front();
		if( i >= first_source.size() )
		{
			break label component_loop;
		}
		var ust::string8& first_source_component= first_source[i];

		foreach( & source_splitted : cast_imut(sources_splitted_per_component) )
		{
			if( i >= source_splitted.size() || source_splitted[i] != first_source_component )
			{
				break label component_loop;
			}
		}

		result.push_back( first_source_component );
	}

	return result;
}

} // namespace BK
