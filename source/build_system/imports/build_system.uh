import "/string.u"
import "/vector.u"

namespace BK
{

enum BuildTargetType
{
	// Normal executable, which can be launched.
	Executable,
	// Ãœ library, which can be used by other targets.
	Library,
	// TODO - enable these target types.
	// SharedLibrary,
	// NativeStaticLibrary,
}

struct BuildTargetFullName
{
	// TODO - add package prefix.
	ust::string8 name;

	op<=>( BuildTargetFullName& l, BuildTargetFullName& r ) : i32
	{
		return l.name <=> r.name;
	}
}

struct BuildTarget
{
	// Type of the build target. This should be specified explicitly.
	BuildTargetType target_type;

	// Name of a build target.
	// Empty names, names with some special characters and path separators aren't allowed.
	ust::string8 name;

	// List of source files of this build target. Order is irrelevant.
	// Containts paths relative to the package source directory (where the build script is located).
	// Paths with "." and ".." aren't allowed.
	// Duplicates aren't allowed.
	ust::vector</ust::string8/> source_files;

	// List of dependencies, which should be also dependencies of other build targets dependent on this build target.
	ust::vector</ BuildTargetFullName /> public_dependencies;
}

struct PackageInfo
{
	// Build targets of a package. Order is irrelevant.
	ust::vector</BuildTarget/> build_targets;
}

// Signature of a function that should return package info.
// Returns empty optional in case of error.
type GetPackageInfoFunctionType = fn( BuildSystemInterface &mut build_system_interface ) : ust::optional</PackageInfo/>;

// A class which provides necessary information for "GetPackageInfo" function and also contains some helper functions.
// Use inheritance to avoid exposing build system internals to the build script.
//
// Also it helps to import necessary build functions into the build script shared library.
// Otherwise it would be necessary to mark each exported from the build system executable function as "dllexport" or "visibility(default)".
// Making all functions virtual and thus forcing call via the virtual table solves this problem.
class BuildSystemInterface interface
{
	fn virtual pure GetBuildConfiguration(this) : BuildConfiguration;

	fn virtual pure LogVerbose( mut this, ust::string_view8 message );
	fn virtual pure LogInfo( mut this, ust::string_view8 message );
	fn virtual pure LogError( mut this, ust::string_view8 message );
}

enum BuildConfiguration
{
	Debug,
	Release,
	// TODO - add other configurations
}

} // namespace BK
