import "json.uh"

namespace BK
{

fn JsonValue::conversion_constructor( Null null_value )
{
	contents_= null_value;
}

fn JsonValue::conversion_constructor( Bool bool_value )
{
	contents_= bool_value;
}

fn JsonValue::conversion_constructor( Number number_value )
{
	contents_= number_value;
}

fn JsonValue::conversion_constructor( String mut string_value )
{
	contents_= move(string_value);
}

fn JsonValue::conversion_constructor( ust::string_view8 string_value )
{
	contents_= String(string_value);
}

fn JsonValue::conversion_constructor( Array mut array_value )
{
	contents_= ust::make_box( move(array_value) );
}

fn JsonValue::conversion_constructor( Object mut object_value )
{
	contents_= ust::make_box( move(object_value) );
}

fn JsonValue::AsNull(  mut this ) : ust::optional_ref_mut </Null/> @( return_inner_references )
{
	return contents_.get</Null/>();
}

fn JsonValue::AsNull( imut this ) : ust::optional_ref_imut</Null/> @( return_inner_references )
{
	return contents_.get</Null/>();
}


fn JsonValue::AsBool(  mut this ) : ust::optional_ref_mut </Bool/> @( return_inner_references )
{
	return contents_.get</Bool/>();
}

fn JsonValue::AsBool( imut this ) : ust::optional_ref_imut</Bool/> @( return_inner_references )
{
	return contents_.get</Bool/>();
}

fn JsonValue::AsNumber(  mut this ) : ust::optional_ref_mut </Number/> @( return_inner_references )
{
	return contents_.get</Number/>();
}

fn JsonValue::AsNumber( imut this ) : ust::optional_ref_imut</Number/> @( return_inner_references )
{
	return contents_.get</Number/>();
}

fn JsonValue::AsString(  mut this ) : ust::optional_ref_mut </String/> @( return_inner_references )
{
	return contents_.get</String/>();
}

fn JsonValue::AsString( imut this ) : ust::optional_ref_imut</String/> @( return_inner_references )
{
	return contents_.get</String/>();
}

fn JsonValue::AsArray(  mut this ) : ust::optional_ref_mut </Array/> @( return_inner_references )
{
	if_var( &mut arr : contents_.get</ ust::box</Array/> />() )
	{
		return arr.deref();
	}
	return ust::null_optional_ref;
}

fn JsonValue::AsArray( imut this ) : ust::optional_ref_imut</Array/> @( return_inner_references )
{
	if_var( &arr : contents_.get</ ust::box</Array/> />() )
	{
		return arr.deref();
	}
	return ust::null_optional_ref;
}


fn JsonValue::AsObject(  mut this ) : ust::optional_ref_mut </Object/> @( return_inner_references )
{
	if_var( &mut obj : contents_.get</ ust::box</Object/> />() )
	{
		return obj.deref();
	}
	return ust::null_optional_ref;
}

fn JsonValue::AsObject( imut this ) : ust::optional_ref_imut</Object/> @( return_inner_references )
{
	if_var( &obj : contents_.get</ ust::box</Object/> />() )
	{
		return obj.deref();
	}
	return ust::null_optional_ref;
}

} // namespace BK
