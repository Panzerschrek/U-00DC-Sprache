//##success_test
import "../ustlib/type_traits.u"

type I16= i16;

enum SomeEnum_u8 : u8 { A, B, C }

struct EmptyStruct{}
type EmptyStructAlias0= EmptyStruct;
type EmptyStructAlias1= EmptyStruct;

struct NonEmptyStruct{ i32 x; i32 y; }

class A polymorph {}
class B : A {}
class C : B {}

class F interface{}
class G interface{}
class H interface{}
class I : F, G {}
class J : I, H {}
class K : J {}

class LargeClassWithMethods
{
	fn Bar( mut this );
	fn EmptyStatic();
	fn SomeUnsafe( this ) unsafe;
}

//
// is_same_type
//

static_assert(  ust::is_same_type</ i32, i32 />() );
static_assert(  ust::is_same_type</ I16, i16 />() );
static_assert( !ust::is_same_type</ u32, i32 />() );
static_assert( !ust::is_same_type</ u32, u64 />() );

static_assert( !ust::is_same_type</ bool, u8 />() );
static_assert( !ust::is_same_type</ char8, u8 />() );
static_assert( !ust::is_same_type</ char8, char16 />() );

static_assert( ust::is_same_type</ EmptyStruct, EmptyStructAlias0 />() );
static_assert( ust::is_same_type</ EmptyStruct, EmptyStructAlias1 />() );
static_assert( ust::is_same_type</ EmptyStructAlias0, EmptyStructAlias1 />() );

static_assert( ust::is_same_type</ size_type, u32 />() || ust::is_same_type</ size_type, u64 />() );

static_assert( !ust::is_same_type</ A, B />() );
static_assert( !ust::is_same_type</ F, G />() );

static_assert( !ust::is_same_type</ SomeEnum_u8, u8 />() );

//
// is_parent_for
//

static_assert( !ust::is_parent_for</ u32, u64 />() );
static_assert( !ust::is_parent_for</ u64, u32 />() );
static_assert( !ust::is_parent_for</ bool, A />() );

static_assert(  ust::is_parent_for</ A, B />() );
static_assert( !ust::is_parent_for</ B, A />() );
static_assert( !ust::is_parent_for</ A, C />() );
static_assert(  ust::is_parent_for</ B, C />() );

static_assert(  ust::is_parent_for</ F, I />() );
static_assert(  ust::is_parent_for</ G, I />() );
static_assert( !ust::is_parent_for</ H, I />() );
static_assert(  ust::is_parent_for</ H, J />() );
static_assert(  ust::is_parent_for</ I, J />() );
static_assert( !ust::is_parent_for</ F, J />() );
static_assert( !ust::is_parent_for</ G, J />() );
static_assert(  ust::is_parent_for</ J, K />() );
static_assert( !ust::is_parent_for</ I, K />() );
static_assert( !ust::is_parent_for</ F, K />() );
static_assert( !ust::is_parent_for</ G, K />() );
static_assert( !ust::is_parent_for</ H, K />() );
static_assert( !ust::is_parent_for</ K, H />() );

//
// is_ancestor_for
//

static_assert( !ust::is_ancestor_for</ u32, u64 />() );
static_assert( !ust::is_ancestor_for</ u64, u32 />() );
static_assert( !ust::is_ancestor_for</ bool, A />() );

static_assert(  ust::is_ancestor_for</ A, B />() );
static_assert( !ust::is_ancestor_for</ B, A />() );
static_assert(  ust::is_ancestor_for</ A, C />() );
static_assert(  ust::is_ancestor_for</ B, C />() );

static_assert(  ust::is_ancestor_for</ F, I />() );
static_assert(  ust::is_ancestor_for</ G, I />() );
static_assert( !ust::is_ancestor_for</ H, I />() );
static_assert(  ust::is_ancestor_for</ H, J />() );
static_assert(  ust::is_ancestor_for</ I, J />() );
static_assert(  ust::is_ancestor_for</ F, J />() );
static_assert(  ust::is_ancestor_for</ G, J />() );
static_assert(  ust::is_ancestor_for</ J, K />() );
static_assert(  ust::is_ancestor_for</ I, K />() );
static_assert(  ust::is_ancestor_for</ F, K />() );
static_assert(  ust::is_ancestor_for</ G, K />() );
static_assert(  ust::is_ancestor_for</ H, K />() );
static_assert( !ust::is_ancestor_for</ K, H />() );

//
// Have field
//

static_assert( !ust::class_have_field( typeinfo</ EmptyStruct />.fields_list, "some_field" ) );
static_assert(  ust::class_have_field( typeinfo</ NonEmptyStruct />.fields_list, "x" )  );
static_assert(  ust::class_have_field( typeinfo</ NonEmptyStruct />.fields_list, "y" ) );
static_assert( !ust::class_have_field( typeinfo</ NonEmptyStruct />.fields_list, "z" ) );

static_assert( !ust::is_class_typeinfo_type</ i32 />() );
static_assert( !ust::is_class_typeinfo_type</ typeof( typeinfo</i32/> ) />() );
static_assert( !ust::is_class_typeinfo_type</ EmptyStruct />() );
static_assert( ust::is_class_typeinfo_type</ typeof( typeinfo</EmptyStruct/> ) />() );

static_assert( !ust::is_array_typeinfo_type</ i32 />() );
static_assert( !ust::is_array_typeinfo_type</ typeof( typeinfo</i32/> ) />() );
static_assert( !ust::is_array_typeinfo_type</ EmptyStruct />() );
static_assert( ust::is_array_typeinfo_type</ typeof( typeinfo</ [ i32, 2 ] /> ) />() );
static_assert( ust::is_array_typeinfo_type</ typeof( typeinfo</ [ A, 2 ] /> ) />() );

//
// HaveMethod
//

static_assert( !ust::class_have_method</ LargeClassWithMethods, fn() />( "Foo" ) );
static_assert( !ust::class_have_method</ LargeClassWithMethods, fn( i32 x ) />( "Bar" ) );
static_assert(  ust::class_have_method</ LargeClassWithMethods, fn( LargeClassWithMethods &mut c ) />( "Bar" ) );
static_assert(  ust::class_have_method</ LargeClassWithMethods, fn() />( "EmptyStatic" ) );
static_assert( !ust::class_have_method</ LargeClassWithMethods, fn( i32 x ) />( "EmptyStatic" ) );
static_assert( !ust::class_have_method</ LargeClassWithMethods, fn() unsafe />( "EmptyStatic" ) );
static_assert(  ust::class_have_method</ LargeClassWithMethods, fn( LargeClassWithMethods &imut c ) unsafe />( "SomeUnsafe" ) );
static_assert( !ust::class_have_method</ LargeClassWithMethods, fn( LargeClassWithMethods &imut c ) />( "SomeUnsafe" ) );
static_assert(  ust::class_have_method</ LargeClassWithMethods, fn( LargeClassWithMethods &mut c ) />( "destructor" ) );


fn nomangle main() : i32
{
	return 0;
}
