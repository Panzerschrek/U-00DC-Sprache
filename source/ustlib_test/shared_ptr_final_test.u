//##success_test
import "../ustlib/shared/shared_ptr_final.u"
import "../ustlib/shared/shared_ptr_final_nullable.u"
import "../ustlib/type_traits.u"

type IntPtr= ust::shared_ptr_final</i32/>;
type IntPtrNullable= ust::shared_ptr_final_nullable</i32/>;

static_assert( ust::have_shared_state</IntPtr/>() );
static_assert( ust::have_shared_state</IntPtrNullable/>() );

fn nomangle main() : i32
{
	{ // Can directly get reference to content of shared_ptr_final
		var IntPtr ptr(52);
		halt if( ptr.empty() );
		halt if( ptr.get_ref() != 52 );
	}
	{ // Value is shared
		var IntPtr ptr0(14);
		var IntPtr ptr1(ptr0);
		halt if( ptr1.get_ref() != 14 );
		halt if( ust::ref_to_int(ptr0.get_ref()) != ust::ref_to_int(ptr1.get_ref()) );
	}
	{ //Can convert non-nullable to nullable
		var IntPtr ptr0(58);
		var IntPtrNullable ptr1(ptr0);
		halt if( ptr1.get_ref() != 58 );
		halt if( ust::ref_to_int(ptr0.get_ref()) != ust::ref_to_int(ptr1.get_ref()) );
	}
	{ //Can convert nullable to non-nullable
		var IntPtrNullable ptr0(92);
		var IntPtr ptr1= ust::to_non_nullable(ptr0);
		halt if( ptr1.get_ref() != 92 );
		halt if( ust::ref_to_int(ptr0.get_ref()) != ust::ref_to_int(ptr1.get_ref()) );
	}
	{ // Can reset ptr with value.
		var IntPtr mut ptr0(74);
		var IntPtr ptr1= ptr0;
		ptr0.reset( 85 );

		halt if( ptr0.get_ref() != 85 );
		halt if( ptr1.get_ref() != 74 );
		halt if( ust::ref_to_int(ptr0.get_ref()) == ust::ref_to_int(ptr1.get_ref()) );
	}
	{ // Can create empty nullable ptr.
		var IntPtrNullable ptr;
		halt if( !ptr.empty() );
	}
	{ // Can reset nullable ptr.
		var IntPtrNullable mut ptr(99);
		halt if( ptr.empty() );
		ptr.reset();
		halt if( !ptr.empty() );
	}

	return 0;
}
