//##fail_test
import "../ustlib/optional.u"

struct RI
{
	i32&imut r;
	fn constructor( this'a', i32&'b imut in_r ) ' a <- b ' ( r= in_r ) {}
}

struct RM
{
	i32&mut r;
	fn constructor( this'a', i32&'b mut in_r ) ' a <- b ' ( r= in_r ) {}
}

class C{}

fn nomangle main() : i32
{
	{ // constructor does reference-pollution.
		var i32 mut x= 0;
		var ust::optional</RM/> mut opt( RM(x) );

		var i32& y= x; //##expect_error ReferenceProtectionError
	}
	{ // "reset" does reference-pollution.
		var i32 mut x= 0;
		var ust::optional</RM/> mut opt;

		opt.reset( RM(x) );
		++x; //##expect_error ReferenceProtectionError
	}
	{ // "reset" does reference-pollution.
		var i32 mut x= 0;
		var ust::optional</RI/> mut opt;

		opt.reset( RI(x) );
		++x; //##expect_error ReferenceProtectionError
	}
	{ // optional saves mutability.
		var ust::optional</ i32 /> imut opt(0);
		opt.try_deref()= 0; //##expect_error ExpectedReferenceValue
	}
	{ // as_ref creates value linked with original optional
		var ust::optional</ i32 /> mut opt(12);
		auto ref= opt.as_ref();

		// Can not modify original optional because reference to it exists
		opt.try_deref(); //##expect_error ReferenceProtectionError
	}
	{ // try_take requires mutable optional
		var ust::optional</ i32 /> opt(14);

		opt.try_take(); //##expect_error CouldNotSelectOverloadedFunction
	}
	{ // == for non-equality-comarable type.
		var C c;
		var ust::optional</C/> c_opt(c), empty_opt;

		c_opt == empty_opt; //##expect_error OperationNotSupportedForThisType
		empty_opt != c_opt; //##expect_error OperationNotSupportedForThisType

		c == c_opt; //##expect_error NoMatchBinaryOperatorForGivenTypes
		c != empty_opt; //##expect_error NoMatchBinaryOperatorForGivenTypes

		c_opt == c; //##expect_error NoMatchBinaryOperatorForGivenTypes
		empty_opt != c; //##expect_error NoMatchBinaryOperatorForGivenTypes
	}

	return 0;
}
