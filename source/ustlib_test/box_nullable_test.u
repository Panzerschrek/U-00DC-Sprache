//##success_test
import "../ustlib/box.u"
import "../ustlib/box_nullable.u"

struct S
{
	i32 &mut x;
	fn constructor( mut this'a', i32 &'b mut in_x ) ' a <- mut b '
	( x= in_x ){}

	fn destructor(){ ++x; }
}

struct BigStruct
{
	[ i32, 1024 ] one_k_ints;
}

class A polymorph{}
class B : A{}

fn U_Main() : i32
{
	// Box have pointer size.
	static_assert( typeinfo</ ust::box_nullable</ BigStruct /> />.size_of == typeinfo</S/>.size_of );
	static_assert( typeinfo</ ust::box_nullable</ BigStruct /> />.size_of == typeinfo</ ust::raw_ptr_mut</i32/> />.size_of );
	static_assert( typeinfo</ ust::box_nullable</ BigStruct /> />.size_of == typeinfo</ ust::box_nullable</u8/> />.size_of );
	static_assert( typeinfo</ ust::box_nullable</i32/> />.size_of == typeinfo</ ust::box</i32/> />.size_of );

	{ // nullable box is default-constructible
		var ust::box_nullable</f32/> box;
		halt if( !box.empty() );
	}
	{ // box constructs with value.
		var ust::box_nullable</ i32 /> box(42);
		halt if( box.get_ref() != 42 );
	}
	{ // box calls destructor.
		var i32 mut x= 0;
		{
			var ust::box_nullable</ S /> box( S(x) );
		}
		halt if( x != 1 );
	}
	{ // can change value.
		var ust::box_nullable</ i32 /> mut box(0);
		box.get_ref()= 666;
		halt if( box.get_ref() != 666 );
	}
	{ // can reset.
		var ust::box_nullable</ i32 /> mut box(0);
		halt if( box.empty() );
		box.reset();
		halt if( !box.empty() );
	}
	{ // can reset with value.
		var ust::box_nullable</ i32 /> mut box;
		halt if( !box.empty() );
		box.reset( 66 );
		halt if( box.empty() );
		halt if( box.get_ref() != 66 );
	}
	{ // can construct from non-nullable box
		var ust::box</ i32 /> mut b(42);
		var ust::box_nullable</ i32 /> b_n( move(b) );
		halt if( b_n.get_ref() != 42 );
	}
	{ // can construct from non-nullable box of other type
		var ust::box</ B /> mut b_box(B());
		var ust::box_nullable</ A /> a_box( move(b_box) );
	}
	{ // can construct from nullable box of other type
		var ust::box_nullable</ B /> mut b_box;
		var ust::box_nullable</ A /> a_box( move(b_box) );
	}
	{ // can be implicitly constructed from nullable box of other type
		var ust::box_nullable</ B /> mut a_box, mut b_box;
		a_box= move(b_box);
	}

	return 0;
}
