//##success_test
import "../ustlib/assert.u"
import "../ustlib/scoped_array.u"

struct DefaultConstructible
{
	f32 x= -8.5f;
	u32 y= 5555u;
}

// This container is lightweight - contains only pointer and size.
static_assert(
	typeinfo</ ust::array_over_external_memory</i32/> />.size_of ==
	2s * typeinfo</size_type/>.size_of );

fn nomangle main() : i32
{
	// Filler constructor.
	{
		auto arr= unsafe( ust::array_over_external_memory</i32/>( alloca</i32/>(8s), 8s, 33 ) );
		assert( arr.size() == 8s );
		assert( !arr.empty() );
		foreach( x : arr )
		{
			assert( x == 33 );
		}
	}

	// Filler constructor for zero elements.
	{
		auto arr= unsafe( ust::array_over_external_memory</i32/>( alloca</i32/>(0s), 0s, 33 ) );
		assert( arr.size() == 0s );
	}

	// Default constructor.
	{
		auto arr= unsafe( ust::array_over_external_memory</DefaultConstructible/>( alloca</DefaultConstructible/>(3s), 3s ) );
		assert( arr.size() == 3s );
		assert( !arr.empty() );
		foreach( &s : arr )
		{
			assert( s.x == -8.5f );
			assert( s.y == 5555u );
		}
	}

	// Default constructor with zero elements.
	{
		auto arr= unsafe( ust::array_over_external_memory</DefaultConstructible/>( alloca</DefaultConstructible/>(0s), 0s ) );
		assert( arr.size() == 0s );
		assert( arr.empty() );
	}

	return 0;
}
