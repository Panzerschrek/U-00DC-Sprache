//##success_test
import "../ustlib/string.u"
import "../ustlib/unordered_map.u"

struct OneBitHashHasher
{
	fn hash( OneBitHash& s ) : size_type { return size_type( s.x & 1 ); }
}

struct OneBitHash
{
	type hasher= OneBitHashHasher;

	i32 x;
	fn constructor( i32 in_x ) ( x= in_x ) {}

	op==( OneBitHash& a, OneBitHash& b ) : bool { return a.x == b.x; }
}

fn U_Main() : i32
{
	{
		var ust::unordered_map</ i32, i32 /> mut m;
		halt if( ! m.empty() );

		m.insert( 55, -7 );
		halt if( m.size() != size_type(1) );

		{
			auto find_result= m.find( 66 );
			halt if( !find_result.empty() );
		}
		{
			auto find_result= m.find( 55 );
			halt if( find_result.empty() );
			halt if( find_result.get_ref() != -7 );
		}
		m.clear();
		halt if( ! m.empty() );
		halt if( !m.find( 55 ).empty() );
	}
	{
		var ust::unordered_map</ i32, ust::string8 /> mut m;

		m.insert(   58, "foo" );
		m.insert(    1, "wtf" );
		m.insert(   45, "45" );
		m.insert( 1256, "ArT" );
		m.insert( 1997, "InEx" );

		halt if( m.find(   58 ).empty() ); halt if( m[  58] != "foo" );
		halt if( m.find(    1 ).empty() ); halt if( m[   1] != "wtf" );
		halt if( m.find(   45 ).empty() ); halt if( m[ 45 ] != "45" );
		halt if( m.find( 1256 ).empty() ); halt if( m[1256] != "ArT" );
		halt if( m.find( 1997 ).empty() ); halt if( m[1997] != "InEx" );

		m.erase(    1 ); halt if( !m.find(    1 ).empty() );
		m.erase(   45 ); halt if( !m.find(   45 ).empty() );
		m.erase( 1997 ); halt if( !m.find( 1997 ).empty() );
		m.erase( 1256 ); halt if( !m.find( 1256 ).empty() );
		m.erase(   58 ); halt if( !m.find(   58 ).empty() );
	}
	{ // Test for hash collisions. Key type 'OneBitHash' have only 1 bit for hash.
		var ust::unordered_map</ OneBitHash, i32 /> mut m;

		var i32 mut i(0);
		while( i < 256 )
		{
			m.insert( OneBitHash(i), i * i );
			++i;
		}
		i= 0;
		while( i < 256 )
		{
			auto ref= m.find( OneBitHash(i) );
			halt if( ref.empty() );
			halt if( ref.get_ref() != i * i );
			++i;
		}

		m.erase( OneBitHash(66) );
		halt if( !m.find( OneBitHash(66) ).empty() );
		halt if(  m.find( OneBitHash(65) ).empty() );
		halt if(  m.find( OneBitHash(67) ).empty() );

		m.erase( OneBitHash(101) );
		halt if( !m.find( OneBitHash(101) ).empty() );
		halt if(  m.find( OneBitHash(100) ).empty() );
		halt if(  m.find( OneBitHash(102) ).empty() );
	}
	{ // Can modify map value.
		var ust::unordered_map</ i32, ust::string8 /> mut m;
		m.insert( 17, "abc" );
		halt if( m.find(17).get_ref() != "abc" );

		m[17]+= "DEF";
		halt if( m.find(17).get_ref() != "abcDEF" );
		halt if( m[17] != "abcDEF" );

		m.find(17).get_ref()+= "ghi";
		halt if( m.find(17).get_ref() != "abcDEFghi" );
		halt if( m[17] != "abcDEFghi" );
	}
	{ // Iteration

		var ust::unordered_map</ i32, ust::string8 /> mut m;
		m.insert( 11, "A" );
		m.insert( 22, "B" );
		m.insert( 33, "C" );

		var size_type mut iterations(0);
		foreach( mut e : m )
		{
			auto val= e.value();
			e.value()= val + val;
			++iterations;
		}
		halt if( iterations != m.size() );
		halt if( m[11] != "AA" );
		halt if( m[22] != "BB" );
		halt if( m[33] != "CC" );
	}
	{ // Iteration with one-bit hash.

		var ust::unordered_map</ OneBitHash, ust::string8 /> mut m;
		m.insert( OneBitHash(0), "A" );
		m.insert( OneBitHash(1), "B" );
		m.insert( OneBitHash(2), "C" );
		m.insert( OneBitHash(3), "D" );
		m.insert( OneBitHash(4), "E" );

		var size_type mut iterations(0);
		foreach( mut e : m )
		{
			auto val= e.value();
			e.value()= val + val;
			++iterations;
		}
		halt if( iterations != m.size() );
		halt if( m[OneBitHash(0)] != "AA" );
		halt if( m[OneBitHash(1)] != "BB" );
		halt if( m[OneBitHash(2)] != "CC" );
		halt if( m[OneBitHash(3)] != "DD" );
		halt if( m[OneBitHash(4)] != "EE" );
	}
	{ // "insert" may replace value.
		var ust::unordered_map</ ust::string8, i32 /> mut m;
		m.insert( "a", 22 );
		halt if( m["a"] != 22 );

		m.insert( "a", 55 );
		halt if( m["a"] != 55 );

		m.erase( "a" );
		halt if( !m.find("a").empty() );

		m.insert( "a", 666 );
		halt if( m["a"] != 666 );
	}
	{ // obtain value as "erase" result
		var ust::unordered_map</ i32, i32 /> mut m;
		m.insert( 66, 88888 );
		halt if( m.erase( 66 ) != 88888 );
	}
	{ // "drop" method
		var ust::unordered_map</ i32, i32 /> mut m;
		m.insert( 10, 1024 );
		halt if( m.empty() );

		m.drop(10);
		halt if( !m.empty() );

		m.insert( 5, 32 );
		halt if( m.size() != size_type(1) );
	}

	return 0;
}
