//##success_test
import "../ustlib/optional.u"

struct U32Vec16
{
	[ u32, 16 ] arr;
}

struct U8Vec99
{
	[ u8, 99 ] arr;
}

class Noncopyable{}

struct R // Have destructor with side-effects.
{
	i32&mut r;
	fn constructor( this'a', i32&'b mut in_r ) ' a <- b ' ( r= in_r ) {}
	fn destructor()
	{
		++r;
	}
}

fn nomangle main() : i32
{
	// Optional saves alignment.
	static_assert( typeinfo</ ust::optional</ i8/> />.align_of >= typeinfo</ i8/>.align_of );
	static_assert( typeinfo</ ust::optional</i16/> />.align_of >= typeinfo</i16/>.align_of );
	static_assert( typeinfo</ ust::optional</i32/> />.align_of >= typeinfo</i32/>.align_of );
	static_assert( typeinfo</ ust::optional</i64/> />.align_of >= typeinfo</i64/>.align_of );
	static_assert( typeinfo</ ust::optional</ u8/> />.align_of >= typeinfo</ u8/>.align_of );
	static_assert( typeinfo</ ust::optional</u16/> />.align_of >= typeinfo</u16/>.align_of );
	static_assert( typeinfo</ ust::optional</u32/> />.align_of >= typeinfo</u32/>.align_of );
	static_assert( typeinfo</ ust::optional</u64/> />.align_of >= typeinfo</u64/>.align_of );
	static_assert( typeinfo</ ust::optional</f32/> />.align_of >= typeinfo</f32/>.align_of );
	static_assert( typeinfo</ ust::optional</f64/> />.align_of >= typeinfo</f64/>.align_of );
	
	// Optional required additional size, but no more, then type alignment.
	static_assert( typeinfo</ ust::optional</u8/> />.size_of == 2s ); // bool + u8
	static_assert( typeinfo</ ust::optional</u32/> />.size_of <= 2s * typeinfo</u32/>.size_of );
	static_assert( typeinfo</ ust::optional</ U32Vec16 /> />.size_of <= typeinfo</ U32Vec16 />.size_of + typeinfo</u32/>.align_of );
	static_assert( typeinfo</ ust::optional</ U8Vec99 /> />.size_of <= typeinfo</ U8Vec99 />.size_of + typeinfo</u8/>.align_of );
	
	{ // Default constructor constructrs empty optional.
		var ust::optional</u32/> opt;
		halt if( !opt.empty() );
	}
	{ // Optional, constructed via "null_optional".
		var ust::optional</u32/> opt= ust::null_optional;
		halt if( !opt.empty() );
	}
	{ // optional can be constructed from value.
		var ust::optional</i32/> opt( 524 );
		halt if( opt.empty() );
		halt if( opt.try_deref() != 524 );
	}
	{ // optional is copyable (if contained type is copyable)
		var ust::optional</f32/> pi( 3.14f );
		var ust::optional</f32/> pi_copy( 3.14f );
		halt if( pi_copy.empty() );
		halt if( pi_copy.try_deref() != 3.14f );
	}
	// Optional is noncopyable for noncopyable types.
	static_assert( !typeinfo</ ust::optional</Noncopyable/> />.is_copy_constructible );
	static_assert( !typeinfo</ ust::optional</Noncopyable/> />.is_copy_assignable );
	{ // Can assign optional to optional.
		var ust::optional</i32/> mut opt0, opt1(8884);
		opt0= opt1;
		halt if( opt0.empty() );
		halt if( opt0.try_deref() != 8884 );
	}
	{ // Can assign value to optional.
		var ust::optional</i32/> mut opt0;
		opt0= -95477;
		halt if( opt0.empty() );
		halt if( opt0.try_deref() != -95477 );
	}
	{ // Can assign value to optional, even if type is noncopyable.
		var ust::optional</Noncopyable/> mut opt;
		opt= Noncopyable();
	}
	{ // Can assign value to non-empty optional.
		var ust::optional</i32/> mut opt0( 2221 );
		opt0= 1112;
		halt if( opt0.empty() );
		halt if( opt0.try_deref() != 1112 );
	}
	{ // Can reset optional.
		var ust::optional</f64/> mut e( 2.718281828 );
		halt if( e.empty() );
		e.reset();
		halt if( !e.empty() );
	}
	{ // Can reset optional with other value.
		var ust::optional</u32/> mut opt( 1917u );
		halt if( opt.empty() );
		halt if( opt.try_deref() != 1917u );
		opt.reset( 1991u );
		halt if( opt.empty() );
		halt if( opt.try_deref() != 1991u );
	}
	{ // Asigning "null_optional" resets optional value.
		var ust::optional</f32/> mut e( 2.5f );
		halt if( e.empty() );
		e= ust::null_optional;
		halt if( !e.empty() );
	}
	{ // Destructor calls destructor of stored value.
		var i32 mut x= 0;
		{
			var ust::optional</R/> mut opt( R(x) );
		} // call optional::destructor here
		halt if( x != 1 );
	}
	{ // Destructor calls in assignment of empty optional.
		var i32 mut x= 0;
		var ust::optional</R/> mut opt, opt_empty;

		unsafe // Use unsafe, because mutable reference to "x" after "reset(val)" linked with "opt" and we can not access "x".
		{
			var i32& x_ref_unsafe= $>( $<(x) );
			opt.reset( R(x) );
			opt= opt_empty;
			halt if( x_ref_unsafe != 1 );
		}
	}
	{ // "reset" calls destructor.
		var i32 mut x= 0;
		var ust::optional</R/> mut opt;

		unsafe // Use unsafe, because mutable reference to "x" after "reset(val)" linked with "opt" and we can not access "x".
		{
			var i32& x_ref_unsafe= $>( $<(x) );
			opt.reset( R(x) );
			opt.reset();
			halt if( x_ref_unsafe != 1 );
		}
	}
	{ // Can modify stored value.
		var ust::optional</i32/> mut opt(0);
		opt.try_deref()= 666;
		halt if( opt.try_deref() != 666 );
	}
	{ // try_take
		var ust::optional</i32/> mut opt(77);
		auto taken_value= opt.try_take();
		halt if( taken_value != 77 );
		halt if( !opt.empty() );
	}
	{ // as_ref for imut optional
		var ust::optional</i32/> empty_opt;
		halt if( !empty_opt.as_ref().empty() );

		var ust::optional</i32/> non_empty_opt( 42 );
		halt if( non_empty_opt.as_ref().try_deref() != 42 );
	}
	{ // as_ref for mut optional
		var ust::optional</i32/> mut opt;
		halt if( !opt.as_ref().empty() );

		opt.reset( 666 );
		halt if( opt.as_ref().empty() );
		opt.as_ref().try_deref()= 999;

		halt if( opt.try_deref() != 999 );
	}
	{
		static_assert( typeinfo</ ust::optional</i32/> />.is_equality_comparable );
		var i32 one= 1, one_copy= 1, two= 2, three= 3;
		var ust::optional</i32/> one_opt(1), one_copy_opt(1), two_opt(2), three_opt(3), empty_opt, empty_copy_opt;

		// optional == optional
		halt if( one_opt != one_copy_opt );
		halt if( !( one_copy_opt == one_opt ) );
		halt if( one_opt == two_opt );
		halt if( three_opt == one_opt );
		halt if( empty_opt != empty_opt );
		halt if( empty_opt != empty_copy_opt );
		halt if( !( empty_copy_opt == empty_opt ) );

		// optional == value
		halt if( one_opt != one );
		halt if( one_copy_opt != one_copy );
		halt if( one_opt != one_copy );
		halt if( one_copy_opt != one );
		halt if( two_opt != two );
		halt if( three_opt != three );
		halt if( two_opt == three );
		halt if( empty_opt == one );
		halt if( empty_copy_opt == two );

		// value == optional
		halt if( one != one_opt );
		halt if( one_copy != one_copy_opt );
		halt if( one_copy != one_opt );
		halt if( one != one_copy_opt );
		halt if( two != two_opt );
		halt if( three != three_opt );
		halt if( three == two_opt );
		halt if( one == empty_opt );
		halt if( two == empty_copy_opt );

		// optional == null_optional
		halt if( empty_opt != ust::null_optional );
		halt if( one_opt == ust::null_optional );

		// null_optional == optional
		halt if( ust::null_optional != empty_opt );
		halt if( ust::null_optional == one_opt );
	}

	return 0;
}
