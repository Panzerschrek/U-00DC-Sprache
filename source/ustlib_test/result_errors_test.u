//##fail_test
import "../ustlib/result.u"


enum SomeErrorEnum{ NotOk, CompleteDisaster }
struct SomeErrorStruct{}

type IntRes= ust::result</ i32, SomeErrorEnum />;

fn RetErr( SomeErrorEnum e ) : IntRes
{
	return e; // Should implicitly convert eror type to result.
}

fn ResultUnwrapRetTest() : ust::result</f32, SomeErrorEnum />
{
	result_unwrap_or_return( r : RetErr( SomeErrorEnum::NotOk ) );
	// Variable declared as immutable, but is mutated.
	++r; //##expect_error ExpectedReferenceValue
	return f32(r);
}

struct NonComparableStruct
{
	op==(NonComparableStruct& l, NonComparableStruct& r) : bool = delete;
}

fn nomangle main() : i32
{
	{
		// Result type is not copyable.
		var IntRes res( 55 );
		auto res_copy= res; //##expect_error CopyConstructValueOfNoncopyableType
	}
	{
		// Result type is not copyable.
		var IntRes res( SomeErrorEnum::NotOk );
		var IntRes res_copy= res; //##expect_error CopyConstructValueOfNoncopyableType
	}
	{
		// result_try_take accepts value, but immutable reference is given. And value can't be copied from this reference.
		var IntRes res( 6666666 );
		ust::result_try_take( res ); //##expect_error CopyConstructValueOfNoncopyableType
	}
	{
		// result_try_take_error accepts value, but immutable reference is given. And value can't be copied from this reference.
		var IntRes res( SomeErrorEnum::NotOk );
		ust::result_try_take_error( res ); //##expect_error CopyConstructValueOfNoncopyableType
	}
	{
		// Trying to modify result contents, using immutable class instance.
		var IntRes res( 55 );
		++res.try_deref(); //##expect_error ExpectedReferenceValue
	}
	{
		// Trying to modify result contents, using immutable class instance.
		var IntRes res( SomeErrorEnum::NotOk );
		res.try_deref_error()= SomeErrorEnum::CompleteDisaster; //##expect_error ExpectedReferenceValue
	}
	{
		// Can't convert error type to result of this function (i32).
		result_unwrap_or_return( r : IntRes( 123 ) ); //##expect_error MacroExpansionContext
	}
	{
		result_match( IntRes( 789 ) ) //##expect_error MacroExpansionContext
		{
			// Modifying immutable value.
			Ok(r) -> { ++r; },
			Err(e) -> {},
		}
	}
	{
		// Can't compare results, if at least one of its types is incomparable.
		var ust::result</NonComparableStruct, SomeErrorEnum /> r0( NonComparableStruct() ), r1( SomeErrorEnumLLCompleteDiaster );
		auto eq = r0 == r1; //##expect_error OperationNotSupportedForThisType
	}

	return 0;
}
