//##fail_test
import "../ustlib/box.u"

struct DefaultConstructible{}

struct A{}
struct B{}

class C : polymorph {}
class D {}

struct SWithRef
{
	i32& x;
}

type SWithRefBox= ust::box</SWithRef/>; //##expect_error TemplateContext

struct SShared shared{}
type SSharedBox= ust::box</SShared/>; //##expect_error TemplateContext

fn U_Main() : i32
{
	{ // box have no default constructor.
		var ust::box</ i32 /> b; //##expect_error ExpectedInitializer
	}
	{ // box have no default constructor even for default-constructible types.
		var ust::box</ DefaultConstructible /> b; //##expect_error ExpectedInitializer
	}
	{ // box is not copyable.
		var ust::box</ i32 /> b(0);
		var ust::box</ i32 /> b_copy= b; //##expect_error OperationNotSupportedForThisType
	}
	{ // box saves mutability.
		var ust::box</ i32 /> imut b(0);
		b.get_ref()= 0; //##expect_error ExpectedReferenceValue
	}
	{ // is convertible form other box, only if reference is convertible.
		var ust::box</ B /> mut box_b( B() );
		var ust::box</ A /> box_a( move(box_b) );  //##expect_error CouldNotSelectOverloadedFunction
	}
	{ // is convertible form other box, only if reference is convertible.
		var ust::box</ C /> mut box_c( C() );
		var ust::box</ D /> box_d( move(box_c) );  //##expect_error CouldNotSelectOverloadedFunction
	}

	return 0;
}
