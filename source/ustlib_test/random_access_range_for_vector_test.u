//##success_test
import "../ustlib/vector.u"

type VecType= ust::vector</i32/>;


fn nomangle main() : i32
{
	{
		var VecType mut vec;
		vec.push_back( 32 );
		vec.push_back( 37 );
		vec.push_back( 99 );

		auto mut sum= 0;
		foreach( x : vec ) { sum+= x; }
		halt if( sum != 32 + 37 + 99 );
	}
	{
		var VecType mut vec;
		var size_type mut iterations(0);
		foreach( x : vec ){ ust::ignore_unused(x); ++iterations; }
		halt if( iterations > 0s );
	}
	{
		var VecType mut vec;
		vec.push_back( 66 );
		foreach( &mut x : vec ){ x*= 2; }
		halt if( vec[0s] != 132 );
	}
	{
		var VecType mut vec;
		vec.push_back( 17 );
		vec.push_back( 21 );
		vec.push_back( 1 );
		vec.push_back( 55 );
		var i32 mut sum= 0;
		foreach( &x : vec )
		{
			sum+= x + cast_imut(vec).front();
		}
		halt if( sum != 17 * 4 + 17 + 21 + 1 + 55 );
	}
	{
		var VecType mut vec;
		vec.push_back( 55 );
		vec.push_back( 66 );
		vec.push_back( 77 );
		halt if( vec.range().size() != 3s );
		halt if( vec.range().empty() );
	}
	{
		var VecType vec;
		halt if( vec.range().size() != 0s );
		halt if( !vec.range().empty() );
	}
	{
		var VecType mut vec;
		vec.push_back( 14 );
		vec.push_back( 15 );
		vec.push_back( 16 );
		auto mut range= cast_imut(vec).range();
		halt if( range.size() != 3s );
		unsafe
		{
			range.drop_front();
			halt if( range.size() != 2s );
			halt if( vec.size() != 3s );
			range.drop_back();
			halt if( range.size() != 1s );
			halt if( vec.size() != 3s );
		}
	}
	{
		var VecType mut vec;
		vec.push_back( 5 );
		vec.push_back( 3 );
		vec.push_back( 7 );
		auto range= vec.range();
		auto mut res= 5 * 3 * 7 * 65;
		foreach( x : range ) { res/= x; }
		halt if( res != 65 );
	}
	{
		var VecType mut vec;
		vec.push_back( 22 );
		vec.push_back( 55 );
		vec.push_back( 11 );
		vec.push_back( 33 );
		auto range= vec.range();
		auto mut res= 1;
		foreach( x : range.subrange( 1s, 3s ) ) { res*= x; }
		halt if( res != 55 * 11 );
	}
	{
		var VecType mut vec;
		vec.push_back( 31 );
		vec.push_back( -7 );
		vec.push_back( -8 );
		vec.push_back( 22 );
		vec.push_back(  7 );
		vec.push_back(  6 );
		vec.push_back( -4 );
		var i32 mut res= 0, mut iterations= 0;
		foreach( x : vec )
		{
			if( x < 0 ) { continue; }
			res+= x;
			++iterations;
		}
		halt if( res != 31 + 22 + 7 + 6 );
		halt if( iterations != 4 );
	}

	return 0;
}
