//##fail_test
import "../ustlib/variant.u"

type NonTupleParamVariant= ust::variant</ bool />; //##expect_error TemplateContext
type EmptyTupleVariant= ust::variant</ tup[] />; //##expect_error TemplateContext
type DuplicatedTypeVariant= ust::variant</ tup[ i32, f32, i32 ] />; //##expect_error TemplateContext

struct NC
{
	fn constructor(mut this, NC &imut other)= delete;
}

struct R
{
	i32& R;
}

type VariantWithReferenceInside= ust::variant</ tup[ R ] />; //##expect_error TemplateContext

fn nomangle main() : i32
{
	{ // Try to get wrong type.
		var ust::variant</ tup[ i32, f32 ] /> v(0);
		v.get</bool/>(); //##expect_error CouldNotSelectOverloadedFunction
	}
	{ // Initializer required, because first element of tuple is not default-constructinle.
		var ust::variant</ tup[ i32, f32 ] /> v; //##expect_error ExpectedInitializer
	}
	{ // Variant is noncopyable if one of elements is noncopyable.
		var ust::variant</ tup[ f32, bool, NC ] /> v(false);
		var ust::variant</ tup[ f32, bool, NC ] /> v_copy(v); //##expect_error CouldNotSelectOverloadedFunction
	}
	{ // Can not copy-assign variant if one of elements is noncopyable.
		var ust::variant</ tup[ f32, bool, NC ] /> v(0.0f), mut v_dst(false);
		v_dst= v; //##expect_error OperationNotSupportedForThisType
	}
	{ // Reference returned by "get" method linked to variant.
		var ust::variant</ tup[ i32, f32 ] /> mut v(0);
		var i32 &imut i= v.get</i32/>().get_ref();
		v= 0.25f; //##expect_error ReferenceProtectionError
	}

	return 0;
}
