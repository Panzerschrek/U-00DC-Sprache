//##success_test
import "../ustlib/math.u"

auto constexpr MyNan= ust::nan</f32/>();

template</type T/>
fn DoTest()
{
	halt if( ust::nan</T/>() == ust::nan</T/>() );
	halt if( ust::nan</T/>() == T(0.0) );

	// inf
	halt if( ust:: plus_inf</T/>() != ust:: plus_inf</T/>() );
	halt if( ust::minus_inf</T/>() != ust::minus_inf</T/>() );
	halt if( ust:: plus_inf</T/>() <= T(0.0) );
	halt if( ust::minus_inf</T/>() >= T(0.0) );
	halt if( ust::minus_inf</T/>() >= ust::plus_inf</T/>() );

	// sqrt
	halt if( ust::sqrt( T(0.0) ) != T(0.0) );
	halt if( ust::sqrt( T(-0.0) ) != T(0.0) );
	halt if( ust::sqrt( T(1.0) ) != T(1.0) );
	halt if( ust::sqrt( T(4.0) ) != T(2.0) );
	halt if( ust::sqrt( T(9.0) ) != T(3.0) );
	halt if( ust::sqrt( T(10000.0) ) != T(100.0) );
	halt if( ust::sqrt( T(0.09) ) != T(0.3) );
	halt if( ust::sqrt( T(40.96) ) != T(6.4) );
	halt if( ust::sqrt( ust::nan</T/>() ) == ust::sqrt( ust::nan</T/>() ) ); // result is nan
	halt if( ust::sqrt( ust:: plus_inf</T/>() ) != ust::sqrt( ust:: plus_inf</T/>() ) );
	halt if( ust::sqrt( ust::minus_inf</T/>() ) == ust::sqrt( ust::minus_inf</T/>() ) ); // result is nan
}

fn U_Main() : i32
{
	DoTest</f32/>();
	DoTest</f64/>();

	return 0;
}
