//##fail_test
import "../ustlib/vector.u"

var [ [ [ char8, 2 ], 2 ], 1 ] pollution[ [ "0a", "1_" ] ];

struct RI
{
	i32&imut r;
	fn constructor( this, i32 &imut in_r ) @(pollution) ( r= in_r ) {}
}

struct RM
{
	i32&mut r;
	fn constructor( this, i32 &mut in_r ) @(pollution) ( r= in_r ) {}
}

struct S // Non-default-constructible.
{
	i32 x;
}

class C {} // Class is not copy-constructible by-default.

fn nomangle main() : i32
{
	{ // "push_back" does reference-pollution.
		var i32 mut x= 0;
		var ust::vector</RM/> mut r;

		r.push_back( RM(x) );
		var i32& y= x; //expect_error ReferenceProtectionError
	}
	{ // "push_back" does reference-pollution.
		var i32 mut x= 0;
		var ust::vector</RI/> mut r;

		r.push_back( RI(x) );
		++x; //expect_error ReferenceProtectionError
	}
	{ // "front" returns correct inner reference.
		var i32 mut x= 0;
		var ust::vector</RM/> mut r;

		r.push_back( RM(x) );
		auto &mut second_ref= x; //expect_error ReferenceProtectionError
	}
	{
		// Can not fill vector with default values, because element type is not default-constructible.
		var ust::vector</S/> vec( 64s ); //##expect_error CouldNotSelectOverloadedFunction
	}
	{
		// Can not fill vector with values, because element type is not copy-constructible.
		var C c;
		var ust::vector</S/> vec( 4s, c ); //##expect_error CouldNotSelectOverloadedFunction
	}
	{
		// Can not fill vector with values, because element type is not copy-constructible.
		var C c;
		var ust::vector</S/> vec;
		vec.resize( 4s, c ); //##expect_error CouldNotSelectOverloadedFunction
	}
	{
		// Can not fill vector with values, because element type is not default-constructible.
		var ust::vector</i32/> vec;
		vec.resize( 4s ); //##expect_error CouldNotSelectOverloadedFunction
	}
	{
		// Can not push back multiple values, because element type is not copyable.
		var C c;
		var ust::vector</C/> vec;
		vec.push_back( 10s, c ); //##expect_error CouldNotSelectOverloadedFunction
	}
	{ // Operator == doesn't exist for non-equality-comparable types
		var ust::vector</C/> a, b;
		a == b; //##expect_error OperationNotSupportedForThisType
	}
	{
		var [ i32, 3 ] mut arr0[ 1, 2, 3 ];
		var [ i32, 4 ] mut arr1[ 4, 5, 6, 7 ];

		var [ ust::array_view_mut</ i32 />, 2 ] view_arr[ arr0, arr1 ];

		var ust::array_view_imut</ ust::array_view_mut</ i32 /> /> view_for_view_arr= view_arr;
		halt if( view_for_view_arr.size() != 2s );

		var ust::vector</ ust::array_view_imut</ ust::array_view_mut</ i32 /> /> /> mut v;
		v.push_back( view_for_view_arr );

		var i32& x= v[0s][1s][2s]; // Create a reference pointing to "arr0" and "arr1".
		// Error - this call creates a temporary lock node for second order reference pointing to "arr0" and "arr1".
		v.size(); //expect_error ReferenceProtectionError
	}
	{ // Constructor with multiple elements is disabled for types with mutable references inside.
		var i32 mut x= 0;
		var RM r(x);
		var ust::vector</RM/> v( 3s, r ); //##expect_error CouldNotSelectOverloadedFunction
	}
	{ // "push_back" with multiple elements is disabled for types with mutable references inside.
		var i32 mut x= 0;
		var RM r(x);

		var ust::vector</RM/> mut v;
		v.push_back( 1s, r ); //##expect_error CouldNotSelectOverloadedFunction
	}
	{ // "resize" with multiple elements is disabled for types with mutable references inside.
		var i32 mut x= 0;
		var RM r(x);

		var ust::vector</RM/> mut v;
		v.resize( 10s, r ); //##expect_error CouldNotSelectOverloadedFunction
	}
	return 0;
}
