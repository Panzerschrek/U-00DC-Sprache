//##fail_test
import "../ustlib/thread.u"
import "../ustlib/shared_ptr.u"

struct CallableObject non_sync
{
	op()( this )
	{}
}

struct CallableObjectShared
{
	ust::shared_ptr_nullable_imut</i32/> ptr;
	op()( this )
	{}
}

struct CallableObjectRegular
{
	op()( this )
	{}
}

fn nomangle main() : i32
{
	{ // Create thread with "non_sync"-marked function-object.
		auto thread= ust::make_thread_void( CallableObject() ); //##expect_error TemplateContext
	}
	{ // Create thread with function-object, containing non-thread-safe shared_ptr class inside.
		auto thread= ust::make_thread_void( CallableObjectShared() ); //##expect_error TemplateContext
	}
	{
		// thred should be moved in "join" call.
		auto mut thread= ust::make_thread_void( CallableObjectRegular() );
		thread.join(); //##expect_error CopyConstructValueOfNoncopyableType
	}

	return 0;
}
