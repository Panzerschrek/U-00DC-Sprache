//##success_test
import "../ustlib/random_access_range.u"

type IntRangeMut = ust::random_access_range_mut </i32/>;
type IntRangeImut= ust::random_access_range_imut</i32/>;

fn GetIntRangeSize( IntRangeImut range ) : size_type
{
	return range.size();
}

fn GetCharRangeSize( ust::random_access_range_imut</char8/> char_range ) : size_type
{
	return char_range.size();
}

fn nomangle main() : i32
{
	{ // Random access range is empty by-default.
		var IntRangeImut range;
		halt if( !range.empty() );
	}
	{ // Can construct imut range from imut array.
		var [ i32, 5 ] arr= zero_init;
		var IntRangeImut range(arr);
		halt if( range.size() != size_type(5) );
	}
	{ // Can construct imut range from mut array.
		var [ i32, 5 ] mut arr= zero_init;
		var IntRangeImut range(arr);
		halt if( range.size() != size_type(5) );
	}
	{ // Can implicitly convert array to range.
		var [ i32, 16 ] arr= zero_init;
		auto size= GetIntRangeSize( arr );
		halt if( size != size_type(16) );
	}
	{ // Can implicitly convert mut array to range.
		var [ i32, 16 ] mut arr= zero_init;
		auto size= GetIntRangeSize( arr );
		halt if( size != size_type(16) );
	}
	{ // Can convert mut range to imut range.
		var [ i32, 16 ] mut arr= zero_init;
		var IntRangeMut  range_mut (arr);
		var IntRangeImut range_imut(range_mut);
	}
	{ // Can implicitly convert mut range to imut range.
		var [ i32, 8 ] mut arr= zero_init;
		var IntRangeMut  range_mut (arr);
		auto size= GetIntRangeSize( range_mut );
		halt if( size != size_type(8) );
	}
	halt if( GetCharRangeSize( "wtf?" ) != size_type(4) ); // Can implicitly convert string literal to range
	{ // Can modify array content, using range.
		var [ i32, 5 ] mut arr= zero_init;
		IntRangeMut(arr).back()= 42;
		halt if( arr[4u] != 42 );
	}
	{ // Subrange.
		var [ i32, 5 ] arr= zero_init;
		var IntRangeImut range(arr);
		halt if( range.size() != size_type(5) );
		halt if( range.subrange( size_type(1), size_type(5) ).size() != size_type(4) );
		halt if( range.subrange( size_type(2), size_type(3) ).size() != size_type(1) );
		halt if( range.subrange( size_type(0), size_type(0) ).size() != size_type(0) );
	}
	{ // Can modify array content, using subrange range.
		var [ i32, 4 ] mut arr= zero_init;
		{
			auto range= IntRangeMut(arr).subrange( size_type(1), size_type(3) );
			range.front()= 45;
			range.back()= 66;
		}
		halt if( arr[1u] != 45 );
		halt if( arr[2u] != 66 );
	}
	{
		// "continue" should work properly.
		var [ i32, 7 ] mut arr[ 31, -7, -8, 22, 7, 6, -4 ];
		var i32 mut res= 0, mut iterations= 0;
		var IntRangeImut range(arr);
		foreach( x : range )
		{
			if( x < 0 ) { continue; }
			res+= x;
			++iterations;
		}
		halt if( res != 31 + 22 + 7 + 6 );
		halt if( iterations != 4 );
	}
	{ // swap
		var [ i32, 5 ] mut arr[ 0, 1, 2, 3, 4 ];
		{
			var IntRangeMut range( arr );
			range.swap( 2s, 4s );
		}
		halt if( arr[0] != 0 );
		halt if( arr[1] != 1 );
		halt if( arr[2] != 4 );
		halt if( arr[3] != 3 );
		halt if( arr[4] != 2 );
	}
	{ // swap
		var [ i32, 4 ] mut arr[ 33, 11, 55, 78 ];
		{
			var IntRangeMut range( arr );
			range.swap( 0s, 3s );
		}
		halt if( arr[0] != 78 );
		halt if( arr[1] != 11 );
		halt if( arr[2] != 55 );
		halt if( arr[3] != 33 );
	}
	{ // swap
		var [ i32, 1 ] mut arr[ 654 ];
		{
			var IntRangeMut range( arr );
			range.swap( 0s, 0s );
		}
		halt if( arr[0] != 654 );
	}
	{ // ==
		var [ i32, 3 ] v0[ 11, 22, 33 ];
		var [ i32, 3 ] v1[ 11, 22, 33 ];
		var [ i32, 3 ] v2[ 0 , 22, 33 ];
		var [ i32, 3 ] v3[ 11,  0, 33 ];
		var [ i32, 3 ] v4[ 11, 22,  0 ];
		var [ i32, 2 ] v5[ 11, 22 ];
		var [ i32, 0 ] v6[];

		static_assert( typeinfo</IntRangeImut/>.is_equality_comparable );
		var IntRangeImut r0(v0), r1(v1), r2(v2), r3(v3), r4(v4), r5(v5), r6(v6);

		halt if( r0 != r0 );
		halt if( r1 != r1 );
		halt if( r2 != r2 );
		halt if( r3 != r3 );
		halt if( r4 != r4 );
		halt if( r5 != r5 );
		halt if( r6 != r6 );

		halt if( r0 != r1 );
		halt if( r1 != r0 );

		halt if( r0 == r2 );
		halt if( r0 == r3 );
		halt if( r0 == r4 );
		halt if( r0 == r5 );
		halt if( r0 == r6 );

		// == for array and range must work too.
		halt if( r0 != v0 );
		halt if( r1 != v1 );
		halt if( v0 != r1 );
		halt if( v1 != r0 );

		halt if( v4 == r6 );
		halt if( r5 == v3 );
	}
	return 0;
}
