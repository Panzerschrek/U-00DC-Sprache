//##success_test
import "../ustlib/random_access_range.u"

type IntRangeMut = ust::random_access_range_mut </i32/>;
type IntRangeImut= ust::random_access_range_imut</i32/>;

fn GetIntRangeSize( IntRangeImut range ) : size_type
{
	return range.size();
}

fn GetCharRangeSize( ust::random_access_range_imut</char8/> char_range ) : size_type
{
	return char_range.size();
}

fn U_Main() : i32
{
	{ // Can construct imut range from imut array.
		var [ i32, 5 ] arr= zero_init;
		var IntRangeImut range(arr);
		halt if( range.size() != size_type(5) );
	}
	{ // Can construct imut range from mut array.
		var [ i32, 5 ] mut arr= zero_init;
		var IntRangeImut range(arr);
		halt if( range.size() != size_type(5) );
	}
	{ // Can implicitly convert array to range.
		var [ i32, 16 ] arr= zero_init;
		auto size= GetIntRangeSize( arr );
		halt if( size != size_type(16) );
	}
	{ // Can implicitly convert mut array to range.
		var [ i32, 16 ] mut arr= zero_init;
		auto size= GetIntRangeSize( arr );
		halt if( size != size_type(16) );
	}
	{ // Can convert mut range to imut range.
		var [ i32, 16 ] mut arr= zero_init;
		var IntRangeMut  range_mut (arr);
		var IntRangeImut range_imut(range_mut);
	}
	{ // Can implicitly convert mut range to imut range.
		var [ i32, 8 ] mut arr= zero_init;
		var IntRangeMut  range_mut (arr);
		auto size= GetIntRangeSize( range_mut );
		halt if( size != size_type(8) );
	}
	halt if( GetCharRangeSize( "wtf?" ) != size_type(4) ); // Can implicitly convert string literal to range
	{ // Can modify array content, using range.
		var [ i32, 5 ] mut arr= zero_init;
		IntRangeMut(arr).back()= 42;
		halt if( arr[4u] != 42 );
	}
	{ // Subrange.
		var [ i32, 5 ] arr= zero_init;
		var IntRangeImut range(arr);
		halt if( range.size() != size_type(5) );
		halt if( range.subrange( size_type(1), size_type(5) ).size() != size_type(4) );
		halt if( range.subrange( size_type(2), size_type(3) ).size() != size_type(1) );
		halt if( range.subrange( size_type(0), size_type(0) ).size() != size_type(0) );
	}
	{ // Can modify array content, using subrange range.
		var [ i32, 4 ] mut arr= zero_init;
		{
			auto range= IntRangeMut(arr).subrange( size_type(1), size_type(3) );
			range.front()= 45;
			range.back()= 66;
		}
		halt if( arr[1u] != 45 );
		halt if( arr[2u] != 66 );
	}
	return 0;
}
