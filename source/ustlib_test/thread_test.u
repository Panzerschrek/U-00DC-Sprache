//##success_test
import "../ustlib/thread.u"
import "../ustlib/shared_ptr_mt.u"
import "../ustlib/vector.u"

fn Bar(){}

type IntShared= ust::shared_ptr_mt_mut</i32/>;

struct CallableObject
{
	IntShared x;
	op()( mut this )
	{
		auto mut l= x.lock_mut();
		++l.deref();
	}
}

fn Get42() : i32
{
	return 42;
}

struct Incrementer
{
	IntShared ptr;
	op()( mut this )
	{
		auto mut lock= ptr.lock_mut();
		++lock.deref();
	}
}

fn nomangle main() : i32
{
	{
		// Can create thread for function.
		auto thread= ust::make_thread_void( Bar );
	}
	{
		// Can create thread for callable object.
		var IntShared x(0);
		var i32 mut y= 0;
		var CallableObject mut obj{ .x= x };

		{
			auto thread= ust::make_thread_void( move(obj) );
			// While thread is alive, we can do something.
			++y;
		}
		halt if( x.lock_imut().deref() != 1 );
		halt if( y != 1 );
	}
	{
		// Can create thread for lambda.
		var IntShared x(0);
		var i32 mut y= 0;

		auto mut thread= ust::make_thread_void(
			lambda[=]()
			{
				auto mut l= x.lock_mut();
				l.deref()= 33;
			});

		move(thread).join();

		halt if( x.lock_imut().deref() != 33 );
	}
	{
		// Can get result of thread.
		auto mut thread= ust::make_thread</ i32 />( Get42 );
		var i32 res= move(thread).join();
		halt if( res != 42 );
	}
	{
		// Can create thread for lambda with captured reference.
		var i32 mut y= 55, y_ref= y;

		auto mut thread= ust::make_thread</i32/>(
			lambda[&]() : i32
			{
				return y_ref * y_ref;
			} );

		static_assert( typeinfo</typeof(thread)/>.reference_tag_count == 1s ); // Holds a reference.

		auto res= move(thread).join();

		halt if( res != 55 * 55 );
	}
	{
		// Can create thread for lambda with captured mutable reference.
		var i32 mut y= 0;

		auto mut thread= ust::make_thread_void( lambda[&]() { y= 12345; } );

		static_assert( typeinfo</typeof(thread)/>.reference_tag_count == 1s ); // Holds a reference.

		move(thread).join();

		halt if( y != 12345 );
	}
	{
		// Multiple concurrent threads.
		var IntShared ptr(0);
		var size_type mut i(0);
		var ust::vector</ ust::thread</ Incrementer, void /> /> mut threads;
		while( i < 64s )
		{
			var Incrementer incrementer{ .ptr= ptr };
			threads.push_back( ust::make_thread_void(incrementer) );
			++i;
		}

		while( ptr.lock_imut().deref() < 4 ) {} // Wait a bit.

		threads.clear(); // Make join here.
		halt if( ptr.lock_imut().deref() != 64 );
	}

	return 0;
}
