//##fail_test
import "../ustlib/optional.u"
import "../ustlib/random_access_range.u"

type IntRangeMut = ust::random_access_range_mut </i32/>;
type IntRangeImut= ust::random_access_range_imut</i32/>;

class NonCopyableAlwaysZeroIterator
{
	fn next() : ust::optional</i32/>
	{
		return 0;
	}
}

class NonIteratorClass
{
}

fn nomangle main() : i32
{
	{ // Can't mutate data with iterator over immutable data.
		var [ i32, 4 ] ints[ 44, 33, 22, 11 ];
		auto mut it= IntRangeImut( ints ).iter();
		it.next().try_deref()= 0; //##expect_error ExpectedReferenceValue
	}
	{ // Can't copy iterator if its base is non-copyable.
		auto it= ust::wrap_raw_iterator( NonCopyableAlwaysZeroIterator() );
		auto it_copy= it; //##expect_error CopyConstructValueOfNoncopyableType
	}
	{ // Wrong base iterator class - without "next" method.
		ust::wrap_raw_iterator( NonIteratorClass() ); //##expect_error TemplateContext
	}
	{ // Iterator holds a reference to source sequence.
		var [ i32, 4 ] mut ints[ 44, 33, 22, 11 ];
		auto it= IntRangeImut( ints ).iter();
		// Can't mutate source sequence when iterator exists.
		auto &mut ref= ints[1]; //##expect_error ReferenceProtectionError
	}
	{ // Iterator holds a reference to source sequence.
		var [ i32, 4 ] mut ints[ 44, 33, 22, 11 ];
		auto it= IntRangeMut( ints ).iter();
		// Can't take a reference to source sequence when mutable iterator exists.
		auto& ref= cast_imut(ints); //##expect_error ReferenceProtectionError
	}
	return 0;
}
