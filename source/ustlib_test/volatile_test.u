//##success_test
import "../ustlib/volatile.u"

template</type T/>
fn DoTest()
{
	var T mut x= zero_init;
	ust::volatile_write( x, T(33) );
	ust::volatile_write( x, T(33) );
	ust::volatile_read( x );
	ust::volatile_read( x );
	halt if( ust::volatile_read( x ) != T(33) );
}

template<//> type interer_type_for_byte_type</  byte8/> =   u8;
template<//> type interer_type_for_byte_type</ byte16/> =  u16;
template<//> type interer_type_for_byte_type</ byte32/> =  u32;
template<//> type interer_type_for_byte_type</ byte64/> =  u64;
template<//> type interer_type_for_byte_type</byte128/> = u128;

template</type T/>
fn DoBytesTest()
{
	type IntT= interer_type_for_byte_type</T/>;

	var T mut x= zero_init;
	ust::volatile_write( x, T(IntT(114)) );
	ust::volatile_write( x, T(IntT(114)) );
	ust::volatile_read( x );
	ust::volatile_read( x );
	halt if( ust::volatile_read( x ) != T(IntT(114)) );
}

fn nomangle main() : i32
{
	DoTest</  i8/>();
	DoTest</  u8/>();
	DoTest</ i16/>();
	DoTest</ u16/>();
	DoTest</ i32/>();
	DoTest</ u32/>();
	DoTest</ i64/>();
	DoTest</ u64/>();
	DoTest</i128/>();
	DoTest</u128/>();

	DoBytesTest</  byte8/>();
	DoBytesTest</ byte16/>();
	DoBytesTest</ byte32/>();
	DoBytesTest</ byte64/>();
	DoBytesTest</byte128/>();

	return 0;
}
