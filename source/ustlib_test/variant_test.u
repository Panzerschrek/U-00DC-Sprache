//##success_test
import "../ustlib/variant.u"

class S
{
public:
	// HACK! convert reference to integer because we can not put struct with reference inside into container.
	fn constructor( i32 &mut x )
		(ref_= ust::ref_to_int(x) )
	{}

	fn destructor()
	{
		unsafe{ cast_ref_unsafe</i32/>( cast_mut( ust::int_to_ref(ref_) ) )= 0; }
	}

private:
	size_type ref_;
}

struct DC
{
	i32 x= -1;
	f32 y= 3.14f;
	u64 z(123456);
}

struct IntVec4
{
	[ i32, 4 ] v;
}

// ust::max is not fully constexpr because it returns reference.
fn constexpr ConstexprMax( size_type a, size_type b ) : size_type
{
	if( a > b ){ return a; }
	return b;
}

type IntOrS= ust::variant</ tup[ i32, S ] />;

type VariantU8= ust::variant</ tup[ u8 ] />;
static_assert( typeinfo</ VariantU8 />.size_of == 2s * typeinfo</ u8 />.size_of );
static_assert( typeinfo</ VariantU8 />.align_of == typeinfo</ u8 />.align_of );

type VariantU32= ust::variant</ tup[ u32 ] />;
static_assert( typeinfo</ VariantU32 />.size_of == 2s * typeinfo</ u32 />.size_of );
static_assert( typeinfo</ VariantU32 />.align_of == typeinfo</ u32 />.align_of );

type VariantIntVec4= ust::variant</ tup[ IntVec4 ] />;
static_assert( typeinfo</ VariantIntVec4 />.size_of == typeinfo</ IntVec4 />.size_of + typeinfo</ IntVec4 />.align_of );
static_assert( typeinfo</ VariantIntVec4 />.align_of == typeinfo</ IntVec4 />.align_of );

type VariantDCOrIntVec4= ust::variant</ tup[ DC, IntVec4 ] />;
static_assert( typeinfo</ VariantDCOrIntVec4 />.size_of == ConstexprMax( typeinfo</ DC />.size_of, typeinfo</ IntVec4 />.align_of ) + ConstexprMax( typeinfo</ DC />.align_of,  typeinfo</ IntVec4 />.align_of ) );
static_assert( typeinfo</ VariantDCOrIntVec4 />.align_of == ConstexprMax( typeinfo</ DC />.align_of, typeinfo</ IntVec4 />.align_of ) );

fn nomangle main() : i32
{
	{
		var ust::variant</ tup[ i32, f32 ] />
			vi(4),
			vf( 0.5f );

		halt if(  vi.get</i32/>().empty() );
		halt if( !vi.get</f32/>().empty() );
		halt if(  vi.get</i32/>().get_ref() != 4 );

		halt if( !vf.get</i32/>().empty() );
		halt if(  vf.get</f32/>().empty() );
		halt if(  vf.get</f32/>().get_ref() != 0.5f );
	}
	{ // Can modify contents of variant.
		var ust::variant</ tup[ i32, f32 ] /> mut vi(66), mut vf(7.5f);

		vi.get</i32/>().get_ref() /= 11;
		halt if( vi.get</i32/>().get_ref() != 6 );

		vf.get</f32/>().get_ref() *= 2.0f;
		halt if( vf.get</f32/>().get_ref() != 15.0f );
	}
	{ // Variant calls destructor.
		var i32 mut x= 66;
		{
			var IntOrS s( S(x) );
			halt if( s.get</S/>().empty() );
		}
		halt if( x != 0 );
	}
	{
		var IntOrS i(66);
		halt if( i.get</i32/>().empty() );
		halt if( i.get</i32/>().get_ref() != 66 );
	}
	{ // Destructor called in assignment.

		var i32 mut x= 99;

		var IntOrS mut v( S(x) );
		halt if( v.get</S/>().empty() );
		halt if( x != 99 );

		v= 32;
		halt if( !v.get</S/>().empty() );
		halt if(  v.get</i32/>().empty() );
		halt if(  v.get</i32/>().get_ref() != 32 );
		halt if( x != 0 );
	}
	{ // Destructor called after assignment.

		var i32 mut x= 521;
		{
			var IntOrS mut v(55);
			halt if( v.get</i32/>().empty() );
			halt if( v.get</i32/>().get_ref() != 55 );

			v= S(x);
			halt if( !v.get</i32/>().empty() );
			halt if(  v.get</S/>().empty());
		}
		halt if( x != 0 );
	}
	{ // Variant is default constructible if first element is default constructible.
		var ust::variant</ tup[ DC, S ] /> dc;
		halt if( dc.get</DC/>().empty() );
		halt if( dc.get</DC/>().get_ref().x != -1 );
		halt if( dc.get</DC/>().get_ref().y != 3.14f );
		halt if( dc.get</DC/>().get_ref().z != u64(123456) );
	}
	{ // Copy constructor vor variant.
		var ust::variant</ tup[ i32, f32 ] /> vi(4), vf( 0.5f );
		var ust::variant</ tup[ i32, f32 ] /> vic(vi), vfc(vf);

		halt if(  vic.get</i32/>().empty() );
		halt if( !vic.get</f32/>().empty() );
		halt if(  vic.get</i32/>().get_ref() != 4 );

		halt if( !vfc.get</i32/>().empty() );
		halt if(  vfc.get</f32/>().empty() );
		halt if(  vfc.get</f32/>().get_ref() != 0.5f );
	}
	{ // Copy assignment for variant.
		var ust::variant</ tup[ i32, f32 ] /> mut v0( 33 ), v1(34.0f); // Different index of variant.

		halt if( v0.get</i32/>().empty() );
		halt if( v0.get</i32/>().get_ref() != 33 );
		halt if( v1.get</f32/>().empty() );
		halt if( v1.get</f32/>().get_ref() != 34.0f );

		v0= v1;
		halt if( v0.get</f32/>().empty() );
		halt if( v0.get</f32/>().get_ref() != 34.0f );
	}
	{
		var ust::variant</ tup[ i32, f32 ] /> mut v0( 11 ), v1(12); // Both variants have same index.

		halt if( v0.get</i32/>().empty() );
		halt if( v0.get</i32/>().get_ref() != 11 );
		halt if( v1.get</i32/>().empty() );
		halt if( v1.get</i32/>().get_ref() != 12 );

		v0= v1;
		halt if( v0.get</i32/>().empty() );
		halt if( v0.get</i32/>().get_ref() != 12 );
	}
	return 0;
}
