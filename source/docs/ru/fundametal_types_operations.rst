Фундаментальные типы и операции над ними
========================================

****************
*Логический тип*
****************

Логический тип "bool" может иметь два значения - "true" или "false". Над значениями данного типа существуют следующие операции:

* "&" - Бинарное логическое И.
* "|" - Бинарное логическое ИЛИ.
* "^" - Бинарное логическое исключающее ИЛИ.
* "!" - Унарное логическое НЕ.
* "&&" - Ленивое логическое И.
* "||" - Ленивое логическое ИЛИ.

Типом результата всех операций над типом "bool" тоже является "bool".

***************
*Числовые типы*
***************

В Ü существует ряд числовых типов, делящихся на вещественные и целочисленные. Целочисленные типы в свою очередь деляться на знаковые и беззнаковые.

Вещественные типы:

* f32
* f64

Знаковые целочисленные типы:

* i8
* i16
* i32
* i64
* i128

Беззнаковые целочисленные типы:

* u8
* u16
* u32
* u64
* u128

Числовой суффикс типа означает его размер, в битах.

К значениям числовых типов применимы следующие арифметические операции:

* "+" - Бинарное сложение.
* "-" - Бинарная разность.
* "*" - Бинарное умножение.
* "/" - Бинарное деление.
* "%" - Взятие остатка от деления.
* "-" - Унарный минус. Эквивалентен вычитанию значения из нуля.

Поведение арифметических операций несколько отличается от вида числового типа.
Результат операции для целочисленных типов переполняется, для вещественных - насыщается до бесконечности.

Результатом деления для вещественных чисел является ближайший вещественный результат, а для целых - ближайшее целое.
Для целых чисел не определён результат деления на 0, тогда как для вещественных чисел результат будет равен бесконечности или NaN.

**********************************************
*Побитовые операции над целочисленными типами*
**********************************************

Для целочисленных типов применим ряд побитовых операций:

* "&" - Бинарное побитовое И.
* "|" - Бинарное побитовое ИЛИ.
* "^" - Бинарное побитовое исключающее ИЛИ.
* "~" - Унарная битовая инверсия.


********
*Сдвиги*
********

К значениям целочисленных типов применимы также операторы битового сдвига влево "<<" и вправо ">>".
Первым операндом такого оператора является сдвигаемое число, вторым - количество бит, на которое нужно осуществить сдвиг.

Оператор битового сдвига "<<" сдвигает число влево на указанное количество бит. Старшые разряды теряются, младшие заполняются нулями.

Оператор битового сдвига ">>" сдвигает число вправо на указанное количество бит. Младшие разряды теряются, старшые заполняются либо нулём (для беззнаковых чисел), либо битом знака (для знаковых чисел).

***********
*size_type*
***********

"size_type" это встроенный псевдоним для одного из целочисленных беззнаковых типов.
Указывает этот псевдоним на тип с размером, равным размеру указателя на целевой платформе.
Ипользуется он там, где необходимо задавать количество элементов в контейнерах, для индексирования и т. д.

*****************
*Символьные типы*
*****************

В Ü существуют следующие типы для представления символов:

* char8
* char16
* char32

Числовой суффикс типа означает его размер, в битах.

В отличае от числовых типов, над символьными типами нельзя производить арифметические или побитовые операции. Их можно только сравнивать.

***********
*Сравнение*
***********

В Ü есть ряд операторов сравнения. Результат всех операторов сравнения - "bool".

Для всех фундаментальх типов определены операторы сравнения на равенство и неравенство - "==" и "!=".

Кроме этого для всех типов, исключая "bool" определены следующие операторы упорядочевающего сравнения:

* "<" - Меньше.
* "<=" - Меньше либо равно.
* ">" - Больше.
* ">=" - Больше либо равно.

Для числовых типов сравнение происходит по порядку чисел на числовой прямой.
Для символьных типов сравнение происходит по порядковому номеру символа.

В сравнении значений вещественных чисел есть ряд нюансов:

* +0 и -0 имеют различное битовое представление, но при сравнении они идентичны.
* Любое сравнение с NaN, исключая "!=", возвращает false.
  "!=" с NaN возвращает всегда "true", даже если оба аргумента равны NaN. Также, "==" с обоими аргументами равными NaN возвращает "false".
  Из всего этого вытекает, что "NaN" не равен никакому другому числу, даже самому себе.


**********************
*Приоритет операторов*
**********************

В сложном выражении со множеством операторов вычисление производится с учётом приоритета операторов.
Унарные операторы имеют наивысший приоритет, вычисляются раньше всех остальных.
Бинарные операторы вычисляются в порядке приоритета, от сильного к слабому:

* "/", "*", "%"
* "+", "-"
* "<<", "\>\>"
* "==", "!=", "<", "<=", ">", ">="
* "&"
* "|"
* "^"
* "&&"
* "||"

Бинарные операторы с одинаковым приоритетом лево-ассоциативны (вычисляются слева направо).

Если нужно задать отличный от стандартного порядок вычисления, выражение или его часть надо заключить в () скобки.
