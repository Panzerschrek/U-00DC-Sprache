Поток управления
================

В языке Ü существует ряд конструкций по управлению потоком управления.

*********
*Условия*
*********

Оператор "if" позволяет выполнить какой-либо участок кода только при выполнение какого-то условия.
Условие в операторе "if" должно иметь тип "bool".

.. code-block:: u_spr

   if( x > y )
   {
       ++x;
   }

Можно указать действие, которое будет выполнено в случае, если условие не выполнилось:

.. code-block:: u_spr

   if( x > y )
   {
       ++x;
   }
   else
   {
       ++y;
   }

Можно указать несколько условий и действий при их выполнении:

.. code-block:: u_spr

   if( x > y )
   {
       ++x;
   }
   else if( y > x )
   {
       ++y;
   }
   else if( z )
   {
       return;
   }
   else
   {
       ++x;
       ++y;
   }

*******
*Циклы*
*******

Оператор "while" позволяет выполнять какие-либо действия, пока условие истинно.
Условие в операторе "while" должно иметь тип "bool".

.. code-block:: u_spr

   while( x > 0 )
   {
       --x;
   }

Можно выйти из цикла преждевременно, используя оператор "break":

.. code-block:: u_spr

   while( x > 0 )
   {
       x /= 5;
       if( x == 1 )
       {
           break;
       }
   }

Можно перейти к следующей итерации цикла, используя оператор "continue":

.. code-block:: u_spr

   while( x > 0 )
   {
       x /= 3;
       if( x == 5 )
       {
           continue;
       }
       --x;
   }

********************
*Возврат из функции*
********************

Исполнение функции, не возвращающей значение, заканчивается, когда поток исполнения достигает конца тела функции.
Если зачем-то нужно завершить исполнение функции раньше, можно использовать оператор "return".

.. code-block:: u_spr

   fn Clamp( i32 &mut x )
   {
       if( x >= 0 )
       {
           return;
       }
       x= 0;
   }

Функции, возвращающие значения, должны завершаться во всех случаях оператором "return" со значением.
Тип значения в операторе "return" должен совпадать с типом возвращаемого значения функции.

.. code-block:: u_spr

   fn Add( i32 x, i32 y ) : i32
   {
       return x + y;
   }

Компилятор проверяет, во всех ли случаях функция возвращает значение, и, если это не так, будет порождена ошибка.

.. code-block:: u_spr

   fn Clamp( i32 &mut x ) : bool
   {
       if( x >= 0 )
       {
           return false;
       }
       x= 0;
       // Ошибка, функция возвращает значение не во всех случаях.
   }

.. code-block:: u_spr

   fn Clamp( i32 &mut x ) : bool
   {
       if( x >= 0 )
       {
           return false;
       }
       else
       {
           x= 0;
           return true;
       }
       // Всё в порядке, функция возвращает значение всегда
   }
