import "structs_combined.uh"

namespace U
{

struct LoopFrame
{
	LLVMBasicBlockRef block_for_break;
	LLVMBasicBlockRef block_for_continue;
}

class FunctionContext
{
public:
	fn constructor(
		LLVMContextRef llvm_context,
		LLVMValueRef in_llvm_function,
		Type mut in_return_type,
		bool in_return_value_is_reference,
		bool in_return_value_is_mutable );
	fn destructor();

	Type imut return_type;
	LLVMValueRef imut llvm_function;
	bool imut return_value_is_reference;
	bool imut return_value_is_mutable;

	LLVMValueRef s_ret= LLVMValueRef::Null;

	ust::optional</Variable/> this_;
	ust::vector</ust::string8/> uninitialized_this_fields; // TODO - use something like "unordered_set"
	bool whole_this_is_unavailable= false;

	LLVMBasicBlockRef alloca_basic_block= LLVMBasicBlockRef::Null;
	LLVMBuilderRef alloca_ir_builder= LLVMBuilderRef::Null;

	LLVMBasicBlockRef function_basic_block= LLVMBasicBlockRef::Null;
	LLVMBuilderRef llvm_ir_builder= LLVMBuilderRef::Null;

	ust::vector</LoopFrame/> loops_stack;
}

} // namespace U
