import "structs_combined.uh"

namespace U1
{

struct LoopFrame
{
	LLVMBasicBlockRef block_for_break;
	LLVMBasicBlockRef block_for_continue;
	// Number of variables frames at stack before loop block creation.
	size_type variable_frames_stack_size;
}

class FunctionContext
{
public:
	fn constructor(
		LLVMContextRef llvm_context,
		LLVMValueRef in_llvm_function,
		Type mut in_return_type,
		bool in_return_value_is_reference,
		bool in_return_value_is_mutable );
	fn destructor();

	Type imut return_type;
	LLVMValueRef imut llvm_function;
	bool imut return_value_is_reference;
	bool imut return_value_is_mutable;

	LLVMValueRef s_ret= LLVMValueRef::Null;

	ust::optional</Variable/> this_;
	ust::unordered_map</ust::string8, i32/> uninitialized_this_fields; // TODO - use something like "unordered_set"
	bool whole_this_is_unavailable= false;

	bool have_non_constexpr_operations_inside= false; // While building code, may set to "true".

	LLVMBasicBlockRef alloca_basic_block= LLVMBasicBlockRef::Null;
	LLVMBuilderRef alloca_ir_builder= LLVMBuilderRef::Null;

	LLVMBasicBlockRef function_basic_block= LLVMBasicBlockRef::Null;
	LLVMBuilderRef llvm_ir_builder= LLVMBuilderRef::Null;

	LLVMBasicBlockRef destructor_end_block= LLVMBasicBlockRef::Null; // For destructors only - used for "Br" instead of "ret"

	ust::vector</LoopFrame/> loops_stack;
	bool is_in_unsafe_block= false;

	// Cache result of arguments pre-evaluation for selection of overloaded functions and operators.
	// This needed for reducing exponential expression evaluation complexity.
	ust::unordered_map</ ust::shared_ptr_final</Synt::Expression/>, FunctionType::Param /> args_preevaluation_cache;

	type VariablesFrame= ust::vector</ NamesScopeVariable />;
	ust::vector</VariablesFrame/> variables_frames;

	ReferencesGraph references_graph;
}

class VariablesFrameHolder
{
public:
	fn constructor( mut this'x', FunctionContext &'y mut function_context ) ' x <- y '
	( function_context_= function_context )
	{
		function_context_.variables_frames.push_back( FunctionContext::VariablesFrame() );
	}

	fn destructor()
	{
		// Ensure that all references graph nodes are deleted. Normally this is not needed, because nodes removed in destructors calls.
		// But in case of errors destructors may not be called.
		for( auto mut i= 0s; i < function_context_.variables_frames.back().size(); ++i )
		{
			auto node_id= function_context_.variables_frames.back()[i].node_id;
			function_context_.references_graph.RemoveNode( node_id );
		}
		function_context_.variables_frames.drop_back();
	}

	fn GetFunctionContext( this'x' ) : FunctionContext &'x mut
	{
		return function_context_;
	}

private:
	FunctionContext &mut function_context_;
}

} // namespace U1
