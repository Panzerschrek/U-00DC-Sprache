import "type.uh"

namespace U
{

fn FundamentalType::constructor( U_FundamentalType in_fundamental_type, LLVMTypeRef in_llvm_type )
	( fundamental_type= in_fundamental_type, llvm_type= in_llvm_type )
{}

fn FunctionType::constructor( mut this, FunctionType &imut other )
	( return_type(other.return_type.get_ref()) )
{
	foreach( & in_arg : other.args )
	{
		var Arg mut arg{ .arg_type( in_arg.arg_type.get_ref() ) };
		args.push_back( move(arg) );
	}
}

op FunctionType::=( mut this, FunctionType &imut other )
{
	return_type.get_ref()= other.return_type.get_ref();

	args.clear();
	foreach( & in_arg : other.args )
	{
		var Arg mut arg{ .arg_type( in_arg.arg_type.get_ref() ) };
		args.push_back( move(arg) );
	}
}

fn Type::conversion_constructor( FundamentalType mut fundamental_type )
	( something_( move(fundamental_type) ) )
{}

fn Type::conversion_constructor( FunctionType mut function_type )
	( something_( move(function_type) ) )
{}

fn Type::GetFundamentalType(  mut this ) : ust::optional_ref</FundamentalType, true  />
{
	return something_.get</FundamentalType/>();
}

fn Type::GetFundamentalType( imut this ) : ust::optional_ref</FundamentalType, false />
{
	return something_.get</FundamentalType/>();
}

fn Type::GetFunctionType(  mut this ) : ust::optional_ref</FunctionType, true  />
{
	return something_.get</FunctionType/>();
}

fn Type::GetFunctionType( imut this ) : ust::optional_ref</FunctionType, false />
{
	return something_.get</FunctionType/>();
}

} // namespace U
