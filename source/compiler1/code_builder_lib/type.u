import "../lex_synt_lib/keywords.uh"
import "lang_types.uh"
import "type.uh"

namespace U
{

namespace ToStringHelper
{

fn ToString( FundamentalType& fundamental_type ) : ust::string8
{
	return ust::string8( GetFundamentalTypeName( fundamental_type.fundamental_type ) );
}

fn ToString( FunctionType& function_type ) : ust::string8
{
	var ust::string8 mut result;

	result+= KeywordToString( Keyword::fn_ );

	result+= "(";
	foreach( &arg : function_type.args )
	{
		result+= arg.arg_type.get_ref().ToString();
		result+= " arg";

		if( ust::ref_to_int(arg) != ust::ref_to_int(function_type.args.back()))
		{
			result+= ", ";
		}
	}
	result+= ") : ";

	result+= function_type.return_type.get_ref().ToString();

	return move(result);
}

} // namespace ToStringHelper

fn FundamentalType::constructor( U_FundamentalType in_fundamental_type, LLVMTypeRef in_llvm_type )
	( fundamental_type= in_fundamental_type, llvm_type= in_llvm_type )
{}

fn FunctionType::constructor( mut this, FunctionType &imut other )
	( return_type(other.return_type.get_ref()) )
{
	foreach( & in_arg : other.args )
	{
		var Arg mut arg{ .arg_type( in_arg.arg_type.get_ref() ) };
		args.push_back( move(arg) );
	}
}

op FunctionType::=( mut this, FunctionType &imut other )
{
	return_type.get_ref()= other.return_type.get_ref();

	args.clear();
	foreach( & in_arg : other.args )
	{
		var Arg mut arg{ .arg_type( in_arg.arg_type.get_ref() ) };
		args.push_back( move(arg) );
	}
}

fn Type::conversion_constructor( FundamentalType mut fundamental_type )
	( something_( move(fundamental_type) ) )
{}

fn Type::conversion_constructor( FunctionType mut function_type )
	( something_( move(function_type) ) )
{}

fn Type::GetFundamentalType(  mut this ) : ust::optional_ref</FundamentalType, true  />'this'
{
	return something_.get</FundamentalType/>();
}

fn Type::GetFundamentalType( imut this ) : ust::optional_ref</FundamentalType, false />'this'
{
	return something_.get</FundamentalType/>();
}

fn Type::GetFunctionType(  mut this ) : ust::optional_ref</FunctionType, true  />'this'
{
	return something_.get</FunctionType/>();
}

fn Type::GetFunctionType( imut this ) : ust::optional_ref</FunctionType, false />'this'
{
	return something_.get</FunctionType/>();
}

fn Type::GetLLVMType( imut this ) : LLVMTypeRef
{
	if_var( & fundamental_type : GetFundamentalType() )
	{
		return fundamental_type.llvm_type;
	}
	if_var( & function_type : GetFunctionType() )
	{
		return function_type.llvm_type;
	}

	halt;
}

fn Type::ToString( this ) : ust::string8
{
	variant_visit( &t : something_ )
	{
		return ToStringHelper::ToString(t);
	}
	halt;
}

} // namespace U
