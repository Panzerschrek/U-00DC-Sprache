import "error_reporting.uh"
import "code_builder.uh"

namespace U1
{

fn CodeBuilder::NamesScopeBuild( mut this, NamesScopePtr& names_scope_ptr )
{
	foreach( &el : names_scope_ptr.lock_imut().deref() )
	{
		variant_visit( &v : el.value().something_ )
		{
			NamesScopeBuildElement( names_scope_ptr, v );
		}
	}
}

fn CodeBuilder::NamesScopeBuildElement( mut this, NamesScopePtr& parent_names_scope_ptr, ust::shared_ptr_mut</NamesScope/>& namespace_ )
{
	NamesScopeBuild( namespace_ );
}

fn CodeBuilder::NamesScopeBuildElement( mut this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</Type/>& t )
{
	// Nothing to do here - all types in global namespaces placed as "Type" are complete.
}

fn CodeBuilder::NamesScopeBuildElement( mut this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</Variable/>& variable )
{
	// Nothing to do here - global namespaces does not contains "Variable", separate types used for global variables.
}

fn CodeBuilder::NamesScopeBuildElement( mut this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</NamesScopeFunctionsSet/>& functions_set )
{
	BuildFunctionsSet( names_scope_ptr, functions_set, true );
}

fn CodeBuilder::NamesScopeBuildElement( mut this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</ClassType/>& class_type )
{
	BuildClass( names_scope_ptr, class_type );
	auto class_members= class_type.lock_imut().deref().members;
	NamesScopeBuild( class_members );
}

fn CodeBuilder::NamesScopeBuildElement( mut this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</ClassField/>& class_field )
{
	// Nothing to do here - class fields processed during class build.
}

fn CodeBuilder::NamesScopeBuildElement( mut this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</Enum/>& enum_type )
{
	BuildEnum( names_scope_ptr, enum_type );
}

fn CodeBuilder::NamesScopeBuildElement( mut this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</TypeAlias/>& type_alias_ptr )
{
	BuildTypeAlias( names_scope_ptr, type_alias_ptr );
}

fn CodeBuilder::NamesScopeBuildElement( mut this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</TypeTemplatesSet/>& type_templates_set )
{
	BuiltTypeTemplatesSet( names_scope_ptr, type_templates_set );
}

fn CodeBuilder::NamesScopeBuildElement( mut this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</TemplateArg/>& template_arg )
{
	// Nothing to do here
}

fn CodeBuilder::NamesScopeBuildElement( mut this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</GlobalVariable/>& global_variable_ptr )
{
	BuildGlobalVariable( names_scope_ptr, global_variable_ptr );
}

fn CodeBuilder::NamesScopeBuildElement( mut this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</GlobalAutoVariable/>& global_auto_variable_ptr )
{
	BuildGlobalAutoVariable( names_scope_ptr, global_auto_variable_ptr );
}

fn CodeBuilder::NamesScopeBuildElement( mut this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</GlobalStaticAssertsSet/>& global_static_asserts_set_ptr )
{
	auto mut lock= global_static_asserts_set_ptr.lock_mut();
	auto &mut global_static_asserts_set= lock.deref();

	auto mut function_context= CreateGlobalFunctionContext();
	foreach( &static_assert_ : global_static_asserts_set )
	{
		BuildBlockElement( names_scope_ptr, function_context, static_assert_.deref() );
	}

	global_static_asserts_set.clear();
}

} // namespace U1
