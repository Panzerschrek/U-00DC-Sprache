import "error_reporting.uh"
import "code_builder.uh"

namespace U
{

fn CodeBuilder::NamesScopeBuild( this, NamesScopePtr& names_scope_ptr )
{
	auto lock= names_scope_ptr.lock_imut();
	auto& names_scope= lock.get_ref();

	foreach( &el : names_scope.GetInternalContainer() )
	{
		auto functions_set= el.value().Get</ NamesScopeFunctionsSet />();
		if( !functions_set.empty() )
		{
			NamesScopeBuildElement( names_scope_ptr, ust::to_non_nullable( functions_set ) );
		}

		auto class_type= el.value().Get</ ClassType />();
		if( !class_type.empty() )
		{
			NamesScopeBuildElement( names_scope_ptr, ust::to_non_nullable( class_type ) );
		}

		auto enum_type= el.value().Get</ Enum />();
		if( !enum_type.empty() )
		{
			BuildEnum( names_scope_ptr, ust::to_non_nullable( enum_type ) );
		}

		auto namespace_= el.value().Get</ NamesScope />();
		if( !namespace_.empty() )
		{
			NamesScopeBuild( ust::to_non_nullable( namespace_ ) );
		}

		auto type_alias_ptr= el.value().Get</TypeAlias/>();
		if( !type_alias_ptr.empty() )
		{
			auto mut lock= type_alias_ptr.lock_mut();
			auto &mut type_alias= lock.get_ref();
			BuildTypeAlias( names_scope_ptr, type_alias );
		}

		auto global_variable_ptr= el.value().Get</GlobalVariable/>();
		if( !global_variable_ptr.empty() )
		{
			auto mut lock= global_variable_ptr.lock_mut();
			auto &mut global_variable= lock.get_ref();
			BuildGlobalVariable( names_scope_ptr, global_variable );
		}

		auto global_auto_variable_ptr= el.value().Get</GlobalAutoVariable/>();
		if( !global_auto_variable_ptr.empty() )
		{
			auto mut lock= global_auto_variable_ptr.lock_mut();
			auto &mut global_auto_variable= lock.get_ref();
			BuildGlobalAutoVariable( names_scope_ptr, global_auto_variable );
		}

		auto global_static_asserts_set_ptr= el.value().Get</GlobalStaticAssertsSet/>();
		if( !global_static_asserts_set_ptr.empty() )
		{
			auto mut lock= global_static_asserts_set_ptr.lock_mut();
			auto &mut global_static_asserts_set= lock.get_ref();

			auto mut function_context= CreateGlobalFunctionContext();
			foreach( &static_assert_ : global_static_asserts_set )
			{
				BuildBlockElement( names_scope_ptr, function_context, static_assert_.get_ref() );
			}

			global_static_asserts_set.clear();
		}
	}
}

fn CodeBuilder::NamesScopeBuildElement( this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</NamesScopeFunctionsSet/>& functions_set )
{
	BuildFunctionsSet( names_scope_ptr, functions_set, true );
}

fn CodeBuilder::NamesScopeBuildElement( this, NamesScopePtr& names_scope_ptr, ust::shared_ptr_mut</ClassType/>& class_type )
{
	BuildClass( names_scope_ptr, class_type );
	NamesScopeBuild( class_type.lock_imut().get_ref().members );
}

} // namespace U
