import "error_reporting.uh"

namespace U
{

fn ReportError( CodeBuilderErrorCode code, FilePos file_pos, ust::vector</ust::string8/>& format_args ) : CodeBuilderError
{
	var ust::string8 mut result_error_text;

	auto mut pattern= GetErrorMessagePattern(code);
	{
		auto mut i= 0s;
		while( !pattern.empty() )
		{
			if( pattern.size() >= 3s && pattern[0s] == "{"c8 && ( pattern[1s] >= "0"c8 && pattern[1s] <= "9"c8 ) && pattern[2s] == "}"c8 )
			{
				auto arg_index= size_type(pattern[1s]) - size_type("0"c8);
				result_error_text+= format_args[ arg_index ]; // Will halt if arg index out of range

				pattern.drop_front();
				pattern.drop_front();
				pattern.drop_front();
			}
			else
			{
				result_error_text.push_back(pattern.front());
				pattern.drop_front();
			}
		}
	}

	var CodeBuilderError mut err
	{
		.code= code,
		.text= move(result_error_text),
		.file_pos= file_pos,
	};

	return move(err);
}

} // namespace U
