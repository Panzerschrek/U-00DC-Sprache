import "/sort.u"
import "/keywords.uh"
import "error_reporting.uh"

namespace U1
{

op CodeBuilderError::<=>(CodeBuilderError& l, CodeBuilderError& r) : i32
{
	// Sort by position in file, then, by code, then, by text.
	if( l.src_loc != r.src_loc )
	{
		return l.src_loc <=> r.src_loc;
	}
	if( l.code != r.code )
	{
		return l.code <=> r.code;
	}

	return l.text <=> r.text;
}

fn ReportErrorImpl( CodeBuilderErrorCode code, SrcLoc& src_loc, ust::array_view_imut</ust::string8/> format_args ) : CodeBuilderError
{
	var ust::string8 mut result_error_text;

	auto mut pattern= GetErrorMessagePattern(code);
	while( !pattern.empty() )
	{
		if( pattern.size() >= 3s && pattern[0s] == "{"c8 && ( pattern[1s] >= "0"c8 && pattern[1s] <= "9"c8 ) && pattern[2s] == "}"c8 )
		{
			auto arg_index= size_type(pattern[1s]) - size_type("0"c8);
			result_error_text+= format_args[ arg_index ]; // Will halt if arg index out of range

			pattern.drop_front();
			pattern.drop_front();
			pattern.drop_front();
		}
		else
		{
			result_error_text.push_back(pattern.front());
			pattern.drop_front();
		}
	}

	return CodeBuilderError
	{
		.code= code,
		.text= move(result_error_text),
		.src_loc= src_loc,
	};
}

fn PutErrorIntoContainer( NamesScopePtr& names_scope, CodeBuilderError mut error )
{
	with( mut lock: names_scope.lock_imut().deref().GetErrors().try_lock_mut() )
	{
		lock.deref().push_back( move( error ) );
	}
}

fn ComplexNameToString( Synt::ComplexName& complex_name ) : ust::string8
{
	variant_visit( &el : complex_name )
	{
		return ComplexNameToStringImpl( el );
	}
	halt;
}

template</type T/>
fn ComplexNameToStringImpl( ust::box</T/>& t ) : ust::string8
{
	return U1::ComplexNameToStringImpl( t.deref() );
}

fn ComplexNameToStringImpl( Synt::NameLookup& name_lookup ) : ust::string8
{
	return name_lookup.name;
}

fn ComplexNameToStringImpl( Synt::RootNamespaceNameLookup& root_namespace_name_lookup ) : ust::string8
{
	return "::" + root_namespace_name_lookup.name;
}

fn ComplexNameToStringImpl( Synt::NamesScopeNameFetch& names_scope_name_fetch ) : ust::string8
{
	return ComplexNameToString( names_scope_name_fetch.base_ ) + "::" + names_scope_name_fetch.name;
}

fn ComplexNameToStringImpl( Synt::TemplateParameterization& template_parameterization ) : ust::string8
{
	// TODO - print real args.
	return ComplexNameToString( template_parameterization.base_ ) + "</ .. />";
}

fn ComplexNameToStringImpl( Synt::Typeof& typeof_ ) : ust::string8
{
	// TODO - print typeof.
	ust::ignore_unused( typeof_ );
	return "typeof(...)";
}

fn NormalizeErrors( ErrorsContainer &mut errors, Synt::MacroExpansionContexts& macro_expansion_contexts )
{
	RemoveEmptyErrorsContexts( errors );
	errors= ExpandErrorsInMacros( errors, macro_expansion_contexts );
	RemoveEmptyErrorsContexts( errors );
	SortErrorsAndRemoveDuplicates( errors );
}

fn RemoveEmptyErrorsContexts( ErrorsContainer &mut errors )
{
	for( auto mut i= 0s; i < errors.size(); )
	{
		if( !errors[i].errors_context.empty() )
		{
			var bool mut is_empty= false;
			{
				auto sub_errors_ptr= errors[i].errors_context.try_lock_imut().deref().errors;
				auto mut sub_errors_lock= sub_errors_ptr.lock_mut();
				var ErrorsContainer &mut sub_errors= sub_errors_lock.deref();
				RemoveEmptyErrorsContexts( sub_errors );
				is_empty= sub_errors.empty();
			}
			if( is_empty )
			{
				auto s= errors.size();
				errors.swap( i, s - 1s );
				errors.drop_back();
				continue;
			}
		}
		++i;
	}
}

fn ExpandErrorsInMacros( ErrorsContainer& in_errors, Synt::MacroExpansionContexts& macro_expansion_contexts ) : ErrorsContainer
{
	// TODO - maybe not create macro expansion context if there are no errors inside it?

	var ErrorsContainer mut macro_contexts_errors;
	var ust::vector</ ust::shared_ptr_mut</ErrorsContainer/> /> mut macro_contexts_errors_internals;

	foreach( &macro_expansion_context : macro_expansion_contexts )
	{
		var ust::shared_ptr_mut</ErrorsContainer/> internal_errors( ErrorsContainer() );

		macro_contexts_errors.push_back(
			CodeBuilderError
			{
				.code= CodeBuilderErrorCode::MacroExpansionContext,
				.src_loc= macro_expansion_context.src_loc,
				.text = select(
					macro_expansion_context.macro_name == KeywordToString( Keyword::mixin_ )
						? ("in expansion of macro \"" + macro_expansion_context.macro_name + "\"")
						: ust::string8("in expansion of mixin") ),
				.errors_context(
					TemplateErrorsContext
					{
						.errors= internal_errors,
						.context_declaration_src_loc= macro_expansion_context.macro_declaration_src_loc,
						.context_name= macro_expansion_context.macro_name,
					} ),
			} );

		macro_contexts_errors_internals.push_back( internal_errors );
	}

	var ErrorsContainer mut out_errors;
	foreach( &in_error : in_errors )
	{
		var CodeBuilderError mut error= in_error;
		if( !error.errors_context.empty() )
		{
			auto sub_errors_ptr= error.errors_context.try_lock_imut().deref().errors;
			auto mut sub_errors_lock= sub_errors_ptr.lock_mut();
			var ErrorsContainer &mut sub_errors= sub_errors_lock.deref();
			sub_errors= ExpandErrorsInMacros( sub_errors, macro_expansion_contexts );
		}

		auto macro_expansion_index= size_type(error.src_loc.GetMacroExpansionIndex());
		if( macro_expansion_index < macro_contexts_errors_internals.size() )
		{
			auto mut lock= macro_contexts_errors_internals[ macro_expansion_index ].lock_mut();
			lock.deref().push_back( move(error) );
		}
		else
		{
			out_errors.push_back( move(error) );
		}
	}

	foreach( &macro_context_error : macro_contexts_errors )
	{
		auto macro_expansion_index= size_type(macro_context_error.src_loc.GetMacroExpansionIndex());
		if( macro_expansion_index < macro_contexts_errors_internals.size() )
		{
			auto mut lock= macro_contexts_errors_internals[ macro_expansion_index ].lock_mut();
			lock.deref().push_back( macro_context_error );
		}
		else
		{
			out_errors.push_back( macro_context_error );
		}
	}

	return out_errors;
}

fn SortErrorsAndRemoveDuplicates( ErrorsContainer &mut errors )
{
	foreach( &mut e : errors )
	{
		if( !e.errors_context.empty() )
		{
			auto sub_errors_ptr= e.errors_context.try_lock_imut().deref().errors;
			auto mut sub_errors_lock= sub_errors_ptr.lock_mut();
			SortErrorsAndRemoveDuplicates( sub_errors_lock.deref() );
		}
	}

	if( errors.size() <= 1s )
	{
		return;
	}

	ust::sort( errors.range() );

	// Leave only unique errors.
	var size_type mut dst(1), mut src(1), end= errors.size();
	while( src < end )
	{
		if( cast_imut(errors)[dst - 1s] != cast_imut(errors)[src] )
		{
			errors.swap( dst, src );
			++dst;
		}
		++src;
	}

	auto dummy= errors.front();
	errors.resize( dst, dummy );
}

} // namespace U1
