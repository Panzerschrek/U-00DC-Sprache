import "/string_conversions.u"
import "/keywords.uh"
import "structs_combined.uh"

namespace U1
{

// Sizes for 8-bit pointers.
static_assert( typeinfo</Type/>.size_of <= 24s ); // 1 pointer for variant, 2 pointers for variant contents
static_assert( typeinfo</Variable/>.size_of <= 48s ); // type, 2 pointers (llvm values), +8 bytes for value type/location/node_id.
static_assert( typeinfo</FunctionsSet/>.size_of <= 72s ); // 3 vectors.
static_assert( typeinfo</Value/>.size_of <= 72s + 48s + 8s ); // 1 pointer for variant + variable + functions set.
static_assert( typeinfo</NamesScopeValue/>.size_of <= 24s ); // 1 pointer for variant and 2 pointers for contents.

//
// Type
//

namespace ToStringHelper
{

template</type T/>
fn ToString( ust::shared_ptr_final_base</T, false/>& b ) : ust::string8
{
	return ToStringHelper::ToString( b.deref() );
}

fn ToString( FundamentalType& fundamental_type ) : ust::string8
{
	return ust::string8( GetFundamentalTypeName( fundamental_type.fundamental_type ) );
}

fn ToString( ArrayType& array_type ) : ust::string8
{
	var ust::string8 mut result;
	result+= "[ ";
	result+= array_type.element_type.ToString();
	result+= ", ";
	result+= ust::to_string8(array_type.element_count);
	result+= " ]";
	return move(result);
}

fn ToString( TupleType& tuple_type ) : ust::string8
{
	var ust::string8 mut result;
	result+= KeywordToString( Keyword::tup_ );
	result+= "[ ";

	foreach( &element_type : tuple_type.element_types )
	{
		result+= element_type.ToString();
		var bool mut is_last_element= false;
		if( ust::ref_cmp_ne( element_type, tuple_type.element_types.back() ) )
		{
			result+= ", ";
		}
	}

	result+= " ]";
	return move(result);
}

fn ToString( RawPointerType& raw_pointer_type ) : ust::string8
{
	var ust::string8 mut result;
	result+= "$";
	result+= "(";
	result+= raw_pointer_type.element_type.ToString();
	result+= ")";

	return move(result);
}

fn ToString( FunctionType& function_type ) : ust::string8
{
	var ust::string8 mut result;

	result+= KeywordToString( Keyword::fn_ );

	result+= "(";
	result+= FunctionParamsToString( function_type.params.range() );
	result+= ") ";

	if( function_type.is_unsafe )
	{
		result+= KeywordToString( Keyword::unsafe_ );
		result+= " ";
	}

	result+= ": ";

	result+= function_type.return_type.ToString();

	return move(result);
}

fn ToString( FunctionPointerType& function_pointer_type ) : ust::string8
{
	return ToString( function_pointer_type.function_type );
}

fn ToString( ClassTypePtr& class_type ) : ust::string8
{
	return class_type.lock_imut().deref().members.lock_imut().deref().ToString();
}

fn ToString( EnumTypePtr& enum_type ) : ust::string8
{
	return enum_type.lock_imut().deref().names_scope.lock_imut().deref().ToString();
}

} // namespace ToStringHelper

fn FundamentalType::constructor( U_FundamentalType in_fundamental_type, LLVMTypeRef in_llvm_type )
	( fundamental_type= in_fundamental_type, llvm_type= in_llvm_type )
{}

fn FundamentalType::GetSize(this) : size_type
{
	if( fundamental_type ==  U_FundamentalType::InvalidType){ return 0s; }
	if( fundamental_type ==  U_FundamentalType::void_  ){ return 0s; }
	if( fundamental_type ==  U_FundamentalType::bool_ ){ return 1s; }
	if( fundamental_type ==  U_FundamentalType::i8_   ){ return 1s; }
	if( fundamental_type ==  U_FundamentalType::u8_   ){ return 1s; }
	if( fundamental_type ==  U_FundamentalType::i16_  ){ return 2s; }
	if( fundamental_type ==  U_FundamentalType::u16_  ){ return 2s; }
	if( fundamental_type ==  U_FundamentalType::i32_  ){ return 4s; }
	if( fundamental_type ==  U_FundamentalType::u32_  ){ return 4s; }
	if( fundamental_type ==  U_FundamentalType::i64_  ){ return 8s; }
	if( fundamental_type ==  U_FundamentalType::u64_  ){ return 8s; }
	if( fundamental_type ==  U_FundamentalType::i128_ ){ return 16s; }
	if( fundamental_type ==  U_FundamentalType::u128_ ){ return 16s; }
	if( fundamental_type ==  U_FundamentalType::f32_ ){ return 4s; }
	if( fundamental_type ==  U_FundamentalType::f64_ ){ return 8s; }
	if( fundamental_type ==  U_FundamentalType::char8_  ){ return 1s; }
	if( fundamental_type ==  U_FundamentalType::char16_ ){ return 2s; }
	if( fundamental_type ==  U_FundamentalType::char32_ ){ return 4s; }

	halt;
}

op FundamentalType::==( FundamentalType& l, FundamentalType& r ) : bool
{
	return l.fundamental_type == r.fundamental_type;
}

op FundamentalType::!=( FundamentalType& l, FundamentalType& r ) : bool
{
	return !(l == r);
}

op ArrayType::==( ArrayType& l, ArrayType& r ) : bool
{
	return l.element_type == r.element_type && l.element_count == r.element_count;
}

op ArrayType::!=( ArrayType& l, ArrayType& r ) : bool
{
	return !(l == r);
}

op TupleType::==( TupleType& l, TupleType& r ) : bool
{
	if( l.element_types.size() != r.element_types.size() )
	{
		return false;
	}

	for( auto mut i= 0s; i < l.element_types.size(); ++i )
	{
		if( l.element_types[i] != r.element_types[i] )
		{
			return false;
		}
	}

	return true;
}

op TupleType::!=( TupleType& l, TupleType& r ) : bool
{
	return !(l == r);
}

op RawPointerType::==( RawPointerType& l, RawPointerType& r ) : bool
{
	return l.element_type == r.element_type;
}

op RawPointerType::!=( RawPointerType& l, RawPointerType& r ) : bool
{
	return !(l == r);
}

op FunctionType::ParamReference::==(ParamReference& l, ParamReference& r) : bool
{
	return
		l.param_index == r.param_index &&
		l.reference_index == r.reference_index;
}

op FunctionType::ParamReference::!=(ParamReference& l, ParamReference& r) : bool
{
	return !(l == r);
}

op FunctionType::ParamReference::<(ParamReference& l, ParamReference& r) : bool
{
	if( l.param_index != r.param_index )
	{
		return l.param_index < r.param_index;
	}
	return l.reference_index < r.reference_index;
}

op FunctionType::ReferencePollution::==(ReferencePollution& l, ReferencePollution& r) : bool
{
	return l.dst == r.dst && l.src == r.src;
}

op FunctionType::ReferencePollution::!=(ReferencePollution& l, ReferencePollution& r) : bool
{
	return !(l == r);
}

op FunctionType::ReferencePollution::<(ReferencePollution& l, ReferencePollution& r) : bool
{
	if( l.dst != r.dst )
	{
		return l.dst < r.dst;
	}
	return l.src < r.src;
}

fn FunctionType::PointerCanBeConvertedTo( this, FunctionType& dst ) : bool
{
	if(
		this.return_type != dst.return_type ||
		( this.return_value_type == ValueType::Value ) != ( dst.return_value_type == ValueType::Value ) ||
		( this.return_value_type == ValueType::ReferenceImut && dst.return_value_type == ValueType::ReferenceMut ) || // Allow mutability conversions, except mut->imut
		( this.is_unsafe && !dst.is_unsafe ) || // Disable unsafe function to safe function conversion
		this.params.size() != dst.params.size() )
	{
		return false;
	}

	// Can convert pointer to function returning less references to pointer to function, returning more references.
	foreach( &src_param_reference : this.return_references )
	{
		var bool mut found= false;
		foreach( &dst_param_reference : dst.return_references )
		{
			if( src_param_reference == dst_param_reference )
			{
				found= true;
				break;
			}
		}
		if( !found )
		{
			return false;
		}
	}

	// Can convert function, linkink less references to function, linking more references.
	foreach( &src_pollution : this.references_pollution )
	{
		var bool mut found= false;
		foreach( &dst_pollution : dst.references_pollution )
		{
			if( src_pollution == dst_pollution )
			{
				found= true;
				break;
			}
		}
		if( !found )
		{
			return false;
		}
	}

	for( auto mut i= 0s; i < params.size(); ++i )
	{
		auto& this_param= this.params[i];
		auto& dst_param= dst.params[i];
		if( this_param.t != dst_param.t ||
			( this_param.value_type == ValueType::Value ) != ( dst_param.value_type == ValueType::Value ) ||
			this_param.value_type == ValueType::ReferenceMut && dst_param.value_type == ValueType::ReferenceImut ) // Allow mutability conversions, except mut->imut
		{
			return false;
		}
	}

	return true;
}

fn FunctionType::IsStructRet( this ) : bool
{
	return
		return_value_type == ValueType::Value &&
		( !return_type.GetClassType().empty() || !return_type.GetArrayType().empty() || !return_type.GetTupleType().empty() );
}

op FunctionType::==( FunctionType& l, FunctionType& r ) : bool
{
	if( l.params.size() != r.params.size() )
	{
		return false;
	}
	for( auto mut i= 0s; i < l.params.size(); ++i )
	{
		if( l.params[i] != r.params[i] )
		{
			return false;
		}
	}

	if( l.return_references.size() != r.return_references.size() )
	{
		return false;
	}
	for( auto mut i= 0s; i < l.return_references.size(); ++i )
	{
		if( l.return_references[i] != r.return_references[i] )
		{
			return false;
		}
	}

	if( l.references_pollution.size() != r.references_pollution.size() )
	{
		return false;
	}
	for( auto mut i= 0s; i < l.references_pollution.size(); ++i )
	{
		if( l.references_pollution[i] != r.references_pollution[i] )
		{
			return false;
		}
	}

	return
		l.return_type == r.return_type &&
		l.return_value_type == r.return_value_type &&
		l.is_unsafe == r.is_unsafe;
}

op FunctionType::!=( FunctionType& l, FunctionType& r ) : bool
{
	return !(l == r);
}

fn FunctionParamsToString( ust::array_view_imut</FunctionType::Param/> params ) : ust::string8
{
	var ust::string8 mut result;

	foreach( &param : params )
	{
		if( param.value_type == ValueType::ReferenceMut )
		{
			result+= "&mut ";
		}
		if( param.value_type == ValueType::ReferenceImut )
		{
			result+= "&imut ";
		}

		result+= param.t.ToString();

		if( ust::ref_cmp_ne( param, params.back() ) )
		{
			result+= ", ";
		}
	}

	return move(result);
}

op FunctionPointerType::==( FunctionPointerType& l, FunctionPointerType& r ) : bool
{
	return l.function_type == r.function_type;
}

op FunctionPointerType::!=( FunctionPointerType& l, FunctionPointerType& r ) : bool
{
	return !(l == r);
}

fn Type::conversion_constructor( FundamentalType mut fundamental_type )
	( something_( move(fundamental_type) ) )
{}

fn Type::conversion_constructor( ArrayType mut array_type )
	( something_( ust::make_shared_ptr_final(move(array_type)) ) )
{}

fn Type::conversion_constructor( TupleType mut tuple_type )
	( something_( ust::make_shared_ptr_final(move(tuple_type)) ) )
{}

fn Type::conversion_constructor( RawPointerType mut raw_pointer_type )
	( something_( ust::make_shared_ptr_final(move(raw_pointer_type)) ) )
{}

fn Type::conversion_constructor( FunctionType mut function_type )
	( something_( ust::make_shared_ptr_final(move(function_type)) ) )
{}

fn Type::conversion_constructor( FunctionPointerType mut function_pointer_type )
	( something_( ust::make_shared_ptr_final(move(function_pointer_type)) ) )
{}

fn Type::conversion_constructor( ClassTypePtr mut class_type )
	( something_( move(class_type) ) )
{}

fn Type::conversion_constructor( EnumTypePtr mut enum_type )
	( something_( move(enum_type) ) )
{}

fn Type::GetFundamentalType( imut this ) : ust::optional_ref_imut</FundamentalType />'this'
{
	return something_.get</FundamentalType/>();
}

fn Type::GetArrayType( imut this ) : ust::optional_ref_imut</ArrayType />'this'
{
	if_var( &b : something_.get</ust::shared_ptr_final</ArrayType/>/>() )
	{
		return ust::optional_ref_imut</ArrayType/>( b.deref() );
	}

	return ust::optional_ref_imut</ArrayType />();
}

fn Type::GetTupleType( imut this ) : ust::optional_ref_imut</TupleType />'this'
{
	if_var( &b : something_.get</ust::shared_ptr_final</TupleType/>/>() )
	{
		return ust::optional_ref_imut</TupleType/>( b.deref() );
	}

	return ust::optional_ref_imut</TupleType />();
}

fn Type::GetRawPointerType( imut this ) : ust::optional_ref_imut</RawPointerType />'this'
{
	if_var( &b : something_.get</ust::shared_ptr_final</RawPointerType/>/>() )
	{
		return ust::optional_ref_imut</RawPointerType/>( b.deref() );
	}

	return ust::optional_ref_imut</RawPointerType />();
}

fn Type::GetFunctionType( imut this ) : ust::optional_ref_imut</FunctionType />'this'
{
	if_var( &b : something_.get</ust::shared_ptr_final</FunctionType/>/>() )
	{
		return ust::optional_ref_imut</FunctionType/>( b.deref() );
	}

	return ust::optional_ref_imut</FunctionType />();
}

fn Type::GetFunctionPointerType( imut this ) : ust::optional_ref_imut</FunctionPointerType />'this'
{
	if_var( &b : something_.get</ust::shared_ptr_final</FunctionPointerType/>/>() )
	{
		return ust::optional_ref_imut</FunctionPointerType/>( b.deref() );
	}

	return ust::optional_ref_imut</FunctionPointerType />();
}

fn Type::GetClassType( imut this ) : ust::optional_ref_imut</ClassTypePtr />'this'
{
	return something_.get</ClassTypePtr/>();
}

fn Type::GetEnumType( imut this ) : ust::optional_ref_imut</EnumTypePtr />'this'
{
	return something_.get</EnumTypePtr/>();
}

fn Type::GetLLVMType( this ) : LLVMTypeRef
{
	if_var( &fundamental_type : GetFundamentalType() )
	{
		return fundamental_type.llvm_type;
	}
	if_var( &array_type : GetArrayType() )
	{
		return array_type.llvm_type;
	}
	if_var( &tuple_type : GetTupleType() )
	{
		return tuple_type.llvm_type;
	}
	if_var( &raw_pointer_type : GetRawPointerType() )
	{
		return raw_pointer_type.llvm_type;
	}
	if_var( &function_type : GetFunctionType() )
	{
		return function_type.llvm_type;
	}
	if_var( &function_pointer_type : GetFunctionPointerType() )
	{
		return function_pointer_type.llvm_type;
	}
	if_var( &class_type_ptr : GetClassType() )
	{
		return class_type_ptr.lock_imut().deref().llvm_type;
	}
	if_var( &enum_type_ptr : GetEnumType() )
	{
		return enum_type_ptr.lock_imut().deref().underlaying_type.llvm_type;
	}

	halt;
}

fn Type::IsDefaultConstructible( this ) : bool
{
	if_var( &fundamental_type : GetFundamentalType() )
	{
		return fundamental_type.fundamental_type == U_FundamentalType::void_;
	}
	if_var( &array_type : GetArrayType() )
	{
		return array_type.element_count == 0u64 || array_type.element_type.IsDefaultConstructible();
	}
	if_var( &tuple_type : GetTupleType() )
	{
		foreach( &element_type : tuple_type.element_types )
		{
			if( !element_type.IsDefaultConstructible() )
			{
				return false;
			}
		}
		return true;
	}
	if_var( &class_type : GetClassType() )
	{
		return class_type.lock_imut().deref().is_default_constructible;
	}
	return false;
}

fn Type::IsCopyConstructible( this ) : bool
{
	if( !GetFundamentalType().empty() |
		!GetEnumType().empty() ||
		!GetFunctionPointerType().empty() ||
		!GetRawPointerType().empty() )
	{
		return true;
	}
	if_var( &array_type : GetArrayType() )
	{
		return array_type.element_count == 0u64 || array_type.element_type.IsCopyConstructible();
	}
	if_var( &tuple_type : GetTupleType() )
	{
		foreach( &element_type : tuple_type.element_types )
		{
			if( !element_type.IsCopyConstructible() )
			{
				return false;
			}
		}
		return true;
	}
	if_var( &class_type : GetClassType() )
	{
		return class_type.lock_imut().deref().is_copy_constructible;
	}
	return false;
}

fn Type::IsCopyAssignable( this ) : bool
{
	if( !GetFundamentalType().empty() |
		!GetEnumType().empty() ||
		!GetFunctionPointerType().empty() ||
		!GetRawPointerType().empty() )
	{
		return true;
	}
	if_var( &array_type : GetArrayType() )
	{
		return array_type.element_count == 0u64 || array_type.element_type.IsCopyAssignable();
	}
	if_var( &tuple_type : GetTupleType() )
	{
		foreach( &element_type : tuple_type.element_types )
		{
			if( !element_type.IsCopyAssignable() )
			{
				return false;
			}
		}
		return true;
	}
	if_var( &class_type : GetClassType() )
	{
		return class_type.lock_imut().deref().is_copy_assignable;
	}
	return false;
}

fn Type::CanBeConstexpr( this ) : bool
{
	if( !GetFundamentalType().empty() || !GetEnumType().empty() || !GetFunctionPointerType().empty() )
	{
		return true;
	}

	// Raw pointer type is not constexpr, because pointer dereference and pointer arithmetic can break functional purity of constexpr functions.

	if_var( &array_type : GetArrayType() )
	{
		return array_type.element_type.CanBeConstexpr();
	}
	if_var( &tuple_type : GetTupleType() )
	{
		foreach( &element_type : tuple_type.element_types )
		{
			if( !element_type.CanBeConstexpr() )
			{
				return false;
			}
		}
		return true;
	}
	if_var( &class_type : GetClassType() )
	{
		return class_type.lock_imut().deref().can_be_constexpr;
	}

	return false;
}

fn Type::IsAbstract( this ) : bool
{
	if_var( &array_type : GetArrayType() )
	{
		return array_type.element_count > 0u64 && array_type.element_type.IsAbstract();
	}
	if_var( &tuple_type : GetTupleType() )
	{
		foreach( &element_type : tuple_type.element_types )
		{
			if( element_type.IsAbstract() )
			{
				return true;
			}
		}
		return false;
	}
	if_var( &class_type : GetClassType() )
	{
		auto kind= class_type.lock_imut().deref().kind;
		return kind == ClassType::Kind::Abstract || kind == ClassType::Kind::Interface;
	}

	return false;
}

fn Type::GetInnerReferenceKind( this ) : InnerReferenceKind
{
	if_var( &array_type : GetArrayType() )
	{
		return array_type.element_type.GetInnerReferenceKind();
	}
	if_var( &tuple_type : GetTupleType() )
	{
		var InnerReferenceKind mut inner_reference_type= InnerReferenceKind::None;
		foreach( &element_type : tuple_type.element_types )
		{
			var InnerReferenceKind element_inner_reference_type= element_type.GetInnerReferenceKind();
			if( u32(element_inner_reference_type) > u32(inner_reference_type) )
			{
				inner_reference_type= element_inner_reference_type;
			}
		}
		return inner_reference_type;
	}
	if_var( &class_type : GetClassType() )
	{
		return class_type.lock_imut().deref().inner_reference_kind;
	}

	return InnerReferenceKind::None;
}

fn Type::ReferenceIsConvertibleTo( this, Type& dst ) : bool
{
	if( this == dst )
	{
		return true;
	}

	if_var( &src_class_type : this.GetClassType() )
	{
		if_var( &dst_class_type : dst.GetClassType() )
		{
			foreach( &parent : src_class_type.lock_imut().deref().parents )
			{
				if( dst_class_type == parent.class_ || Type(parent.class_).ReferenceIsConvertibleTo(dst) )
				{
					return true;
				}
			}
		}
	}
	return false;
}

fn Type::ToString( this ) : ust::string8
{
	variant_visit( &t : something_ )
	{
		return ToStringHelper::ToString(t);
	}
	halt;
}

op Type::==( Type& l, Type& r ) : bool
{
	if( l.something_.index() != r.something_.index() )
	{
		return false;
	}

	variant_visit( &l_t : l.something_ )
	{
		static_if(
			ust::is_same_type</ typeof(l_t), ust::shared_ptr_final</ArrayType/> />() ||
			ust::is_same_type</ typeof(l_t), ust::shared_ptr_final</TupleType/> />() ||
			ust::is_same_type</ typeof(l_t), ust::shared_ptr_final</RawPointerType/> />() ||
			ust::is_same_type</ typeof(l_t), ust::shared_ptr_final</FunctionType/> />() ||
			ust::is_same_type</ typeof(l_t), ust::shared_ptr_final</FunctionPointerType/> />() )
		{
			return l_t.deref() == r.something_.get</ typeof(l_t) />().try_deref().deref();
		}
		else
		{
			return l_t == r.something_.get</ typeof(l_t) />().try_deref();
		}
	}

	halt;
}

op Type::!=( Type& l, Type& r ) : bool
{
	return !(l == r);
}

//
// ClassType
//

fn ClassType::GetMemberVisibility( this, ust::string8& member_name ) : Synt::ClassVisibility
{
	if_var( v : members_visibility.find(member_name) )
	{
		return v;
	}

	return Synt::ClassVisibility::Public;
}

fn ClassType::SetMemberVisibility( mut this, ust::string8& member_name, Synt::ClassVisibility visibility )
{
	if( visibility == Synt::ClassVisibility::Public )
	{
		if( !members_visibility.find( member_name ).empty() )
		{
			members_visibility.drop( member_name );
		}
	}
	else
	{
		members_visibility.insert( member_name, visibility );
	}
}

//
// Value
//

fn ConstantVariableToString( Type& t, LLVMValueRef constant_value ) : ust::string8
{
	if( constant_value == LLVMValueRef::Null )
	{
		return "";
	}

	if_var( &fundamental_type : t.GetFundamentalType() )
	{
		if( fundamental_type.fundamental_type == U_FundamentalType::bool_ )
		{
			var u64 mut value= zero_init;
			unsafe{  value= LLVMConstIntGetZExtValue( constant_value );  }
			if( value == 0u64 ) {  return "false";  }
			else {  return "true";  }
		}
		else if( IsSignedInteger( fundamental_type.fundamental_type ) )
		{
			var ust::string8 mut suffix;
			if( fundamental_type.fundamental_type == U_FundamentalType::i32_ )
			{  suffix= "";  }
			else
			{  suffix= GetFundamentalTypeName( fundamental_type.fundamental_type );  }

			unsafe{  return ust::to_string8( LLVMConstIntGetSExtValue( constant_value ) ) + suffix;  }
		}
		else if( IsUnsignedInteger( fundamental_type.fundamental_type ) )
		{
			var ust::string8 mut suffix;
			if( fundamental_type.fundamental_type == U_FundamentalType::u32_ )
			{  suffix= "u";  }
			else
			{  suffix= GetFundamentalTypeName( fundamental_type.fundamental_type );  }

			unsafe{  return ust::to_string8( LLVMConstIntGetZExtValue( constant_value ) )  + suffix;  }
		}
		else if( IsChar( fundamental_type.fundamental_type ) )
		{
			var ust::string8 mut suffix;
			if( fundamental_type.fundamental_type == U_FundamentalType::char8_  ) {  suffix= "c8" ;  }
			if( fundamental_type.fundamental_type == U_FundamentalType::char16_ ) {  suffix= "c16";  }
			if( fundamental_type.fundamental_type == U_FundamentalType::char32_ ) {  suffix= "c32";  }
			unsafe{  return ust::to_string8( LLVMConstIntGetZExtValue( constant_value ) ) + suffix;  }
		}
	}
	if_var( &enum_type : t.GetEnumType() )
	{
		foreach( &element : enum_type.lock_imut().deref().elements )
		{
			unsafe
			{
				if( LLVMConstIntGetZExtValue( constant_value ) == LLVMConstIntGetZExtValue( element.value().constexpr_value ) )
				{
					var ust::string8 mut res;
					res+= t.ToString();
					res+= "::";
					res+= element.key();
					return res;
				}
			}
		}
	}

	return "";
}

op VariableTypeExtended::==(VariableTypeExtended& l, VariableTypeExtended& r) : bool
{
	return l.t == r.t && l.value_type == r.value_type;
}

op VariableTypeExtended::!=(VariableTypeExtended& l, VariableTypeExtended& r) : bool
{
	return !(l == r);
}

fn FunctionVariable::VirtuallyEquals( this, FunctionVariable& other ) : bool
{
	halt if( !( this.is_this_call && other.is_this_call ) );

	auto& tl= this.t;
	auto& tr= other.t;

	if( !(
		tl.return_type == tr.return_type &&
		tl.return_value_type == tr.return_value_type &&
		tl.is_unsafe == tr.is_unsafe &&
		tl.params.size() == tr.params.size() &&
		tl.params.size() > 0s &&
		tl.params.front().value_type == tr.params.front().value_type
		) )
	{
		return false;
	}

	for( auto mut i= 1s; i < tl.params.size(); ++i )
	{
		auto& param_l= tl.params[i];
		auto& param_r= tr.params[i];
		if( !(
			param_l.t == param_r.t &&
			param_l.value_type == param_r.value_type
			) )
		{
			return false;
		}
	}

	// TODO - check references consequences!!!

	return true;
}

namespace ValueKindHelper
{

fn GetValueKind( Variable& v ) : ust::array_view_imut</ char8 />
{
	return "variable";
}

fn GetValueKind( Type& v ) : ust::array_view_imut</ char8 />
{
	return "type";
}

fn GetValueKind( FunctionsSet& v ) : ust::array_view_imut</ char8 />
{
	return "functions set";
}

fn GetValueKind( ThisMethodsSet& v ) : ust::array_view_imut</ char8 />
{
	return "this + methods set";
}

fn GetValueKind( ust::shared_ptr_imut</TypeTemplatesSet/>& v ) : ust::array_view_imut</ char8 />
{
	return "type templates set";
}

fn GetValueKind( ErrorValue& v ) : ust::array_view_imut</ char8 />
{
	return "error value";
}

} // namespace ValueKindHelper

fn GetValueKindName( Value& v ) : ust::array_view_imut</ char8 />
{
	variant_visit( &el : v )
	{
		return ValueKindHelper::GetValueKind( el );
	}

	halt;
}

//
// Templates
//

fn TypeTemplate::SignatureParamsIsSame( TemplateBase& l, TemplateBase& r ) : bool
{
	// TODO - implement "op==" for vectors.
	if( l.signature_params.size() != r.signature_params.size() )
	{
		return false;
	}

	for( auto mut i= 0s; i < l.signature_params.size(); ++i )
	{
		if( !( l.signature_params[i] == r.signature_params[i] ) )
		{
			return false;
		}
	}

	return true;
}

fn TemplateSignatureParam::conversion_constructor( TemplateParam mut template_param )
	( something_( move(template_param) ) )
{}

fn TemplateSignatureParam::conversion_constructor( TypeParam mut type_param )
	( something_( move(type_param) ) )
{}

fn TemplateSignatureParam::conversion_constructor( VariableParam mut variable_param )
	( something_( move(variable_param) ) )
{}

fn TemplateSignatureParam::conversion_constructor( ArrayTypeParam mut array_type_param )
	( something_( ust::make_box( move(array_type_param) ) ) )
{}

fn TemplateSignatureParam::conversion_constructor( TupleTypeParam mut tuple_type_param )
	( something_( ust::make_box( move(tuple_type_param) ) ) )
{}

fn TemplateSignatureParam::conversion_constructor( RawPointerTypeParam mut raw_pointer_type_param )
	( something_( ust::make_box( move(raw_pointer_type_param) ) ) )
{}

fn TemplateSignatureParam::conversion_constructor( FunctionTypeParam mut function_type_param )
	( something_( ust::make_box( move(function_type_param) ) ) )
{}

fn TemplateSignatureParam::conversion_constructor( SpecializedTemplateParam mut specialized_template_param )
	( something_( ust::make_box( move(specialized_template_param) ) ) )
{}

fn TemplateSignatureParam::GetTemplateParam(this) : ust::optional_ref_imut</ TemplateParam />'this'
{
	return something_.get</TemplateParam/>();
}

fn TemplateSignatureParam::GetTypeParam(this) : ust::optional_ref_imut</ TypeParam />'this'
{
	return something_.get</TypeParam/>();
}

fn TemplateSignatureParam::GetVariableParam(this) : ust::optional_ref_imut</ VariableParam />'this'
{
	return something_.get</VariableParam/>();
}

fn TemplateSignatureParam::GetArrayTypeParam(this) : ust::optional_ref_imut</ ArrayTypeParam />'this'
{
	if_var( &array_type_param : something_.get</ ust::box</ArrayTypeParam/> />() )
	{
		return ust::optional_ref_imut</ ArrayTypeParam />(array_type_param.deref());
	}

	return ust::optional_ref_imut</ ArrayTypeParam />();
}

fn TemplateSignatureParam::GetTupleTypeParam(this) : ust::optional_ref_imut</ TupleTypeParam />'this'
{
	if_var( &tuple_type_param : something_.get</ ust::box</TupleTypeParam/> />() )
	{
		return ust::optional_ref_imut</ TupleTypeParam />(tuple_type_param.deref());
	}

	return ust::optional_ref_imut</ TupleTypeParam />();
}

fn TemplateSignatureParam::GetRawPointerTypeParam(this) : ust::optional_ref_imut</ RawPointerTypeParam />'this'
{
	if_var( &raw_pointer_type_param : something_.get</ ust::box</RawPointerTypeParam/> />() )
	{
		return ust::optional_ref_imut</ RawPointerTypeParam />(raw_pointer_type_param.deref());
	}

	return ust::optional_ref_imut</ RawPointerTypeParam />();
}

fn TemplateSignatureParam::GetFunctionTypeParam(this) : ust::optional_ref_imut</ FunctionTypeParam />'this'
{
	if_var( &function_type_param : something_.get</ ust::box</FunctionTypeParam/> />() )
	{
		return ust::optional_ref_imut</ FunctionTypeParam />(function_type_param.deref());
	}

	return ust::optional_ref_imut</ FunctionTypeParam />();
}


fn TemplateSignatureParam::GetSpecializedTemplateParam(this) : ust::optional_ref_imut</ SpecializedTemplateParam />'this'
{
	if_var( &specialized_template_param : something_.get</ ust::box</SpecializedTemplateParam/> />() )
	{
		return ust::optional_ref_imut</ SpecializedTemplateParam />(specialized_template_param.deref());
	}

	return ust::optional_ref_imut</ SpecializedTemplateParam />();
}

op TemplateSignatureParam::TemplateParam::==(TemplateParam& l, TemplateParam& r) : bool
{
	return l.index == r.index;
}

op TemplateSignatureParam::TypeParam::==(TypeParam& l, TypeParam& r) : bool
{
	return l.t == r.t;
}

op TemplateSignatureParam::VariableParam::==(VariableParam& l, VariableParam& r) : bool
{
	if( l.v.t != r.v.t )
	{
		return false;
	}

	unsafe
	{
		return
			LLVMConstIntGetZExtValue(l.v.constexpr_value) ==
			LLVMConstIntGetZExtValue(r.v.constexpr_value);
	}
}

op TemplateSignatureParam::ArrayTypeParam::==(ArrayTypeParam& l, ArrayTypeParam& r) : bool
{
	return l.element_type == r.element_type && l.element_count == r.element_count;
}

op TemplateSignatureParam::TupleTypeParam::==(TupleTypeParam& l, TupleTypeParam& r) : bool
{
	if( l.element_types.size() != r.element_types.size() )
	{
		return false;
	}

	// TODO - implement "op==" for vectors.
	for( auto mut i= 0s; i < l.element_types.size(); ++i )
	{
		if( !(l.element_types[i] == r.element_types[i]) )
		{
			return false;
		}
	}

	return true;
}

op TemplateSignatureParam::RawPointerTypeParam::==(RawPointerTypeParam& l, RawPointerTypeParam& r) : bool
{
	return l.element_type == r.element_type;
}

op TemplateSignatureParam::FunctionTypeParam::Param::==(Param& l, Param& r) : bool
{
	return l.t == r.t && l.value_type == r.value_type;
}

op TemplateSignatureParam::FunctionTypeParam::==(FunctionTypeParam& l, FunctionTypeParam& r) : bool
{
	if( !(l.return_type == r.return_type) ||
		l.return_value_type != r.return_value_type ||
		l.is_unsafe != r.is_unsafe ||
		l.params.size() != r.params.size() )
	{
		return false;
	}

	// TODO - implement "op==" for vectors.
	for( auto mut i= 0s; i < l.params.size(); ++i )
	{
		if( !(l.params[i] == r.params[i]) )
		{
			return false;
		}
	}

	return true;
}

op TemplateSignatureParam::SpecializedTemplateParam::==(SpecializedTemplateParam& l, SpecializedTemplateParam& r) : bool
{
	if( l.type_templates_set != r.type_templates_set ||
		l.params.size() != r.params.size() )
	{
		return false;
	}

	// TODO - implement "op==" for vectors.
	for( auto mut i= 0s; i < l.params.size(); ++i )
	{
		if( !(l.params[i] == r.params[i]) )
		{
			return false;
		}
	}

	return true;
}

op TemplateSignatureParam::==(TemplateSignatureParam& l, TemplateSignatureParam& r) : bool
{
	if( l.something_.index() != r.something_.index() )
	{
		return false;
	}

	variant_visit( &l_t : l.something_ )
	{
		static_if(
			ust::is_same_type</ typeof(l_t), ust::box</ArrayTypeParam/> />() ||
			ust::is_same_type</ typeof(l_t), ust::box</TupleTypeParam/> />() ||
			ust::is_same_type</ typeof(l_t), ust::box</RawPointerTypeParam/> />() ||
			ust::is_same_type</ typeof(l_t), ust::box</FunctionTypeParam/> />() ||
			ust::is_same_type</ typeof(l_t), ust::box</SpecializedTemplateParam/> />() )
		{
			return l_t.deref() == r.something_.get</ typeof(l_t) />().try_deref().deref();
		}
		else
		{
			return l_t == r.something_.get</ typeof(l_t) />().try_deref();
		}
	}

	halt;
}

op NamesScopeValue::==( NamesScopeValue&l, NamesScopeValue& r ) : bool
{
	if( l.something_.index() != r.something_.index() )
	{
		return false;
	}

	variant_visit( &el : l.something_ )
	{
		return el == r.something_.get</typeof(el)/>().try_deref();
	}

	halt;
}

op NamesScopeValue::!=( NamesScopeValue&l, NamesScopeValue& r ) : bool
{
	return !(l == r);
}

//
// NamesScope
//

fn NamesScope::constructor(
	ust::string8 mut name,
	ust::shared_ptr_nullable_imut</NamesScope/>& parent )
	(
		name_= move(name),
		parent_(parent)
	)
{
}

fn NamesScope::GetThisScopeValue( this, ust::string8& name ) : ust::optional_ref_imut</ NamesScopeValue />'this'
{
	return names_map_.find( name );
}

fn NamesScope::IsInsideTemplate( this ) : bool
{
	if( name_ == c_template_args_namespace_name )
	{
		return true;
	}
	auto parent= GetParent();
	if( !parent.empty() )
	{
		return parent.try_lock_imut().deref().IsInsideTemplate();
	}

	return false;
}

fn NamesScope::AddName( mut this, ust::string8 mut name, NamesScopeValue mut value ) : ust::optional_ref_mut</ NamesScopeValue />'this'
{
	if( !names_map_.find(name).empty() )
	{
		return ust::optional_ref_mut</ NamesScopeValue />();
	}

	return ust::optional_ref_mut</ NamesScopeValue />( names_map_.insert(move(name), move(value) ) );
}

fn NamesScope::GetParent( this ) : ust::shared_ptr_nullable_imut</NamesScope/>
{
	return parent_.lock();
}

fn NamesScope::SetErrors( mut this, ErrorsContainerPtr errors_container )
{
	errors_container_= errors_container;
}

fn NamesScope::GetErrors( this ) : ErrorsContainerPtr
{
	if( errors_container_.empty() )
	{
		return parent_.lock().try_lock_imut().deref().GetErrors();
	}

	return errors_container_;
}

fn NamesScope::range( this ) : ust::unordered_map</ust::string8, NamesScopeValue/>::unordered_map_range</false/>'this'
{
	return names_map_.range();
}

fn NamesScope::GetThisNamespaceName( this ) : ust::string8&
{
	return name_;
}

fn NamesScope::ToString( this ) : ust::string8
{
	if( !class_.empty() )
	{
		auto class_lock= class_.try_lock_imut();
		auto& class_type= class_lock.deref();
		if_var( &base_template : class_type.base_template )
		{
			// This is class template. So, parent namespace is arguments names scope.

			auto& type_template= base_template.class_template.deref();
			auto parent= type_template.parent_names_scope.lock();
			if( !parent.empty() )
			{
				var ust::string8 mut res;

				auto parent_lock= parent.try_lock_imut();
				if( !parent_lock.deref().GetParent().empty() )
				{
					res+= parent.try_lock_imut().deref().ToString();
					res+= "::";
				}
				res+= type_template.syntax_element.deref().name;

				res+= "</";
				foreach( &arg : base_template.signature_args )
				{
					if_var( t : arg.get</Type/>() )
					{
						res+= t.ToString();
					}
					if_var( v : arg.get</Variable/>() )
					{
						res+= ConstantVariableToString( v.t, v.constexpr_value );
					}

					if( ust::ref_cmp_ne( arg, base_template.signature_args.back() ) )
					{
						res+= ", ";
					}
				}
				res+= "/>";

				return move(res);
			}
		}
		if_var( &typeinfo_src_type : class_type.typeinfo_src_type_ )
		{
			var ust::string8 mut res;
			res= KeywordToString(Keyword::typeof_);
			res+= "(";
			res+= KeywordToString(Keyword::typeinfo_);
			res+= "</";
			res+= typeinfo_src_type.ToString();
			res+= "/>";
			res+=")";
			return move(res);
		}
	}

	var ust::string8 mut res;

	auto mut parent= parent_.lock();
	if( !parent.empty() )
	{
		auto parent_lock= parent.try_lock_imut();
		if( !parent_lock.deref().GetParent().empty() )
		{
			res+= parent_lock.deref().ToString();
			res+= "::";
		}
	}

	res+= name_;
	return move(res);
}

fn NamesScope::SetClass( mut this, ust::shared_ptr_nullable_mut</ClassType/> in_class_ )
{
	class_= in_class_;
}

fn NamesScope::GetClass( this ) : ust::shared_ptr_nullable_mut</ClassType/>
{
	return class_;
}

fn NamesScope::AddAccessRightsFor( mut this, ClassTypePtr& class_type, Synt::ClassVisibility visibility )
{
	access_rights_.insert( class_type, visibility );
}

fn NamesScope::GetAccessFor( this, ClassTypePtr& class_type ) : Synt::ClassVisibility
{
	auto mut this_namespace_visibility= Synt::ClassVisibility::Public;
	if_var( visibility : access_rights_.find( class_type ) )
	{
		this_namespace_visibility= visibility;
	}

	auto mut parent_namespace_visibility= Synt::ClassVisibility::Public;
	auto parent= GetParent();
	if( !parent.empty() )
	{
		parent_namespace_visibility= parent.try_lock_imut().deref().GetAccessFor( class_type );
	}

	// TODO - maybe add to language possibility to order compare enum values?
	return select( u32(this_namespace_visibility) > u32(parent_namespace_visibility) ? this_namespace_visibility : parent_namespace_visibility );
}

fn NamesScope::CopyAccessRightsFrom( mut this, NamesScope& src )
{
	access_rights_= src.access_rights_;
}

} // namespace U1
