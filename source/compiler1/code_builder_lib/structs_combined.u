import "/string_conversions.u"
import "../lex_synt_lib/keywords.uh"
import "structs_combined.uh"

namespace U
{

//
// Type
//

namespace ToStringHelper
{

template</type T/>
fn ToString( ust::box</T/>& b ) : ust::string8
{
	return ToStringHelper::ToString( b.get_ref() );
}

fn ToString( FundamentalType& fundamental_type ) : ust::string8
{
	return ust::string8( GetFundamentalTypeName( fundamental_type.fundamental_type ) );
}

fn ToString( ArrayType& array_type ) : ust::string8
{
	var ust::string8 mut result;
	result+= "[ ";
	result+= array_type.element_type.ToString();
	result+= ", ";
	result+= ust::to_string8(array_type.element_count);
	result+= " ]";
	return move(result);
}

fn ToString( TupleType& tuple_type ) : ust::string8
{
	var ust::string8 mut result;
	result+= KeywordToString( Keyword::tup_ );
	result+= "[ ";

	foreach( &element_type : tuple_type.element_types )
	{
		result+= element_type.ToString();
		if( ust::ref_to_int(element_type) != ust::ref_to_int(tuple_type.element_types.back()) )
		{
			result+= ", ";
		}
	}

	result+= " ]";
	return move(result);
}


fn ToString( FunctionType& function_type ) : ust::string8
{
	var ust::string8 mut result;

	result+= KeywordToString( Keyword::fn_ );

	result+= "(";
	foreach( &param : function_type.params )
	{
		result+= param.t.ToString();
		result+= " param";

		if( ust::ref_to_int(param) != ust::ref_to_int(function_type.params.back()))
		{
			result+= ", ";
		}
	}
	result+= ") ";

	if( function_type.is_unsafe )
	{
		result+= KeywordToString( Keyword::unsafe_ );
		result+= " ";
	}

	result+= ": ";

	result+= function_type.return_type.ToString();

	return move(result);
}

fn ToString( FunctionPointerType& function_pointer_type ) : ust::string8
{
	return ToString( function_pointer_type.function_type );
}

fn ToString( ClassTypePtr& class_type ) : ust::string8
{
	return class_type.lock_imut().get_ref().members.lock_imut().get_ref().ToString();
}

fn ToString( EnumTypePtr& enum_type ) : ust::string8
{
	return enum_type.lock_imut().get_ref().names_scope.lock_imut().get_ref().ToString();
}

} // namespace ToStringHelper

fn FundamentalType::constructor( U_FundamentalType in_fundamental_type, LLVMTypeRef in_llvm_type )
	( fundamental_type= in_fundamental_type, llvm_type= in_llvm_type )
{}

fn FundamentalType::GetSize(this) : size_type
{
	if( fundamental_type ==  U_FundamentalType::InvalidType){ return 0s; }
	if( fundamental_type ==  U_FundamentalType::void_  ){ return 0s; }
	if( fundamental_type ==  U_FundamentalType::bool_ ){ return 1s; }
	if( fundamental_type ==  U_FundamentalType::i8_   ){ return 1s; }
	if( fundamental_type ==  U_FundamentalType::u8_   ){ return 1s; }
	if( fundamental_type ==  U_FundamentalType::i16_  ){ return 2s; }
	if( fundamental_type ==  U_FundamentalType::u16_  ){ return 2s; }
	if( fundamental_type ==  U_FundamentalType::i32_  ){ return 4s; }
	if( fundamental_type ==  U_FundamentalType::u32_  ){ return 4s; }
	if( fundamental_type ==  U_FundamentalType::i64_  ){ return 8s; }
	if( fundamental_type ==  U_FundamentalType::u64_  ){ return 8s; }
	if( fundamental_type ==  U_FundamentalType::i128_ ){ return 16s; }
	if( fundamental_type ==  U_FundamentalType::u128_ ){ return 16s; }
	if( fundamental_type ==  U_FundamentalType::f32_ ){ return 4s; }
	if( fundamental_type ==  U_FundamentalType::f64_ ){ return 8s; }
	if( fundamental_type ==  U_FundamentalType::char8_  ){ return 1s; }
	if( fundamental_type ==  U_FundamentalType::char16_ ){ return 2s; }
	if( fundamental_type ==  U_FundamentalType::char32_ ){ return 4s; }

	halt;
}

op FundamentalType::==( FundamentalType& l, FundamentalType& r ) : bool
{
	return l.fundamental_type == r.fundamental_type;
}

op FundamentalType::!=( FundamentalType& l, FundamentalType& r ) : bool
{
	return !(l == r);
}

op ArrayType::==( ArrayType& l, ArrayType& r ) : bool
{
	return l.element_type == r.element_type && l.element_count == r.element_count;
}

op ArrayType::!=( ArrayType& l, ArrayType& r ) : bool
{
	return !(l == r);
}

op TupleType::==( TupleType& l, TupleType& r ) : bool
{
	if( l.element_types.size() != r.element_types.size() )
	{
		return false;
	}

	for( auto mut i= 0s; i < l.element_types.size(); ++i )
	{
		if( l.element_types[i] != r.element_types[i] )
		{
			return false;
		}
	}

	return true;
}

op TupleType::!=( TupleType& l, TupleType& r ) : bool
{
	return !(l == r);
}

op FunctionType::Param::==(Param& l, Param& r) : bool
{
	return
		l.t == r.t &&
		l.is_reference == r.is_reference &&
		l.is_mutable == r.is_mutable;
}

op FunctionType::Param::!=(Param& l, Param& r) : bool
{
	return !(l == r);
}

fn FunctionType::PointerCanBeConvertedTo( this, FunctionType& dst ) : bool
{
	if(
		this.return_type != dst.return_type ||
		this.return_value_is_reference != dst.return_value_is_reference ||
		( !this.return_value_is_mutable && dst.return_value_is_mutable ) || // Allow mutability conversions, except mut->imut
		( this.is_unsafe && !dst.is_unsafe ) || // Disable unsafe function to safe function conversion
		this.params.size() != dst.params.size() )
	{
		return false;
	}

	for( auto mut i= 0s; i < params.size(); ++i )
	{
		auto& this_param= this.params[i];
		auto& dst_param= dst.params[i];
		if( this_param.t != dst_param.t ||
			this_param.is_reference != dst_param.is_reference ||
			(this_param.is_mutable && !dst_param.is_mutable ) ) // Allow mutability conversions, except mut->imut
		{
			return false;
		}
	}

	return true;
}

op FunctionType::==( FunctionType& l, FunctionType& r ) : bool
{
	if( l.params.size() != r.params.size() )
	{
		return false;
	}

	for( auto mut i= 0s; i < l.params.size(); ++i )
	{
		if( l.params[i] != r.params[i] )
		{
			return false;
		}
	}

	return
		l.return_type == r.return_type &&
		l.return_value_is_reference == r.return_value_is_reference &&
		l.return_value_is_mutable == r.return_value_is_mutable &&
		l.is_unsafe == r.is_unsafe;
}

op FunctionType::!=( FunctionType& l, FunctionType& r ) : bool
{
	return !(l == r);
}

op FunctionPointerType::==( FunctionPointerType& l, FunctionPointerType& r ) : bool
{
	return l.function_type == r.function_type;
}

op FunctionPointerType::!=( FunctionPointerType& l, FunctionPointerType& r ) : bool
{
	return !(l == r);
}

fn Type::constructor( mut this, Type &imut other )
{
	this= other;
}

op Type::=( mut this, Type &imut other )
{
	if_var( &fundamental_type : other.GetFundamentalType() )
	{
		this= Type( fundamental_type );
		return;
	}
	if_var( &array_type : other.GetArrayType() )
	{
		this= Type( array_type );
		return;
	}
	if_var( &tuple_type : other.GetTupleType() )
	{
		this= Type( tuple_type );
		return;
	}
	if_var( &function_type : other.GetFunctionType() )
	{
		this= Type( function_type );
		return;
	}
	if_var( &function_pointer_type : other.GetFunctionPointerType() )
	{
		this= Type( function_pointer_type );
		return;
	}
	if_var( &class_type_ptr : other.GetClassType() )
	{
		this= Type( class_type_ptr );
		return;
	}
	if_var( &enum_type_ptr : other.GetEnumType() )
	{
		this= Type( enum_type_ptr );
		return;
	}

	halt;
}

fn Type::conversion_constructor( FundamentalType mut fundamental_type )
	( something_( move(fundamental_type) ) )
{}

fn Type::conversion_constructor( ArrayType mut array_type )
	( something_( ust::box</ArrayType/>(move(array_type)) ) )
{}

fn Type::conversion_constructor( TupleType mut tuple_type )
	( something_( ust::box</TupleType/>(move(tuple_type)) ) )
{}

fn Type::conversion_constructor( FunctionType mut function_type )
	( something_( ust::box</FunctionType/>(move(function_type)) ) )
{}

fn Type::conversion_constructor( FunctionPointerType mut function_pointer_type )
	( something_( ust::box</FunctionPointerType/>(move(function_pointer_type)) ) )
{}

fn Type::conversion_constructor( ClassTypePtr mut class_type )
	( something_( move(class_type) ) )
{}

fn Type::conversion_constructor( EnumTypePtr mut enum_type )
	( something_( move(enum_type) ) )
{}

fn Type::GetFundamentalType(  mut this ) : ust::optional_ref</FundamentalType, true  />'this'
{
	return something_.get</FundamentalType/>();
}

fn Type::GetFundamentalType( imut this ) : ust::optional_ref</FundamentalType, false />'this'
{
	return something_.get</FundamentalType/>();
}

fn Type::GetArrayType(  mut this ) : ust::optional_ref</ArrayType, true  />'this'
{
	if_var( &mut b : something_.get</ust::box</ArrayType/>/>() )
	{
		return ust::optional_ref</ArrayType, true  />( b.get_ref() );
	}

	return ust::optional_ref</ArrayType, true  />();
}

fn Type::GetArrayType( imut this ) : ust::optional_ref</ArrayType, false />'this'
{
	if_var( &b : something_.get</ust::box</ArrayType/>/>() )
	{
		return ust::optional_ref</ArrayType, false />( b.get_ref() );
	}

	return ust::optional_ref</ArrayType, false />();
}

fn Type::GetTupleType(  mut this ) : ust::optional_ref</TupleType, true  />'this'
{
	if_var( &mut b : something_.get</ust::box</TupleType/>/>() )
	{
		return ust::optional_ref</TupleType, true  />( b.get_ref() );
	}

	return ust::optional_ref</TupleType, true  />();
}

fn Type::GetTupleType( imut this ) : ust::optional_ref</TupleType, false />'this'
{
	if_var( &b : something_.get</ust::box</TupleType/>/>() )
	{
		return ust::optional_ref</TupleType, false />( b.get_ref() );
	}

	return ust::optional_ref</TupleType, false />();
}

fn Type::GetFunctionType(  mut this ) : ust::optional_ref</FunctionType, true  />'this'
{
	if_var( &mut b : something_.get</ust::box</FunctionType/>/>() )
	{
		return ust::optional_ref</FunctionType, true  />( b.get_ref() );
	}

	return ust::optional_ref</FunctionType, true  />();
}

fn Type::GetFunctionType( imut this ) : ust::optional_ref</FunctionType, false />'this'
{
	if_var( &b : something_.get</ust::box</FunctionType/>/>() )
	{
		return ust::optional_ref</FunctionType, false />( b.get_ref() );
	}

	return ust::optional_ref</FunctionType, false  />();
}

fn Type::GetFunctionPointerType(  mut this ) : ust::optional_ref</FunctionPointerType, true  />'this'
{
	if_var( &mut b : something_.get</ust::box</FunctionPointerType/>/>() )
	{
		return ust::optional_ref</FunctionPointerType, true  />( b.get_ref() );
	}

	return ust::optional_ref</FunctionPointerType, true  />();
}

fn Type::GetFunctionPointerType( imut this ) : ust::optional_ref</FunctionPointerType, false />'this'
{
	if_var( &b : something_.get</ust::box</FunctionPointerType/>/>() )
	{
		return ust::optional_ref</FunctionPointerType, false />( b.get_ref() );
	}

	return ust::optional_ref</FunctionPointerType, false />();
}

fn Type::GetClassType(  mut this ) : ust::optional_ref</ClassTypePtr, true  />'this'
{
	return something_.get</ClassTypePtr/>();
}

fn Type::GetClassType( imut this ) : ust::optional_ref</ClassTypePtr, false />'this'
{
	return something_.get</ClassTypePtr/>();
}

fn Type::GetEnumType(  mut this ) : ust::optional_ref</EnumTypePtr, true  />'this'
{
	return something_.get</EnumTypePtr/>();
}

fn Type::GetEnumType( imut this ) : ust::optional_ref</EnumTypePtr, false />'this'
{
	return something_.get</EnumTypePtr/>();
}

fn Type::GetLLVMType( this ) : LLVMTypeRef
{
	if_var( &fundamental_type : GetFundamentalType() )
	{
		return fundamental_type.llvm_type;
	}
	if_var( &array_type : GetArrayType() )
	{
		return array_type.llvm_type;
	}
	if_var( &tuple_type : GetTupleType() )
	{
		return tuple_type.llvm_type;
	}
	if_var( &function_type : GetFunctionType() )
	{
		return function_type.llvm_type;
	}
	if_var( &function_pointer_type : GetFunctionPointerType() )
	{
		return function_pointer_type.llvm_type;
	}
	if_var( &class_type_ptr : GetClassType() )
	{
		return class_type_ptr.lock_imut().get_ref().llvm_type;
	}
	if_var( &enum_type_ptr : GetEnumType() )
	{
		return enum_type_ptr.lock_imut().get_ref().underlaying_type.llvm_type;
	}

	halt;
}

fn Type::IsDefaultConstructible( this ) : bool
{
	if_var( &array_type : GetArrayType() )
	{
		return array_type.element_count == 0u64 || array_type.element_type.IsDefaultConstructible();
	}
	if_var( &tuple_type : GetTupleType() )
	{
		foreach( &element_type : tuple_type.element_types )
		{
			if( !element_type.IsDefaultConstructible() )
			{
				return false;
			}
		}
		return true;
	}
	if_var( &class_type : GetClassType() )
	{
		return class_type.lock_imut().get_ref().is_default_constructible;
	}
	return false;
}

fn Type::IsCopyConstructible( this ) : bool
{
	if( !GetFundamentalType().empty() || !GetEnumType().empty() || !GetFunctionPointerType().empty() )
	{
		return true;
	}
	if_var( &array_type : GetArrayType() )
	{
		return array_type.element_count == 0u64 || array_type.element_type.IsCopyConstructible();
	}
	if_var( &tuple_type : GetTupleType() )
	{
		foreach( &element_type : tuple_type.element_types )
		{
			if( !element_type.IsCopyConstructible() )
			{
				return false;
			}
		}
		return true;
	}
	if_var( &class_type : GetClassType() )
	{
		return class_type.lock_imut().get_ref().is_copy_constructible;
	}
	return false;
}

fn Type::IsCopyAssignable( this ) : bool
{
	if( !GetFundamentalType().empty() || !GetEnumType().empty() || !GetFunctionPointerType().empty() )
	{
		return true;
	}
	if_var( &array_type : GetArrayType() )
	{
		return array_type.element_count == 0u64 || array_type.element_type.IsCopyAssignable();
	}
	if_var( &tuple_type : GetTupleType() )
	{
		foreach( &element_type : tuple_type.element_types )
		{
			if( !element_type.IsCopyAssignable() )
			{
				return false;
			}
		}
		return true;
	}
	if_var( &class_type : GetClassType() )
	{
		return class_type.lock_imut().get_ref().is_copy_assignable;
	}
	return false;
}

fn Type::CanBeConstexpr( this ) : bool
{
	if( !GetFundamentalType().empty() || !GetEnumType().empty() || !GetFunctionPointerType().empty() )
	{
		return true;
	}
	if_var( &array_type : GetArrayType() )
	{
		return array_type.element_type.CanBeConstexpr();
	}
	if_var( &tuple_type : GetTupleType() )
	{
		foreach( &element_type : tuple_type.element_types )
		{
			if( !element_type.CanBeConstexpr() )
			{
				return false;
			}
		}
		return true;
	}
	if_var( &class_type : GetClassType() )
	{
		return class_type.lock_imut().get_ref().can_be_constexpr;
	}

	return false;
}

fn Type::IsAbstract( this ) : bool
{
	if_var( &array_type : GetArrayType() )
	{
		return array_type.element_count > 0u64 && array_type.element_type.IsAbstract();
	}
	if_var( &tuple_type : GetTupleType() )
	{
		foreach( &element_type : tuple_type.element_types )
		{
			if( element_type.IsAbstract() )
			{
				return true;
			}
		}
		return false;
	}
	if_var( &class_type : GetClassType() )
	{
		auto kind= class_type.lock_imut().get_ref().kind;
		return kind == ClassType::Kind::Abstract || kind == ClassType::Kind::Interface;
	}

	return false;
}

fn Type::ReferenceIsConvertibleTo( this, Type& dst ) : bool
{
	if( this == dst )
	{
		return true;
	}

	if_var( &dst_fundamental_type : dst.GetFundamentalType() )
	{
		return dst_fundamental_type.fundamental_type == U_FundamentalType::void_;
	}

	if_var( &src_class_type : this.GetClassType() )
	{
		if_var( &dst_class_type : dst.GetClassType() )
		{
			foreach( &parent : src_class_type.lock_imut().get_ref().parents )
			{
				if( dst_class_type == parent.class_ || Type(parent.class_).ReferenceIsConvertibleTo(dst) )
				{
					return true;
				}
			}
		}
	}
	return false;
}

fn Type::ToString( this ) : ust::string8
{
	variant_visit( &t : something_ )
	{
		return ToStringHelper::ToString(t);
	}
	halt;
}

op Type::==( Type& l, Type& r ) : bool
{
	if( l.something_.index() != r.something_.index() )
	{
		return false;
	}

	variant_visit( &l_t : l.something_ )
	{
		static_if(
			ust::is_same_type</ typeof(l_t), ust::box</ArrayType/> />() ||
			ust::is_same_type</ typeof(l_t), ust::box</TupleType/> />() ||
			ust::is_same_type</ typeof(l_t), ust::box</FunctionType/> />() ||
			ust::is_same_type</ typeof(l_t), ust::box</FunctionPointerType/> />() )
		{
			return l_t.get_ref() == r.something_.get</ typeof(l_t) />().get_ref().get_ref();
		}
		else
		{
			return l_t == r.something_.get</ typeof(l_t) />().get_ref();
		}
	}

	halt;
}

op Type::!=( Type& l, Type& r ) : bool
{
	return !(l == r);
}

//
// ClassType
//

fn ClassType::GetMemberVisibility( this, ust::string8& member_name ) : Synt::ClassVisibility
{
	if_var( v : members_visibility.find(member_name) )
	{
		return v;
	}

	return Synt::ClassVisibility::Public;
}

fn ClassType::SetMemberVisibility( mut this, ust::string8& member_name, Synt::ClassVisibility visibility )
{
	if( visibility == Synt::ClassVisibility::Public )
	{
		if( !members_visibility.find( member_name ).empty() )
		{
			members_visibility.drop( member_name );
		}
	}
	else
	{
		members_visibility.insert( member_name, visibility );
	}
}

//
// Value
//

fn FunctionVariable::VirtuallyEquals( this, FunctionVariable& other ) : bool
{
	halt if( !( this.is_this_call && other.is_this_call ) );

	auto& tl= this.t;
	auto& tr= other.t;

	if( !(
		tl.return_type == tr.return_type &&
		tl.return_value_is_reference == tr.return_value_is_reference &&
		tl.return_value_is_mutable == tr.return_value_is_mutable &&
		tl.is_unsafe == tr.is_unsafe &&
		tl.params.size() == tr.params.size() &&
		tl.params.size() > 0s &&
		tl.params.front().is_mutable == tr.params.front().is_mutable
		) )
	{
		return false;
	}

	for( auto mut i= 1s; i < tl.params.size(); ++i )
	{
		auto& param_l= tl.params[i];
		auto& param_r= tr.params[i];
		if( !(
			param_l.t == param_r.t &&
			param_l.is_mutable == param_r.is_mutable &&
			param_l.is_reference == param_r.is_reference
			) )
		{
			return false;
		}
	}

	return true;
}

namespace ValueKindHelper
{

fn GetValueKind( Variable& v ) : ust::array_view_imut</ char8 />
{
	return "variable";
}

fn GetValueKind( Type& v ) : ust::array_view_imut</ char8 />
{
	return "type";
}

fn GetValueKind( FunctionsSet& v ) : ust::array_view_imut</ char8 />
{
	return "functions set";
}

fn GetValueKind( ThisMethodsSet& v ) : ust::array_view_imut</ char8 />
{
	return "this + methods set";
}

fn GetValueKind( ust::shared_ptr_imut</TypeTemplatesSet/>& v ) : ust::array_view_imut</ char8 />
{
	return "type templates set";
}

fn GetValueKind( ErrorValue& v ) : ust::array_view_imut</ char8 />
{
	return "error value";
}

} // namespace ValueKindHelper

fn GetValueKindName( Value& v ) : ust::array_view_imut</ char8 />
{
	variant_visit( &el : v )
	{
		return ValueKindHelper::GetValueKind( el );
	}

	halt;
}

//
// Templates
//

fn TemplateSignatureParam::conversion_constructor( TemplateParam mut template_param )
	( something_( move(template_param) ) )
{}

fn TemplateSignatureParam::conversion_constructor( TypeParam mut type_param )
	( something_( move(type_param) ) )
{}

fn TemplateSignatureParam::conversion_constructor( VariableParam mut variable_param )
	( something_( move(variable_param) ) )
{}

fn TemplateSignatureParam::conversion_constructor( ArrayTypeParam mut array_type_param )
	( something_( ust::box</ ArrayTypeParam />( move(array_type_param) ) ) )
{}

fn TemplateSignatureParam::conversion_constructor( FunctionTypeParam mut function_type_param )
	( something_( ust::box</ FunctionTypeParam />( move(function_type_param) ) ) )
{}

fn TemplateSignatureParam::conversion_constructor( SpecializedTemplateParam mut specialized_template_param )
	( something_( ust::box</ SpecializedTemplateParam />( move(specialized_template_param) ) ) )
{}

fn TemplateSignatureParam::GetTemplateParam(this) : ust::optional_ref</ TemplateParam, false />'this'
{
	return something_.get</TemplateParam/>();
}

fn TemplateSignatureParam::GetTypeParam(this) : ust::optional_ref</ TypeParam, false />'this'
{
	return something_.get</TypeParam/>();
}

fn TemplateSignatureParam::GetVariableParam(this) : ust::optional_ref</ VariableParam, false />'this'
{
	return something_.get</VariableParam/>();
}

fn TemplateSignatureParam::GetArrayTypeParam(this) : ust::optional_ref</ ArrayTypeParam, false />'this'
{
	if_var( &array_type_param : something_.get</ ust::box</ArrayTypeParam/> />() )
	{
		return ust::optional_ref</ ArrayTypeParam, false />(array_type_param.get_ref());
	}

	return ust::optional_ref</ ArrayTypeParam, false />();
}

fn TemplateSignatureParam::GetFunctionTypeParam(this) : ust::optional_ref</ FunctionTypeParam, false />'this'
{
	if_var( &function_type_param : something_.get</ ust::box</FunctionTypeParam/> />() )
	{
		return ust::optional_ref</ FunctionTypeParam, false />(function_type_param.get_ref());
	}

	return ust::optional_ref</ FunctionTypeParam, false />();
}


fn TemplateSignatureParam::GetSpecializedTemplateParam(this) : ust::optional_ref</ SpecializedTemplateParam, false />'this'
{
	if_var( &specialized_template_param : something_.get</ ust::box</SpecializedTemplateParam/> />() )
	{
		return ust::optional_ref</ SpecializedTemplateParam, false />(specialized_template_param.get_ref());
	}

	return ust::optional_ref</ SpecializedTemplateParam, false />();
}

//
// NamesScope
//

fn NamesScope::constructor(
	ust::string8 mut name,
	ust::shared_ptr_nullable_imut</NamesScope/>& parent )
	(
		name_= move(name),
		parent_(parent)
	)
{
}

fn NamesScope::GetThisScopeValue( this, ust::string8& name ) : ust::optional_ref</ NamesScopeValue, false />'this'
{
	return names_map_.find( name );
}

fn NamesScope::AddName( mut this, ust::string8 mut name, NamesScopeValue mut value ) : ust::optional_ref</ NamesScopeValue, true />'this'
{
	if( !names_map_.find(name).empty() )
	{
		return ust::optional_ref</ NamesScopeValue, true />();
	}

	return ust::optional_ref</ NamesScopeValue, true />( names_map_.insert(move(name), move(value) ) );
}

fn NamesScope::GetParent( this ) : ust::shared_ptr_nullable_imut</NamesScope/>
{
	return parent_.lock();
}

fn NamesScope::SetErrors( mut this, ErrorsContainerPtr errors_container )
{
	errors_container_= errors_container;
}

fn NamesScope::GetErrors( this ) : ErrorsContainerPtr
{
	if( errors_container_.empty() )
	{
		return parent_.lock().lock_imut().get_ref().GetErrors();
	}

	return errors_container_;
}

fn NamesScope::GetInternalContainer( imut this ) : ust::unordered_map</ ust::string8, NamesScopeValue /> &
{
	return names_map_;
}

fn NamesScope::GetThisNamespaceName( this ) : ust::string8&
{
	return name_;
}

fn NamesScope::ToString( this ) : ust::string8
{
	if( !class_.empty() )
	{
		auto class_lock= class_.lock_imut();
		auto& class_type= class_lock.get_ref();
		if( !class_type.base_template.empty() )
		{
			// This is class template. So, parent namespace is arguments names scope.

			auto& type_template= class_type.base_template.get_ref().class_template.get_ref();
			auto parent= type_template.parent_names_scope.lock();
			if( !parent.empty() )
			{
				var ust::string8 mut res;

				auto parent_lock= parent.lock_imut();
				if( !parent_lock.get_ref().GetParent().empty() )
				{
					res+= parent.lock_imut().get_ref().ToString();
					res+= "::";
				}
				res+= type_template.syntax_element.get_ref().name;

				res+= "</";
				foreach( &arg : class_type.base_template.get_ref().signature_args )
				{
					if_var( t : arg.get</Type/>() )
					{
						res+= t.ToString();
					}
					if_var( v : arg.get</Variable/>() )
					{
						if( v.constexpr_value != LLVMValueRef::Null )
						{
							// TODO - maybe print arg type too?
							if_var( &fundamental_type : v.t.GetFundamentalType() )
							{
								// TODO - maybe process "bool" here separately?
								if( IsSignedInteger( fundamental_type.fundamental_type ) )
								{
									unsafe{  res+= ust::to_string8( LLVMConstIntGetSExtValue( v.constexpr_value ) );  }
								}
								else
								{
									unsafe{  res+= ust::to_string8( LLVMConstIntGetZExtValue( v.constexpr_value ) );  }
								}
							}
							if_var( &enum_type : v.t.GetEnumType() )
							{
								foreach( &element : enum_type.lock_imut().get_ref().elements )
								{
									unsafe
									{
										if( LLVMConstIntGetZExtValue( v.constexpr_value ) == LLVMConstIntGetZExtValue( element.value().constexpr_value ) )
										{
											res+= v.t.ToString();
											res+= "::";
											res+= element.key();
											break;
										}
									}
								}
							}
						}
					}

					if( ust::ref_to_int(arg) != ust::ref_to_int( class_type.base_template.get_ref().signature_args.back() ) )
					{
						res+= ", ";
					}
				}
				res+= "/>";

				return move(res);
			}
		}
	}

	var ust::string8 mut res;

	auto mut parent= parent_.lock();
	if( !parent.empty() )
	{
		auto parent_lock= parent.lock_imut();
		if( !parent_lock.get_ref().GetParent().empty() )
		{
			res+= parent_lock.get_ref().ToString();
			res+= "::";
		}
	}

	res+= name_;
	return move(res);
}

fn NamesScope::SetClass( mut this, ust::shared_ptr_nullable_mut</ClassType/> in_class_ )
{
	class_= in_class_;
}

fn NamesScope::GetClass( this ) : ust::shared_ptr_nullable_mut</ClassType/>
{
	return class_;
}

fn NamesScope::AddAccessRightsFor( mut this, ClassTypePtr& class_type, Synt::ClassVisibility visibility )
{
	access_rights_.insert( class_type, visibility );
}

fn NamesScope::GetAccessFor( this, ClassTypePtr& class_type ) : Synt::ClassVisibility
{
	auto mut this_namespace_visibility= Synt::ClassVisibility::Public;
	if_var( visibility : access_rights_.find( class_type ) )
	{
		this_namespace_visibility= visibility;
	}

	auto mut parent_namespace_visibility= Synt::ClassVisibility::Public;
	auto parent= GetParent();
	if( !parent.empty() )
	{
		parent_namespace_visibility= parent.lock_imut().get_ref().GetAccessFor( class_type );
	}

	// TODO - maybe add to language possibility to order compare enum values?
	return select( u32(this_namespace_visibility) > u32(parent_namespace_visibility) ? this_namespace_visibility : parent_namespace_visibility );
}

} // namespace U
