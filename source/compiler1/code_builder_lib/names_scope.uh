import "/unordered_map.u"
import "names_scope_value.uh"
import "/code_builder_errors.uh"

namespace U
{

type ErrorsContainer= ust::vector</ CodeBuilderError />;
type ErrorsContainerPtr= ust::shared_ptr_mut</ErrorsContainer/>;

class NamesScope
{
public:
	fn constructor( ust::string8 mut name, ErrorsContainerPtr errors_container );

	fn GetThisScopeValue( this, ust::string8& name ) : ust::optional_ref</ NamesScopeValue, false />'this';

	fn AddName( mut this, ust::string8 mut name, NamesScopeValue mut value ) : ust::optional_ref</ NamesScopeValue, true />'this';

	fn GetErrors( this ) : ErrorsContainerPtr
	{
		return errors_container_;
	}

	// HACK! for iteration. Remove this.
	fn GetInternalContainer( imut this ) : ust::unordered_map</ ust::string8, NamesScopeValue /> &
	{
		return names_map_;
	}

private:
	ust::string8 name_;

	// TODO - use weak_ptr. Now use raw unsafe pointer to prevent globals loops.
	ust::raw_ptr_mut</NamesScope/> parent_;

	ust::unordered_map</ ust::string8, NamesScopeValue /> names_map_;

	ErrorsContainerPtr errors_container_;
}

} // namespace U
