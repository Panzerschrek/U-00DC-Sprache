import "constexpr_function_evaluator.uh"


namespace U1
{

fn ErrorHandlerFunc( byte8 &mut user_data, $(char8) error_text_start, size_type error_text_size )
{
	unsafe
	{
		var ust::string8 mut error;
		for( auto mut i= 0s; i < error_text_size; ++i )
		{
			error.push_back( $>(error_text_start + i) );
		}

		auto &mut errors_container= cast_ref_unsafe</ ust::vector</ ust::string8 /> />(user_data);
		errors_container.push_back( move(error) );
	}
}

fn ConstexprFunctionEvaluator::constructor( LLVMTargetDataRef data_layout )
{
	impl_= unsafe( U1_ConstexprFunctionEvaluatorCreate( data_layout ) );
}

fn ConstexprFunctionEvaluator::destructor()
{
	unsafe( U1_ConstexprFunctionEvaluatorDestroy( impl_ ) );
}

fn ConstexprFunctionEvaluator::Evaluate( mut this, LLVMValueRef function, ust::array_view_imut</LLVMValueRef/> args ) : Result
{
	var Result mut result
	{
		.constant= zero_init
	};

	result.constant=
		unsafe(
			U1_ConstexprFunctionEvaluatorEvaluate(
				impl_,
				function,
				args.data(),
				args.size(),
				ConstexprFunctionEvaluatorErrorHandlerFunc( ErrorHandlerFunc ),
				cast_ref_unsafe</byte8/>( result.errors ) ) );

	return move(result);
}

} // namespace U1
