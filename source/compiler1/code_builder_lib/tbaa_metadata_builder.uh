import "llvm.uh"
import "mangling.uh"
import "structs_combined.uh"

namespace U1
{

class TBAAMetadataBuilder
{
public:
	fn constructor( LLVMContextRef llvm_context, LLVMTargetDataRef data_layout, ust::box</IMangler/> mangler );

	fn CreateAccessTag( mut this, Type& t ) : LLVMMetadataRef;
	fn CreateReferenceAccessTag( mut this, Type& t ) : LLVMMetadataRef;

	fn CreateVirtualTablePointerAccessTag( mut this ) : LLVMMetadataRef;
	fn CreateVirtualTableFunctionPointerAccessTag( mut this ) : LLVMMetadataRef;

private:
	fn GetTypeDescriptor( mut this, Type& t ) : LLVMMetadataRef;
	fn CreateTypeDescriptor( mut this, Type& t ) : LLVMMetadataRef;

	fn GetTypeDescriptorForFundamentalType( mut this, U_FundamentalType t ) : LLVMMetadataRef;
	fn GetEnumTypeBaseTypeDescriptor( mut this, EnumTypePtr& enum_type ) : LLVMMetadataRef;

private:
	struct TypeDescriptors
	{
		LLVMMetadataRef void_;
		LLVMMetadataRef bool_;

		LLVMMetadataRef i8_  ;
		LLVMMetadataRef u8_  ;
		LLVMMetadataRef i16_ ;
		LLVMMetadataRef u16_ ;
		LLVMMetadataRef i32_ ;
		LLVMMetadataRef u32_ ;
		LLVMMetadataRef i64_ ;
		LLVMMetadataRef u64_ ;
		LLVMMetadataRef i128_;
		LLVMMetadataRef u128_;

		LLVMMetadataRef ssize_type_;
		LLVMMetadataRef size_type_;

		LLVMMetadataRef f32_;
		LLVMMetadataRef f64_;

		LLVMMetadataRef char8_ ;
		LLVMMetadataRef char16_;
		LLVMMetadataRef char32_;

		LLVMMetadataRef byte8_  ;
		LLVMMetadataRef byte16_ ;
		LLVMMetadataRef byte32_ ;
		LLVMMetadataRef byte64_ ;
		LLVMMetadataRef byte128_;

		// Base for all pointers.
		LLVMMetadataRef ptr;
	}

private:
	LLVMContextRef imut llvm_context_;
	ust::box</IMangler/> mangler_; // TODO - use shared_ptr instead.

	TypeDescriptors type_descriptors_= zero_init;

	ust::unordered_map</Type, LLVMMetadataRef/> types_descriptors_cache_;
}

} // namespace U1
