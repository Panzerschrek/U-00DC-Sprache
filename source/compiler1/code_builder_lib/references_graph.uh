import "/unordered_set.u"
import "/code_builder_errors.uh"
import "structs_combined.uh"

namespace U1
{

class ReferencesGraph
{
public:
	fn constructor( mut this, ReferencesGraph& other )= default;
	op=( mut this, ReferencesGraph& other )= default;

public:
	fn AddNode( mut this, VariablePtr& node );
	fn AddNodeIfNotExists( mut this, VariablePtr& node );

	fn RemoveNode( mut this, VariablePtr& node );
	fn AddLink( mut this, VariablePtr& from, VariablePtr& to );

	// Produces error in case if this link violates reference protection rules.
	fn TryAddLink( mut this, VariablePtr& from, VariablePtr& to, NamesScopePtr& names_scope, SrcLoc& src_loc );

	fn MoveNode( mut this, VariablePtr& node );
	fn NodeIsMoved( this, VariablePtr& node ) : bool;

	fn HaveOutgoingLinks( this, VariablePtr& from ) : bool;
	fn HaveOutgoingMutableNodes( this, VariablePtr& from ) : bool;

	fn EnsureHaveNoOutgoingLinks( this, VariablePtr& from, NamesScopePtr& names_scope, SrcLoc& src_loc );
	fn EnsureHaveNoOutgoingMutableNodes( this, VariablePtr& from, NamesScopePtr& names_scope, SrcLoc& src_loc );

	type NodesSet= ust::unordered_set</VariablePtr/>;
	fn GetAllAccessibleVariableNodes( this, VariablePtr& node ) : NodesSet;
	fn GetAccessibleVariableNodesInnerReferences( this, VariablePtr& node ) : NodesSet;
	fn GetNodeInputLinks( this, VariablePtr& node ) : NodesSet;

	// Recursively search references graph starting from "to" in order to reach inner reference node of some variable.
	// Than create link between "from" and this node.
	fn TryAddLinkToAllAccessibleVariableNodesInnerReferences( mut this, VariablePtr& from, VariablePtr& to, NamesScopePtr& names_scope, SrcLoc& src_loc );

	fn MergeReferencesGraphsAfterConditionalBranches( ust::array_view_imut</ReferencesGraph/> branches, ErrorsContainer &mut errors, SrcLoc& src_loc ) : ReferencesGraph;
	fn CheckReferencesGraphAfterLoop( ReferencesGraph& state_before, ReferencesGraph& state_after, ErrorsContainer &mut errors, SrcLoc& src_loc );

private:
	fn GetAllAccessibleVariableNodes_r( this, VariablePtr& node, NodesSet &mut out_nodes );
	fn GetAccessibleVariableNodesInnerReferences_r( this, VariablePtr& node, NodesSet &mut out_nodes );

	fn HaveDirectOutgoingLinks( this, VariablePtr& from ) : bool;
	fn HaveOutgoingLinksIncludingChildrenLinks_r( this, VariablePtr& from ) : bool;

	fn HaveDirectOutgoingMutableNodes( this, VariablePtr& from ) : bool;
	fn HaveOutgoingMutableNodesIncludingChildrenNodes_r( this, VariablePtr& from ) : bool;

	fn TryAddLinkToAllAccessibleVariableNodesInnerReferences_r( mut this, VariablePtr& from, VariablePtr& to, NamesScopePtr& names_scope, SrcLoc& src_loc );

	fn RemoveNodeLinks( mut this, VariablePtr& node );

private:
	struct NodeState
	{
		bool moved;
	}

	struct Link
	{
		VariablePtr src;
		VariablePtr dst;
	}

private:
	ust::unordered_map</VariablePtr, NodeState/> nodes_;

	// Should NOT contain duplicates. // TODO - use sometthing like unordered_set.
	ust::vector</Link/> links_;
}

} // namespace U1
