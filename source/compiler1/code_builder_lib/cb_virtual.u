import "/keywords.uh"
import "/sort.u"
import "error_reporting.uh"
import "code_builder.uh"

namespace U1
{

struct VirtualFunctionWithName
{
	ust::shared_ptr_mut</FunctionsSet/> functions_set;
	size_type index;
	ust::string8 name;
	ust::string8 mangled_name;

	op<=>( VirtualFunctionWithName& l, VirtualFunctionWithName& r ) : i32
	{
		return l.mangled_name <=> r.mangled_name;
	}
}

fn CodeBuilder::PrepareClassVirtualTable( this, ClassTypePtr& class_type_ptr )
{
	// Class now should not be complete, but parents and functions should be known.
	// Also, parent namespaces should not be merged into class namespace before call of this function.

	auto mut class_lock= class_type_ptr.lock_mut();
	var ClassType &mut class_type= class_lock.deref();

	// First, borrow virtual table of parent with 0 offset.
	// Class reuses virtual table pointer of first parent, so, virtual table layout must be equal.
	for( auto mut i= 0s; i < class_type.parents.size(); ++i )
	{
		if( class_type.parents[i].field_number != 0u )
		{
			continue;
		}

		auto parent_ptr= class_type.parents[i].class_;
		auto parent_lock= parent_ptr.lock_imut();
		var ClassType& parent= parent_lock.deref();

		for( auto mut j= 0s; j < parent.virtual_table.size(); ++j )
		{
			var ClassType::VirtualTableEntry mut entry_copy= parent.virtual_table[j];
			entry_copy.index_in_table= u32(j);
			entry_copy.parent_virtual_table_index= u32(i);

			class_type.virtual_table.push_back( move(entry_copy) );
		} // for parent virtual table entries
	} // for parents

	// Then, add virtual functions from other parents.
	for( auto mut i= 0s; i < class_type.parents.size(); ++i )
	{
		if( class_type.parents[i].field_number == 0u )
		{
			continue;
		}

		auto parent_ptr= class_type.parents[i].class_;
		auto parent_lock= parent_ptr.lock_imut();
		var ClassType& parent= parent_lock.deref();

		for( auto mut j= 0s; j < parent.virtual_table.size(); ++j ) label parent_virual_table_search
		{
			var ClassType::VirtualTableEntry& parent_virtual_table_entry= parent.virtual_table[j];

			foreach( &virtual_table_entry : class_type.virtual_table )
			{
				if( virtual_table_entry.name == parent_virtual_table_entry.name &&
					virtual_table_entry.function_variable.VirtuallyEquals( parent_virtual_table_entry.function_variable ) )
				{
					continue label parent_virual_table_search;
				}
			}

			var ClassType::VirtualTableEntry mut entry_copy= parent_virtual_table_entry;
			entry_copy.index_in_table= u32(j);
			entry_copy.parent_virtual_table_index= u32(i);

			class_type.virtual_table.push_back( move(entry_copy) );
		} // for parent virtual table entries
	} // for parents

	// Sort functions, using mangled name, before adding them into virtual table.
	// This needed for strong predicatable order of functions in virtual table.
	var ust::vector</ VirtualFunctionWithName /> mut this_virtual_functions;

	auto class_members_ptr= class_type.members;
	foreach( &class_member : class_members_ptr.lock_imut().deref() )
	{
		auto functions_set_ptr= class_member.value().Get</FunctionsSet/>();
		if( functions_set_ptr.empty() )
		{
			continue;
		}

		auto mut functions_set_lock= functions_set_ptr.try_lock_mut();
		var FunctionsSet& functions_set= functions_set_lock.deref();
		for( auto mut i= 0s; i < functions_set.functions.size(); ++i )
		{
			if( !functions_set.functions[i].is_this_call )
			{
				continue; // May be in case of error
			}

			this_virtual_functions.push_back(
				VirtualFunctionWithName
				{
					.functions_set= functions_set_ptr.try_to_non_nullable(),
					.index= i,
					.name= class_member.key(),
					.mangled_name= functions_set.functions[i].llvm_function.lock_imut().deref().name_mangled,
				} );
		}
	}

	ust::sort( this_virtual_functions );

	// Process functions.
	var u32 mut own_virtual_table_index= 0u;
	foreach( &f : this_virtual_functions )
	{
		var ust::string8& function_name= f.name;

		auto mut functions_set_lock= f.functions_set.lock_mut();
		var FunctionVariable &mut function= functions_set_lock.deref().functions[ f.index ];

		var SrcLoc mut src_loc;
		var Synt::Function::VirtualKind mut virtual_kind= Synt::Function::VirtualKind::None;
		if_var( &el : function.body_syntax_element )
		{
			src_loc= el.src_loc;
			virtual_kind= el.virtual_kind;
		}
		if_var( &el : function.prototype_syntax_element )
		{
			src_loc= el.src_loc;
			virtual_kind= el.virtual_kind;
		}

		auto mut virtual_table_index= ~0s;
		for( auto mut i= 0s; i < class_type.virtual_table.size(); ++i )
		{
			var ClassType::VirtualTableEntry& entry= class_type.virtual_table[i];
			if( function_name == entry.name && function.VirtuallyEquals( entry.function_variable ) )
			{
				virtual_table_index= i;
				break;
			}
		}

		if( virtual_kind != Synt::Function::VirtualKind::None && class_type.GetMemberVisibility( function_name ) == Synt::ClassVisibility::Private )
		{
			// Private members not visible in child classes. So, virtual private function is 100% error.
			REPORT_ERROR( VirtualForPrivateFunction, class_members_ptr, src_loc, function_name )
		}

		if( virtual_kind == Synt::Function::VirtualKind::None )
		{
			if( function_name == KeywordToString( Keyword::destructor_ ) )
			{
				// For destructors virtual specifiers are optional.
				// If destructor not marked as virtual, but it placed in polymorph class, make it virtual.
				if( virtual_table_index != ~0s )
				{
					function.virtual_table_index= u32(virtual_table_index);
					class_type.virtual_table[virtual_table_index].function_variable= function;
				}
				else if(
					class_type.kind == ClassType::Kind::PolymorphFinal ||
					class_type.kind == ClassType::Kind::PolymorphNonFinal ||
					class_type.kind == ClassType::Kind::Interface ||
					class_type.kind == ClassType::Kind::Abstract )
				{
					function.virtual_table_index= u32(class_type.virtual_table.size());

					class_type.virtual_table.push_back(
						ClassType::VirtualTableEntry
						{
							.name= function_name,
							.function_variable= function,
							.is_pure= false,
							.is_final= false,
							.index_in_table= own_virtual_table_index,
							.parent_virtual_table_index= ~0u,
						} );
					++own_virtual_table_index;
				}
			}
			else if( virtual_table_index != ~0s )
			{
				REPORT_ERROR( VirtualRequired, class_members_ptr, src_loc, function_name )
			}
		}
		else if( virtual_kind == Synt::Function::VirtualKind::DeclareVirtual )
		{
			if( virtual_table_index != ~0s )
			{
				REPORT_ERROR( OverrideRequired, class_members_ptr, src_loc, function_name )
			}
			else
			{
				function.virtual_table_index= u32(class_type.virtual_table.size());

				class_type.virtual_table.push_back(
					ClassType::VirtualTableEntry
					{
						.name= function_name,
						.function_variable= function,
						.is_pure= false,
						.is_final= false,
						.index_in_table= own_virtual_table_index,
						.parent_virtual_table_index= ~0u,
					} );
				++own_virtual_table_index;
			}
		}
		else if( virtual_kind == Synt::Function::VirtualKind::VirtualOverride )
		{
			if( virtual_table_index == ~0s )
			{
				REPORT_ERROR( FunctionDoesNotOverride, class_members_ptr, src_loc, function_name )
			}
			else if( class_type.virtual_table[virtual_table_index].is_final )
			{
				REPORT_ERROR( OverrideFinalFunction, class_members_ptr, src_loc, function_name )
			}
			else
			{
				function.virtual_table_index= u32(virtual_table_index);
				var ClassType::VirtualTableEntry &mut entry= class_type.virtual_table[ size_type(virtual_table_index) ];
				entry.function_variable= function;
				entry.is_pure= false;
			}
		}
		else if( virtual_kind == Synt::Function::VirtualKind::VirtualFinal )
		{
			if( virtual_table_index == ~0s )
			{
				REPORT_ERROR( FinalForFirstVirtualFunction, class_members_ptr, src_loc, function_name )
			}
			else if( class_type.virtual_table[virtual_table_index].is_final )
			{
				REPORT_ERROR( OverrideFinalFunction, class_members_ptr, src_loc, function_name )
			}
			else
			{
				function.virtual_table_index= u32(virtual_table_index);
				var ClassType::VirtualTableEntry &mut entry= class_type.virtual_table[virtual_table_index];
				entry.function_variable= function;
				entry.is_pure= false;
				entry.is_final= true;
			}
		}
		else if( virtual_kind == Synt::Function::VirtualKind::VirtualPure )
		{
			if( virtual_table_index != ~0s )
			{
				REPORT_ERROR( OverrideRequired, class_members_ptr, src_loc, function_name )
			}
			else
			{
				if_var( &el : function.body_syntax_element )
				{
					REPORT_ERROR( BodyForPureVirtualFunction, class_members_ptr, el.src_loc, function_name )
				}
				if( function_name == KeywordToString( Keyword::destructor_ ) )
				{
					REPORT_ERROR( PureDestructor, class_members_ptr, src_loc, "/TODO - name" )
				}

				// TODO - prevent body generation for pure functions.

				function.virtual_table_index= u32(class_type.virtual_table.size());

				class_type.virtual_table.push_back(
					ClassType::VirtualTableEntry
					{
						.name= function_name,
						.function_variable= function,
						.is_pure= true,
						.is_final= false,
						.index_in_table= own_virtual_table_index,
						.parent_virtual_table_index= ~0u,
					} );
				++own_virtual_table_index;
			}
		}
		else{ halt; }

	} // for functions
}

fn CodeBuilder::PrepareClassVirtualTableType( mut this, ClassTypePtr& class_type_ptr )
{
	var ust::string8 virtual_table_type_name= "_vtable_type_" + mangler_.deref().MangleType( class_type_ptr );

	auto mut class_lock= class_type_ptr.lock_mut();
	var ClassType &mut class_type= class_lock.deref();

	var ust::vector</LLVMTypeRef/> mut virtual_table_struct_fields;

	// First, add first class virtual table, then, virtual tables of other parent classes.
	foreach( &parent : class_type.parents )
	{
		if( parent.field_number == 0u )
		{
			virtual_table_struct_fields.push_back( parent.class_.lock_imut().deref().virtual_table_llvm_type );
		}
	}
	foreach( &parent : class_type.parents )
	{
		if( parent.field_number != 0u )
		{
			virtual_table_struct_fields.push_back( parent.class_.lock_imut().deref().virtual_table_llvm_type );
		}
	}

	if( virtual_table_struct_fields.empty() )
	{
		// No parents - create special fields - base offset, type id, etc.
		virtual_table_struct_fields.push_back( fundamental_llvm_types_.size_type_ ); // Offset field.
		virtual_table_struct_fields.push_back( unsafe( LLVMPointerType( polymorph_type_id_table_element_type_, 0u ) ) );  // type_id field
	}

	auto mut own_functions_count= 0u;
	foreach( &entry : class_type.virtual_table )
	{
		if( entry.parent_virtual_table_index == ~0u )
		{
			++own_functions_count;
		}
	}

	unsafe
	{
		auto own_virtual_functions_table_type= LLVMArrayType( virtual_function_pointer_type_, own_functions_count );

		virtual_table_struct_fields.push_back( own_virtual_functions_table_type );

		// TODO - maybe create unnamed struct (like a tuple)?
		class_type.virtual_table_llvm_type= LLVMStructCreateNamed( llvm_context_, virtual_table_type_name.front() );
		LLVMStructSetBody( class_type.virtual_table_llvm_type, virtual_table_struct_fields.data(), u32(virtual_table_struct_fields.size()), LLVMBool::False );
	}
}

fn CodeBuilder::BuildClassPolymorphTypeId( mut this, ClassTypePtr& class_type_ptr )
{
	// Mangle name before creating mutable lock.
	var ust::string8 name_mangled_null_terminated= "_type_id_for_" + mangler_.deref().MangleType( class_type_ptr );

	auto mut class_lock= class_type_ptr.lock_mut();
	var ClassType& mut class_= class_lock.deref();

	var ClassType::Kind class_kind= class_.kind;
	if( !(
		class_kind == ClassType::Kind::Interface ||
		class_kind == ClassType::Kind::Abstract ||
		class_kind == ClassType::Kind::PolymorphNonFinal ||
		class_kind == ClassType::Kind::PolymorphFinal ) )
	{
		return;
	}

	var ust::vector</LLVMValueRef/> mut initializers;
	auto dummy_function_context= CreateGlobalFunctionContext();

	foreach( &parent : class_.parents )
	{
		unsafe
		{
			auto polymorph_type_id_table= parent.class_.lock_imut().deref().polymorph_type_id_table;
			var [ LLVMValueRef, 2 ] mut indices[ GetZeroGEPIndex(), GetZeroGEPIndex() ];
			var LLVMValueRef first_element_address=
				LLVMBuildInBoundsGEP2(
					dummy_function_context.llvm_ir_builder,
					LLVMTypeOf( LLVMGetInitializer(polymorph_type_id_table) ),
					polymorph_type_id_table,
					$<(indices[0]), 2u,
					g_null_string );

			var u64 offset= LLVMOffsetOfElement( data_layout_, class_.llvm_type, parent.field_number );
			var [ LLVMValueRef, 2 ] mut element_initializers
			[
				LLVMConstInt( fundamental_llvm_types_.size_type_, offset, LLVMBool::False ),
				first_element_address,
			];

			var LLVMValueRef initializer= LLVMConstNamedStruct( polymorph_type_id_table_element_type_, $<(element_initializers[0]), 2u );
			initializers.push_back( initializer ); // TODO - push base class element first?
		}
	}

	unsafe
	{
		initializers.push_back( LLVMConstNull( polymorph_type_id_table_element_type_ ) );
		var LLVMValueRef initializer= LLVMConstArray( polymorph_type_id_table_element_type_, initializers.data(), u32(initializers.size()) );

		var LLVMTypeRef type_id_table_type= LLVMArrayType( polymorph_type_id_table_element_type_, u32(initializers.size()) );

		var LLVMValueRef global_value= LLVMAddGlobal( module_, type_id_table_type, name_mangled_null_terminated.front() );
		LLVMSetInitializer( global_value, initializer );
		LLVMSetGlobalConstant( global_value, LLVMBool::True );

		var SrcLoc class_src_loc= class_.syntax_element.try_deref().src_loc;
		if( !IsSrcLocFromMainFile( class_src_loc ) )
		{
			// This is a class, declared in imported file.
			// Create comdat in order to ensure uniquiness of the table across different modules, that import file with declaration of this class.
			LLVMSetLinkage( global_value, LLVMLinkage::External );

			var LLVMComdatRef comdat= LLVMGetOrInsertComdat( module_, name_mangled_null_terminated.front() );
			LLVMSetComdatSelectionKind( comdat, LLVMComdatSelectionKind::Any );
			LLVMSetComdat( global_value, comdat );

			if( IsSrcLocFromOtherImportedFile( class_src_loc ) )
			{
				// This variable is defined within an import file - use default visibility in order to make it available for other build targets.
				LLVMSetVisibility( global_value, LLVMVisibility::Default );
			}
			else
			{
				// This variable is defined within a private import file - use hidden visibility to hide it from outside.
				LLVMSetVisibility( global_value, LLVMVisibility::Hidden );
			}
		}
		else
		{
			// This class is declared in main file.
			// It should not be externally available, thus there is no need to use external linkage or comdat.
			LLVMSetLinkage( global_value, LLVMLinkage::Private );
		}

		halt if( class_.polymorph_type_id_table != LLVMValueRef::Null );
		class_.polymorph_type_id_table= global_value;
	}
}

fn CodeBuilder::BuildClassVirtualTable_r( mut this, ClassType& ancestor_class, ClassType& dst_class, u64 offset ) : LLVMValueRef
{
	var ust::vector</LLVMValueRef/> mut initializer_values;

	foreach( &parent : ancestor_class.parents )
	{
		if( parent.field_number == 0u )
		{
			var u64 parent_offset= offset + unsafe( LLVMOffsetOfElement( data_layout_, ancestor_class.llvm_type, parent.field_number ) );
			initializer_values.push_back( BuildClassVirtualTable_r( parent.class_.lock_imut().deref(), dst_class, parent_offset ) );
		}
	}
	foreach( &parent : ancestor_class.parents )
	{
		if( parent.field_number != 0u )
		{
			var u64 parent_offset= offset + unsafe( LLVMOffsetOfElement( data_layout_, ancestor_class.llvm_type, parent.field_number ) );
			initializer_values.push_back( BuildClassVirtualTable_r( parent.class_.lock_imut().deref(), dst_class, parent_offset ) );
		}
	}

	unsafe // Unsafe because a lot of C functions calls.
	{
		if( initializer_values.empty() )
		{
			// offset
			initializer_values.push_back( LLVMConstInt( fundamental_llvm_types_.size_type_, offset, LLVMBool::False ) );

			// Type id
			auto dummy_function_context= CreateGlobalFunctionContext();
			var [ LLVMValueRef, 2 ] mut indices[ GetZeroGEPIndex(), GetZeroGEPIndex() ];
			initializer_values.push_back(
				LLVMBuildInBoundsGEP2(
					dummy_function_context.llvm_ir_builder,
					LLVMTypeOf( LLVMGetInitializer(dst_class.polymorph_type_id_table) ),
					dst_class.polymorph_type_id_table,
					$<(indices[0]), 2u,
					g_null_string ) );
		}

		auto array_type= LLVMStructGetTypeAtIndex( ancestor_class.virtual_table_llvm_type, u32(initializer_values.size() ) );
		auto fn_type_ptr= LLVMGetElementType( array_type );

		var ust::vector</LLVMValueRef/> mut function_pointers_initializer_values;

		foreach( &ancestor_virtual_table_entry : ancestor_class.virtual_table )
		{
			if( ancestor_virtual_table_entry.parent_virtual_table_index != ~0u )
			{
				continue;
			}

			var LLVMValueRef mut func= EnsureLLVMFunctionCreated( ancestor_virtual_table_entry.function_variable );
			foreach( &dst_virtual_table_entry : dst_class.virtual_table )
			{
				if( dst_virtual_table_entry.name == ancestor_virtual_table_entry.name &&
					dst_virtual_table_entry.function_variable.VirtuallyEquals( ancestor_virtual_table_entry.function_variable ) )
				{
					func= EnsureLLVMFunctionCreated( dst_virtual_table_entry.function_variable );
					break;
				}
			}

			function_pointers_initializer_values.push_back( func );
		}

		initializer_values.push_back( LLVMConstArray( fn_type_ptr, function_pointers_initializer_values.data(), u32(function_pointers_initializer_values.size()) ) );

		return LLVMConstNamedStruct( ancestor_class.virtual_table_llvm_type, initializer_values.data(), u32(initializer_values.size()) );
	}
}

fn CodeBuilder::BuildClassVirtualTable( mut this, ClassTypePtr& class_type_ptr )
{
	auto mut virtual_table_initializer= LLVMValueRef::Null;
	{
		auto class_lock= class_type_ptr.lock_imut();
		auto& class_= class_lock.deref();

		// Build virtual table only for polymorph non-abstract classes.
		if( !(
			class_.kind == ClassType::Kind::PolymorphNonFinal ||
			class_.kind == ClassType::Kind::PolymorphFinal ) )
		{
			return;
		}

		virtual_table_initializer= BuildClassVirtualTable_r( class_, class_, 0u64 );
	}

	auto name_mangled= mangler_.deref().MangleVirtualTable( class_type_ptr );

	auto mut class_lock= class_type_ptr.lock_mut();
	auto &mut class_= class_lock.deref();

	class_.virtual_table_llvm_variable=
		AddGlobalConstantVariable( name_mangled, class_.virtual_table_llvm_type, virtual_table_initializer );
}

fn CodeBuilder::SetupVirtualTablePointers_r(
	mut this,
	LLVMValueRef this_,
	LLVMValueRef ptr_to_vtable_ptr,
	ClassType& class_type,
	FunctionContext &mut function_context )
{
	// Setup virtual table pointers for parents.
	auto mut vtable_field_number= 1u;
	foreach( &parent : class_type.parents )
	{
		unsafe
		{
			var [ LLVMValueRef, 2 ] mut parent_indexes
			[
				GetZeroGEPIndex(),
				CreateIndexValue( parent.field_number )
			];
			auto parent_ptr= LLVMBuildInBoundsGEP2( function_context.llvm_ir_builder, class_type.llvm_type, this_, $<(parent_indexes[0]), 2u, g_null_string );

			var [ LLVMValueRef, 2 ] mut vtable_indexes
			[
				GetZeroGEPIndex(),
				CreateIndexValue( ( parent.field_number == 0u ? 0u : vtable_field_number ) ),
			];
			auto vtable_ptr= LLVMBuildInBoundsGEP2( function_context.llvm_ir_builder, class_type.virtual_table_llvm_type, ptr_to_vtable_ptr, $<(vtable_indexes[0]), 2u, g_null_string );

			SetupVirtualTablePointers_r( parent_ptr, vtable_ptr, parent.class_.lock_imut().deref(), function_context );

		}
		if( parent.field_number != 0u )
		{
			++vtable_field_number;
		}
	}

	// Store virtual table pointer only if it allocated in current class.
	if( class_type.parents.empty() )
	{
		unsafe
		{
			var [ LLVMValueRef, 2 ] mut indexes[ GetZeroGEPIndex(), GetZeroGEPIndex() ];
			auto vtable_ptr= LLVMBuildInBoundsGEP2( function_context.llvm_ir_builder, class_type.llvm_type, this_, $<(indexes[0]), 2u, g_null_string );

			auto store_inst= LLVMBuildStore( function_context.llvm_ir_builder, ptr_to_vtable_ptr, vtable_ptr );
			if( generate_tbaa_metadata_ )
			{
				auto access_tag= tbaa_metadata_builder_.CreateVirtualTablePointerAccessTag();
				MarkInstructionWithTBAAMetadata( store_inst, access_tag );
			}
		}
	}
}

fn CodeBuilder::SetupVirtualTablePointers(
	mut this,
	LLVMValueRef this_,
	ClassTypePtr& class_type_ptr,
	FunctionContext &mut function_context )
{
	auto class_type_lock= class_type_ptr.lock_imut();
	auto& class_type= class_type_lock.deref();

	if( !(
		class_type.kind == ClassType::Kind::PolymorphNonFinal ||
		class_type.kind == ClassType::Kind::PolymorphFinal ) )
	{
		return;
	}

	if( class_type.virtual_table_llvm_variable == LLVMValueRef::Null )
	{
		return; // May be in case of errors.
	}

	SetupVirtualTablePointers_r( this_, class_type.virtual_table_llvm_variable, class_type, function_context );
}

fn CodeBuilder::TryFetchVirtualFunction(
	mut this,
	VariablePtr& this_ptr,
	FunctionVariable& function,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	SrcLoc& src_loc ) : tup[ VariablePtr, LLVMValueRef ]
{
	if( function.virtual_table_index == ~0u )
	{
		return ust::make_tuple( this_ptr, EnsureLLVMFunctionCreated( function ) ); // No need to perform virtual call.
	}
	if( function_context.is_functionless_context )
	{
		return ust::make_tuple( this_ptr, LLVMValueRef::Null );
	}

	auto constexpr c_offset_field_number= 0u;
	auto constexpr c_funcs_table_field_number= 2u;

	var Type& function_this_type= function.t.params.front().t;

	// TODO - check reference conversion possibility.

	var VariableLite this_= this_ptr;
	// Cast "this" into type of class, where this virtual function is declared.
	// This is needed to perform (possible) pointer correction later.
	var Variable mut this_casted
	{
		.t= function_this_type,
		.value_type= ( this_.value_type == ValueType::ReferenceMut ? ValueType::ReferenceMut : ValueType::ReferenceImut ),
		.location= Variable::Location::Pointer,
		.name= this_ptr.lock_imut().deref().name + " virtual call casted",
		.llvm_value= CreateReferenceCast( this_.llvm_value, this_.t, function_this_type, function_context ),
	};

	var ClassTypePtr class_type_ptr= this_casted.t.GetClassType().try_deref();
	auto class_type_lock= class_type_ptr.lock_imut();
	var ClassType& class_type= class_type_lock.deref();

	// Fetch vtable pointer.
	// Virtual table pointer is always first field.
	var LLVMValueRef virtual_table_ptr=
		unsafe( LLVMBuildLoad2(
			function_context.llvm_ir_builder,
			LLVMPointerType( class_type.virtual_table_llvm_type, 0u ),
			this_casted.llvm_value, g_null_string ) );
	MarkLoadInstructionWithNonNullMetadata( virtual_table_ptr ); // Virtual table pointer is never null.
	if( generate_tbaa_metadata_ )
	{
		auto access_tag= tbaa_metadata_builder_.CreateVirtualTablePointerAccessTag();
		MarkInstructionWithTBAAMetadata( virtual_table_ptr, access_tag );
	}

	var ClassType::VirtualTableEntry& first_virtual_table_entry= class_type.virtual_table[ size_type(function.virtual_table_index) ];
	auto mut parent_virtual_table_index= first_virtual_table_entry.parent_virtual_table_index;
	auto mut index_in_table= first_virtual_table_entry.index_in_table;
	var ClassTypePtr mut current_class_ptr= class_type_ptr;
	var LLVMValueRef mut function_virtual_table= virtual_table_ptr;
	while( parent_virtual_table_index != ~0u )
	{
		auto current_class_ptr_copy= current_class_ptr;
		auto current_class_lock= current_class_ptr_copy.lock_imut();
		auto& current_class= current_class_lock.deref();

		auto mut field_index= ~0u;
		if( current_class.parents[ size_type(parent_virtual_table_index) ].field_number == 0u )
		{
			field_index= 0u;
		}
		else
		{
			field_index= 1u;
			for( auto mut i= 0s; i < size_type(parent_virtual_table_index); ++i )
			{
				if( current_class.parents[i].field_number != 0u )
				{
					++field_index;
				}
			}
		}

		unsafe
		{
			var [ LLVMValueRef, 2 ] mut index_list
			[
				GetZeroGEPIndex(),
				CreateIndexValue(field_index),
			];
			function_virtual_table= LLVMBuildInBoundsGEP2( function_context.llvm_ir_builder,current_class.virtual_table_llvm_type, function_virtual_table, $<(index_list[0]), 2u, g_null_string );
		}

		auto next_class_ptr= current_class.parents[ size_type(parent_virtual_table_index) ].class_;

		auto next_class_lock= next_class_ptr.lock_imut();
		auto& next_class= next_class_lock.deref();
		var ClassType::VirtualTableEntry& next_virtual_table_entry= next_class.virtual_table[ size_type(index_in_table) ];
		parent_virtual_table_index= next_virtual_table_entry.parent_virtual_table_index;
		index_in_table= next_virtual_table_entry.index_in_table;

		current_class_ptr= next_class_ptr;
	}

	var u32 mut functions_table_field_number= ~0u;
	auto mut function_class_virtual_table_type= LLVMTypeRef::Null;
	{
		auto current_class_lock= current_class_ptr.lock_imut();
		auto& current_class= current_class_lock.deref();
		functions_table_field_number= ( current_class.parents.empty() ? c_funcs_table_field_number : u32( current_class.parents.size() ) );
		function_class_virtual_table_type= current_class.virtual_table_llvm_type;
	}

	// Fetch function.
	var [ LLVMValueRef, 3 ] mut function_ptr_indexes
	[
		GetZeroGEPIndex(),
		CreateIndexValue( functions_table_field_number ),
		CreateIndexValue( index_in_table ),
	];
	auto ptr_to_function_ptr=
		unsafe( LLVMBuildInBoundsGEP2( function_context.llvm_ir_builder, function_class_virtual_table_type, function_virtual_table, $<(function_ptr_indexes[0]), 3u, g_null_string ) );

	auto function_ptr= unsafe( LLVMBuildLoad2( function_context.llvm_ir_builder, virtual_function_pointer_type_, ptr_to_function_ptr, g_null_string ) );
	MarkLoadInstructionWithNonNullMetadata( function_ptr ); // Function pointer inside virtual table is never null.
	if( generate_tbaa_metadata_ )
	{
		auto access_tag= tbaa_metadata_builder_.CreateVirtualTableFunctionPointerAccessTag();
		MarkInstructionWithTBAAMetadata( function_ptr, access_tag );
	}

	// Correct "this" pointer.
	// Only interfaces may have non-zero offsets. So, make pointer adjustment only for call via interface.
	if( class_type.kind == ClassType::Kind::Interface )
	{
		// Fetch "this" pointer offset. It is located in deepest first virtual table (actual offset should always be zero).
		auto mut root_class= class_type_ptr;
		loop
		{
			auto next_root_class= root_class.lock_imut().deref().base_class;
			if( next_root_class.empty() )
			{
				break;
			}
			root_class= next_root_class.try_to_non_nullable();
		}

		var [ LLVMValueRef, 2 ] mut offset_indices
		[
			GetZeroGEPIndex(),
			CreateIndexValue(c_offset_field_number),
		];
		auto offset_ptr=
			unsafe( LLVMBuildInBoundsGEP2(
				function_context.llvm_ir_builder,
				root_class.lock_imut().deref().virtual_table_llvm_type,
				virtual_table_ptr, // Reinterpretate this pointer as pointer to root table.
				$<(offset_indices[0]), 2u, g_null_string ) );

		auto offset_type= size_type_;
		auto offset= CreateTypedLoad( function_context, offset_type, offset_ptr );

		auto this_ptr_as_int= unsafe( LLVMBuildPtrToInt( function_context.llvm_ir_builder, this_casted.llvm_value, fundamental_llvm_types_.size_type_, g_null_string ) );
		auto this_sub_offset= unsafe( LLVMBuildSub( function_context.llvm_ir_builder, this_ptr_as_int, offset, g_null_string ) );
		this_casted.llvm_value= unsafe( LLVMBuildIntToPtr( function_context.llvm_ir_builder, this_sub_offset, LLVMPointerType( this_casted.t.GetLLVMType(), 0u ), g_null_string ) );
	}

	var VariablePtr mut this_casted_ptr= move(this_casted).CreatePtr();
	function_context.references_graph.AddNode( this_casted_ptr );

	function_context.references_graph.TryAddLink( this_ptr, this_casted_ptr, names_scope, src_loc );
	function_context.references_graph.TryAddInnerLinks( this_ptr, this_casted_ptr, names_scope, src_loc );

	RegisterTemporaryVariable( function_context, this_casted_ptr );
	return ust::make_tuple( move(this_casted_ptr), function_ptr );
}

} // namespace U1
