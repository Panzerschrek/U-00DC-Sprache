import "/sort.u"
import "/keywords.uh"
import "error_reporting.uh"
import "code_builder.uh"

namespace U1
{

fn CodeBuilder::PrepareType( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::TypeName& type_name ) : Type
{
	variant_visit( &t : type_name )
	{
		return PrepareType( names_scope, function_context, t );
	}

	halt;
}

fn CodeBuilder::PrepareType( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::ComplexName& named_type ) : Type
{
	var Value resolved_value= ResolveValue( names_scope, function_context, named_type );
	if_var( & t : resolved_value.get</Type/>() )
	{
		return t;
	}

	REPORT_ERROR( NameIsNotTypeName, names_scope, named_type.src_loc, named_type )
	return Type( FundamentalType( U_FundamentalType::InvalidType, fundamental_llvm_types_.invalid_type_ ) );
}

fn CodeBuilder::PrepareType( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, ust::box</Synt::ArrayType/>& array_type ) : Type
{
	return PrepareType( names_scope, function_context, array_type.deref() );
}

fn CodeBuilder::PrepareType( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::ArrayType& array_type ) : Type
{
	var ArrayType mut out_array_type
	{
		.element_type( PrepareType( names_scope, function_context, array_type.element_type ) )
	};

	var Variable mut index_variable;
	{
		var VariablesFrameHolder temp_variables_frame_hodler(function_context);
		auto& mut function_context= temp_variables_frame_hodler.GetFunctionContext();

		auto instructions_state= SaveInstructionsState( function_context );
		index_variable= BuildExpressionCodeEnsureVariable( names_scope, function_context, array_type.element_count );
		RestoreInstructionsState( function_context, instructions_state );
	}

	if( index_variable.constexpr_value != LLVMValueRef::Null )
	{
		if( !index_variable.t.GetFundamentalType().empty() && IsInteger( index_variable.t.GetFundamentalType().try_deref().fundamental_type ) )
		{
			if( IsSignedInteger( index_variable.t.GetFundamentalType().try_deref().fundamental_type ) )
			{
				auto mut s= 0i64;
				unsafe{  s= LLVMConstIntGetSExtValue( index_variable.constexpr_value );  }
				if( s >= 0i64 )
				{
					out_array_type.element_count= u64(s);
				}
				else
				{
					out_array_type.element_count= 0u64;
					REPORT_ERROR( ArraySizeIsNegative, names_scope,  array_type.src_loc  )
				}
			}
			else
			{
				unsafe{  out_array_type.element_count= LLVMConstIntGetZExtValue( index_variable.constexpr_value );  }
			}
		}
		else
		{
			REPORT_ERROR( ArraySizeIsNotInteger, names_scope, array_type.src_loc )
		}
	}
	else
	{
		REPORT_ERROR( ExpectedConstantExpression, names_scope, array_type.src_loc )
	}

	unsafe{ out_array_type.llvm_type= LLVMArrayType( out_array_type.element_type.GetLLVMType(), u32(out_array_type.element_count) ); }

	return Type( move(out_array_type) );
}

fn CodeBuilder::PrepareType( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, ust::box</Synt::TupleType/>& tuple_type ) : Type
{
	return PrepareType( names_scope, function_context, tuple_type.deref() );
}

fn CodeBuilder::PrepareType( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::TupleType& tuple_type ) : Type
{
	var TupleType mut out_tuple_type;

	var ust::vector</ LLVMTypeRef /> mut element_llvm_types;
	foreach( & element : tuple_type.elements )
	{
		var Type mut t= PrepareType( names_scope, function_context, element );
		element_llvm_types.push_back( t.GetLLVMType() );
		out_tuple_type.element_types.push_back( move(t) );
	}

	unsafe
	{
		out_tuple_type.llvm_type= LLVMStructTypeInContext( llvm_context_, element_llvm_types.front_unchecked(), u32(element_llvm_types.size()), LLVMBool::False );
	}

	return move(out_tuple_type);
}

fn CodeBuilder::PrepareType( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, ust::box</Synt::RawPointerType/>& raw_pointer_type ) : Type
{
	return PrepareType( names_scope, function_context, raw_pointer_type.deref() );
}

fn CodeBuilder::PrepareType( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::RawPointerType& raw_pointer_type ) : Type
{
	var RawPointerType mut out_type{ .element_type = PrepareType( names_scope, function_context, raw_pointer_type.element_type ) };
	unsafe{  out_type.llvm_type= LLVMPointerType( out_type.element_type.GetLLVMType(), 0u );  }

	return move(out_type);
}

fn CodeBuilder::PrepareType( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, ust::box</Synt::FunctionType/>& function_type_ptr ) : Type
{
	return PrepareType( names_scope, function_context, function_type_ptr.deref() );
}

fn CodeBuilder::PrepareType( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::FunctionType& function_type ) : Type
{
	// For function type inside type name generate function pointer type.
	var FunctionPointerType mut function_pointer_type
	{
		.function_type= PrepareFunctionType( names_scope, function_context, function_type, ust::shared_ptr_nullable_mut</ClassType/>() )
	};

	unsafe{  function_pointer_type.llvm_type= LLVMPointerType( function_pointer_type.function_type.llvm_type, 0u );  }

	return move(function_pointer_type);
}

fn CodeBuilder::PrepareFunctionType( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::FunctionType& function_type, ust::shared_ptr_nullable_mut</ClassType/>& class_type ) : FunctionType
{
	var FunctionType mut res
	{
		.return_type(
			select(
				function_type.return_type.empty()
					? Type( void_type_ )
					: PrepareType( names_scope, function_context, function_type.return_type.try_deref() ) ) )
		.return_value_is_reference= function_type.return_value_reference_modifier == Synt::ReferenceModifier::Reference,
		.return_value_is_mutable= function_type.return_value_mutability_modifier == Synt::MutabilityModifier::Mutable,
		.is_unsafe= function_type.is_unsafe,
	};

	foreach( &param : function_type.params )
	{
		var FunctionType::Param mut out_param
		{
			.t( invalid_type_ ),
			.is_reference= param.reference_modifier == Synt::ReferenceModifier::Reference,
			.is_mutable= param.mutability_modifier == Synt::MutabilityModifier::Mutable,
		};

		if( param.name == KeywordToString( Keyword::this_ ) )
		{
			// TODO - make "this" mutable in constructors and destructors.
			if( class_type.empty() )
			{
				REPORT_ERROR( ThisInNonclassFunction, names_scope, param.src_loc, ust::string8("TODO - func name") )
			}
			else if( ust::ref_cmp_ne( param, function_type.params.front() ) )
			{
				REPORT_ERROR( UsingKeywordAsName, names_scope, param.src_loc )
			}
			else
			{
				auto mut param_ok= false;
				if_var( &param_type_complex_name : param.t.get</Synt::ComplexName/>() )
				{
					param_ok=! param_type_complex_name.start.get</Synt::EmptyVariant/>().empty() && param_type_complex_name.tail.empty();
				}
				if( !param_ok )
				{
					REPORT_ERROR( UsingKeywordAsName, names_scope, param.src_loc )
				}

				out_param.is_reference= true;
				out_param.t= ust::to_non_nullable( class_type );
			}
		}
		else
		{
			if( IsKeyword( param.name ) )
			{
				REPORT_ERROR( UsingKeywordAsName, names_scope, param.src_loc )
			}

			out_param.t= PrepareType( names_scope, function_context, param.t );
		}

		res.params.push_back( move(out_param) );
	}

	var ust::vector</LLVMTypeRef/> mut llvm_param_types;

	// s_ret
	var bool is_s_ret= res.IsStructRet();
	if( is_s_ret )
	{
		unsafe{  llvm_param_types.push_back( LLVMPointerType( res.return_type.GetLLVMType(), 0u ) );  }
	}

	foreach( &param : res.params )
	{
		auto mut llvm_type= param.t.GetLLVMType();
		if( param.is_reference )
		{
			unsafe{  llvm_type= LLVMPointerType( llvm_type, 0u );  }
		}
		else
		{
			// Pass aggregate types by-reference.
			if( !param.t.GetClassType().empty() || !param.t.GetArrayType().empty() || !param.t.GetTupleType().empty() )
			{
				unsafe{  llvm_type= LLVMPointerType( llvm_type, 0u );  }
			}
		}
		llvm_param_types.push_back( llvm_type );
	}

	unsafe
	{
		auto mut ret_llvm_type= res.return_type.GetLLVMType();
		if( res.return_value_is_reference )
		{
			ret_llvm_type= LLVMPointerType( ret_llvm_type, 0u );
		}
		else if( is_s_ret || res.return_type == void_type_ )
		{
			ret_llvm_type= fundamental_llvm_types_.void_for_ret_;
		}

		res.llvm_type= LLVMFunctionType( ret_llvm_type, llvm_param_types.front_unchecked(), u32(llvm_param_types.size()), LLVMBool::False );
	}

	// Setup return references mapping.
	if( !function_type.return_value_reference_tag.empty() )
	{
		for( auto mut i= 0s; i < res.params.size(); ++i )
		{
			if( function_type.return_value_reference_tag == function_type.params[i].reference_tag )
			{
				var FunctionType::ParamReference mut param_reference{ .param_index= u8(i), .reference_index= FunctionType::c_param_reference_number };
				res.return_references.push_back( move(param_reference) );
			}
			if( function_type.return_value_reference_tag == function_type.params[i].inner_reference_tag )
			{
				var FunctionType::ParamReference mut param_reference{ .param_index= u8(i), .reference_index= 0u8 };
				res.return_references.push_back( move(param_reference) );
			}
		}

		if( res.return_references.empty() )
		{
			REPORT_ERROR( NameNotFound, names_scope, function_type.src_loc, function_type.return_value_reference_tag )
		}
	}
	else if( res.return_value_is_reference ) // Auto-generate return reference mapping if return tag is empty, but only for returning references and not for returning values.
	{
		// If there is no tag for return reference, assume, that it may refer to any reference param, but not inner reference of any param.
		for( auto mut i= 0s; i < res.params.size(); ++i )
		{
			if( res.params[i].is_reference )
			{
				// TODO - what if param is immutable reference and return reference is mutable?
				var FunctionType::ParamReference mut param_reference{ .param_index= u8(i), .reference_index= FunctionType::c_param_reference_number };
				res.return_references.push_back( move(param_reference) );
			}
		}
	}

	// Prepare reference pollution.
	foreach( &in_pollution : function_type.references_pollution )
	{
		if( in_pollution.dst == in_pollution.src )
		{
			REPORT_ERROR( SelfReferencePollution, names_scope, function_type.src_loc )
			continue;
		}

		var ust::vector</FunctionType::ParamReference/> mut pollutions_dst, mut pollutions_src;

		for( auto mut i= 0s; i < res.params.size(); ++i )
		{
			if( in_pollution.dst == function_type.params[i].inner_reference_tag )
			{
				var FunctionType::ParamReference mut dst{ .param_index= u8(i), .reference_index= 0u8 };
				pollutions_dst.push_back( move(dst) );
			}
			else if( in_pollution.dst == function_type.params[i].reference_tag )
			{
				REPORT_ERROR( ArgReferencePollution, names_scope, function_type.src_loc )
			}
		}
		for( auto mut i= 0s; i < res.params.size(); ++i )
		{
			if( in_pollution.src == function_type.params[i].inner_reference_tag )
			{
				var FunctionType::ParamReference mut src{ .param_index= u8(i), .reference_index= 0u8 };
				pollutions_src.push_back( move(src) );
			}
			if( in_pollution.src == function_type.params[i].reference_tag )
			{
				var FunctionType::ParamReference mut src{ .param_index= u8(i), .reference_index= FunctionType::c_param_reference_number};
				pollutions_src.push_back( move(src) );
			}
		}

		if( pollutions_dst.empty() )
		{
			REPORT_ERROR( NameNotFound, names_scope, function_type.src_loc, in_pollution.dst )
		}
		if( pollutions_src.empty() )
		{
			REPORT_ERROR( NameNotFound, names_scope, function_type.src_loc, in_pollution.src )
		}

		foreach( dst : pollutions_dst )
		{
			foreach( src : pollutions_src )
			{
				var FunctionType::ReferencePollution mut pollution{ .dst= dst, .src= src };
				res.references_pollution.push_back( move(pollution) );
			}
		}

	}
	ust::sort( res.references_pollution.range() );

	return move(res);
}

} // namespace U1
