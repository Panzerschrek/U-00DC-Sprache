import "error_reporting.uh"
import "code_builder.uh"

namespace U
{

fn CodeBuilder::BuildInitializer( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::Initializer& initializer )
{
	variant_visit( &i : initializer )
	{
		BuildInitializer( names_scope, function_context, variable, i );
	}
}

fn CodeBuilder::BuildInitializer( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::EmptyVariant& empty_initializer )
{
}

fn CodeBuilder::BuildInitializer( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::Expression& expression_initializer )
{
	auto expr_result= BuildExpressionCodeEnsureVariable( names_scope, function_context, expression_initializer );

	if( expr_result.t != variable.t )
	{
		REPORT_ERROR( TypesMismatch, names_scope, FilePos(), variable.t, expr_result.t )
		return;
	}

	unsafe
	{
		auto value_in_register= CreateMoveToLLVMRegisterInstruction( expr_result, function_context );
		LLVMBuildStore( function_context.llvm_ir_builder, value_in_register, variable.llvm_value );
	}
}

fn CodeBuilder::BuildInitializer( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::ZeroInitializer& zero_initializer )
{
	// TODO - do something
}

fn CodeBuilder::BuildInitializer( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::UninitializedInitializer& uninitialized_initializer )
{
	// TODO - do something
}

} // namespace U
