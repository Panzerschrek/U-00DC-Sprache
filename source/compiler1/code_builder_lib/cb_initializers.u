import "/keywords.uh"
import "error_reporting.uh"
import "code_builder.uh"

namespace U1
{

fn CodeBuilder::BuildInitializer( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::Initializer& initializer ) : LLVMValueRef
{
	variant_visit( &i : initializer )
	{
		return BuildInitializer( names_scope, function_context, variable, i );
	}
	halt;
}

fn CodeBuilder::BuildInitializer( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::EmptyVariant& empty_initializer ) : LLVMValueRef
{
	halt;
}

fn CodeBuilder::BuildInitializer( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::Expression& expression_initializer ) : LLVMValueRef
{
	auto src_loc= Synt::GetSrcLoc(expression_initializer);
	if( !variable.t.GetFundamentalType().empty() || !variable.t.GetEnumType().empty() || !variable.t.GetRawPointerType().empty() )
	{
		auto expr_result= BuildExpressionCodeEnsureVariable( names_scope, function_context, expression_initializer );
		if( expr_result.t != variable.t )
		{
			REPORT_ERROR( TypesMismatch, names_scope, src_loc, variable.t, expr_result.t )
			return LLVMValueRef::Null;
		}

		if( variable.t != void_type_ )
		{
			unsafe
			{
				auto value_in_register= CreateMoveToLLVMRegisterInstruction( expr_result, function_context );
				LLVMBuildStore( function_context.llvm_ir_builder, value_in_register, variable.llvm_value );
			}
		}

		DestroyUnusedTemporaryVariables( names_scope, function_context, src_loc );

		return expr_result.constexpr_value;
	}
	if( !variable.t.GetFunctionPointerType().empty() )
	{
		return InitializeFunctionPointer( names_scope, function_context, variable, expression_initializer );
	}
	if( !variable.t.GetArrayType().empty() || !variable.t.GetTupleType().empty() )
	{
		auto expr_result= BuildExpressionCodeEnsureVariable( names_scope, function_context, expression_initializer );
		if( expr_result.t != variable.t )
		{
			REPORT_ERROR( TypesMismatch, names_scope, src_loc, variable.t, expr_result.t )
			return LLVMValueRef::Null;
		}

		SetupReferencesInCopyOrMove( names_scope, function_context, variable.t, variable.node_id, expr_result.node_id, src_loc );

		if( expr_result.value_type == ValueType::Value )
		{
			// Move.
			if( expr_result.node_id != ReferencesGraph::c_empty_node_id )
			{
				function_context.references_graph.MoveNode( expr_result.node_id );
			}
			CopyBytes( variable.llvm_value, expr_result.llvm_value, variable.t, function_context );
			CreateLifetimeEnd( function_context, expr_result.llvm_value );
		}
		else
		{
			// Copy.
			if( !variable.t.IsCopyConstructible() )
			{
				REPORT_ERROR( OperationNotSupportedForThisType, names_scope, src_loc, variable.t )
				return LLVMValueRef::Null;
			}

			BuildCopyConstructorPart( names_scope, function_context, variable.llvm_value, expr_result.llvm_value, variable.t, src_loc );
		}

		DestroyUnusedTemporaryVariables( names_scope, function_context, src_loc );

		// Copy constructor for constexpr type is trivial, so, we can just take constexpr value of source.
		return expr_result.constexpr_value;
	}
	if_var( &class_type : variable.t.GetClassType() )
	{
		auto expr_result= BuildExpressionCodeEnsureVariable( names_scope, function_context, expression_initializer );

		if( expr_result.t.ReferenceIsConvertibleTo( variable.t ) )
		{
			SetupReferencesInCopyOrMove( names_scope, function_context, variable.t, variable.node_id, expr_result.node_id, src_loc );

			if( expr_result.value_type == ValueType::Value && expr_result.t == variable.t )
			{
				// Move.
				if( expr_result.node_id != ReferencesGraph::c_empty_node_id )
				{
					function_context.references_graph.MoveNode( expr_result.node_id );
				}
				CopyBytes( variable.llvm_value, expr_result.llvm_value, variable.t, function_context );
				CreateLifetimeEnd( function_context, expr_result.llvm_value );
			}
			else
			{
				// Copy.
				auto mut value_for_copy= CreateReferenceCast( expr_result.llvm_value, expr_result.t, variable.t, function_context );
				TryCallCopyConstructor( names_scope, function_context, variable.llvm_value, value_for_copy, class_type, src_loc );
			}

			DestroyUnusedTemporaryVariables( names_scope, function_context, src_loc );
			// Copy constructor for constexpr type is trivial, so, we can just take constexpr value of source.
			return expr_result.constexpr_value;
		}

		if_var( &conversion_constructor_ : GetConversionConstructor( names_scope, variable.t, expr_result.t, src_loc ) )
		{
			{
				// Create temp variables storage for preventing of destruction of "expr".
				var VariablesFrameHolder temp_variables_frame_hodler(function_context);
				auto& mut function_context= temp_variables_frame_hodler.GetFunctionContext();
				var [ Variable, 2 ] constructor_args
				[
					{ .t= variable.t, .llvm_value= variable.llvm_value, .value_type= ValueType::ReferenceMut, .node_id= variable.node_id },
					expr_result
				];
				DoCallFunction(
					names_scope,
					function_context,
					conversion_constructor_,
					constructor_args,
					ust::array_view_imut</ ust::shared_ptr_final</Synt::Expression/> />(),
					ArgsEvaluationOrder::Direct,
					src_loc );

				CallDestructorsForTopVariablesFrame( names_scope, function_context, src_loc );
			}

			DestroyUnusedTemporaryVariables( names_scope, function_context, src_loc );
			return LLVMValueRef::Null;
		}

		REPORT_ERROR( TypesMismatch, names_scope, SrcLoc(), variable.t, expr_result.t )
		return LLVMValueRef::Null;
	}

	halt; // Unhandled type kind
}

fn CodeBuilder::BuildInitializer( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::SequenceInitializer& sequence_initializer ) : LLVMValueRef
{
	if_var( &array_type : variable.t.GetArrayType() )
	{
		if( sequence_initializer.elements_initializers.size() != size_type(array_type.element_count) )
		{
			REPORT_ERROR( ArrayInitializersCountMismatch,
				names_scope,
				sequence_initializer.src_loc,
				array_type.element_count,
				sequence_initializer.elements_initializers.size() )
			return LLVMValueRef::Null;
		}

		auto mut is_constant= variable.t.CanBeConstexpr();
		var ust::vector</ LLVMValueRef /> mut elements_constants;

		var NamesScopeVariable mut element_variable
		{
			.t= array_type.element_type,
			.node_id= variable.node_id,
		};

		auto mut i= 0s;
		foreach( &element_initializer : sequence_initializer.elements_initializers )
		{
			unsafe
			{
				var [ LLVMValueRef, 2 ] mut indexes
				[
					GetZeroGEPIndex(),
					LLVMConstInt( fundamental_llvm_types_.u32_, u64(i), LLVMBool::False )
				];

				element_variable.llvm_value= LLVMBuildGEP( function_context.llvm_ir_builder, variable.llvm_value, $<(indexes[0]), 2u, "[]\0"[0] );
			}

			auto element_constant= BuildInitializer( names_scope, function_context, element_variable, element_initializer.deref() );

			if( is_constant )
			{
				if( element_constant == LLVMValueRef::Null )
				{
					is_constant= false;
				}
				else
				{
					elements_constants.push_back( element_constant );
				}
			}

			++i;
		}

		if( is_constant )
		{
			halt if( elements_constants.size() != size_type(array_type.element_count) ); // TODO - replace with assert
			unsafe
			{
				return LLVMConstArray( element_variable.t.GetLLVMType(), elements_constants.data(), u32(elements_constants.size()) );
			}
		}
		return LLVMValueRef::Null;
	}
	if_var( tuple_type : variable.t.GetTupleType() )
	{
		if( sequence_initializer.elements_initializers.size() != tuple_type.element_types.size() )
		{
			REPORT_ERROR( TupleInitializersCountMismatch,
				names_scope,
				sequence_initializer.src_loc,
				tuple_type.element_types.size(),
				sequence_initializer.elements_initializers.size() )
			return LLVMValueRef::Null;
		}

		auto mut is_constant= variable.t.CanBeConstexpr();
		var ust::vector</ LLVMValueRef /> mut elements_constants;

		for( auto mut i= 0s; i < tuple_type.element_types.size(); ++i )
		{
			var NamesScopeVariable element_variable
			{
				.t= tuple_type.element_types[i],
				.llvm_value= CreateTupleElementGEP( variable.llvm_value, i, function_context ),
				.node_id= variable.node_id,
			};

			auto element_constant= BuildInitializer( names_scope, function_context, element_variable, sequence_initializer.elements_initializers[i].deref() );

			if( is_constant )
			{
				if( element_constant == LLVMValueRef::Null )
				{
					is_constant= false;
				}
				else
				{
					elements_constants.push_back( element_constant );
				}
			}
		}

		if( is_constant )
		{
			halt if( elements_constants.size() != tuple_type.element_types.size() ); // TODO - replace with assert
			unsafe
			{
				return LLVMConstStructInContext( llvm_context_, elements_constants.data(), u32(elements_constants.size()), LLVMBool::False );
			}
		}
		return LLVMValueRef::Null;
	}

	REPORT_ERROR( ArrayInitializerForNonArray, names_scope, sequence_initializer.src_loc )
	return LLVMValueRef::Null;
}

fn CodeBuilder::BuildInitializer( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::StructNamedInitializer& struct_named_initializer ) : LLVMValueRef
{
	auto class_type_ref= variable.t.GetClassType();
	if( class_type_ref.empty() )
	{
		REPORT_ERROR( StructInitializerForNonStruct, names_scope, struct_named_initializer.src_loc )
		return LLVMValueRef::Null;
	}
	var ClassTypePtr& class_type_ptr= class_type_ref.try_deref();
	auto class_type_lock= class_type_ptr.lock_imut();
	var ClassType& class_type= class_type_lock.deref();

	auto members_lock= class_type.members.lock_imut();
	var NamesScope& class_members= members_lock.deref();

	if( class_type.have_explicit_noncopy_constructors )
	{
		REPORT_ERROR( InitializerDisabledBecauseClassHaveExplicitNoncopyConstructors, names_scope, struct_named_initializer.src_loc )
	}
	if( class_type.kind != ClassType::Kind::Struct )
	{
		REPORT_ERROR( StructInitializerForNonStruct, names_scope, struct_named_initializer.src_loc )
	}

	var ust::vector</LLVMValueRef/> mut constant_initializers;
	auto mut is_constexpr= class_type.can_be_constexpr;
	if( is_constexpr )
	{
		unsafe
		{
			constant_initializers.resize(
				size_type( LLVMCountStructElementTypes( class_type.llvm_type ) ),
				LLVMValueRef::Null );
		}
	}

	foreach( &member_initializer : struct_named_initializer.members_initializers )
	{
		// TODO - use unordered_set
		foreach( &prev_initializer : struct_named_initializer.members_initializers )
		{
			if( ust::ref_cmp_lt( prev_initializer, member_initializer ) && member_initializer.name == prev_initializer.name )
			{
				REPORT_ERROR( DuplicatedStructMemberInitializer, names_scope, member_initializer.src_loc, member_initializer.name )
			}
		}

		auto member_ref= class_members.GetThisScopeValue( member_initializer.name );
		if( member_ref.empty() )
		{
			REPORT_ERROR( NameNotFound, names_scope, member_initializer.src_loc, member_initializer.name )
			return LLVMValueRef::Null;
		}
		auto field_ptr= member_ref.try_deref().Get</ClassField/>();
		if( field_ptr.empty() )
		{
			REPORT_ERROR( InitializerForNonfieldStructMember, names_scope, member_initializer.src_loc, member_initializer.name )
			return LLVMValueRef::Null;
		}
		auto field_lock= field_ptr.try_lock_imut();
		var ClassField& class_field= field_lock.deref();

		if( class_field.source_class != class_type_ptr )
		{
			REPORT_ERROR( InitializerForBaseClassField, names_scope, member_initializer.src_loc, member_initializer.name )
			return LLVMValueRef::Null;
		}

		if( class_field.index == ~0s ){ is_constexpr= false; continue; } // May be in case of error

		if( class_field.is_reference )
		{
			auto initializer= InitializeReferenceField( names_scope, function_context, variable, class_field, member_initializer.initializer.deref() );
			if( initializer == LLVMValueRef::Null )
			{
				is_constexpr= false;
			}
			if( is_constexpr )
			{
				constant_initializers[class_field.index]= initializer;
			}
		}
		else
		{
			var NamesScopeVariable member_variable
			{
				.t= class_field.t,
				.llvm_value= CreateFieldGEP( variable.llvm_value, class_field, function_context ),
				.node_id= variable.node_id,
			};

			auto initializer= BuildInitializer( names_scope, function_context, member_variable, member_initializer.initializer.deref() );
			if( initializer == LLVMValueRef::Null )
			{
				is_constexpr= false;
			}
			if( is_constexpr )
			{
				constant_initializers[class_field.index]= initializer;
			}
		}
	}

	// Use initial class members namespace for own fields initializers evaluation.
	auto class_members_initial= class_type.members_initial;

	// Apply default initializer for fields, missing in struct named initializer.
	foreach( &field_pair : class_type.fields_order )
	{
		var ust::string8& field_name= field_pair[0];

		auto mut found= false;
		foreach( &member_initializer : struct_named_initializer.members_initializers )
		{
			if( member_initializer.name == field_name )
			{
				found= true;
				break;
			}
		}
		if( found )
		{
			continue;
		}

		auto field_lock= field_pair[1].lock_imut();
		var ClassField & field= field_lock.deref();

		if( field.index == ~0s ){ continue; } // May be in case of error

		var NamesScopeVariable member_variable
		{
			.t= field.t,
			.llvm_value= CreateFieldGEP( variable.llvm_value, field, function_context ),
			.node_id= variable.node_id,
		};

		auto mut constexpr_initializer= LLVMValueRef::Null;
		auto& initializer= field.syntax_element.deref().initializer;
		if( !initializer.get</Synt::EmptyVariant/>().empty() )
		{
			if( field.is_reference )
			{
				REPORT_ERROR( ExpectedInitializer, names_scope, struct_named_initializer.src_loc, field_name )
				continue;
			}

			constexpr_initializer= BuildEmptyInitializer( names_scope, function_context, member_variable, field_name, struct_named_initializer.src_loc );
		}
		else
		{
			if( field.is_reference )
			{
				constexpr_initializer= InitializeReferenceField( class_members_initial, function_context, variable, field, initializer );
			}
			else
			{
				constexpr_initializer= BuildInitializer( class_members_initial, function_context, member_variable, initializer );
			}
		}

		if( constexpr_initializer == LLVMValueRef::Null )
		{
			is_constexpr= false;
		}
		if( is_constexpr )
		{
			constant_initializers[field.index]= constexpr_initializer;
		}
	}

	if( is_constexpr )
	{
		unsafe
		{
			return LLVMConstNamedStruct( class_type.llvm_type, constant_initializers.data(), u32(constant_initializers.size()) );
		}
	}

	return LLVMValueRef::Null;
}

fn CodeBuilder::BuildInitializer( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::ConstructorInitializer& constructor_initializer ) : LLVMValueRef
{
	return BuildConstructorInitializer( names_scope, function_context, variable, constructor_initializer.args, constructor_initializer.src_loc );
}

fn CodeBuilder::BuildInitializer( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::ZeroInitializer& zero_initializer ) : LLVMValueRef
{
	if( !variable.t.GetFundamentalType().empty() ||
		!variable.t.GetEnumType().empty() ||
		!variable.t.GetRawPointerType().empty() ||
		!variable.t.GetFunctionPointerType().empty() )
	{
		// Currently, first element of enum have zero value.
		unsafe
		{
			auto zero_value= LLVMConstNull( variable.t.GetLLVMType() );
			if( variable.t != void_type_ )
			{
				LLVMBuildStore( function_context.llvm_ir_builder, zero_value, variable.llvm_value );
			}
			return zero_value;
		}
	}
	if_var( &array_type : variable.t.GetArrayType() )
	{
		CB_GENERATE_LOOP(
			function_context,
			array_type.element_count,
			{
				var NamesScopeVariable mut element_variable
				{
					.t= array_type.element_type
				};

				unsafe
				{
					var [ LLVMValueRef, 2 ] mut indexes[ GetZeroGEPIndex(), counter_value ];
					element_variable.llvm_value= LLVMBuildGEP( function_context.llvm_ir_builder, variable.llvm_value, $<(indexes[0]), 2u, "[]\0"[0] );
				}

				BuildInitializer( names_scope, function_context, element_variable, zero_initializer );
			}
		)

		if( variable.t.CanBeConstexpr() )
		{
			unsafe{  return LLVMConstNull( array_type.llvm_type );  }
		}
		return LLVMValueRef::Null;
	}
	if_var( &tuple_type : variable.t.GetTupleType() )
	{
		for( auto mut i= 0s; i < tuple_type.element_types.size(); ++i )
		{
			var NamesScopeVariable element_variable
			{
				.t= tuple_type.element_types[i],
				.llvm_value= CreateTupleElementGEP( variable.llvm_value, i, function_context ),
			};

			BuildInitializer( names_scope, function_context, element_variable, zero_initializer );
		}

		if( variable.t.CanBeConstexpr() )
		{
			unsafe{  return LLVMConstNull( tuple_type.llvm_type );  }
		}
		return LLVMValueRef::Null;
	}
	if_var( &class_type_ptr : variable.t.GetClassType() )
	{
		auto class_type_lock= class_type_ptr.lock_imut();
		var ClassType& class_type= class_type_lock.deref();

		if( class_type.have_explicit_noncopy_constructors )
		{
			REPORT_ERROR( InitializerDisabledBecauseClassHaveExplicitNoncopyConstructors, names_scope, zero_initializer.src_loc )
		}
		if( class_type.kind != ClassType::Kind::Struct )
		{
			REPORT_ERROR( ZeroInitializerForClass, names_scope, zero_initializer.src_loc )
		}

		auto members_lock= class_type.members.lock_imut();
		var NamesScope& class_members= members_lock.deref();

		foreach( &field_pair : class_type.fields_order )
		{
			auto field_lock= field_pair[1].lock_imut();
			var ClassField& field= field_lock.deref();

			if( field.index == ~0s ){ continue; } // May be in case of error

			if( field.is_reference )
			{
				REPORT_ERROR( UnsupportedInitializerForReference, names_scope, zero_initializer.src_loc )
				continue;
			}

			var NamesScopeVariable member_variable
			{
				.t= field.t,
				.llvm_value= CreateFieldGEP( variable.llvm_value, field, function_context ),
			};

			BuildInitializer( names_scope, function_context, member_variable, zero_initializer );
		}

		if( class_type.can_be_constexpr )
		{
			unsafe{  return LLVMConstNull( class_type.llvm_type );  }
		}
		return LLVMValueRef::Null;
	}

	halt;
}

fn CodeBuilder::BuildInitializer( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::UninitializedInitializer& uninitialized_initializer ) : LLVMValueRef
{
	if( !function_context.is_in_unsafe_block )
	{
		REPORT_ERROR( UninitializedInitializerOutsideUnsafeBlock, names_scope, uninitialized_initializer.src_loc )
	}
	return LLVMValueRef::Null;
}

fn CodeBuilder::BuildEmptyInitializer( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, ust::string8& variable_name, SrcLoc& src_loc ) : LLVMValueRef
{
	if( !variable.t.IsDefaultConstructible() )
	{
		REPORT_ERROR( ExpectedInitializer, names_scope, src_loc, variable_name )
		return LLVMValueRef::Null;
	}

	if_var( &fundamental_type : variable.t.GetFundamentalType() )
	{
		// This is void type.
		unsafe{  return LLVMConstNull( fundamental_llvm_types_.void_ );  }
	}

	if_var( &array_type : variable.t.GetArrayType() )
	{
		var NamesScopeVariable mut element_variable
		{
			.t= array_type.element_type
		};

		var LLVMValueRef mut constant_initializer = LLVMValueRef::Null;

		CB_GENERATE_LOOP(
			function_context,
			array_type.element_count,
			{
				unsafe
				{
					var [ LLVMValueRef, 2 ] mut indexes[ GetZeroGEPIndex(), counter_value ];
					element_variable.llvm_value= LLVMBuildGEP( function_context.llvm_ir_builder, variable.llvm_value, $<(indexes[0]), 2u, "[]\0"[0] );
				}

				constant_initializer = BuildEmptyInitializer( names_scope, function_context, element_variable, variable_name, src_loc );
			} )

		if( constant_initializer != LLVMValueRef::Null )
		{
			var ust::vector</LLVMValueRef/> mut initializers( size_type(array_type.element_count), constant_initializer );
			unsafe{  return LLVMConstArray( array_type.element_type.GetLLVMType(), initializers.data(), u32(initializers.size()) );  }
		}
		return LLVMValueRef::Null;
	}
	if_var( &tuple_type : variable.t.GetTupleType() )
	{
		var ust::vector</LLVMValueRef/> mut constant_initializers;

		for( auto mut i= 0s; i < tuple_type.element_types.size(); ++i )
		{
			var NamesScopeVariable element_variable
			{
				.t= tuple_type.element_types[i],
				.llvm_value= CreateTupleElementGEP( variable.llvm_value, i, function_context ),
			};

			var LLVMValueRef constant_initializer= BuildEmptyInitializer( names_scope, function_context, element_variable, variable_name, src_loc );
			if( constant_initializer != LLVMValueRef::Null )
			{
				constant_initializers.push_back( constant_initializer );
			}
		}

		if( constant_initializers.size() == tuple_type.element_types.size() )
		{
			unsafe{  return LLVMConstStructInContext( llvm_context_, constant_initializers.data(), u32(constant_initializers.size()), LLVMBool::False );  }
		}
		return LLVMValueRef::Null;
	}
	if_var( &class_type_ptr : variable.t.GetClassType() )
	{
		auto class_members= class_type_ptr.lock_imut().deref().members;
		auto members_lock= class_members.lock_imut();

		auto member= members_lock.deref().GetThisScopeValue( KeywordToString( Keyword::constructor_ ) );
		if( member.empty() )
		{
			// May be in case of error
			return LLVMValueRef::Null;
		}

		auto constructors_ptr= member.try_deref().Get</NamesScopeFunctionsSet/>();
		// Should be functions set 100%
		// Should be complete here.

		var Variable this_
		{
			.t= variable.t,
			.value_type= ValueType::ReferenceMut,
			.llvm_value= variable.llvm_value,
		};

		CallFunctionsSet(
			names_scope,
			function_context,
			ust::optional_ref_imut</ Variable />( this_ ),
			constructors_ptr.try_lock_imut().deref().functions_set,
			ust::array_view_imut</ ust::shared_ptr_final</Synt::Expression/> />(),
			src_loc );

		return LLVMValueRef::Null;
	}

	halt;
}

fn CodeBuilder::BuildConstructorInitializer( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, ust::vector</ ust::shared_ptr_final</Synt::Expression/> />& args, SrcLoc& src_loc )  : LLVMValueRef
{
	if_var( &dst_type : variable.t.GetFundamentalType() )
	{
		if( dst_type.fundamental_type == U_FundamentalType::void_ && args.empty() )
		{
			unsafe{  return LLVMConstNull( dst_type.llvm_type );  }
		}

		if( args.size() != 1s )
		{
			REPORT_ERROR( FundamentalTypesHaveConstructorsWithExactlyOneParameter, names_scope, src_loc )
			return LLVMValueRef::Null;
		}

		var Variable src_var= BuildExpressionCodeEnsureVariable( names_scope, function_context, args.front().deref() );

		var FundamentalType mut src_type;
		if_var( &fundamental_type : src_var.t.GetFundamentalType() )
		{
			src_type= fundamental_type;
		}
		if_var( &enum_type : src_var.t.GetEnumType() )
		{
			src_type= enum_type.lock_imut().deref().underlaying_type;
		}

		if( src_type.llvm_type == LLVMTypeRef::Null )
		{
			REPORT_ERROR( TypesMismatch, names_scope, src_loc, variable.t, src_var.t )
			return LLVMValueRef::Null;
		}

		auto mut llvm_value= CreateMoveToLLVMRegisterInstruction( src_var, function_context );
		DestroyUnusedTemporaryVariables( names_scope, function_context, src_loc );
		unsafe
		{
			if( src_type.fundamental_type == dst_type.fundamental_type )
			{}
			else if( IsInteger( dst_type.fundamental_type ) && IsInteger( src_type.fundamental_type ) )
			{
				// int to int
				if( src_type.GetSize() < dst_type.GetSize() )
				{
					// We lost here some values in conversions, such i16 => u32, if src_type is signed.
					if( IsUnsignedInteger( dst_type.fundamental_type ) )
					{
						llvm_value= LLVMBuildZExt( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
					}
					else
					{
						llvm_value= LLVMBuildSExt( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
					}
				}
				else if( src_type.GetSize() > dst_type.GetSize() )
				{
					llvm_value= LLVMBuildTrunc( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
				}
				else{} // Same size integers - do nothing
			}
			else if( IsFloatingPoint( dst_type.fundamental_type ) && IsFloatingPoint( src_type.fundamental_type ) )
			{
				// float to float
				if( src_type.GetSize() < dst_type.GetSize() )
				{
					llvm_value= LLVMBuildFPExt( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
				}
				else if( src_type.GetSize() > dst_type.GetSize() )
				{
					llvm_value= LLVMBuildFPTrunc( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
				}
				else{ halt; } // WTF?
			}
			else if( IsFloatingPoint( dst_type.fundamental_type ) && IsInteger( src_type.fundamental_type ) )
			{
				// int to float
				if( IsSignedInteger( src_type.fundamental_type ) )
				{
					llvm_value= LLVMBuildSIToFP( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
				}
				else
				{
					llvm_value= LLVMBuildUIToFP( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
				}
			}
			else if( IsInteger( dst_type.fundamental_type ) && IsFloatingPoint( src_type.fundamental_type ) )
			{
				// float to int
				if( IsSignedInteger( dst_type.fundamental_type ) )
				{
					llvm_value= LLVMBuildFPToSI( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
				}
				else
				{
					llvm_value= LLVMBuildFPToUI( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
				}
			}
			else if( IsChar( dst_type.fundamental_type ) && ( IsInteger( src_type.fundamental_type ) || IsChar( src_type.fundamental_type ) ) )
			{
				// int to char or char to char
				if( src_type.GetSize() < dst_type.GetSize() )
				{
					llvm_value= LLVMBuildZExt( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
				}
				else if( src_type.GetSize() > dst_type.GetSize() )
				{
					llvm_value= LLVMBuildTrunc( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
				}
			}
			else if( IsInteger( dst_type.fundamental_type ) && IsChar( src_type.fundamental_type ) )
			{
				// char to int
				if( src_type.GetSize() < dst_type.GetSize() )
				{
					// We lost here some values in conversions, such i16 => u32, if src_type is signed.
					if( IsUnsignedInteger( dst_type.fundamental_type ) )
					{
						llvm_value= LLVMBuildZExt( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
					}
					else
					{
						llvm_value= LLVMBuildSExt( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
					}
				}
				else if( src_type.GetSize() > dst_type.GetSize() )
				{
					llvm_value= LLVMBuildTrunc( function_context.llvm_ir_builder, llvm_value, dst_type.llvm_type, "\0"[0] );
				}
				else{} // Same size - do nothing
			}
			else
			{
				if( dst_type.fundamental_type == U_FundamentalType::bool_ )
				{
					// TODO - error, bool have no constructors from other types
				}
				REPORT_ERROR( TypesMismatch, names_scope, src_loc, variable.t, src_var.t )
				return LLVMValueRef::Null;
			}

			if( variable.t != void_type_ )
			{
				LLVMBuildStore( function_context.llvm_ir_builder, llvm_value, variable.llvm_value );
			}
		}

		unsafe{  if( LLVMIsConstant( llvm_value ) == LLVMBool::True ){ return llvm_value; }  }

		return LLVMValueRef::Null;
	}
	if( !variable.t.GetArrayType().empty() || !variable.t.GetTupleType().empty() )
	{
		if( args.size() != 1s )
		{
			REPORT_ERROR( ConstructorInitializerForUnsupportedType, names_scope, src_loc )
			return LLVMValueRef::Null;
		}

		auto expr_result= BuildExpressionCodeEnsureVariable( names_scope, function_context, args.front().deref() );
		if( expr_result.t != variable.t )
		{
			REPORT_ERROR( TypesMismatch, names_scope, src_loc, variable.t, expr_result.t )
			return LLVMValueRef::Null;
		}

		SetupReferencesInCopyOrMove( names_scope, function_context, variable.t, variable.node_id, expr_result.node_id, src_loc );

		if( expr_result.value_type == ValueType::Value )
		{
			// Move.
			if( expr_result.node_id != ReferencesGraph::c_empty_node_id )
			{
				function_context.references_graph.MoveNode( expr_result.node_id );
			}
			CopyBytes( variable.llvm_value, expr_result.llvm_value, variable.t, function_context );
			CreateLifetimeEnd( function_context, expr_result.llvm_value );
		}
		else
		{
			// Copy.
			if( !variable.t.IsCopyConstructible() )
			{
				REPORT_ERROR( OperationNotSupportedForThisType, names_scope, src_loc, variable.t )
				return LLVMValueRef::Null;
			}

			BuildCopyConstructorPart( names_scope, function_context, variable.llvm_value, expr_result.llvm_value, variable.t, src_loc );
		}

		DestroyUnusedTemporaryVariables( names_scope, function_context, src_loc );

		// Copy constructor for constexpr type is trivial, so, we can just take constexpr value of source.
		return expr_result.constexpr_value;
	}
	if( !variable.t.GetEnumType().empty() || !variable.t.GetRawPointerType().empty() )
	{
		if( args.size() != 1s )
		{
			REPORT_ERROR( FundamentalTypesHaveConstructorsWithExactlyOneParameter, names_scope, src_loc )
			return LLVMValueRef::Null;
		}

		var Variable expr= BuildExpressionCodeEnsureVariable( names_scope, function_context, args.front().deref() );
		if( expr.t != variable.t )
		{
			REPORT_ERROR( TypesMismatch, names_scope, src_loc, variable.t, expr.t )
			return LLVMValueRef::Null;
		}

		unsafe
		{
			LLVMBuildStore( function_context.llvm_ir_builder, CreateMoveToLLVMRegisterInstruction( expr, function_context ), variable.llvm_value );
		}

		DestroyUnusedTemporaryVariables( names_scope, function_context, src_loc );

		return expr.constexpr_value;
	}
	if( !variable.t.GetFunctionPointerType().empty() )
	{
		if( args.size() != 1s )
		{
			REPORT_ERROR( FundamentalTypesHaveConstructorsWithExactlyOneParameter, names_scope, src_loc )
			return LLVMValueRef::Null;
		}

		return InitializeFunctionPointer( names_scope, function_context, variable, args.front().deref() );
	}
	if_var( &class_type : variable.t.GetClassType() )
	{
		var bool mut needs_move_construct = false;
		if( args.size() == 1s )
		{
			var VariablesFrameHolder temp_variables_frame_hodler(function_context);
			auto& mut function_context= temp_variables_frame_hodler.GetFunctionContext();
			auto instructions_state= SaveInstructionsState( function_context );

			var Variable arg= BuildExpressionCodeEnsureVariable( names_scope, function_context, args.front().deref() );
			needs_move_construct= arg.t == variable.t && arg.value_type == ValueType::Value;

			RestoreInstructionsState( function_context, instructions_state );
		}

		if( needs_move_construct )
		{
			var Variable expr_result= BuildExpressionCodeEnsureVariable( names_scope, function_context, args.front().deref() );
			SetupReferencesInCopyOrMove( names_scope, function_context, variable.t, variable.node_id, expr_result.node_id, src_loc );

			if( expr_result.node_id != ReferencesGraph::c_empty_node_id )
			{
				function_context.references_graph.MoveNode( expr_result.node_id );
			}
			CopyBytes( variable.llvm_value, expr_result.llvm_value, variable.t, function_context );
			CreateLifetimeEnd( function_context, expr_result.llvm_value );

			return expr_result.constexpr_value; // Move can preserve constexpr.
		}

		auto class_members= class_type.lock_imut().deref().members;
		auto members_lock= class_members.lock_imut();

		auto member= members_lock.deref().GetThisScopeValue( KeywordToString( Keyword::constructor_ ) );
		if( member.empty() )
		{
			REPORT_ERROR( ClassHaveNoConstructors, names_scope, src_loc )
			return LLVMValueRef::Null;
		}

		auto constructors_ptr= member.try_deref().Get</NamesScopeFunctionsSet/>();
		// Should be functions set 100%
		// Should be complete here.

		var Variable this_
		{
			.t= variable.t,
			.value_type= ValueType::ReferenceMut,
			.llvm_value= variable.llvm_value,
			.node_id= variable.node_id,
		};
		CallFunctionsSet(
			names_scope,
			function_context,
			ust::optional_ref_imut</ Variable />( this_ ),
			constructors_ptr.try_lock_imut().deref().functions_set,
			args.range(),
			src_loc );

		DestroyUnusedTemporaryVariables( names_scope, function_context, src_loc );

		return LLVMValueRef::Null;
	}

	REPORT_ERROR( ConstructorInitializerForUnsupportedType, names_scope, src_loc )
	return LLVMValueRef::Null;
}

fn CodeBuilder::InitializeFunctionPointer( mut this,  NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, Synt::Expression& initializer_expression ) : LLVMValueRef
{
	auto initializer_src_loc= Synt::GetSrcLoc( initializer_expression );
	auto initializer_value= BuildExpressionCode( names_scope, function_context, initializer_expression );

	var FunctionType& function_type= variable.t.GetFunctionPointerType().try_deref().function_type;

	if_var( &initializer_variable : initializer_value.get</Variable/>() )
	{
		if( !( !initializer_variable.t.GetFunctionPointerType().empty() &&
			initializer_variable.t.GetFunctionPointerType().try_deref().function_type.PointerCanBeConvertedTo( function_type ) ) )
		{
			REPORT_ERROR( TypesMismatch, names_scope, initializer_src_loc, variable.t, initializer_variable.t )
			return LLVMValueRef::Null;
		}

		unsafe
		{
			auto mut value_for_store= CreateMoveToLLVMRegisterInstruction( initializer_variable, function_context );
			if( initializer_variable.t != variable.t )
			{
				value_for_store= LLVMBuildPointerCast( function_context.llvm_ir_builder, value_for_store, variable.t.GetLLVMType(), "\0"[0] );
			}
			LLVMBuildStore( function_context.llvm_ir_builder, value_for_store, variable.llvm_value );
		}

		DestroyUnusedTemporaryVariables( names_scope, function_context, initializer_src_loc );

		return initializer_variable.constexpr_value;
	}

	var ust::optional_ref_imut</FunctionsSet/> mut functions_set_opt;
	if_var( &functions_set : initializer_value.get</FunctionsSet/>() )
	{
		functions_set_opt.reset( functions_set );
	}
	if_var( &this_methods_set : initializer_value.get</ThisMethodsSet/>() )
	{
		functions_set_opt.reset( this_methods_set.functions_set );
	}

	if_var( &functions_set : functions_set_opt )
	{
		var ust::vector</ FunctionVariable /> mut exact_type_functions;
		var ust::vector</ FunctionVariable /> mut functions_with_conversion;
		foreach( &function_variable : functions_set.functions )
		{
			if( function_variable.t == function_type )
			{
				exact_type_functions.push_back( function_variable );
			}
			else if( function_variable.t.PointerCanBeConvertedTo( function_type ) )
			{
				functions_with_conversion.push_back( function_variable );
			}
		}

		foreach( &parametrized_function_template : functions_set.parametrized_function_templates )
		{
			if( parametrized_function_template.known_args.size() != parametrized_function_template.base_template.deref().params.size() )
			{
				continue;
			}

			if_var( &function_variable : FinishFunctionTemplateParametrization( parametrized_function_template, initializer_src_loc ) )
			{
				if( function_variable.t == function_type )
				{
					exact_type_functions.push_back( function_variable );
				}
				else if( function_variable.t.PointerCanBeConvertedTo( function_type ) )
				{
					functions_with_conversion.push_back( function_variable );
				}
			}
		}

		foreach( &function_template : functions_set.function_templates )
		{
			if( !function_template.deref().params.empty() )
			{
				continue;
			}

			var ParametrizedFunctionTemplate parametrized_function_template
			{
				.base_template= function_template,
				.instantiation_point_names_scope= names_scope,
			};
			if_var( &function_variable : FinishFunctionTemplateParametrization( parametrized_function_template, initializer_src_loc ) )
			{
				if( function_variable.t == function_type )
				{
					exact_type_functions.push_back( function_variable );
				}
				else if( function_variable.t.PointerCanBeConvertedTo( function_type ) )
				{
					functions_with_conversion.push_back( function_variable );
				}
			}
		}

		if( exact_type_functions.size() == 1s )
		{
			auto& function_variable= exact_type_functions.front();
			if( function_variable.is_deleted )
			{
				REPORT_ERROR( AccessingDeletedMethod, names_scope, initializer_src_loc )
				return LLVMValueRef::Null;
			}

			unsafe
			{
				LLVMBuildStore( function_context.llvm_ir_builder, function_variable.llvm_function, variable.llvm_value );
			}
			return function_variable.llvm_function;
		}
		else if( exact_type_functions.size() > 1s )
		{
			REPORT_ERROR( TooManySuitableOverloadedFunctions, names_scope, initializer_src_loc, FunctionParamsToString( function_type.params.range() ) )
		}
		else if( functions_with_conversion.size() == 1s )
		{
			auto& function_variable= functions_with_conversion.front();
			if( function_variable.is_deleted )
			{
				REPORT_ERROR( AccessingDeletedMethod, names_scope, initializer_src_loc )
				return LLVMValueRef::Null;
			}

			// TODO - maybe disable conversion for expression initializer?
			unsafe
			{
				auto ptr_casted= LLVMBuildPointerCast( function_context.llvm_ir_builder, function_variable.llvm_function, variable.t.GetLLVMType(), "\0"[0] );
				LLVMBuildStore( function_context.llvm_ir_builder, ptr_casted, variable.llvm_value );
				return ptr_casted;
			}
		}
		else if( functions_with_conversion.empty() )
		{
			REPORT_ERROR( CouldNotSelectOverloadedFunction, names_scope, initializer_src_loc, FunctionParamsToString( function_type.params.range() ) )
		}
		else
		{
			REPORT_ERROR( TooManySuitableOverloadedFunctions, names_scope, initializer_src_loc, FunctionParamsToString( function_type.params.range() ) )
		}
		return LLVMValueRef::Null;
	}

	// TODO - generate separate error
	REPORT_ERROR( ExpectedVariable, names_scope, initializer_src_loc, GetValueKindName(initializer_value) )

	return LLVMValueRef::Null;
}

fn CodeBuilder::InitializeReferenceField( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeVariable& variable, ClassField& field, Synt::Initializer& initializer ) : LLVMValueRef
{
	auto initializer_src_loc= Synt::GetSrcLoc( initializer );

	var ust::optional_ref_imut</Synt::Expression/> mut initializer_expression;
	if_var( &expression_initializer : initializer.get</Synt::Expression/>() )
	{
		initializer_expression.reset(expression_initializer);
	}
	if_var( &constructor_initializer : initializer.get</Synt::ConstructorInitializer/>() )
	{
		if( constructor_initializer.args.size() != 1s )
		{
			REPORT_ERROR( ReferencesHaveConstructorsWithExactlyOneParameter, names_scope, initializer_src_loc )
			return LLVMValueRef::Null;
		}

		initializer_expression.reset( constructor_initializer.args.front().deref() );
	}

	if( initializer_expression.empty() )
	{
		REPORT_ERROR( UnsupportedInitializerForReference, names_scope, initializer_src_loc )
		return LLVMValueRef::Null;
	}

	var Variable initializer_variable= BuildExpressionCodeEnsureVariable( names_scope, function_context, initializer_expression.try_deref() );
	var SrcLoc initializer_expression_src_loc= Synt::GetSrcLoc( initializer_expression.try_deref() );
	if( initializer_variable.t != field.t && !initializer_variable.t.ReferenceIsConvertibleTo( field.t ) )
	{
		REPORT_ERROR( TypesMismatch, names_scope, initializer_expression_src_loc, field.t, initializer_variable.t )
		return LLVMValueRef::Null;
	}
	if( initializer_variable.value_type == ValueType::Value )
	{
		REPORT_ERROR( ExpectedReferenceValue, names_scope, initializer_expression_src_loc )
		return LLVMValueRef::Null;
	}
	if( field.is_mutable && initializer_variable.value_type == ValueType::ReferenceImut )
	{
		REPORT_ERROR( BindingConstReferenceToNonconstReference, names_scope, initializer_expression_src_loc )
		return LLVMValueRef::Null;
	}

	auto reference_converted= CreateReferenceCast( initializer_variable.llvm_value, initializer_variable.t, field.t, function_context );
	auto address_of_reference= CreateFieldGEP( variable.llvm_value, field, function_context );
	unsafe{  LLVMBuildStore( function_context.llvm_ir_builder, reference_converted, address_of_reference );  }

	if( variable.node_id != ReferencesGraph::c_empty_node_id && initializer_variable.node_id != ReferencesGraph::c_empty_node_id )
	{
		var ReferencesGraph &mut references_graph= function_context.references_graph;

		foreach( &dst_variable_node_id : references_graph.GetAllAccessibleVariableNodes( variable.node_id ) )
		{
			var ReferencesGraph::NodeId mut inner_reference_node_id= references_graph.GetNodeInnerReference( dst_variable_node_id);
			if( inner_reference_node_id == ReferencesGraph::c_empty_node_id )
			{
				inner_reference_node_id= references_graph.CreateNodeInnerReference(
					dst_variable_node_id,
					select( field.is_mutable ? ReferencesGraph::NodeKind::ReferenceMut : ReferencesGraph::NodeKind::ReferenceImut ) );
			}
			else if(
				(  field.is_mutable && references_graph.GetNodeKind( inner_reference_node_id ) != ReferencesGraph::NodeKind::ReferenceMut ) ||
				( !field.is_mutable && references_graph.GetNodeKind( inner_reference_node_id ) != ReferencesGraph::NodeKind::ReferenceImut ) )
			{
				REPORT_ERROR( InnerReferenceMutabilityChanging, names_scope, initializer_src_loc, references_graph.GetNodeName( inner_reference_node_id ) )
			}

			if( !references_graph.TryAddLink( initializer_variable.node_id, inner_reference_node_id ) )
			{
				REPORT_ERROR( ReferenceProtectionError, names_scope, initializer_src_loc, references_graph.GetNodeName( initializer_variable.node_id ) )
			}
		}
	}

	// Destroy temporary variables after creating links to prevent destruction of variables, linked with initializer reference.
	DestroyUnusedTemporaryVariables( names_scope, function_context, initializer_expression_src_loc );

	if( initializer_variable.constexpr_value != LLVMValueRef::Null )
	{
		// Only global variables can have constant address, so, create it.
		// TODO - create only if needed.
		auto global_variable= AddGlobalConstantVariable( "_temp_const\0", initializer_variable.t.GetLLVMType(), initializer_variable.constexpr_value );
		return CreateReferenceCast( global_variable, initializer_variable.t, field.t, function_context );
	}

	return LLVMValueRef::Null;
}

fn CodeBuilder::BuildConstructorInitialization(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	Synt::StructNamedInitializer& constructor_initialization_list )
{
	var VariablesFrameHolder temp_variables_frame_hodler(function_context);
	auto& mut function_context= temp_variables_frame_hodler.GetFunctionContext();

	// Function context should contain "this" with class type
	var Variable this_= function_context.this_.try_deref();
	auto class_type= this_.t.GetClassType().try_deref();
	auto class_members_ptr= class_type.lock_imut().deref().members;
	auto class_members_lock= class_members_ptr.lock_imut();
	var NamesScope& class_members= class_members_lock.deref();
	auto base_class= class_type.lock_imut().deref().base_class;

	// Check for errors, build list of initialized fields.
	var ust::unordered_set</ust::string8/> mut initialized_fields;
	auto mut have_fields_errors= false;
	auto mut base_initialized= false;
	foreach( &member_initializer : constructor_initialization_list.members_initializers )
	{
		if( member_initializer.name == KeywordToString( Keyword::base_ ) )
		{
			if( base_class.empty() )
			{
				have_fields_errors= true;
				REPORT_ERROR( BaseUnavailable, names_scope, constructor_initialization_list.src_loc )
				continue;
			}
			if( base_initialized )
			{
				have_fields_errors= true;
				REPORT_ERROR( DuplicatedStructMemberInitializer, names_scope, constructor_initialization_list.src_loc, member_initializer.name )
				continue;
			}
			base_initialized= true;
			function_context.uninitialized_this_fields.insert( KeywordToString( Keyword::base_ ) );
			continue;
		}

		auto member= class_members.GetThisScopeValue( member_initializer.name );
		if( member.empty() )
		{
			have_fields_errors= true;
			REPORT_ERROR( NameNotFound, names_scope, member_initializer.src_loc, member_initializer.name )
			continue;
		}
		auto class_field_ptr= member.try_deref().Get</ClassField/>();
		if( class_field_ptr.empty() )
		{
			have_fields_errors= true;
			REPORT_ERROR( InitializerForNonfieldStructMember, names_scope, member_initializer.src_loc, member_initializer.name )
			continue;
		}
		if( class_field_ptr.try_lock_imut().deref().source_class != class_type )
		{
			have_fields_errors= true;
			REPORT_ERROR( InitializerForBaseClassField, names_scope, member_initializer.src_loc, member_initializer.name )
			continue;
		}

		if( initialized_fields.exists( member_initializer.name ) )
		{
			have_fields_errors= true;
			REPORT_ERROR( DuplicatedStructMemberInitializer, names_scope, member_initializer.src_loc, member_initializer.name )
			continue;
		}

		initialized_fields.insert( member_initializer.name );
		function_context.uninitialized_this_fields.insert( member_initializer.name );
	}

	// Initialize fields, missing in initializer list.
	if( !base_class.empty() && !base_initialized )
	{
		var NamesScopeVariable base_variable
		{
			.t= base_class.try_to_non_nullable(),
			.is_mutable= true,
			.llvm_value= CreateBaseClassFieldGEP( this_.llvm_value, function_context ),
		};

		BuildEmptyInitializer( names_scope, function_context, base_variable, KeywordToString( Keyword::base_ ), constructor_initialization_list.src_loc );
	}

	// Use initial class members namespace for own fields initializers evaluation.
	auto class_members_initial= class_type.lock_imut().deref().members_initial;

	foreach( &field_pair : class_type.lock_imut().deref().fields_order )
	{
		var ust::string8& field_name= field_pair[0];
		if( initialized_fields.exists( field_name ) )
		{
			continue;
		}
		auto field_lock= field_pair[1].lock_imut();
		var ClassField & class_field= field_lock.deref();

		if( class_field.index == ~0s ){ continue; } // May be in case of error

		var NamesScopeVariable field_variable
		{
			.t= class_field.t,
			.is_mutable= true,
			.llvm_value= CreateFieldGEP( this_.llvm_value, class_field, function_context ),
			.node_id= this_.node_id,
		};

		auto& initializer= class_field.syntax_element.deref().initializer;
		if( !initializer.get</Synt::EmptyVariant/>().empty() )
		{
			if( class_field.is_reference )
			{
				REPORT_ERROR( ExpectedInitializer, names_scope, constructor_initialization_list.src_loc, field_name )
				continue;
			}

			BuildEmptyInitializer( names_scope, function_context, field_variable, field_name, constructor_initialization_list.src_loc );
		}
		else
		{
			if( class_field.is_reference )
			{
				var NamesScopeVariable this_variable
				{
					.t= class_type,
					.llvm_value= this_.llvm_value,
					.node_id= this_.node_id,
				};
				InitializeReferenceField( class_members_initial, function_context, this_variable, class_field, initializer );
			}
			else
			{
				BuildInitializer( class_members_initial, function_context, field_variable, initializer );
			}
		}
	}

	if( have_fields_errors )
	{
		return;
	}

	// Apply explicit initializers.
	foreach( &member_initializer : constructor_initialization_list.members_initializers )
	{
		if( member_initializer.name == KeywordToString( Keyword::base_ ) )
		{
			var NamesScopeVariable base_variable
			{
				.t= base_class.try_to_non_nullable(),
				.is_mutable= true,
				.llvm_value= CreateBaseClassFieldGEP( this_.llvm_value, function_context ),
				.node_id= this_.node_id,
			};

			BuildInitializer( names_scope, function_context, base_variable, member_initializer.initializer.deref() );

			function_context.uninitialized_this_fields.drop( KeywordToString( Keyword::base_ ) );
			continue;
		}

		auto field_ptr= class_members.GetThisScopeValue( member_initializer.name ).try_deref().Get</ClassField/>();
		auto field_lock= field_ptr.try_lock_imut();
		var ClassField & class_field= field_lock.deref();

		if( class_field.index == ~0s ){ continue; } // May be in case of error

		if( class_field.is_reference )
		{
			var NamesScopeVariable this_copy
			{
				.t= this_.t,
				.llvm_value= this_.llvm_value,
				.node_id= this_.node_id,
			};
			InitializeReferenceField( names_scope, function_context, this_copy, class_field, member_initializer.initializer.deref() );
		}
		else
		{
			var NamesScopeVariable field_variable
			{
				.t= class_field.t,
				.is_mutable= true,
				.llvm_value= CreateFieldGEP( this_.llvm_value, class_field, function_context ),
				.node_id= this_.node_id,
			};

			BuildInitializer( names_scope, function_context, field_variable, member_initializer.initializer.deref() );
		}

		function_context.uninitialized_this_fields.drop( member_initializer.name );
	}
}

fn CodeBuilder::CheckClassFieldsInitializers( mut this, ClassTypePtr& class_type )
{
	auto class_members_ptr= class_type.lock_imut().deref().members;
	auto class_members_lock= class_members_ptr.lock_imut();
	var NamesScope& class_members= class_members_lock.deref();

	auto mut global_function_context= CreateGlobalFunctionContext();
	var VariablesFrameHolder temp_variables_frame_hodler(global_function_context);
	auto& mut function_context= temp_variables_frame_hodler.GetFunctionContext();

	var NamesScopeVariable mut this_variable{ .t= class_type };
	unsafe{  this_variable.llvm_value= LLVMBuildAlloca( function_context.alloca_ir_builder, class_type.lock_imut().deref().llvm_type, "\0"[0] );  }

	foreach( &field_pair : class_type.lock_imut().deref().fields_order )
	{
		auto field_lock= field_pair[1].lock_imut();
		var ClassField & class_field= field_lock.deref();

		if( class_field.index == ~0s ){ continue; } // May be in case of error

		auto& initializer= class_field.syntax_element.deref().initializer;
		if( !initializer.get</Synt::EmptyVariant/>().empty() )
		{
			continue; // Skip empty initializers.
		}

		if( class_field.is_reference )
		{
			InitializeReferenceField( class_members_ptr, function_context, this_variable, class_field, initializer );
		}
		else
		{
			var NamesScopeVariable field_variable
			{
				.t= class_field.t,
				.is_mutable= true,
				.llvm_value= CreateFieldGEP( this_variable.llvm_value, class_field, function_context ),
			};
			BuildInitializer( class_members_ptr, function_context, field_variable, initializer );
		}
	}
}

} // namespace U1
