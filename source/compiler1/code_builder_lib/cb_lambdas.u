import "/assert.u"
import "/keywords.uh"
import "error_reporting.uh"
import "code_builder.uh"

namespace U1
{

fn CodeBuilder::BuildLambda( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::Lambda& lambda_ ) : Value
{
	var ClassTypePtr lambda_class= PrepareLambdaClass( names_scope, function_context, lambda_ );

	var Variable mut result_value
	{
		.t= lambda_class,
		.value_type= ValueType::Value,
		.location= Variable::Location::Pointer,
		.name= "value of " + Type(lambda_class).ToString(),
	};

	if( !function_context.is_functionless_context )
	{
		result_value.llvm_value= unsafe( LLVMBuildAlloca( function_context.alloca_ir_builder, result_value.t.GetLLVMType(), g_null_string ) );
		CreateLifetimeStart( function_context, result_value.llvm_value );
	}

	var VariablePtr result= move(result_value).CreatePtr();
	function_context.references_graph.AddNode( result );

	var ust::vector</LLVMValueRef/> mut constexpr_initializers;
	with( &class_type : lambda_class.lock_imut().deref() )
	{
		if( class_type.can_be_constexpr )
		{
			constexpr_initializers.resize( class_type.fields_order.size(), LLVMValueRef::Null );
		}
	}
	var size_type mut num_constexpr_initializers= 0s;

	// TODO - fill captures.

	with( &class_type : lambda_class.lock_imut().deref() )
	{
		if( class_type.can_be_constexpr && num_constexpr_initializers == constexpr_initializers.size() )
		{
			with ( mut lock : result.lock_mut() )
			{
				lock.deref().constexpr_value= unsafe( LLVMConstNamedStruct( class_type.llvm_type, constexpr_initializers.data(), u32(constexpr_initializers.size()) ) );
			}
		}
	}

	RegisterTemporaryVariable( function_context, result );
	return result;
}

fn CodeBuilder::PrepareLambdaClass( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::Lambda& lambda_ ) : ClassTypePtr
{
	var NamesScopePtr parent_scope= GetClosestNamedSpaceOrRoot( names_scope );
	var LambdaKey key{ .parent_scope= parent_scope, .src_loc= lambda_.src_loc };

	// TODO - fill tuple indices.

	if_var( &existing_class : lambda_classes_table_.find( key ) )
	{
		return existing_class;
	}

	var NamesScopeMutPtr class_members( NamesScope( "_TODO - lambda name", parent_scope ) );
	var ClassType mut class_type
	{
		.members= class_members,
		.members_initial= class_members,
		.kind= ClassType::Kind::Struct, // Set temporary to struct in order to allow generation of some methods.
		.parents_list_prepared= true,
		.have_explicit_noncopy_constructors= false,
		.is_default_constructible= false,
		.can_be_constexpr= true, // Set later.
		.generated_class_data= LambdaClassData()
	};

	var ClassTypePtr class_type_ptr( move(class_type) );
	lambda_classes_table_.insert( key, class_type_ptr );

	with( mut members_lock : class_members.lock_mut() )
	{
		var NamesScope &mut members= members_lock.deref();

		// Create functions set for constructors/destructors/assignment operators. It's needed for later methods generation.
		// TODO - what about user-specified non-public constructors and assignment operators?
		var FunctionsSet functions_set{ .class_= class_type_ptr };
		members.AddName( KeywordToString( Keyword::constructor_ ), functions_set );
		members.AddName( KeywordToString( Keyword::destructor_  ), functions_set );
		members.AddName( OverloadedOperatorToString( OverloadedOperator::Assign ), functions_set );

		// Add special member to names scope to identify it as class names scope
		members.SetClass( class_type_ptr );

		// Allow accessing private members of class for all it's inner namespaces.
		members.AddAccessRightsFor( class_type_ptr, Synt::ClassVisibility::Private );
	}

	with( mangled_name : mangler_.deref().MangleType( class_type_ptr ) )
	{
		with( mut class_lock : class_type_ptr.lock_mut() )
		{
			class_lock.deref().llvm_type= unsafe( LLVMStructCreateNamed( llvm_context_, mangled_name.front() ) );
		}
	}

	// TODO - run preprocessing here.

	auto lambda_this_value_type= ValueType::ReferenceImut; // TODO - allow to change it.

	var ust::string_view8 call_op_name= OverloadedOperatorToString( OverloadedOperator::Call );

	// Set LLVM struct type body.
	with( mut class_lock : class_type_ptr.lock_mut() )
	{
		var ClassType &mut class_type= class_lock.deref();

		var ust::vector</LLVMTypeRef/> mut fields_llvm_types;
		foreach( &field_pair : class_type.fields_order )
		{
			with( &field : field_pair[1].lock_imut().deref() )
			{
				var LLVMTypeRef llvm_type= field.t.GetLLVMType();
				fields_llvm_types.push_back( select( field.is_reference ? unsafe( LLVMPointerType( llvm_type, 0u ) ) : llvm_type ) );
			}
		}
		unsafe( LLVMStructSetBody( class_type.llvm_type, fields_llvm_types.data(), u32( fields_llvm_types.size() ), LLVMBool::False ) );

		class_type.is_complete= true;
	}

	// Try to generate important methods.
	TryGenerateCopyConstructor( class_type_ptr );
	TryGenerateCopyAssignmentOperator( class_type_ptr );
	TryGenerateDestructorPrototype( class_type_ptr );
	TryGenerateDestructor( class_type_ptr );
	// Equality compare operator is not needed for lambdas.

	with( mut class_lock : class_type_ptr.lock_mut() )
	{
		var ClassType &mut class_type= class_lock.deref();

		// Set to class after methods generation.
		class_type.kind= ClassType::Kind::NonPolymorph;

		// Calculate constexpr property.
		class_type.can_be_constexpr= true;
		foreach( &field_pair : class_type.fields_order )
		{
			with( &field : field_pair[1].lock_imut().deref() )
			{
				if( !field.t.CanBeConstexpr() || ( field.is_reference && field.is_mutable ) )
				{
					class_type.can_be_constexpr= false;
					break;
				}
			}
		}
	}

	// Create () operator.
	{
		auto mut function_type= PrepareLambdaCallOperatorType( class_members, function_context, lambda_.function.deref().function_type, class_type_ptr, lambda_this_value_type );
		var FunctionVariable mut function_variable
		{
			.body_syntax_element= lambda_.function,
			.llvm_function( LazyLLVMFunction( mangler_.deref().MangleFunction( class_members.lock_imut().deref(), call_op_name, function_type ) ) ),
			.t= move(function_type),
			.is_this_call= true,
			.constexpr_kind= FunctionVariable::ConstexprKind::ConstexprAuto,
		};

		BuildFuncCode( class_members, function_variable );

		var FunctionsSet mut functions_set;
		functions_set.functions.push_back( move(function_variable) );

		with( mut members_lock : class_members.lock_mut() )
		{
			members_lock.deref().AddName( call_op_name, NamesScopeValue( move(functions_set) ) );
		}
	}

	return class_type_ptr;
}

fn CodeBuilder::PrepareLambdaCallOperatorType(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	Synt::FunctionType& lambda_function_type,
	ClassTypePtr& lambda_class_type,
	ValueType lambda_this_value_type ) : FunctionType
{
	var FunctionType mut res
	{
		.return_type(
			select(
				lambda_function_type.return_type.empty()
					? Type( void_type_ )
					: PrepareType( names_scope, function_context, lambda_function_type.return_type.try_deref() ) ) ),
		.return_value_type= ValueType::Value,
		.is_unsafe= lambda_function_type.is_unsafe,
		.calling_convention= GetLLVMCallingConvention( lambda_function_type.calling_convention, names_scope, lambda_function_type.src_loc ),
	};

	if( lambda_function_type.return_value_reference_modifier == Synt::ReferenceModifier::Reference )
	{
		res.return_value_type= select( lambda_function_type.return_value_mutability_modifier == Synt::MutabilityModifier::Mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut );
	}

	// First param is always "this" of the lambda type.
	debug_assert( !lambda_function_type.params.empty() );
	var FunctionType::Param mut this_param
	{
		.t= lambda_class_type,
		.value_type= lambda_this_value_type,
	};
	res.params.push_back( move(this_param) );

	auto mut params_except_first= lambda_function_type.params.range();
	params_except_first.drop_front();

	foreach( &param : params_except_first )
	{
		if( IsKeyword( param.name ) )
		{
			REPORT_ERROR( UsingKeywordAsName, names_scope, param.src_loc )
		}

		var FunctionType::Param mut out_param
		{
			.t= PrepareType( names_scope, function_context, param.t ),
			.value_type= ValueType::Value,
		};

		if( param.reference_modifier == Synt::ReferenceModifier::Reference )
		{
			out_param.value_type= select( param.mutability_modifier == Synt::MutabilityModifier::Mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut );
		}

		res.params.push_back( move(out_param) );
	}

	return move(res);
}

} // namespace U1
