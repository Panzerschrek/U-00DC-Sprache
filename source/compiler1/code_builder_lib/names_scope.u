import "structs_combined.uh"

namespace U
{

fn NamesScope::constructor(
	ust::string8 mut name,
	ust::shared_ptr_nullable_imut</NamesScope/>& parent )
	(
		name_= move(name),
		parent_(parent)
	)
{
}

fn NamesScope::GetThisScopeValue( this, ust::string8& name ) : ust::optional_ref</ NamesScopeValue, false />'this'
{
	return names_map_.find( name );
}

fn NamesScope::AddName( mut this, ust::string8 mut name, NamesScopeValue mut value ) : ust::optional_ref</ NamesScopeValue, true />'this'
{
	if( !names_map_.find(name).empty() )
	{
		return ust::optional_ref</ NamesScopeValue, true />();
	}

	return ust::optional_ref</ NamesScopeValue, true />( names_map_.insert(move(name), move(value) ) );
}

fn NamesScope::GetParent( this ) : ust::shared_ptr_nullable_imut</NamesScope/>
{
	return parent_.lock();
}

fn NamesScope::SetErrors( mut this, ErrorsContainerPtr errors_container )
{
	errors_container_= errors_container;
}

fn NamesScope::GetErrors( this ) : ErrorsContainerPtr
{
	if( errors_container_.empty() )
	{
		return parent_.lock().lock_imut().get_ref().GetErrors();
	}

	return errors_container_;
}

fn NamesScope::ToString( this ) : ust::string8
{
	// TODO - print full name, like "A::B::C::D</i32/>::E
	return name_;
}

} // namespace U
