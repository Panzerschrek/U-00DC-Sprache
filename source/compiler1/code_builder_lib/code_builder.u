import "/keywords.uh"
import "error_reporting.uh"
import "code_builder.uh"

namespace U1
{

fn CreateMangler(ManglingScheme scheme, LLVMTargetDataRef data_layout) : ust::box</IMangler/>
{
	if( scheme == ManglingScheme::ItaniumABI )
	{
		return CreateManglerItaniumABI();
	}
	if( scheme == ManglingScheme::MSVC )
	{
		return CreateManglerMSVC( LLVMPointerSize( data_layout ) == 4u );
	}
	if( scheme == ManglingScheme::MSVC32 )
	{
		return CreateManglerMSVC(true);
	}
	if( scheme == ManglingScheme::MSVC64 )
	{
		return CreateManglerMSVC(false);
	}

	halt;
}

fn ClearClassInternals( ClassTypePtr& class_type, NamesScopeMutPtr& dummy_class_names_scope )
{
	auto mut lock= class_type.lock_mut();
	auto &mut class_= lock.deref();
	class_.members= dummy_class_names_scope;
	class_.members_initial= dummy_class_names_scope;
	class_.fields_order.clear();
	class_.parents.clear();
	class_.virtual_table.clear();
	class_.typeinfo_src_type_.reset();
}

fn CodeBuilder::constructor(
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	ust::string8 mut target_triple_str,
	CodeBuilderOptions& options )
	(
		llvm_context_(llvm_context),
		data_layout_(data_layout),
		target_triple_str_(move(target_triple_str)),
		create_lifetimes_(options.create_lifetimes),
		generate_lifetime_start_end_debug_calls_(options.generate_lifetime_start_end_debug_calls),
		constexpr_function_evaluator_(data_layout),
		tbaa_metadata_builder_( llvm_context, data_layout, CreateMangler(options.mangling_scheme, data_layout) ),
		generate_tbaa_metadata_( options.generate_tbaa_metadata ),
		global_things_stack_ptr_(GlobalThingsStack()),
		build_debug_info_(options.build_debug_info),
		mangler_(CreateMangler(options.mangling_scheme, data_layout))
	)
{
	unsafe
	{
		fundamental_llvm_types_.i8_  = LLVMInt8TypeInContext  ( llvm_context_ );
		fundamental_llvm_types_.u8_  = LLVMInt8TypeInContext  ( llvm_context_ );
		fundamental_llvm_types_.i16_ = LLVMInt16TypeInContext ( llvm_context_ );
		fundamental_llvm_types_.u16_ = LLVMInt16TypeInContext ( llvm_context_ );
		fundamental_llvm_types_.i32_ = LLVMInt32TypeInContext ( llvm_context_ );
		fundamental_llvm_types_.u32_ = LLVMInt32TypeInContext ( llvm_context_ );
		fundamental_llvm_types_.i64_ = LLVMInt64TypeInContext ( llvm_context_ );
		fundamental_llvm_types_.u64_ = LLVMInt64TypeInContext ( llvm_context_ );
		fundamental_llvm_types_.i128_= LLVMInt128TypeInContext( llvm_context_ );
		fundamental_llvm_types_.u128_= LLVMInt128TypeInContext( llvm_context_ );

		fundamental_llvm_types_.f32_= LLVMFloatTypeInContext( llvm_context_ );
		fundamental_llvm_types_.f64_= LLVMDoubleTypeInContext( llvm_context_ );

		fundamental_llvm_types_.char8_ = LLVMInt8TypeInContext ( llvm_context_ );
		fundamental_llvm_types_.char16_= LLVMInt16TypeInContext( llvm_context_ );
		fundamental_llvm_types_.char32_= LLVMInt32TypeInContext( llvm_context_ );

		fundamental_llvm_types_.byte8_  = LLVMInt8TypeInContext  ( llvm_context_ );
		fundamental_llvm_types_.byte16_ = LLVMInt16TypeInContext ( llvm_context_ );
		fundamental_llvm_types_.byte32_ = LLVMInt32TypeInContext ( llvm_context_ );
		fundamental_llvm_types_.byte64_ = LLVMInt64TypeInContext ( llvm_context_ );
		fundamental_llvm_types_.byte128_= LLVMInt128TypeInContext( llvm_context_ );

		fundamental_llvm_types_.invalid_type_= LLVMInt8TypeInContext( llvm_context_ );
		fundamental_llvm_types_.void_for_ret_= LLVMVoidTypeInContext( llvm_context_ );
		fundamental_llvm_types_.bool_= LLVMInt1TypeInContext( llvm_context_ );

		fundamental_llvm_types_.void_= LLVMStructCreateNamed( llvm_context_, "__U_void\0"[0] );
		LLVMStructSetBody( fundamental_llvm_types_.void_, ust::nullptr</LLVMTypeRef/>(), 0u, LLVMBool::False );

		fundamental_llvm_types_.int_ptr= LLVMIntPtrTypeInContext( llvm_context_, data_layout_ );
	}

	invalid_type_= FundamentalType( U_FundamentalType::InvalidType, fundamental_llvm_types_.invalid_type_ );
	void_type_= FundamentalType( U_FundamentalType::void_, fundamental_llvm_types_.void_ );
	bool_type_= FundamentalType( U_FundamentalType::bool_, fundamental_llvm_types_.bool_ );

	size_type_= select(
		unsafe( LLVMGetIntTypeWidth( fundamental_llvm_types_.int_ptr ) ) == 32u
		? FundamentalType( U_FundamentalType::u32_, fundamental_llvm_types_.u32_ )
		: FundamentalType( U_FundamentalType::u64_, fundamental_llvm_types_.u64_ ) );

	virtual_function_pointer_type_= unsafe(LLVMPointerType( LLVMFunctionType( fundamental_llvm_types_.void_for_ret_, ust::nullptr</LLVMTypeRef/>(), 0u, LLVMBool::True ), 0u ));

	unsafe
	{
		polymorph_type_id_table_element_type_= LLVMStructCreateNamed( llvm_context_, "__U_polymorph_type_id_table_element\0"[0] );
		var [ LLVMTypeRef, 2 ] mut elements
		[
			fundamental_llvm_types_.int_ptr,
			LLVMPointerType( polymorph_type_id_table_element_type_, 0u ),
		];
		LLVMStructSetBody( polymorph_type_id_table_element_type_, $<(elements[0]), 2u, LLVMBool::False );
	}
}

fn CodeBuilder::BuildProgram( mut this, SourceGraph& source_graph ) : BuildResult
{
	unsafe // Create module.
	{
		var ust::string8 mut module_name= source_graph.nodes.front().file_path_normalized;
		module_name += "\0";
		module_ = LLVMModuleCreateWithNameInContext( module_name.front(), llvm_context_ );
		LLVMSetModuleDataLayout( module_, data_layout_ );
		LLVMSetTarget( module_, target_triple_str_.front() );
	}

	unsafe // Prepare dummy function.
	{
		auto global_function_llvm_type= LLVMFunctionType( fundamental_llvm_types_.void_for_ret_, ust::nullptr</LLVMTypeRef/>(), 0u, LLVMBool::False );
		global_llvm_function_= LLVMAddFunction( module_, g_null_string, global_function_llvm_type );
	}

	unsafe // Prepare halt function.
	{
		auto halt_function_llvm_type= LLVMFunctionType( fundamental_llvm_types_.void_for_ret_, ust::nullptr</LLVMTypeRef/>(), 0u, LLVMBool::False );
		halt_function_= LLVMAddFunction( module_, "__U_halt\0"[0], halt_function_llvm_type );
	}
	AddFunctionAttribute( halt_function_, LLVMAttributeFunctionIndex, "noreturn" );
	AddFunctionAttribute( halt_function_, LLVMAttributeFunctionIndex, "nounwind" );

	if( create_lifetimes_ )
	{
		auto& lifetime_start_name= "llvm.lifetime.start";
		auto& lifetime_end_name= "llvm.lifetime.end";
		unsafe
		{
			var u32 lifetime_start_id = LLVMLookupIntrinsicID( $<(cast_mut(lifetime_start_name)[0]), typeinfo</typeof(lifetime_start_name)/>.element_count );
			var u32 lifetime_end_id = LLVMLookupIntrinsicID( $<(cast_mut(lifetime_end_name)[0]), typeinfo</typeof(lifetime_end_name)/>.element_count );

			lifetime_function_arg_type_= LLVMPointerType( fundamental_llvm_types_.u8_, 0u );
			lifetime_start_intrinsic_= LLVMGetIntrinsicDeclaration( module_, lifetime_start_id, $<(lifetime_function_arg_type_), 1s );
			lifetime_end_intrinsic_= LLVMGetIntrinsicDeclaration( module_, lifetime_end_id, $<(lifetime_function_arg_type_), 1s );
		}
	}
	if( create_lifetimes_ && generate_lifetime_start_end_debug_calls_ )
	{
		unsafe
		{
			var LLVMTypeRef mut arg_type= LLVMPointerType( fundamental_llvm_types_.u8_, 0u );
			var LLVMTypeRef ret_type= fundamental_llvm_types_.void_for_ret_;
			var LLVMTypeRef function_type= LLVMFunctionType( ret_type, $<(arg_type), 1u, LLVMBool::False );

			lifetime_start_debug_func_= LLVMAddFunction( module_, "__U_debug_lifetime_start\0"[0], function_type );
			lifetime_end_debug_func_= LLVMAddFunction( module_, "__U_debug_lifetime_end\0"[0], function_type );
		}
	}

	debug_info_builder_.reset(
		DebugInfoBuilder(
			llvm_context_,
			data_layout_,
			source_graph,
			module_,
			build_debug_info_ ) );

	root_errors_container_= ErrorsContainerPtr( ErrorsContainer() );

	source_graph_nodes_build_results_.resize( source_graph.nodes.size() );
	BuildSourceGraphNode( source_graph, 0s );

	// Perform post-checks for non_sync tags.
	// Do this at the end to avoid dependency loops.
	{
		auto class_table= class_table_;
		foreach( &class_type : class_table )
		{
			CheckClassNonSyncTagExpression( class_type );
			CheckClassNonSyncTagInheritance( class_type );
		}
	}

	// Finalize "defererenceable" attributes.
	// Do this at end because we needs complete types for params/return values even for only prototypes.
	SetupDereferenceableFunctionParamsAndRetAttributes_r( cast_imut(source_graph_nodes_build_results_).front().names_scope.try_lock_imut().deref() );
	foreach( &name_value_pair : cast_imut(generated_template_things_) )
	{
		SetupDereferenceableFunctionParamsAndRetAttributes_r( name_value_pair.value().lock_imut().deref() );
	}

	// Finalize incomplete typeinfo.
	foreach( &entry : typeinfo_cache_ )
	{
		with( &v : entry.value().lock_imut().deref() )
		{
			auto llvm_type= v.t.GetLLVMType();
			unsafe
			{
				if( LLVMIsOpaqueStruct( llvm_type ) == LLVMBool::True )
				{
					LLVMStructSetBody( llvm_type, ust::nullptr</LLVMTypeRef/>(), 0u, LLVMBool::False );

					auto initializer= LLVMConstNamedStruct( llvm_type, ust::nullptr</LLVMValueRef/>(), 0u );
					LLVMSetInitializer( v.llvm_value, initializer );
				}
			}
		}
	}

	unsafe( LLVMDeleteFunction( global_llvm_function_ ) );
	global_llvm_function_= LLVMValueRef::Null;

	{ // Clear classes internals to break strong shared pointers loop and avoid memory leaks.
		var NamesScopeMutPtr dummy_class_names_scope( NamesScope( "", ust::shared_ptr_nullable_imut</NamesScope/>() ) );
		foreach( & class_type : class_table_ )
		{
			ClearClassInternals( class_type, dummy_class_names_scope );
		}

		foreach( & class_type_ptr : typeinfo_class_table_ )
		{
			ClearClassInternals( class_type_ptr, dummy_class_names_scope );
		}
	}

	source_graph_nodes_build_results_.clear();
	generated_template_things_.clear();
	generated_template_things_sequence_.clear();
	typeinfo_cache_.clear();
	non_sync_expression_stack_.clear();

	// Reset debug info builder in order to finalize debug info.
	debug_info_builder_.reset();

	var BuildResult mut res
	{
		.llvm_module= module_,
		.errors= root_errors_container_.try_lock_imut().deref(),
	 };

	NormalizeErrors( res.errors, source_graph.macro_expansion_contexts.lock_imut().deref() );

	root_errors_container_= ErrorsContainerPtr();

	return move(res);
}

fn CodeBuilder::BuildSourceGraphNode( mut this, SourceGraph& source_graph, size_type node_index )
{
	var NamesScopeMutPtr mut global_names_scope( NamesScope( "", ust::shared_ptr_nullable_imut</NamesScope/>() ) );

	{
		auto mut l= global_names_scope.lock_mut();
		auto &mut n= l.deref();

		n.SetErrors( root_errors_container_ );
		FillGlobalNamesScope( n );
	}

	var SourceGraph::Node& source_graph_node= source_graph.nodes[node_index];

	// Build dependent nodes.
	foreach( child_node_index : source_graph_node.children )
	{
		if( source_graph_nodes_build_results_[child_node_index].names_scope.empty() )
		{
			BuildSourceGraphNode( source_graph, child_node_index );
		}
	}

	// Merge namespaces.
	foreach( child_node_index : source_graph_node.children )
	{
		var SourceGraphNodeBuildResult& child_node_build_result= source_graph_nodes_build_results_[child_node_index];
		NamesScopeMerge(
			global_names_scope,
			child_node_build_result.names_scope.try_to_non_nullable().lock_imut().deref(),
			child_node_build_result.classes_members_namespaces_table );
	}

	auto& program_elements= source_graph_node.synt_result.program_elements;
	NamesScopeFill( global_names_scope, program_elements );
	NamesScopeFillOutOfLineElements( global_names_scope, program_elements );
	NamesScopeBuild( global_names_scope );

	// Finalize building template things.
	// Each new template thing added into this vector, so, by iterating through we will build all template things.
	// It's important to use an index instead of iterators during iteration because this vector may be chaged in process.
	for( auto mut i= 0s; i < generated_template_things_sequence_.size(); ++i )
	{
		auto names_scope= cast_imut(generated_template_things_).find(cast_imut(generated_template_things_sequence_)[i]).try_deref();
		NamesScopeBuild( names_scope );
	}
	generated_template_things_sequence_.clear();

	var SourceGraphNodeBuildResult mut out_node_build_result{ .names_scope= move(global_names_scope) };

	// Fill result classes members namespaces table.
	foreach( &class_type : class_table_ )
	{
		out_node_build_result.classes_members_namespaces_table.insert( class_type, class_type.lock_imut().deref().members );
	}

	source_graph_nodes_build_results_[node_index] = move(out_node_build_result);
}

fn CodeBuilder::NamesScopeValueToValue( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeValue& names_scope_value, SrcLoc& src_loc ) : Value
{
	auto t= names_scope_value.Get</Type/>();
	if( !t.empty() )
	{
		return t.try_lock_imut().deref();
	}

	auto f_ptr= names_scope_value.Get</NamesScopeFunctionsSet/>();
	if( !f_ptr.empty() )
	{
		// In case of access to functions set using function name, build only prototype, not full body.
		BuildFunctionsSet( names_scope, f_ptr.try_to_non_nullable(), false );

		// Append "this" to functions set of this class.
		auto class_type= names_scope.lock_imut().deref().GetClass();
		if( !class_type.empty() && !function_context.this_.empty() )
		{
			auto this_non_null= function_context.this_.try_to_non_nullable();
			with( &this_ : this_non_null.lock_imut().deref() )
			{
				if( class_type.try_to_non_nullable() == this_.t && !function_context.whole_this_is_unavailable )
				{
					var ThisMethodsSet mut this_methods_set
					{
						.this_= this_non_null,
						.functions_set= f_ptr.try_lock_imut().deref().functions_set,
					};
					return move(this_methods_set);
				}
			}
		}

		return f_ptr.try_lock_imut().deref().functions_set;
	}

	auto var_ptr= names_scope_value.Get</Variable/>();
	if( !var_ptr.empty() )
	{
		auto mut var_ptr_non_null= var_ptr.try_to_non_nullable();
		if( function_context.references_graph.NodeIsMoved( var_ptr_non_null ) )
		{
			REPORT_ERROR( AccessingMovedVariable, names_scope, src_loc, var_ptr_non_null.lock_imut().deref().name )
		}

		return move(var_ptr_non_null);
	}

	auto class_field_ptr= names_scope_value.Get</ClassField/>();
	if( !class_field_ptr.empty() )
	{
		auto field_lock= class_field_ptr.try_lock_imut();
		auto& field= field_lock.deref();
		auto& field_name= field.syntax_element.deref().name;

		if( field.index == ~0u ){ return ErrorValue(); } // May be in case of error

		if( function_context.this_.empty() )
		{
			REPORT_ERROR( ClassFieldAccessInStaticMethod, names_scope, src_loc, field_name )
			return ErrorValue();
		}

		var VariablePtr this_ptr= function_context.this_.try_to_non_nullable();
		auto this_lock= this_ptr.lock_imut();
		var Variable& this_= this_lock.deref();

		auto mut this_value_corrected= this_.llvm_value;

		var ClassTypePtr this_class= this_.t.GetClassType().try_deref();
		auto field_source_class= field.source_class;
		var ust::shared_ptr_nullable_mut</ClassType/> mut current_class= this_class;
		while( !current_class.empty() && current_class != field_source_class )
		{
			auto base_class= current_class.try_lock_imut().deref().base_class;
			if( base_class.empty() )
			{
				current_class= ust::shared_ptr_nullable_mut</ClassType/>();
				break;
			}
			this_value_corrected= CreateBaseClassFieldGEP( function_context, current_class.try_to_non_nullable(), this_value_corrected );
			current_class= base_class;
		}

		if( current_class.empty() )
		{
			REPORT_ERROR( AccessOfNonThisClassField, names_scope, src_loc, field_name )
			return ErrorValue();
		}

		if( function_context.whole_this_is_unavailable )
		{
			if( function_context.uninitialized_this_fields.exists( field_name ) ||
				( field_source_class != this_class && function_context.uninitialized_this_fields.exists( KeywordToString( Keyword::base_ ) ) ) )
			{
				REPORT_ERROR( FieldIsNotInitializedYet, names_scope, src_loc, field_name )
			}
		}

		auto op_name_nt= "." + field_name + "\0";
		if( field.is_reference )
		{
			var Variable mut result
			{
				.t= field.t,
				.location= Variable::Location::Pointer,
				.value_type= select( field.is_mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut ),
			};

			auto ptr_value= CreateClassFieldGEP( function_context, this_class, this_value_corrected, field );
			result.llvm_value= CreateTypedReferenceLoad( function_context, field.t, ptr_value );
			MarkLoadInstructionWithNonNullMetadata( result.llvm_value );

			var VariablePtr mut result_ptr( move(result) );
			function_context.references_graph.AddNode( result_ptr );

			auto inner_nodes= function_context.references_graph.GetAccessibleVariableNodesInnerReferences( this_ptr );
			foreach( &inner_node : inner_nodes )
			{
				if( !function_context.references_graph.TryAddLink( inner_node, result_ptr ) )
				{
					REPORT_ERROR( ReferenceProtectionError, names_scope, src_loc, inner_node.lock_imut().deref().name )
				}
			}

			// Register variable for references checking.
			RegisterTemporaryVariable( function_context, result_ptr );
			return move(result_ptr);
		}
		else
		{
			var Variable mut result
			{
				.t= field.t,
				.location= Variable::Location::Pointer,
				.value_type= this_.value_type,
				.llvm_value= CreateClassFieldGEP( function_context, field_source_class, this_value_corrected, field ),
			};

			if( !field.is_mutable )
			{
				result.value_type= ValueType::ReferenceImut;
			}

			return VariablePtr( move(result) );
		}
	}

	auto class_type_ptr= names_scope_value.Get</ClassType/>();
	if( !class_type_ptr.empty() )
	{
		return Type( class_type_ptr.try_to_non_nullable() );
	}

	auto enum_type_ptr= names_scope_value.Get</Enum/>();
	if( !enum_type_ptr.empty() )
	{
		auto ptr_non_null= enum_type_ptr.try_to_non_nullable();
		BuildEnum( names_scope, ptr_non_null );
		return Type( ptr_non_null );
	}

	auto type_alias_ptr= names_scope_value.Get</TypeAlias/>();
	if( !type_alias_ptr.empty() )
	{
		BuildTypeAlias( names_scope, type_alias_ptr.try_to_non_nullable() );

		if_var( &t : type_alias_ptr.try_lock_imut().deref().t )
		{
			return t;
		}
	}

	auto global_variable_ptr= names_scope_value.Get</GlobalVariable/>();
	if( !global_variable_ptr.empty() )
	{
		BuildGlobalVariable( names_scope, global_variable_ptr.try_to_non_nullable() );

		auto v_ptr= global_variable_ptr.try_lock_imut().deref().variable;
		if( !v_ptr.empty() )
		{
			auto mut v_ptr_non_null= v_ptr.try_to_non_nullable();
			if( v_ptr_non_null.lock_imut().deref().value_type == ValueType::ReferenceMut && !function_context.is_in_unsafe_block )
			{
				REPORT_ERROR( GlobalMutableVariableAccessOutsideUnsafeBlock, names_scope, src_loc )
			}

			return move(v_ptr_non_null);
		}
	}

	auto global_auto_variable_ptr= names_scope_value.Get</GlobalAutoVariable/>();
	if( !global_auto_variable_ptr.empty() )
	{
		BuildGlobalAutoVariable( names_scope, global_auto_variable_ptr.try_to_non_nullable() );

		auto v_ptr= global_auto_variable_ptr.try_lock_imut().deref().variable;
		if( !v_ptr.empty() )
		{
			auto mut v_ptr_non_null= v_ptr.try_to_non_nullable();
			if( v_ptr_non_null.lock_imut().deref().value_type == ValueType::ReferenceMut && !function_context.is_in_unsafe_block )
			{
				REPORT_ERROR( GlobalMutableVariableAccessOutsideUnsafeBlock, names_scope, src_loc )
			}

			return move(v_ptr_non_null);
		}
	}

	auto template_arg_ptr= names_scope_value.Get</TemplateArg/>();
	if( !template_arg_ptr.empty() )
	{
		auto template_arg_lock= template_arg_ptr.try_lock_imut();
		auto& template_arg= template_arg_lock.deref();
		if_var( &t : template_arg.something.get</Type/>() )
		{
			return t;
		}
		if_var( &v_ptr : template_arg.something.get</VariablePtr/>() )
		{
			return v_ptr;
		}
		REPORT_ERROR( TemplateArgumentIsNotDeducedYet, names_scope, SrcLoc(), ust::string8("TODO - name" ) )
	}

	auto type_templates_set_ptr= names_scope_value.Get</TypeTemplatesSet/>();
	if( !type_templates_set_ptr.empty() )
	{
		return ust::shared_ptr_imut</TypeTemplatesSet/>( type_templates_set_ptr.try_to_non_nullable() );
	}

	return ErrorValue();
}

fn CodeBuilder::ResolveValue( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::ComplexName& complex_name ) : Value
{
	return ResolveValue( names_scope, function_context, complex_name, false );
}

fn CodeBuilder::ResolveValue(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	Synt::ComplexName& complex_name,
	bool skip_last_template_args ) : Value
{
	var NamesScopePtr mut current_scope(names_scope);

	var ust::optional</NamesScopeValue/> mut start_value;
	if( !complex_name.start.get</Synt::EmptyVariant/>().empty() ) // ::
	{
		while( true )
		{
			auto parent= current_scope.lock_imut().deref().GetParent();
			if( parent.empty() )
			{
				break;
			}
			current_scope= parent.try_to_non_nullable();
		}

		if_var( mut names_scope_value : current_scope.lock_imut().deref().GetThisScopeValue( complex_name.tail.front().get</ust::string8/>().try_deref() ) )
		{
			start_value= move(names_scope_value);
		}
	}
	else if( !complex_name.start.get</Synt::Typeof/>().empty() )
	{
		var VariablesFrameHolder temp_variables_frame_hodler(function_context);
		auto& mut function_context= temp_variables_frame_hodler.GetFunctionContext();

		var bool prev_is_functionless_context= function_context.is_functionless_context;
		function_context.is_functionless_context= true;

		auto state= SaveFunctionContextState( function_context );
		var Type mut t= BuildExpressionCodeEnsureVariable( names_scope, function_context, complex_name.start.get</Synt::Typeof/>().try_deref().expr.deref() ).lock_imut().deref().t;
		RestoreFunctionContextState( function_context, state );

		function_context.is_functionless_context= prev_is_functionless_context;

		start_value= NamesScopeValue( move(t) );
	}
	else
	{
		var ust::string8& start_name= complex_name.start.get</ust::string8/>().try_deref();
		while( true )
		{
			auto class_= current_scope.lock_imut().deref().GetClass();
			if( !class_.empty() )
			{
				auto class_non_null= class_.try_to_non_nullable();
				if_var( &class_value : ResolveClassValue( class_non_null, start_name ) )
				{
					start_value= class_value[0];
					current_scope= class_value[2];

					if( u32( names_scope.lock_imut().deref().GetAccessFor( class_non_null ) ) < u32( class_value[1] ) )
					{
						REPORT_ERROR( AccessingNonpublicClassMember, names_scope, complex_name.src_loc, start_name, Type(class_non_null).ToString() )
					}
					break;
				}
			}
			else
			{
				if_var( mut names_scope_value : current_scope.lock_imut().deref().GetThisScopeValue( start_name ) )
				{
					start_value= move(names_scope_value);
					break;
				}
			}
			auto next_scope= current_scope.lock_imut().deref().GetParent();
			if( next_scope.empty() )
			{
				break;
			}
			current_scope= next_scope.try_to_non_nullable();
		}

		if( start_name == KeywordToString( Keyword::constructor_ ) ||
			start_name == KeywordToString( Keyword::destructor_ ) )
		{
			if( !function_context.is_in_unsafe_block )
			{
				REPORT_ERROR( ExplicitAccessToThisMethodIsUnsafe, names_scope, complex_name.src_loc, start_name )
			}
		}
	}

	if( start_value.empty() )
	{
		REPORT_ERROR( NameNotFound, names_scope, complex_name.src_loc, complex_name )
		return ErrorValue();
	}

	var NamesScopeValue mut current_value= start_value.try_take();

	for( auto mut i= select( complex_name.start.get</Synt::EmptyVariant/>().empty() ? 0s : 1s ); i < complex_name.tail.size(); ++i )
	{
		auto& name_component= complex_name.tail[i];
		if_var( &name_component_name : name_component.get</ ust::string8 />() )
		{
			var ust::shared_ptr_nullable_imut</NamesScope/> mut namespace_= current_value.Get</NamesScope/>();
			auto mut class_= current_value.Get</ClassType/>();
			auto mut enum_= current_value.Get</Enum/>();
			auto type_templates_set= current_value.Get</TypeTemplatesSet/>();
			auto t= current_value.Get</Type/>();
			auto type_alias= current_value.Get</TypeAlias/>();
			auto template_arg= current_value.Get</TemplateArg/>();

			if( !t.empty() )
			{
				auto lock= t.try_lock_imut();
				if_var( &class_type : lock.deref().GetClassType() )
				{
					class_= class_type;
				}
				if_var( &enum_type : lock.deref().GetEnumType() )
				{
					enum_= enum_type;
				}
			}
			if( !type_alias.empty() )
			{
				BuildTypeAlias( current_scope, type_alias.try_to_non_nullable() );

				if_var( &t : type_alias.try_lock_imut().deref().t )
				{
					if_var( &class_type : t.GetClassType() )
					{
						class_= class_type;
					}
					if_var( &enum_type : t.GetEnumType() )
					{
						enum_= enum_type;
					}
				}
			}
			if( !template_arg.empty() )
			{
				if_var( &t : template_arg.try_lock_imut().deref().something.get</Type/>() )
				{
					if_var( &class_type : t.GetClassType() )
					{
						class_= class_type;
					}
					if_var( &enum_type : t.GetEnumType() )
					{
						enum_= enum_type;
					}
				}
			}

			if( !class_.empty() )
			{
				auto class_non_null= class_.try_to_non_nullable();
				auto class_value_opt= ResolveClassValue( class_non_null, name_component_name );

				if( !class_value_opt.empty() )
				{
					auto& class_value= class_value_opt.try_deref();
					current_value= class_value[0];
					current_scope= class_value[2];

					if( u32( names_scope.lock_imut().deref().GetAccessFor( class_non_null ) ) < u32( class_value[1] ) )
					{
						REPORT_ERROR( AccessingNonpublicClassMember, names_scope, complex_name.src_loc, name_component_name, Type(class_non_null).ToString() )
					}
				}
				else
				{
					REPORT_ERROR( NameNotFound, names_scope, complex_name.src_loc, name_component_name )
					return ErrorValue();
				}
			}
			else if( !namespace_.empty() )
			{
				auto namespace_lock= namespace_.try_lock_imut();
				auto new_value= namespace_lock.deref().GetThisScopeValue( name_component_name );
				if( new_value.empty() )
				{
					REPORT_ERROR( NameNotFound, names_scope, complex_name.src_loc, name_component_name )
					return ErrorValue();
				}

				current_value= new_value.try_deref();
				current_scope= namespace_.try_to_non_nullable();
			}
			else if( !enum_.empty() )
			{
				auto enum_non_null= enum_.try_to_non_nullable();
				BuildEnum( current_scope, enum_non_null );

				auto lock= enum_.try_lock_imut();

				auto element= lock.deref().elements.find( name_component_name );
				if( element.empty() )
				{
					REPORT_ERROR( NameNotFound, names_scope, complex_name.src_loc, name_component_name )
					return ErrorValue();
				}

				var Variable mut v
				{
					.t= enum_non_null,
					.value_type= ValueType::ReferenceImut,
					.location= Variable::Location::Pointer,
					.llvm_value= element.try_deref().llvm_value,
					.constexpr_value= element.try_deref().constexpr_value,
				};

				current_value= move(v);
			}
			else if( !type_templates_set.empty() )
			{
				REPORT_ERROR( TemplateInstantiationRequired, names_scope, complex_name.src_loc, name_component_name )
				return ErrorValue();
			}
			else
			{
				REPORT_ERROR( NameNotFound, names_scope, complex_name.src_loc, name_component_name ) // TODO -print more relevant error
				return ErrorValue();
			}

			if( name_component_name == KeywordToString( Keyword::constructor_ ) ||
				name_component_name == KeywordToString( Keyword::destructor_ ) )
			{
				if( !function_context.is_in_unsafe_block )
				{
					REPORT_ERROR( ExplicitAccessToThisMethodIsUnsafe, names_scope, complex_name.src_loc, name_component_name )
				}
			}
		}
		if_var( &template_args : name_component.get</ ust::box</Synt::TemplateArgs/> />() )
		{
			auto type_templates_set= current_value.Get</TypeTemplatesSet/>();
			auto functions_set= current_value.Get</NamesScopeFunctionsSet/>();
			if( !type_templates_set.empty() )
			{
				BuiltTypeTemplatesSet( current_scope, type_templates_set.try_to_non_nullable() );

				if( skip_last_template_args && i + 1s == complex_name.tail.size()  )
				{
					break;
				}

				auto generated_type= GenTemplateType(
					names_scope,
					function_context,
					type_templates_set.try_to_non_nullable(),
					template_args.deref(),
					complex_name.src_loc );

				if( generated_type.empty() )
				{
					return ErrorValue();
				}
				current_value= generated_type.try_deref();
				if_var( generated_class : generated_type.try_deref().GetClassType() )
				{
					current_value= NamesScopeValue( generated_class );
					current_scope= generated_class.lock_imut().deref().members;
				}
			}
			else if( !functions_set.empty() )
			{
				BuildFunctionsSet( current_scope, functions_set.try_to_non_nullable(), false );
				auto lock= functions_set.try_lock_imut();
				auto& f= lock.deref();

				if( f.functions_set.function_templates.empty() )
				{
					REPORT_ERROR( ValueIsNotTemplate, names_scope, complex_name.src_loc )
					return ErrorValue();
				}

				auto mut parametrization_result=
					ParametrizeTemplateFunctions(
						names_scope,
						function_context,
						f.functions_set,
						template_args.deref(),
						complex_name.src_loc );

				if( parametrization_result.empty() )
				{
					return ErrorValue();
				}
				current_value= parametrization_result.try_take();
			}
			else
			{
				REPORT_ERROR( ValueIsNotTemplate, names_scope, complex_name.src_loc )
				return ErrorValue();
			}
		}
	}

	{
		auto template_arg_ptr= current_value.Get</TemplateArg/>();
		if( !template_arg_ptr.empty() )
		{
			auto template_arg_lock= template_arg_ptr.try_lock_imut();
			auto& template_arg= template_arg_lock.deref();
			if( !template_arg.something.get</TemplateArg::NotKnownYet/>().empty() )
			{
				REPORT_ERROR( TemplateArgumentIsNotDeducedYet, names_scope, complex_name.src_loc, complex_name )
				return ErrorValue();
			}
		}
	}

	return NamesScopeValueToValue( current_scope, function_context, current_value, complex_name.src_loc );
}

fn CodeBuilder::ResolveClassValue(
	mut this,
	ClassTypePtr& class_type,
	ust::string8& name ) : ust::optional</ tup[ NamesScopeValue, Synt::ClassVisibility, NamesScopePtr ] />
{
	return ResolveClassValueImpl( class_type, name, false );
}

fn CodeBuilder::ResolveClassValueImpl(
	mut this,
	ClassTypePtr& class_type,
	ust::string8& name, bool recursive_call ) : ust::optional</ tup[ NamesScopeValue, Synt::ClassVisibility, NamesScopePtr ] />
{
	var bool is_special_method=
		name == KeywordToString( Keyword::constructor_ ) ||
		name == KeywordToString( Keyword::destructor_ ) ||
		name == OverloadedOperatorToString( OverloadedOperator::Assign ) ||
		name == OverloadedOperatorToString( OverloadedOperator::CompareEqual ) ||
		name == OverloadedOperatorToString( OverloadedOperator::CompareOrder );

	if( is_special_method )
	{
		// Special methods may be generated during class build. So, require complete type to access these methods.
		EnsureTypeComplete( class_type );
	}

	var NamesScopePtr class_members= class_type.lock_imut().deref().members;

	var ust::optional</ NamesScopeValue /> mut value_opt;
	if_var( &this_class_value : class_members.lock_imut().deref().GetThisScopeValue( name ) )
	{
		value_opt= this_class_value;
	}

	if_var( &value : value_opt )
	{
		auto visibility= class_type.lock_imut().deref().GetMemberVisibility( name );

		if( !value.Get</NamesScopeFunctionsSet/>().empty() ||
			!value.Get</TypeTemplatesSet/>().empty() )
		{
			if( !class_type.lock_imut().deref().is_complete )
			{
				PrepareClassParentsList( class_type );
				if( !class_type.lock_imut().deref().parents.empty() )
				{
					// Request class build in order to merge functions from parent classes into this functions set.
					EnsureTypeComplete( class_type );
				}
			}
		}
		else if( !value.Get</ClassField/>().empty() )
		{
			// We can't just return class field value if class is incomplete. So, request class build to fill class field properly.
			EnsureTypeComplete( class_type );
		}

		return ust::make_tuple( value, visibility, class_members );
	}

	var ust::optional</ tup[ NamesScopeValue, Synt::ClassVisibility, NamesScopePtr ] /> mut parent_class_value;
	if( is_special_method )
	{
		return parent_class_value; 	// Do not try to fetch special methods from parents.
	}

	// Value not found in this class. Try to fetch value from parents.
	PrepareClassParentsList( class_type );

	auto parents= class_type.lock_imut().deref().parents; // Take copy to avoid holding lock during deep calls.
	var bool mut has_mergable_thing= false;
	foreach( &parent : parents )
	{
		if_var( &current_parent_class_value : ResolveClassValue( parent.class_, name ) )
		{
			if( current_parent_class_value[1] != Synt::ClassVisibility::Private )
			{
				var bool current_thing_is_mergable=
					!current_parent_class_value[0].Get</NamesScopeFunctionsSet/>().empty() ||
					!current_parent_class_value[0].Get</TypeTemplatesSet/>().empty();

				if( current_thing_is_mergable && has_mergable_thing && !class_type.lock_imut().deref().is_complete && !recursive_call )
				{
					// If we found more than one functions sets or template sets - trigger class build and perform resolve again.
					// Mergable things will be merged during class build and added into class namespace.
					EnsureTypeComplete( class_type );
					return ResolveClassValueImpl( class_type, name, true );
				}

				parent_class_value= current_parent_class_value;
				has_mergable_thing|= current_thing_is_mergable;
			}
		}
	}

	return parent_class_value;
}

fn CodeBuilder::FillGlobalNamesScope( this, NamesScope &mut names_scope )
{
	var [ tup[ Keyword, U_FundamentalType ], 22 ] constexpr types_table
	[
		[ Keyword::void_, U_FundamentalType::void_ ],
		[ Keyword::bool_, U_FundamentalType::bool_ ],
		[ Keyword::i8_  , U_FundamentalType::i8_   ],
		[ Keyword::u8_  , U_FundamentalType::u8_   ],
		[ Keyword::i16_ , U_FundamentalType::i16_  ],
		[ Keyword::u16_ , U_FundamentalType::u16_  ],
		[ Keyword::i32_ , U_FundamentalType::i32_  ],
		[ Keyword::u32_ , U_FundamentalType::u32_  ],
		[ Keyword::i64_ , U_FundamentalType::i64_  ],
		[ Keyword::u64_ , U_FundamentalType::u64_  ],
		[ Keyword::i128_, U_FundamentalType::i128_ ],
		[ Keyword::u128_, U_FundamentalType::u128_ ],
		[ Keyword::f32_ , U_FundamentalType::f32_  ],
		[ Keyword::f64_ , U_FundamentalType::f64_  ],
		[ Keyword::char8_ , U_FundamentalType::char8_  ],
		[ Keyword::char16_, U_FundamentalType::char16_ ],
		[ Keyword::char32_, U_FundamentalType::char32_ ],
		[ Keyword::byte8_  , U_FundamentalType::byte8_   ],
		[ Keyword::byte16_ , U_FundamentalType::byte16_  ],
		[ Keyword::byte32_ , U_FundamentalType::byte32_  ],
		[ Keyword::byte64_ , U_FundamentalType::byte64_  ],
		[ Keyword::byte128_, U_FundamentalType::byte128_ ],
	];

	foreach( &el : types_table )
	{
		names_scope.AddName( KeywordToString( el[0] ), Type( FundamentalType( el[1], GetFundamentalLLVMType(el[1]) ) ) );
	}

	names_scope.AddName( KeywordToString(Keyword::size_type_), size_type_ );
}

fn CodeBuilder::PrepareFunction(
	mut this,
	ust::shared_ptr_final</Synt::Function/>& function_declaration_ptr,
	NamesScopePtr& names_scope_ptr,
	ust::shared_ptr_nullable_mut</ClassType/>& class_type,
	FunctionsSet &mut functions_set,
	bool is_out_of_line_function ) : bool
{
	auto& function_declaration= function_declaration_ptr.deref();
	auto& func_name= function_declaration.name.back();

	if( !function_declaration.constructor_initializer_list.empty() && func_name != KeywordToString( Keyword::constructor_ ) )
	{
		REPORT_ERROR( InitializationListInNonconstructor, names_scope_ptr, function_declaration.constructor_initializer_list.try_deref().src_loc )
	}

	// TODO - maybe clear global constext after it's usage?
	auto mut global_function_context= CreateGlobalFunctionContext();

	// enable_if
	if_var( &expr : function_declaration.condition )
	{
		var Variable condition_variable= BuildExpressionCodeEnsureVariable( names_scope_ptr, global_function_context, expr ).lock_imut().deref();
		if( condition_variable.t == bool_type_ )
		{
			if( condition_variable.constexpr_value != LLVMValueRef::Null )
			{
				if( unsafe( LLVMConstIntGetZExtValue( condition_variable.constexpr_value ) ) == 0u64 ) { return true; /* Function disabled */ }
			}
			else
			{
				REPORT_ERROR( ExpectedConstantExpression, names_scope_ptr, Synt::GetSrcLoc( expr ) )
			}
		}
		else
		{
			REPORT_ERROR( TypesMismatch, names_scope_ptr, Synt::GetSrcLoc( expr ), bool_type_, condition_variable.t )
		}
	}

	var FunctionVariable mut function_variable
	{
		.t= PrepareFunctionType( names_scope_ptr, global_function_context, function_declaration.function_type, class_type )
	};
	if( function_declaration.block.empty() )
	{
		function_variable.prototype_syntax_element= function_declaration_ptr;
	}
	else
	{
		function_variable.body_syntax_element= function_declaration_ptr;
	}

	function_variable.is_this_call=
		!function_declaration.function_type.params.empty() &&
		function_declaration.function_type.params.front().name == KeywordToString( Keyword::this_ );

	auto is_constructor= func_name == KeywordToString( Keyword::constructor_ );
	auto is_destructor = func_name == KeywordToString( Keyword::destructor_  );

	function_variable.is_constructor= is_constructor;
	{
		auto& function_type= function_variable.t;
		if( ( is_constructor || is_destructor ) &&
			!(function_type.return_type == void_type_ && function_type.return_value_type == ValueType::Value ) )
		{
			REPORT_ERROR( ConstructorAndDestructorMustReturnVoid, names_scope_ptr, function_declaration.src_loc )
		}
		if( is_destructor && function_type.params.size() > 1s )
		{
			REPORT_ERROR( ExplicitArgumentsInDestructor, names_scope_ptr, function_declaration.src_loc )
		}

		CheckOverloadedOperator( class_type, function_type, function_declaration.operator, names_scope_ptr, function_declaration.src_loc );
	}

	// Check conversion constructor.
	if( function_declaration.is_conversion_constructor )
	{
		if( function_variable.t.params.size() == 2s )
		{
			function_variable.is_conversion_constructor= true;
		}
		else
		{
			REPORT_ERROR( ConversionConstructorMustHaveOneArgument, names_scope_ptr, function_declaration.src_loc )
		}
	}

	// Check unsafe for special methods.
	if( function_variable.t.is_unsafe && !class_type.empty() )
	{
		auto class_type_non_null= class_type.try_to_non_nullable();
		// Calls to such methods are produced by compiler itself, used in other methods generation, etc.
		// So, to avoid problems with generated unsafe calls just forbid some methods to be unsafe.
		if( is_destructor ||
			( is_constructor && ( IsDefaultConstructor( function_variable, class_type_non_null ) || IsCopyConstructor( function_variable, class_type_non_null ) ) ) ||
			( function_declaration.operator == OverloadedOperator::Assign && IsCopyAssignmentOperator( function_variable, class_type_non_null ) ) ||
			( function_declaration.operator == OverloadedOperator::CompareEqual && IsEqualityCompareOperator( function_variable, class_type_non_null ) ) )
		{
			REPORT_ERROR( ThisMethodCanNotBeUnsafe, names_scope_ptr, function_declaration.src_loc )
		}
	}

	// Check calling convention for methods.
	if( function_variable.t.calling_convention != LLVMCallConv::C &&
		( function_variable.is_this_call || function_declaration.operator != OverloadedOperator::None ) )
	{
		REPORT_ERROR( NonDefaultCallingConventionForClassMethod, names_scope_ptr, function_declaration.src_loc )
	}

	// Setup references pollution for copy methods.
	if( !class_type.empty() )
	{
		auto class_type_non_null= class_type.try_to_non_nullable();
		if( ( is_constructor && IsCopyConstructor( function_variable, class_type_non_null ) ) ||
			( function_declaration.operator == OverloadedOperator::Assign && IsCopyAssignmentOperator( function_variable, class_type_non_null ) ) )
		{
			if( !function_declaration.function_type.references_pollution.empty() )
			{
				if( is_constructor )
				{
					REPORT_ERROR( ExplicitReferencePollutionForCopyConstructor, names_scope_ptr, function_declaration.src_loc )
				}
				else
				{
					REPORT_ERROR( ExplicitReferencePollutionForCopyAssignmentOperator, names_scope_ptr, function_declaration.src_loc )
				}
				function_variable.t.references_pollution.clear();
			}

			var FunctionType::ReferencePollution mut pollution
			{
				.dst{ .param_index= 0u8, .reference_index= 0u8 },
				.src{ .param_index= 1u8, .reference_index= 0u8 },
			};
			function_variable.t.references_pollution.push_back( move(pollution) );
		}

		if( function_declaration.operator == OverloadedOperator::CompareEqual &&
			IsEqualityCompareOperator( function_variable, class_type_non_null ) &&
			!function_declaration.function_type.references_pollution.empty() )
		{
			REPORT_ERROR( ExplicitReferencePollutionForEqualityCompareOperator, names_scope_ptr, function_declaration.src_loc )
			function_variable.t.references_pollution.clear();
		}

		if( is_constructor )
		{
			foreach( &in_pollution : function_declaration.function_type.references_pollution )
			{
				if( in_pollution.src == KeywordToString( Keyword::this_ ) )
				{
					REPORT_ERROR( ConstructorThisReferencePollution, names_scope_ptr, function_declaration.src_loc )
				}
			}
		}
	}

	if( function_declaration.constexpr_ )
	{
		if( function_declaration.block.empty() )
		{
			REPORT_ERROR( ConstexprFunctionsMustHaveBody, names_scope_ptr, function_declaration.src_loc )
		}
		else if( function_declaration.virtual_kind != Synt::Function::VirtualKind::None )
		{
			REPORT_ERROR( ConstexprFunctionCanNotBeVirtual, names_scope_ptr, function_declaration.src_loc )
		}
		else
		{
			function_variable.constexpr_kind= FunctionVariable::ConstexprKind::ConstexprIncomplete;
		}
	}

	if( function_declaration.virtual_kind != Synt::Function::VirtualKind::None )
	{
		if( class_type.empty() )
		{
			REPORT_ERROR( VirtualForNonclassFunction, names_scope_ptr, function_declaration.src_loc, func_name )
		}
		if( !function_variable.is_this_call )
		{
			REPORT_ERROR( VirtualForNonThisCallFunction, names_scope_ptr, function_declaration.src_loc, func_name )
		}
		if( is_constructor )
		{
			REPORT_ERROR( FunctionCanNotBeVirtual, names_scope_ptr, function_declaration.src_loc, func_name )
		}
		if( !class_type.empty() )
		{
			auto class_lock= class_type.try_lock_imut();
			auto& class_ref= class_lock.deref();
			if( class_ref.kind == ClassType::Kind::Struct || class_ref.kind == ClassType::Kind::NonPolymorph )
			{
				REPORT_ERROR( VirtualForNonpolymorphClass, names_scope_ptr, function_declaration.src_loc, func_name )
			}
		}
		if( is_out_of_line_function )
		{
			REPORT_ERROR( VirtualForFunctionImplementation, names_scope_ptr, function_declaration.src_loc, func_name )
		}
	}

	// Check "=default" / "=delete".
	if( function_declaration.body_kind != Synt::Function::BodyKind::Regular )
	{
		var bool mut invalid_func= false;

		if( class_type.empty() ){ invalid_func= true; }
		else
		{
			auto class_type_non_null= class_type.try_to_non_nullable();
			if( is_constructor && ( IsDefaultConstructor( function_variable, class_type_non_null ) || IsCopyConstructor( function_variable, class_type_non_null ) ) )
			{}
			else if( function_declaration.operator == OverloadedOperator::Assign && IsCopyAssignmentOperator( function_variable, class_type_non_null ) )
			{}
			else if( function_declaration.operator == OverloadedOperator::CompareEqual && IsEqualityCompareOperator( function_variable, class_type_non_null ) )
			{}
			else{ invalid_func= true; }
		}

		if( invalid_func )
		{
			REPORT_ERROR( InvalidMethodForBodyGeneration, names_scope_ptr, function_declaration.src_loc )
		}
		else
		{
			select( function_declaration.body_kind == Synt::Function::BodyKind::BodyGenerationRequired ? function_variable.is_generated : function_variable.is_deleted )= true;
		}
	}

	if( function_declaration.no_mangle )
	{
		if( names_scope_ptr.lock_imut().deref().GetParent().empty() )
		{
			function_variable.no_mangle= true;
		}
		else
		{
			REPORT_ERROR( NoMangleForNonglobalFunction, names_scope_ptr, function_declaration.src_loc, func_name )
		}
	}

	if_var( &mut prev_function : GetFunctionWithSameType( functions_set, function_variable.t ) )
	{
		if( prev_function.prototype_syntax_element.empty() )
		{
			prev_function.prototype_syntax_element= function_variable.prototype_syntax_element;
		}
		else if( !function_variable.prototype_syntax_element.empty() )
		{
			REPORT_ERROR(
				FunctionPrototypeDuplication,
				names_scope_ptr,
				ust::max( function_declaration.src_loc, prev_function.prototype_syntax_element.try_deref().src_loc ),
				func_name )
			return false;
		}

		if( prev_function.body_syntax_element.empty() )
		{
			prev_function.body_syntax_element= function_variable.body_syntax_element;
		}
		else if( !function_variable.body_syntax_element.empty() )
		{
			REPORT_ERROR(
				FunctionBodyDuplication,
				names_scope_ptr,
				ust::max( function_declaration.src_loc, prev_function.body_syntax_element.try_deref().src_loc ),
				func_name )
			return false;
		}

		if( prev_function.is_this_call != function_variable.is_this_call )
		{
			REPORT_ERROR( ThiscallMismatch, names_scope_ptr, function_declaration.src_loc, func_name )
			return false;
		}

		if( !is_out_of_line_function &&
			!prev_function.body_syntax_element.empty() && !prev_function.prototype_syntax_element.empty() &&
			prev_function.body_syntax_element.try_deref().virtual_kind != prev_function.prototype_syntax_element.try_deref().virtual_kind )
		{
			REPORT_ERROR( VirtualMismatch, names_scope_ptr, prev_function.body_syntax_element.try_deref().src_loc, func_name )
			return false;
		}
		if( !prev_function.body_syntax_element.empty() && !prev_function.prototype_syntax_element.empty() &&
			prev_function.prototype_syntax_element.try_deref().virtual_kind == Synt::Function::VirtualKind::VirtualPure )
		{
			REPORT_ERROR( BodyForPureVirtualFunction, names_scope_ptr, prev_function.body_syntax_element.try_deref().src_loc, func_name )
			return false;
		}

		if( prev_function.is_deleted != function_variable.is_deleted )
		{
			REPORT_ERROR( BodyForDeletedFunction, names_scope_ptr, prev_function.prototype_syntax_element.try_deref().src_loc, func_name )
			return false;
		}
		if( prev_function.is_generated != function_variable.is_generated )
		{
			REPORT_ERROR( BodyForGeneratedFunction, names_scope_ptr, prev_function.prototype_syntax_element.try_deref().src_loc, func_name )
			return false;
		}

		if( prev_function.no_mangle != function_variable.no_mangle )
		{
			REPORT_ERROR( NoMangleMismatch, names_scope_ptr, function_declaration.src_loc, func_name )
			return false;
		}

		if( prev_function.is_conversion_constructor != function_variable.is_conversion_constructor )
		{
			// TODO -use separate error code
			REPORT_ERROR( NotImplemented, names_scope_ptr, function_declaration.src_loc, ust::string8("changing conversion constructor name") )
			return false;
		}

		if( prev_function.is_inherited )
		{
			REPORT_ERROR( FunctionDeclarationOutsideItsScope, names_scope_ptr, function_declaration.src_loc )
		}

		return true;
	}

	if( is_out_of_line_function )
	{
		REPORT_ERROR( FunctionDeclarationOutsideItsScope, names_scope_ptr, function_declaration.src_loc )
		return false;
	}


	var ust::string8 mut llvm_function_name;
	if( function_variable.no_mangle )
	{
		llvm_function_name= func_name + "\0";
	}
	else
	{
		llvm_function_name=
			mangler_.deref().MangleFunction(
				names_scope_ptr.lock_imut().deref(),
				func_name,
				function_variable.t );
	}

	unsafe
	{
		function_variable.llvm_function=
			LLVMAddFunction(
				module_,
				llvm_function_name.front(),
				function_variable.t.llvm_type );

		LLVMSetFunctionCallConv( function_variable.llvm_function, function_variable.t.calling_convention );
	}

	SetupFunctionParamsAndRetAttributes( function_variable );

	return ApplyOverloadedFunction( functions_set, move(function_variable), names_scope_ptr, function_declaration.src_loc );
}

fn CodeBuilder::CheckOverloadedOperator(
	this,
	ust::shared_ptr_nullable_mut</ClassType/>& class_type,
	FunctionType& func_type,
	OverloadedOperator operator,
	NamesScopePtr& names_scope,
	SrcLoc& src_loc )
{
	if( operator == OverloadedOperator::None ) { return; } // Non-operator

	if( class_type.empty() )
	{
		REPORT_ERROR( OperatorDeclarationOutsideClass, names_scope, src_loc )
		return;
	}

	auto class_type_non_null= class_type.try_to_non_nullable();

	auto mut is_this_class= false;
	foreach( & param : func_type.params )
	{
		if( param.t == class_type_non_null )
		{
			is_this_class= true;
			break;
		}
	}

	if( !is_this_class )
	{
		REPORT_ERROR( OperatorDoesNotHaveParentClassArguments, names_scope, src_loc )
	}

	auto ret_is_void= func_type.return_type == void_type_ && func_type.return_value_type == ValueType::Value;

	if( operator == OverloadedOperator::Add ||
		operator == OverloadedOperator::Sub )
	{
		if( !( func_type.params.size() == 1s || func_type.params.size() == 2s ) )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, src_loc )
		}
	}
	else
	if( operator == OverloadedOperator::Mul ||
		operator == OverloadedOperator::Div ||
		operator == OverloadedOperator::Rem ||
		operator == OverloadedOperator::And ||
		operator == OverloadedOperator::Or  ||
		operator == OverloadedOperator::Xor ||
		operator == OverloadedOperator::ShiftLeft  ||
		operator == OverloadedOperator::ShiftRight )
	{
		if( func_type.params.size() != 2s )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, src_loc )
		}
	}
	else
	if( operator == OverloadedOperator::AssignAdd ||
		operator == OverloadedOperator::AssignSub ||
		operator == OverloadedOperator::AssignMul ||
		operator == OverloadedOperator::AssignDiv ||
		operator == OverloadedOperator::AssignRem ||
		operator == OverloadedOperator::AssignAnd ||
		operator == OverloadedOperator::AssignOr  ||
		operator == OverloadedOperator::AssignXor ||
		operator == OverloadedOperator::AssignShiftLeft  ||
		operator == OverloadedOperator::AssignShiftRight ||
		operator == OverloadedOperator::Assign )
	{
		if( func_type.params.size() != 2s )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, src_loc )
		}
		if( !ret_is_void )
		{
			REPORT_ERROR( InvalidReturnTypeForOperator, names_scope, src_loc, void_type_ )
		}
	}
	else if( operator == OverloadedOperator::CompareEqual )
	{
		if( func_type.params.size() != 2s )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, src_loc )
		}
		if( !( func_type.return_type == bool_type_ && func_type.return_value_type == ValueType::Value ) )
		{
			REPORT_ERROR( InvalidReturnTypeForOperator, names_scope, src_loc, void_type_ )
		}
	}
	else if( operator == OverloadedOperator::CompareOrder )
	{
		if( func_type.params.size() != 2s )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, src_loc )
		}
		if( !(
			!func_type.return_type.GetFundamentalType().empty() &&
			func_type.return_type.GetFundamentalType().try_deref().fundamental_type == U_FundamentalType::i32_ &&
			func_type.return_value_type == ValueType::Value ) )
		{
			REPORT_ERROR( InvalidReturnTypeForOperator, names_scope, src_loc, GetFundamentalTypeName( U_FundamentalType::i32_ ) )
		}
	}
	else
	if( operator == OverloadedOperator::LogicalNot ||
		operator == OverloadedOperator::BitwiseNot )
	{
		if( func_type.params.size() != 1s )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, src_loc )
		}
	}
	else
	if( operator == OverloadedOperator::Increment ||
		operator == OverloadedOperator::Decrement )
	{
		if( func_type.params.size() != 1s )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, src_loc )
		}
		if( !ret_is_void )
		{
			REPORT_ERROR( InvalidReturnTypeForOperator, names_scope, src_loc, void_type_ )
		}
	}
	else if( operator == OverloadedOperator::Indexing )
	{
		if( func_type.params.size() != 2s )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, src_loc )
		}
		// Indexing operator must have first argument of parent class.
		if( !func_type.params.empty() && func_type.params.front().t != class_type_non_null )
		{
			REPORT_ERROR( OperatorDoesNotHaveParentClassArguments, names_scope, src_loc )
		}
		// TODO - maybe also disable non-this-call indexing operator?
	}
	else if( operator == OverloadedOperator::Call )
	{
		if( func_type.params.empty() )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, src_loc )
		}
		// Call operator must have first argument of parent class.
		if( !func_type.params.empty() && func_type.params.front().t != class_type_non_null )
		{
			REPORT_ERROR( OperatorDoesNotHaveParentClassArguments, names_scope, src_loc )
		}
	}
}

fn CodeBuilder::BuildFuncCode( mut this, NamesScopePtr& names_scope, FunctionVariable &mut func_variable )
{
	if( func_variable.body_syntax_element.empty() )
	{
		return;
	}
	if( unsafe( LLVMCountBasicBlocks( func_variable.llvm_function ) ) != 0u )
	{
		return; // Body already exists
	}

	auto body_syntax_element_ptr= func_variable.body_syntax_element.try_to_non_nullable();
	var Synt::Function& body_syntax_element= body_syntax_element_ptr.deref();

	unsafe
	{
		if( names_scope.lock_imut().deref().IsInsideTemplate() )
		{
			LLVMSetLinkage( func_variable.llvm_function, LLVMLinkage::Private );
		}
		else
		{
			// Set comdat. This needed because we want linkage like "inline" in C++ but for all functions.
			var size_type mut name_length = zero_init;
			var $(char8) name_start= LLVMGetValueName2( func_variable.llvm_function, name_length );
			if( name_length > 0s )
			{
				var ust::string8 mut name_str;
				name_str.resize( name_length + 1s, "\0"c8 );
				ust::memory_copy( cast_ref_unsafe</byte8/>( name_str.front() ), cast_ref_unsafe</byte8/>( $>(name_start) ), name_length );

				auto comdat= LLVMGetOrInsertComdat( module_, name_str.front() );
				LLVMSetComdatSelectionKind( comdat, LLVMComdatSelectionKind::Any ); // Actually, we needs something, like ExactMatch, but it works not in all cases.
				LLVMSetComdat( func_variable.llvm_function, comdat );
			}
		}
	}

	debug_info_builder_.try_deref().CreateFunctionInfo( func_variable );

	var FunctionContext mut function_context_value(
		llvm_context_,
		func_variable.llvm_function,
		func_variable.t );

	var NamesScopeMutPtr args_names_scope_ptr( NamesScope( "", names_scope ) );

	var VariablesFrameHolder args_variables_frame_hodler(function_context_value);
	auto& mut function_context= args_variables_frame_hodler.GetFunctionContext();

	// Ensure type completness even for reference args because of reference checking.
	foreach( &param : func_variable.t.params )
	{
		if( !EnsureTypeComplete( param.t ) )
		{
			REPORT_ERROR( UsingIncompleteType, names_scope, body_syntax_element.src_loc, param.t )
			return;
		}
	}

	if( !EnsureTypeComplete( func_variable.t.return_type ) )
	{
		REPORT_ERROR( UsingIncompleteType, names_scope, body_syntax_element.src_loc, func_variable.t.return_type )
	}

	debug_info_builder_.try_deref().SetCurrentLocation( function_context, body_syntax_element.src_loc );

	{
		auto mut args_names_scope_lock= args_names_scope_ptr.lock_mut();
		auto &mut args_names_scope= args_names_scope_lock.deref();

		var bool is_s_ret= func_variable.t.IsStructRet();
		if( is_s_ret )
		{
			unsafe
			{
				function_context.s_ret= LLVMGetParam( func_variable.llvm_function, 0u );
				var ust::array_view_imut</ char8 /> param_name= "_return_value";
				LLVMSetValueName2( function_context.s_ret, param_name.data(), param_name.size() );
			}
		}

		auto first_llvm_arg= select( is_s_ret ? 1u : 0u );
		function_context.args_nodes.resize( func_variable.t.params.size() );
		function_context.args_inner_variable_nodes.resize( func_variable.t.params.size() );
		for( auto mut arg_n= 0s; arg_n < func_variable.t.params.size(); ++arg_n )
		{
			auto& in_param= body_syntax_element.function_type.params[arg_n];
			var FunctionType::Param& type_param= cast_imut(func_variable).t.params[arg_n];
			var u32 llvm_arg_n= first_llvm_arg + u32(arg_n);

			var Variable mut variable
			{
				.t= type_param.t,
				.value_type= ValueType::Value,
				.location= Variable::Location::Pointer,
				.name= in_param.name,
			};

			if( type_param.value_type == ValueType::Value )
			{
				if( !type_param.t.GetClassType().empty() || !type_param.t.GetArrayType().empty() || !type_param.t.GetTupleType().empty() )
				{
					// Aggregate types are passed by reference.
					unsafe
					{
						auto arg_value= LLVMGetParam( func_variable.llvm_function, llvm_arg_n );
						LLVMSetValueName2( arg_value, cast_mut(in_param.name).data(), in_param.name.size() );
						variable.llvm_value= arg_value;
					}
				}
				else
				{
					auto arg_name= "_arg_" + in_param.name;
					unsafe
					{
						auto arg_value= LLVMGetParam( func_variable.llvm_function, llvm_arg_n );
						LLVMSetValueName2( arg_value, cast_mut(arg_name).data(), arg_name.size() );

						variable.llvm_value= LLVMBuildAlloca( function_context.alloca_ir_builder, type_param.t.GetLLVMType(), (in_param.name + "\0").front() );
						CreateLifetimeStart( function_context, variable.llvm_value );
						CreateTypedStore( function_context, type_param.t, arg_value, variable.llvm_value );
					}
				}

				debug_info_builder_.try_deref().CreateVariableInfo( function_context, variable, in_param.name, in_param.src_loc );

			}
			else
			{
				unsafe
				{
					auto arg_value= LLVMGetParam( func_variable.llvm_function, llvm_arg_n );
					LLVMSetValueName2( arg_value, cast_mut(in_param.name).data(), in_param.name.size() );
					variable.llvm_value= arg_value;
				}

				debug_info_builder_.try_deref().CreateReferenceVariableInfo( function_context, variable, in_param.name, in_param.src_loc );
			}

			var Variable mut variable_reference
			{
				.t= type_param.t,
				.value_type= select( in_param.mutability_modifier == Synt::MutabilityModifier::Mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut ),
				.location= Variable::Location::Pointer,
				.llvm_value= variable.llvm_value,
				.name= in_param.name,
			};

			var VariablePtr variable_ptr( move(variable) );
			var VariablePtr mut variable_reference_ptr( move(variable_reference) );

			function_context.references_graph.AddNode( variable_ptr );
			function_context.references_graph.AddNode( variable_reference_ptr );

			function_context.args_nodes[arg_n]= variable_ptr;

			if( type_param.t.GetInnerReferenceKind() != InnerReferenceKind::None )
			{
				var Variable mut accesible_variable
				{
					.value_type= ValueType::Value,
					.name= in_param.name + " referenced variable"
				};
				var VariablePtr accesible_variable_ptr( move(accesible_variable) );
				function_context.references_graph.AddNode( accesible_variable_ptr );

				var VariablePtr inner_reference_node= function_context.references_graph.CreateNodeInnerReference(
					accesible_variable_ptr,
					select( type_param.t.GetInnerReferenceKind() == InnerReferenceKind::Mut ? ValueType::ReferenceMut : ValueType::ReferenceImut ) );
				function_context.references_graph.AddLink( accesible_variable_ptr, inner_reference_node );

				function_context.args_inner_variable_nodes[arg_n]= inner_reference_node;
			}

			// Register arg for destruction and reference checking.
			if( type_param.value_type == ValueType::Value )
			{
				RegisterTopFrameVariable( function_context, variable_ptr );
			}
			RegisterTopFrameVariable( function_context, variable_reference_ptr );

			if( in_param.name == KeywordToString( Keyword::this_ ) && func_variable.is_this_call )
			{
				function_context.this_= move(variable_reference_ptr);
			}
			else
			{
				var bool insert_ok= !args_names_scope.AddName( in_param.name, move(variable_reference_ptr) ).empty();
				if( !insert_ok )
				{
					REPORT_ERROR( Redefinition, names_scope, in_param.src_loc, in_param.name )
				}
			}
		}
	}

	{
		auto& block= body_syntax_element.block.try_deref();

		auto& func_name= body_syntax_element.name.back();
		auto is_constructor= func_name == KeywordToString( Keyword::constructor_ );
		auto is_destructor = func_name == KeywordToString( Keyword::destructor_  );
		if( is_constructor )
		{
			function_context.whole_this_is_unavailable= true;

			if( !body_syntax_element.constructor_initializer_list.empty() )
			{
				BuildConstructorInitialization(
					args_names_scope_ptr,
					function_context,
					body_syntax_element.constructor_initializer_list.try_deref() );
			}
			else
			{
				var Synt::StructNamedInitializer dummy_initializer{ .src_loc= block.src_loc };
				BuildConstructorInitialization(
					args_names_scope_ptr,
					function_context,
					dummy_initializer );
			}

			function_context.whole_this_is_unavailable= false;
		}
		if( is_destructor )
		{
			function_context.destructor_end_block= unsafe( LLVMCreateBasicBlockInContext( llvm_context_, "destructor_end\0"[0] ) );
		}

		if( is_constructor || is_destructor )
		{
			// Setup virtual table pointers before main body of constructor/destructor and after constructor initialization list.
			auto this_ptr= function_context.this_;
			with( &this_ : this_ptr.try_lock_imut().deref() )
			{
				auto class_type= this_.t.GetClassType().try_deref();
				SetupVirtualTablePointers( this_.llvm_value, class_type, function_context );

				auto class_kind= class_type.lock_imut().deref().kind;
				if( class_kind == ClassType::Kind::Interface || class_kind == ClassType::Kind::Abstract )
				{
					function_context.whole_this_is_unavailable= true;
				}
			}
		}

		auto block_build_info= BuildBlockElement( args_names_scope_ptr, function_context, block );
		if( !block_build_info.have_terminal_instruction_inside )
		{
			if( func_variable.t.return_type == void_type_ && func_variable.t.return_value_type == ValueType::Value )
			{
				// Manually generate "return" for void-return functions.
				CallDestructorsForAllVariablesFrames( args_names_scope_ptr, function_context, block.end_src_loc );
				CheckReferencesPollutionBeforeReturn( names_scope, function_context, block.end_src_loc );
				if( function_context.destructor_end_block != LLVMBasicBlockRef::Null )
				{
					unsafe( LLVMBuildBr( function_context.llvm_ir_builder, function_context.destructor_end_block ) );
				}
				else
				{
					unsafe( LLVMBuildRetVoid( function_context.llvm_ir_builder ) );
				}
			}
			else
			{
				REPORT_ERROR( NoReturnInFunctionReturningNonVoid, args_names_scope_ptr, block.end_src_loc )
				return;
			}
		}

		// Finsih function - add remaining instructions
		debug_info_builder_.try_deref().SetCurrentLocation( function_context, block.end_src_loc );
		unsafe
		{
			LLVMBuildBr( function_context.alloca_ir_builder, function_context.function_basic_block );

			if( function_context.destructor_end_block != LLVMBasicBlockRef::Null && ! function_context.this_.empty() )
			{
				LLVMAppendExistingBasicBlock( function_context.llvm_function, function_context.destructor_end_block );
				LLVMPositionBuilderAtEnd( function_context.llvm_ir_builder, function_context.destructor_end_block );

				var Variable this_copy= function_context.this_.try_lock_imut().deref();
				if_var( &class_type : this_copy.t.GetClassType() )
				{
					BuildMembersDestructors( function_context, this_copy.llvm_value, class_type );
				}
				LLVMBuildRetVoid( function_context.llvm_ir_builder );
			}
		}
	}

	// Replace return value allocation at end of function build process.
	// We can do this only now, because now there is no "llvm_value" for this allocation stored in some intermediate structs.
	if( function_context.return_value_replaced_allocation != LLVMValueRef::Null )
	{
		unsafe( LLVMReplaceAllUsesWith( function_context.return_value_replaced_allocation, function_context.s_ret ) );
	}

	if( func_variable.constexpr_kind != FunctionVariable::ConstexprKind::NonConstexpr )
	{
		auto mut can_be_constexpr= true;

		{
			auto& function_type= func_variable.t;

			can_be_constexpr&=
				!function_type.is_unsafe &&
				function_type.return_type.CanBeConstexpr();

			foreach( &param : function_type.params )
			{
				can_be_constexpr&=
					param.t.CanBeConstexpr() &&
					param.t.GetFunctionPointerType().empty();  // Currently function pointers not supported.
			}
		}

		if( !can_be_constexpr )
		{
			if( func_variable.constexpr_kind != FunctionVariable::ConstexprKind::ConstexprAuto )
			{
				REPORT_ERROR( InvalidTypeForConstexprFunction, names_scope, body_syntax_element.src_loc )
			}
			func_variable.constexpr_kind= FunctionVariable::ConstexprKind::NonConstexpr;
		}
		else if( function_context.have_non_constexpr_operations_inside )
		{
			if( func_variable.constexpr_kind != FunctionVariable::ConstexprKind::ConstexprAuto )
			{
				REPORT_ERROR( ConstexprFunctionContainsUnallowedOperations, names_scope, body_syntax_element.src_loc )
			}
			func_variable.constexpr_kind= FunctionVariable::ConstexprKind::NonConstexpr;
		}
		else
		{
			func_variable.constexpr_kind= FunctionVariable::ConstexprKind::ConstexprComplete;
		}
	}
}

fn CodeBuilder::TryCallCopyConstructor(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	LLVMValueRef dst, LLVMValueRef src,
	ClassTypePtr& class_type,
	SrcLoc& src_loc )
{
	// TODO - maybe combine this with "BuildCopyConstructorPart" method?
	if( !class_type.lock_imut().deref().is_copy_constructible )
	{
		REPORT_ERROR( OperationNotSupportedForThisType, names_scope, src_loc, Type(class_type) )
		return;
	}

	// TODO - what if copy constructor is unsafe?

	BuildCopyConstructorPart( names_scope, function_context, dst, src, class_type, src_loc );
}

fn CodeBuilder::CallDestructorsForVariablesFrame( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, size_type variables_frame_index, SrcLoc& src_loc )
{
	// Call destructors in reverse order.
	for( auto mut i= function_context.variables_frames[variables_frame_index].size(); i > 0s; --i )
	{
		auto variable_ptr= function_context.variables_frames[variables_frame_index][i - 1s];
		auto variable_lock= variable_ptr.lock_imut();
		var Variable& variable= variable_lock.deref();

		// Call destructors for variables, but not for references.
		if( variable.value_type == ValueType::Value )
		{
			if( function_context.references_graph.HaveOutgoingLinks( variable_ptr ) )
			{
				REPORT_ERROR( DestroyedVariableStillHaveReferences, names_scope, src_loc, variable.name )
			}
			if( !function_context.references_graph.NodeIsMoved( variable_ptr ) )
			{
				BuildDestructorPart( names_scope, function_context, variable.llvm_value, variable.t, src_loc );

				// Do not create lifetime for variables existing only in llvm register (without any address).
				if( variable.location == Variable::Location::Pointer )
				{
					CreateLifetimeEnd( function_context, variable.llvm_value );
				}
			}
		}

		function_context.references_graph.RemoveNode( variable_ptr );
	}
}

fn CodeBuilder::CallDestructorsForTopVariablesFrame( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, SrcLoc& src_loc )
{
	auto variables_frame_index= function_context.variables_frames.size() - 1s;
	CallDestructorsForVariablesFrame( names_scope, function_context, variables_frame_index, src_loc );
}

fn CodeBuilder::CallDestructorsForAllVariablesFrames( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, SrcLoc& src_loc )
{
	for( auto mut i= function_context.variables_frames.size(); i > 0s; --i )
	{
		CallDestructorsForVariablesFrame( names_scope, function_context, i - 1s, src_loc );
	}
}

fn CodeBuilder::CallDestructorsForLoopInnerVariables( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, SrcLoc& src_loc )
{
	for( var size_type mut i= function_context.variables_frames.size(), i_end= function_context.loops_stack.back().variable_frames_stack_size; i > i_end; --i )
	{
		CallDestructorsForVariablesFrame( names_scope, function_context, i - 1s, src_loc );
	}
}

fn CodeBuilder::DestroyUnusedTemporaryVariables( this, NamesScopePtr& names_scope, FunctionContext& mut function_context, SrcLoc& src_loc )
{
	// Try to move unused nodes (variables and references) until we can't move anything.
	// Multiple iterations needed to process complex references chains.
	while(true)
	{
		auto mut any_node_moved= false;
		// TODO - maybe iterate in reverse order?
		for( auto mut i= 0s; i < function_context.variables_frames.back().size(); ++i )
		{
			auto variable_ptr= function_context.variables_frames.back()[i];
			auto variable_lock= variable_ptr.lock_imut();
			var Variable& variable= variable_lock.deref();

			// Move variable nodes without links or all reference nodes.
			// We can freely drop reference nodes here because there should be unregistered reference nodes for current used references.
			if( !function_context.references_graph.NodeIsMoved( variable_ptr ) &&
				( variable.value_type != ValueType::Value ||
					!function_context.references_graph.HaveOutgoingLinks( variable_ptr ) ) )
			{
				any_node_moved= true;
				function_context.references_graph.MoveNode( variable_ptr );

				if( variable.value_type == ValueType::Value )
				{
					if( !function_context.is_functionless_context )
					{
						if( variable.llvm_value != LLVMValueRef::Null )
						{
							BuildDestructorPart( names_scope, function_context, variable.llvm_value, variable.t, src_loc );
						}

						// Do not create lifetime for variables existing only in llvm register (without any address).
						if( variable.location == Variable::Location::Pointer )
						{
							CreateLifetimeEnd( function_context, variable.llvm_value );
						}
					}
				}
			}
		}

		if(!any_node_moved)
		{
			break;
		}
	}
}

fn CodeBuilder::RegisterTemporaryVariable( FunctionContext& mut function_context, VariablePtr mut variable )
{
	function_context.variables_frames.back().push_back( move(variable) );
}

fn CodeBuilder::RegisterTopFrameVariable( FunctionContext& mut function_context, VariablePtr mut variable )
{
	RegisterFrameVariable( function_context, move(variable), 0s );
}

fn CodeBuilder::RegisterFrameVariable( FunctionContext& mut function_context, VariablePtr mut variable, size_type frame_index_from_top )
{
	auto frame_index= function_context.variables_frames.size() - frame_index_from_top - 1s;
	function_context.variables_frames[frame_index].push_back( move(variable) );
}

fn CodeBuilder::IsReferenceAllowedForReturn( this, FunctionContext& function_context, VariablePtr& variable_node ) : bool
{
	foreach( &return_reference : function_context.function_type.return_references )
	{
		auto i= size_type(return_reference.param_index);
		if( return_reference.reference_index == FunctionType::c_param_reference_number &&
			variable_node == function_context.args_nodes[i] )
		{
			return true;
		}
		if( return_reference.reference_index == 0u8 &&
			variable_node == function_context.args_inner_variable_nodes[i] )
		{
			return true;
		}
	}

	return false;
}

fn CodeBuilder::CheckReferencesPollutionBeforeReturn( this, NamesScopePtr& names_scope, FunctionContext& function_context, SrcLoc& src_loc )
{
	auto& function_type= function_context.function_type;
	auto& params= function_type.params;
	for( auto mut i= 0s; i < params.size(); ++i )
	{
		if( params[i].value_type == ValueType::Value )
		{
			continue;
		}
		var VariableNullablePtr inner_reference_node= function_context.references_graph.GetNodeInnerReference( function_context.args_nodes[i].try_to_non_nullable() );
		if( inner_reference_node.empty() )
		{
			continue;
		}
		var VariablePtr inner_reference_node_non_null= inner_reference_node.try_to_non_nullable();

		foreach( &accessible_variable_node : function_context.references_graph.GetAllAccessibleVariableNodes( inner_reference_node_non_null ) )
		{
			if( accessible_variable_node == function_context.args_inner_variable_nodes[i] )
			{
				continue;
			}

			var ust::optional</FunctionType::ParamReference/> mut param_reference;
			for( auto mut j= 0s; j < params.size(); ++j )
			{
				if( accessible_variable_node == function_context.args_nodes[j] )
				{
					var FunctionType::ParamReference mut r{ .param_index= u8(j), .reference_index= FunctionType::c_param_reference_number };
					param_reference= move(r);
				}
				if( accessible_variable_node == function_context.args_inner_variable_nodes[j] )
				{
					var FunctionType::ParamReference mut r{ .param_index= u8(j), .reference_index= 0u8 };
					param_reference= move(r);
				}
			}

			if( param_reference.empty() )
			{
				continue;
			}

			var FunctionType::ReferencePollution actual_reference_pollution
			{
				.dst{ .param_index= u8(i), .reference_index= 0u8 },
				.src= param_reference.try_deref(),
			};

			var bool mut found= false;
			foreach( &reference_pollution : function_type.references_pollution )
			{
				if( actual_reference_pollution == reference_pollution )
				{
					found= true;
					break;
				}
			}

			if( !found )
			{
				REPORT_ERROR( UnallowedReferencePollution, names_scope, src_loc )
			}
		}
	}
}

fn CodeBuilder::MergeReferencesGraphsAfterConditionalBranches( ust::array_view_imut</ReferencesGraph/> branches, NamesScopePtr names_scope, SrcLoc& src_loc ) : ReferencesGraph
{
	auto errors_container= names_scope.lock_imut().deref().GetErrors();
	auto mut lock= errors_container.try_lock_mut();
	return ReferencesGraph::MergeReferencesGraphsAfterConditionalBranches( branches, lock.deref(), src_loc );
}

fn CodeBuilder::CheckReferencesGraphAfterLoop( ReferencesGraph& state_before, ReferencesGraph& state_after, NamesScopePtr names_scope, SrcLoc& src_loc )
{
	auto errors_container= names_scope.lock_imut().deref().GetErrors();
	auto mut lock= errors_container.try_lock_mut();
	ReferencesGraph::CheckReferencesGraphAfterLoop( state_before, state_after, lock.deref(), src_loc );
}

fn CodeBuilder::SetupReferencesInCopyOrMove(
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	VariablePtr& dst_node,
	VariablePtr& src_node,
	SrcLoc& src_loc )
{
	var Type dst_type= dst_node.lock_imut().deref().t;
	if( dst_type.GetInnerReferenceKind() == InnerReferenceKind::None )
	{
		return;
	}

	var ReferencesGraph& mut references_graph= function_context.references_graph;

	var ReferencesGraph::NodesSet dst_variable_nodes= references_graph.GetAllAccessibleVariableNodes( dst_node );
	var ReferencesGraph::NodesSet src_inner_reference_nodes= references_graph.GetAccessibleVariableNodesInnerReferences( src_node );

	if( dst_variable_nodes.empty() || src_inner_reference_nodes.empty() )
	{
		return;
	}

	var bool mut node_is_mutable= false;
	foreach( &src_inner_reference_node : src_inner_reference_nodes )
	{
		node_is_mutable |= src_inner_reference_node.lock_imut().deref().value_type == ValueType::ReferenceMut;
	}

	node_is_mutable&= dst_type.GetInnerReferenceKind() == InnerReferenceKind::Mut;

	foreach( &dst_variable_node : dst_variable_nodes )
	{
		var VariableNullablePtr mut dst_inner_reference_node= references_graph.GetNodeInnerReference( dst_variable_node );
		if( dst_inner_reference_node.empty() )
		{
			dst_inner_reference_node= references_graph.CreateNodeInnerReference(
				dst_variable_node,
				select( node_is_mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut ) );
		}
		var VariablePtr dst_inner_reference_node_non_null= dst_inner_reference_node.try_to_non_nullable();
		var ValueType inner_reference_value_type= dst_inner_reference_node_non_null.lock_imut().deref().value_type;

		if( (  node_is_mutable && inner_reference_value_type == ValueType::ReferenceImut ) ||
			( !node_is_mutable && inner_reference_value_type == ValueType::ReferenceMut ) )
		{
			REPORT_ERROR( InnerReferenceMutabilityChanging, names_scope, src_loc, dst_inner_reference_node_non_null.lock_imut().deref().name )
		}

		foreach( src_inner_reference_node : src_inner_reference_nodes )
		{
			if( !references_graph.TryAddLink( src_inner_reference_node, dst_inner_reference_node_non_null ) )
			{
				REPORT_ERROR( ReferenceProtectionError, names_scope, src_loc, dst_inner_reference_node_non_null.lock_imut().deref().name )
			}
		}
	}
}

fn CodeBuilder::IsTypeComplete( this, Type& t ) : bool
{
	if_var( &class_type_ptr : t.GetClassType() )
	{
		return class_type_ptr.lock_imut().deref().is_complete;
	}
	if_var( &enum_type_ptr : t.GetEnumType() )
	{
		return enum_type_ptr.lock_imut().deref().underlaying_type.llvm_type != LLVMTypeRef::Null;
	}
	if_var( &array_type : t.GetArrayType() )
	{
		return IsTypeComplete( array_type.element_type );
	}
	if_var( &tuple_type : t.GetTupleType() )
	{
		var bool mut complete= true;
		foreach( &element_type : tuple_type.element_types )
		{
			complete&= IsTypeComplete( element_type );
		}
		return complete;
	}
	if( !t.GetFunctionType().empty() )
	{
		return false; // Function type is always incomplete.
	}

	return true;
}

fn CodeBuilder::EnsureTypeComplete( mut this, Type& t ) : bool
{
	if_var( &class_type_ptr : t.GetClassType() )
	{
		// TODO - maybe names scope is not needed here?
		auto class_parent_scope= class_type_ptr.lock_imut().deref().members.lock_imut().deref().GetParent().try_to_non_nullable();

		BuildClass( class_parent_scope, class_type_ptr );
		return class_type_ptr.lock_imut().deref().is_complete;
	}
	if_var( &enum_type_ptr : t.GetEnumType() )
	{
		auto enum_parent_scope= enum_type_ptr.lock_imut().deref().names_scope.lock_imut().deref().GetParent().try_to_non_nullable();
		BuildEnum( enum_parent_scope, enum_type_ptr );

		return enum_type_ptr.lock_imut().deref().underlaying_type.llvm_type != LLVMTypeRef::Null;
	}
	if_var( &array_type : t.GetArrayType() )
	{
		return EnsureTypeComplete( array_type.element_type );
	}
	if_var( &tuple_type : t.GetTupleType() )
	{
		var bool mut ok= true;
		foreach( &element_type : tuple_type.element_types )
		{
			ok&= EnsureTypeComplete( element_type );
		}
		return ok;
	}
	if( !t.GetFunctionType().empty() )
	{
		return false; // Function type is always incomplete.
	}

	return true;
}

fn CodeBuilder::IsDefaultConstructor( FunctionVariable& function_variable, ClassTypePtr& class_type ) : bool
{
	if( !function_variable.is_this_call ){ return false; }
	if( function_variable.t.params.size() != 1s ){ return false; }

	auto& param= function_variable.t.params.front();
	return param.t == class_type && param.value_type == ValueType::ReferenceMut;
}

fn CodeBuilder::IsCopyConstructor( FunctionVariable& function_variable, ClassTypePtr& class_type ) : bool
{
	if( !function_variable.is_this_call ){ return false; }
	if( function_variable.t.params.size() != 2s ){ return false; }

	auto& param_dst= function_variable.t.params.front();
	auto& param_src= function_variable.t.params.back();
	return
		param_dst.t == class_type && param_dst.value_type == ValueType::ReferenceMut &&
		param_src.t == class_type && param_src.value_type == ValueType::ReferenceImut;
}

fn CodeBuilder::IsCopyAssignmentOperator( FunctionVariable& function_variable, ClassTypePtr& class_type ) : bool
{
	if( function_variable.t.params.size() != 2s ){ return false; }

	auto& param_dst= function_variable.t.params.front();
	auto& param_src= function_variable.t.params.back();
	return
		param_dst.t == class_type && param_dst.value_type == ValueType::ReferenceMut &&
		param_src.t == class_type && param_src.value_type == ValueType::ReferenceImut;
}

fn CodeBuilder::IsEqualityCompareOperator( FunctionVariable& function_variable, ClassTypePtr& class_type ) : bool
{
	if( function_variable.t.params.size() != 2s ){ return false; }

	auto& param_l= function_variable.t.params.front();
	auto& param_r= function_variable.t.params.back();
	return
		param_l.t == class_type && param_l.value_type == ValueType::ReferenceImut &&
		param_r.t == class_type && param_r.value_type == ValueType::ReferenceImut &&
		!function_variable.t.return_type.GetFundamentalType().empty() && function_variable.t.return_type.GetFundamentalType().try_deref().fundamental_type == U_FundamentalType::bool_ &&
		function_variable.t.return_value_type == ValueType::Value;
}

fn CodeBuilder::AddGlobalConstantVariable( this, ust::string8& name_null_terminated, LLVMTypeRef llvm_type, LLVMValueRef initializer ) : LLVMValueRef
{
	unsafe
	{
		// Reuse existing global variable with same name and initializer.
		var LLVMValueRef prev_global_variable= LLVMGetNamedGlobal( module_, name_null_terminated.front() );
		if( prev_global_variable != LLVMValueRef::Null && LLVMGetInitializer( prev_global_variable ) == initializer )
		{
			return prev_global_variable;
		}

		var LLVMValueRef global_value= LLVMAddGlobal( module_, llvm_type, name_null_terminated.front() );
		LLVMSetLinkage( global_value, LLVMLinkage::Private );
		LLVMSetUnnamedAddress( global_value, LLVMUnnamedAddr::GlobalUnnamedAddr );
		LLVMSetGlobalConstant( global_value, LLVMBool::True );
		if( initializer != LLVMValueRef::Null )
		{
			LLVMSetInitializer( global_value, initializer );
		}
		return global_value;
	}
}

fn CodeBuilder::AddGlobalMutableVariable( this, ust::string8& name_null_terminated, LLVMTypeRef llvm_type ) : LLVMValueRef
{
	unsafe
	{
		// Use external linkage and comdat for global mutable variables to guarantee address uniqueness.

		var LLVMValueRef global_variable= LLVMAddGlobal( module_, llvm_type, name_null_terminated.front() );
		LLVMSetLinkage( global_variable, LLVMLinkage::External );
		LLVMSetUnnamedAddress( global_variable, LLVMUnnamedAddr::GlobalUnnamedAddr );
		LLVMSetGlobalConstant( global_variable, LLVMBool::False );

		auto comdat= LLVMGetOrInsertComdat( module_, name_null_terminated.front() );
		LLVMSetComdatSelectionKind( comdat, LLVMComdatSelectionKind::Any );
		LLVMSetComdat( global_variable, comdat );

		return global_variable;
	}
}

fn CodeBuilder::GetAttributeKindByName( ust::array_view_imut</char8/> attr_name ) : u32
{
	return unsafe( LLVMGetEnumAttributeKindForName( attr_name.data(), attr_name.size() ) );
}

fn CodeBuilder::AddFunctionAttribute( this, LLVMValueRef llvm_function, u32 index, ust::array_view_imut</char8/> attr_name )
{
	unsafe
	{
		auto attr= LLVMCreateEnumAttribute( llvm_context_, GetAttributeKindByName(attr_name), 0u64 );
		LLVMAddAttributeAtIndex( llvm_function, index, attr );
	}
}

fn CodeBuilder::AddFunctionTypeAttribute( this, LLVMValueRef llvm_function, u32 index, ust::array_view_imut</char8/> attr_name, LLVMTypeRef t )
{
	unsafe
	{
		auto attr= LLVMCreateTypeAttribute( llvm_context_, GetAttributeKindByName(attr_name), t );
		LLVMAddAttributeAtIndex( llvm_function, index, attr );
	}
}

fn CodeBuilder::SetupFunctionParamsAndRetAttributes( mut this, FunctionVariable& mut function_variable )
{
	var bool is_s_ret= function_variable.t.IsStructRet();
	if( is_s_ret )
	{
		AddFunctionTypeAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex, "sret", function_variable.t.return_type.GetLLVMType() );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex, "noalias" );
	}
	if( function_variable.t.return_value_type != ValueType::Value )
	{
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeReturnIndex, "nonnull" );
	}

	for( auto mut i= 0s; i < function_variable.t.params.size(); ++i )
	{
		var FunctionType::Param& param= function_variable.t.params[i];
		var u32 llvm_param_n= LLVMAttributeFirstParamIndex + select( is_s_ret ? 1u : 0u ) + u32(i);

		var bool param_type_is_composite= !param.t.GetClassType().empty() || !param.t.GetArrayType().empty() || !param.t.GetTupleType().empty();
		// Mark pointer-parameters as "nonnull".
		if( param.value_type != ValueType::Value || param_type_is_composite )
		{
			AddFunctionAttribute( function_variable.llvm_function, llvm_param_n, "nonnull" );
		}
		// Mutable reference args or composite value-args must not alias.
		// Also we can mark as "noalias" non-mutable references. See https://releases.llvm.org/9.0.0/docs/AliasAnalysis.html#must-may-or-no.
		if( param.value_type != ValueType::Value || param_type_is_composite )
		{
			AddFunctionAttribute( function_variable.llvm_function, llvm_param_n, "noalias" );
		}
		// Mark as "readonly" immutable reference params.
		if( param.value_type == ValueType::ReferenceImut )
		{
			AddFunctionAttribute( function_variable.llvm_function, llvm_param_n, "readonly" );
		}
		// Mark as "nocapture" value args of composite types, which is actually passed by hidden reference.
		// It is not possible to capture this reference.
		if( param.value_type == ValueType::Value && param_type_is_composite )
		{
			AddFunctionAttribute( function_variable.llvm_function, llvm_param_n, "nocapture" );
		}
	}

	// Merge functions with identical code.
	// We doesn't need different addresses for different functions.
	unsafe( LLVMSetUnnamedAddress( function_variable.llvm_function, LLVMUnnamedAddr::GlobalUnnamedAddr ) );

	// We do not support exceptions. So, mark all functions as "nounwind".
	AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFunctionIndex, "nounwind" );

	if( build_debug_info_ ) // Unwind table entry for function needed for debug info.
	{
		unsafe
		{
			auto attr= LLVMCreateEnumAttribute( llvm_context_, GetAttributeKindByName("uwtable"), 2u64 /* async uwtable */ );
			LLVMAddAttributeAtIndex( function_variable.llvm_function, LLVMAttributeFunctionIndex, attr );
		}
	}

	// Use "private" linkage for generated functions since such functions are emitted in every compilation unit.
	if( function_variable.is_generated )
	{
		unsafe( LLVMSetLinkage( function_variable.llvm_function, LLVMLinkage::Private ) );
	}
}

fn CodeBuilder::SetupDereferenceableFunctionParamsAndRetAttributes( this, FunctionVariable& mut function_variable )
{
	var bool is_s_ret= function_variable.t.IsStructRet();

	for( auto mut i= 0s; i < function_variable.t.params.size(); ++i )
	{
		var FunctionType::Param& param= function_variable.t.params[i];
		var u32 llvm_param_n= LLVMAttributeFirstParamIndex + select( is_s_ret ? 1u : 0u ) + u32(i);

		var bool param_type_is_composite= !param.t.GetClassType().empty() || !param.t.GetArrayType().empty() || !param.t.GetTupleType().empty();
		// Mark reference params and passed by hidden reference params with "dereferenceable" attribute.
		if( param.value_type != ValueType::Value || param_type_is_composite )
		{
			var LLVMTypeRef llvm_type= param.t.GetLLVMType();
			unsafe
			{
				if( LLVMTypeIsSized( llvm_type ) != LLVMBool::True )
				{
					continue; // May be in case of error.
				}

				U1_FunctionAddDereferenceableAttr( function_variable.llvm_function, llvm_param_n, LLVMABISizeOfType( data_layout_, llvm_type ) );
			}
		}
	}

	unsafe
	{
		var LLVMTypeRef llvm_type= function_variable.t.return_type.GetLLVMType();
		if( LLVMTypeIsSized( llvm_type ) != LLVMBool::True )
		{
			return; // May be in case of error.
		}

		if( is_s_ret )
		{
			U1_FunctionAddDereferenceableAttr( function_variable.llvm_function, LLVMAttributeFirstParamIndex, LLVMABISizeOfType( data_layout_, llvm_type ) );
		}
		else if( function_variable.t.return_value_type != ValueType::Value )
		{
			U1_FunctionAddDereferenceableAttr( function_variable.llvm_function, LLVMAttributeReturnIndex, LLVMABISizeOfType( data_layout_, llvm_type ) );
		}
	}
}

fn CodeBuilder::SetupDereferenceableFunctionParamsAndRetAttributes_r( this, NamesScope& names_scope )
{
	foreach( &el : names_scope )
	{
		var NamesScopeValue& value = el.value();
		if_var( &child_names_scope : value.something_.get</NamesScopeMutPtr/>() )
		{
			SetupDereferenceableFunctionParamsAndRetAttributes_r( child_names_scope.lock_imut().deref() );
		}
		if_var( &class_type : value.something_.get</ClassTypePtr/>() )
		{
			SetupDereferenceableFunctionParamsAndRetAttributes_r( class_type.lock_imut().deref().members.lock_imut().deref() );
		}
		if_var( &functions_set_ptr : value.something_.get</ ust::shared_ptr_mut</NamesScopeFunctionsSet/> />() )
		{
			auto mut lock= functions_set_ptr.lock_mut();
			foreach( &mut function : lock.deref().functions_set.functions )
			{
				SetupDereferenceableFunctionParamsAndRetAttributes( function );
			}
		}
	}
}

fn CodeBuilder::MarkInstructionWithTBAAMetadata( this, LLVMValueRef instruction, LLVMMetadataRef metadata )
{
	auto& name= "tbaa";
	unsafe( LLVMSetMetadata(
		instruction,
		LLVMGetMDKindIDInContext( llvm_context_, $<(cast_mut(name[0])), u32( typeinfo</typeof(name)/>.element_count ) ),
		LLVMMetadataAsValue( llvm_context_, metadata ) ) );
}

fn CodeBuilder::MarkLoadInstructionWithNonNullMetadata( this, LLVMValueRef load_instruction )
{
	if( load_instruction == LLVMValueRef::Null )
	{
		return;
	}

	auto& name= "nonnull";
	unsafe( LLVMSetMetadata(
		load_instruction,
		LLVMGetMDKindIDInContext( llvm_context_, $<(cast_mut(name[0])), u32( typeinfo</typeof(name)/>.element_count ) ),
		LLVMMetadataAsValue( llvm_context_, LLVMMDNodeInContext2( llvm_context_, ust::nullptr</LLVMMetadataRef/>(), 0s ) ) ) );
}

fn CodeBuilder::CreateTypedLoad( mut this, FunctionContext& function_context, Type& t, LLVMValueRef address ) : LLVMValueRef
{
	if( address == LLVMValueRef::Null || function_context.is_functionless_context )
	{
		return LLVMValueRef::Null;
	}

	if( t == void_type_ )
	{
		return unsafe( LLVMGetUndef( fundamental_llvm_types_.void_ ) );
	}

	auto result= unsafe( LLVMBuildLoad2( function_context.llvm_ir_builder, t.GetLLVMType(), address, g_null_string ) );

	if( generate_tbaa_metadata_ )
	{
		auto access_tag= tbaa_metadata_builder_.CreateAccessTag(t);
		MarkInstructionWithTBAAMetadata( result, access_tag );
	}

	return result;
}

fn CodeBuilder::CreateTypedReferenceLoad( mut this, FunctionContext& function_context, Type& t, LLVMValueRef address ) : LLVMValueRef
{
	if( address == LLVMValueRef::Null || function_context.is_functionless_context )
	{
		return LLVMValueRef::Null;
	}

	auto result= unsafe( LLVMBuildLoad2( function_context.llvm_ir_builder, LLVMPointerType( t.GetLLVMType(), 0u ), address, g_null_string ) );

	if( generate_tbaa_metadata_ )
	{
		auto access_tag= tbaa_metadata_builder_.CreateReferenceAccessTag(t);
		MarkInstructionWithTBAAMetadata( result, access_tag );
	}

	return result;
}

fn CodeBuilder::CreateTypedStore( mut this, FunctionContext& function_context, Type& t, LLVMValueRef value_to_store, LLVMValueRef address )
{
	if( function_context.is_functionless_context )
	{
		return;
	}
	if( t == void_type_ )
	{
		return;
	}

	auto result= unsafe( LLVMBuildStore( function_context.llvm_ir_builder, value_to_store, address ) );

	if( generate_tbaa_metadata_ )
	{
		auto access_tag= tbaa_metadata_builder_.CreateAccessTag(t);
		MarkInstructionWithTBAAMetadata( result, access_tag );
	}
}

fn CodeBuilder::CreateTypedReferenceStore( mut this, FunctionContext& function_context, Type& t, LLVMValueRef value_to_store, LLVMValueRef address )
{
	if( function_context.is_functionless_context )
	{
		return;
	}

	auto result= unsafe( LLVMBuildStore( function_context.llvm_ir_builder, value_to_store, address ) );

	if( generate_tbaa_metadata_ )
	{
		auto access_tag= tbaa_metadata_builder_.CreateReferenceAccessTag(t);
		MarkInstructionWithTBAAMetadata( result, access_tag );
	}
}

fn CodeBuilder::GetFundamentalLLVMType( this, U_FundamentalType t ) : LLVMTypeRef
{
	if( t == U_FundamentalType::InvalidType	) { return fundamental_llvm_types_.invalid_type_; }
	if( t == U_FundamentalType::void_		) { return fundamental_llvm_types_.void_; }
	if( t == U_FundamentalType::bool_		) { return fundamental_llvm_types_.bool_; }
	if( t == U_FundamentalType::i8_			) { return fundamental_llvm_types_.i8_	; }
	if( t == U_FundamentalType::u8_			) { return fundamental_llvm_types_.u8_	; }
	if( t == U_FundamentalType::i16_		) { return fundamental_llvm_types_.i16_	; }
	if( t == U_FundamentalType::u16_		) { return fundamental_llvm_types_.u16_	; }
	if( t == U_FundamentalType::i32_		) { return fundamental_llvm_types_.i32_	; }
	if( t == U_FundamentalType::u32_		) { return fundamental_llvm_types_.u32_	; }
	if( t == U_FundamentalType::i64_		) { return fundamental_llvm_types_.i64_	; }
	if( t == U_FundamentalType::u64_		) { return fundamental_llvm_types_.u64_	; }
	if( t == U_FundamentalType::i128_		) { return fundamental_llvm_types_.i128_; }
	if( t == U_FundamentalType::u128_		) { return fundamental_llvm_types_.u128_; }
	if( t == U_FundamentalType::f32_		) { return fundamental_llvm_types_.f32_	; }
	if( t == U_FundamentalType::f64_		) { return fundamental_llvm_types_.f64_	; }
	if( t == U_FundamentalType::char8_		) { return fundamental_llvm_types_.char8_ ; }
	if( t == U_FundamentalType::char16_		) { return fundamental_llvm_types_.char16_; }
	if( t == U_FundamentalType::char32_		) { return fundamental_llvm_types_.char32_; }
	if( t == U_FundamentalType::byte8_		) { return fundamental_llvm_types_.byte8_  ; }
	if( t == U_FundamentalType::byte16_		) { return fundamental_llvm_types_.byte16_ ; }
	if( t == U_FundamentalType::byte32_		) { return fundamental_llvm_types_.byte32_ ; }
	if( t == U_FundamentalType::byte64_		) { return fundamental_llvm_types_.byte64_ ; }
	if( t == U_FundamentalType::byte128_	) { return fundamental_llvm_types_.byte128_; }

	halt;
}

fn CodeBuilder::GetZeroGEPIndex( this ) : LLVMValueRef
{
	return unsafe( LLVMConstNull( fundamental_llvm_types_.i32_ ) );
}

fn CodeBuilder::CreateMoveToLLVMRegisterInstruction( mut this, Variable& variable, FunctionContext& function_context ) : LLVMValueRef
{
	if( variable.constexpr_value != LLVMValueRef::Null )
	{
		return variable.constexpr_value;
	}
	if( variable.location == Variable::Location::Pointer )
	{
		return CreateTypedLoad( function_context, variable.t, variable.llvm_value );
	}
	if( variable.location == Variable::Location::LLVMRegister )
	{
		return variable.llvm_value;
	}

	halt;
}

fn CodeBuilder::CreateReferenceCast( this, LLVMValueRef ref, Type& src_type, Type& dst_type, FunctionContext& function_context ) : LLVMValueRef
{
	if( src_type == dst_type )
	{
		return ref;
	}
	if( ref == LLVMValueRef::Null )
	{
		return LLVMValueRef::Null;
	}

	if( function_context.is_functionless_context && unsafe(LLVMIsConstant(ref)) == LLVMBool::False )
	{
		return LLVMValueRef::Null;
	}

	auto src_class_type= src_type.GetClassType().try_deref();
	foreach( &parent : src_class_type.lock_imut().deref().parents )
	{
		auto sub_ref= CreateClassParentFieldGEP( function_context, src_class_type, ref, parent );
		if( parent.class_ == dst_type )
		{
			return sub_ref;
		}
		else if( Type(parent.class_).ReferenceIsConvertibleTo( dst_type ) )
		{
			return CreateReferenceCast( sub_ref, parent.class_, dst_type, function_context );
		}
	}

	halt;
}

fn CodeBuilder::CreateClassFieldGEP( this, FunctionContext& function_context, Variable& class_variable, ClassField& field ) : LLVMValueRef
{
	return CreateClassFieldGEP( function_context, class_variable.t.GetClassType().try_deref(), class_variable.llvm_value, field );
}

fn CodeBuilder::CreateClassFieldGEP( this, FunctionContext& function_context, ClassTypePtr& class_type, LLVMValueRef value, ClassField& field ) : LLVMValueRef
{
	if( value == LLVMValueRef::Null )
	{
		return LLVMValueRef::Null;
	}
	if( function_context.is_functionless_context && unsafe(LLVMIsConstant(value)) == LLVMBool::False )
	{
		return LLVMValueRef::Null;
	}

	auto op_name_nt= "." + field.syntax_element.deref().name + "\0";
	unsafe
	{
		var [ LLVMValueRef, 2 ] mut indexes
		[
			GetZeroGEPIndex(),
			CreateIndexValue(field.index),
		];

		return LLVMBuildGEP2( function_context.llvm_ir_builder, class_type.lock_imut().deref().llvm_type, value, $<(indexes[0]), 2u, op_name_nt.front() );
	}
}

fn CodeBuilder::CreateClassParentFieldGEP( this, FunctionContext& function_context, ClassTypePtr& class_type, LLVMValueRef value, ClassType::Parent& parent ) : LLVMValueRef
{
	if( value == LLVMValueRef::Null )
	{
		return LLVMValueRef::Null;
	}
	if( function_context.is_functionless_context && unsafe(LLVMIsConstant(value)) == LLVMBool::False )
	{
		return LLVMValueRef::Null;
	}

	unsafe
	{
		var [ LLVMValueRef, 2 ] mut indexes
		[
			GetZeroGEPIndex(),
			CreateIndexValue( parent.field_number ),
		];

		return LLVMBuildGEP2( function_context.llvm_ir_builder, class_type.lock_imut().deref().llvm_type, value, $<(indexes[0]), 2u, g_null_string );
	}
}

fn CodeBuilder::CreateBaseClassFieldGEP( this, FunctionContext& function_context, ClassTypePtr& class_type, LLVMValueRef value ) : LLVMValueRef
{
	if( value == LLVMValueRef::Null )
	{
		return LLVMValueRef::Null;
	}
	if( function_context.is_functionless_context && unsafe(LLVMIsConstant(value)) == LLVMBool::False )
	{
		return LLVMValueRef::Null;
	}

	var [ LLVMValueRef, 2 ] mut indexes
	[
		GetZeroGEPIndex(),
		GetZeroGEPIndex(), // Base class is always zero field.
	];

	return unsafe( LLVMBuildGEP2( function_context.llvm_ir_builder, class_type.lock_imut().deref().llvm_type, value, $<(indexes[0]), 2u, ".base\0"[0] ) );
}

fn CodeBuilder::CreateTupleElementGEP( this, FunctionContext& function_context, Variable& tuple_variable, u32 element_index ) : LLVMValueRef
{
	return CreateTupleElementGEP( function_context, tuple_variable.t.GetTupleType().try_deref(), tuple_variable.llvm_value, element_index );
}

fn CodeBuilder::CreateTupleElementGEP( this, FunctionContext& function_context, TupleType& t, LLVMValueRef value, u32 element_index ) : LLVMValueRef
{
	if( value == LLVMValueRef::Null )
	{
		return LLVMValueRef::Null;
	}
	if( function_context.is_functionless_context && unsafe(LLVMIsConstant(value)) == LLVMBool::False )
	{
		return LLVMValueRef::Null;
	}

	auto op_name_nt= "[" + ust::to_string8(element_index) + "]\0";
	unsafe
	{
		var [ LLVMValueRef, 2 ] mut indexes
		[
			GetZeroGEPIndex(),
			CreateIndexValue(element_index)
		];

		return LLVMBuildGEP2( function_context.llvm_ir_builder, t.llvm_type, value, $<(indexes[0]), 2u, op_name_nt.front() );
	}
}

fn CodeBuilder::CreateArrayElementGEP( this, FunctionContext& function_context, ArrayType& t, LLVMValueRef value, u32 index ) : LLVMValueRef
{
	return CreateArrayElementGEP( function_context, t, value, CreateIndexValue(index) );
}

fn CodeBuilder::CreateArrayElementGEP( this, FunctionContext& function_context, ArrayType& t, LLVMValueRef value, LLVMValueRef index ) : LLVMValueRef
{
	if( value == LLVMValueRef::Null || index == LLVMValueRef::Null )
	{
		return LLVMValueRef::Null;
	}
	if( function_context.is_functionless_context &&
		( unsafe(LLVMIsConstant(value)) == LLVMBool::False || unsafe(LLVMIsConstant(index)) == LLVMBool::False ) )
	{
		return LLVMValueRef::Null;
	}

	unsafe
	{
		var [ LLVMValueRef, 2 ] mut indexes[ GetZeroGEPIndex(), index ];
		return LLVMBuildGEP2( function_context.llvm_ir_builder, t.llvm_type, value, $<(indexes[0]), 2u, g_null_string );
	}
}

fn CodeBuilder::CreateIndexValue( this, u32 index ) : LLVMValueRef
{
	return unsafe( LLVMConstInt( fundamental_llvm_types_.u32_, u64(index), LLVMBool::False ) );
}

fn CodeBuilder::MoveConstantToMemory( this, LLVMValueRef ptr, LLVMValueRef constant, FunctionContext& function_context )
{
	if( function_context.is_functionless_context )
	{
		return;
	}

	unsafe
	{
		auto constant_type= LLVMTypeOf( constant );
		auto constant_type_kind= LLVMGetTypeKind( constant_type );
		if( constant_type_kind == LLVMTypeKind::Array )
		{
			auto length= LLVMGetArrayLength( constant_type );
			for( auto mut i= 0u; i < length; ++i )
			{
				var [ LLVMValueRef, 2 ] mut indexes
				[
					GetZeroGEPIndex(),
					CreateIndexValue(i)
				];
				auto element_ptr= LLVMBuildGEP2( function_context.llvm_ir_builder, constant_type, ptr, $<(indexes[0]), 2u, ".\0"[0] );

				auto constant_element= LLVMGetAggregateElement( constant, i );

				MoveConstantToMemory( element_ptr, constant_element, function_context );
			}
		}
		else if( constant_type_kind == LLVMTypeKind::Struct )
		{
			auto length= LLVMCountStructElementTypes( constant_type );
			for( auto mut i= 0u; i < length; ++i )
			{
				var [ LLVMValueRef, 2 ] mut indexes
				[
					GetZeroGEPIndex(),
					CreateIndexValue(i)
				];
				auto element_ptr= LLVMBuildGEP2( function_context.llvm_ir_builder, constant_type, ptr, $<(indexes[0]), 2u, ".\0"[0] );

				auto constant_element= LLVMGetAggregateElement( constant, i );

				MoveConstantToMemory( element_ptr, constant_element, function_context );
			}
		}
		else
		{
			LLVMBuildStore( function_context.llvm_ir_builder, constant, ptr );
		}
	}
}

fn CodeBuilder::CopyBytes( mut this, LLVMValueRef dst, LLVMValueRef src, Type& t, FunctionContext &mut function_context )
{
	if( function_context.is_functionless_context )
	{
		return;
	}

	unsafe
	{
		var LLVMTypeRef llvm_type= t.GetLLVMType();
		var LLVMTypeKind type_kind= LLVMGetTypeKind( llvm_type );
		if( type_kind == LLVMTypeKind::Integer ||
			type_kind == LLVMTypeKind::Float ||
			type_kind == LLVMTypeKind::Double ||
			type_kind == LLVMTypeKind::Pointer )
		{
			// Simple scalar - create load/store.
			auto value= CreateTypedLoad( function_context, t, src );
			CreateTypedStore( function_context, t, value, dst );
		}
		else
		{
			// Create memcpy for aggregate types.
			var u64 size= LLVMABISizeOfType( data_layout_, llvm_type );
			var u32 alignment= LLVMABIAlignmentOfType( data_layout_, llvm_type );

			LLVMBuildMemCpy(
				function_context.llvm_ir_builder,
				dst, alignment,
				src, alignment,
				LLVMConstInt( fundamental_llvm_types_.u64_, size, LLVMBool::False ) );
		}
	}
}

fn CodeBuilder::ConstexprCompareEqual(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	LLVMValueRef l,
	LLVMValueRef r,
	Type& t,
	SrcLoc& src_loc ) : LLVMValueRef
{
	if(
		!t.GetFundamentalType().empty() ||
		!t.GetEnumType().empty() ||
		!t.GetRawPointerType().empty() ||
		!t.GetFunctionPointerType().empty() )
	{
		unsafe
		{
			if( t == void_type_ )
			{
				return LLVMConstInt( fundamental_llvm_types_.bool_, 1u64, LLVMBool::False );
			}

			var LLVMTypeKind type_kind= LLVMGetTypeKind( t.GetLLVMType() );
			var bool is_float=
				type_kind == LLVMTypeKind::Half ||
				type_kind == LLVMTypeKind::Float ||
				type_kind == LLVMTypeKind::Double ||
				type_kind == LLVMTypeKind::X86_FP80 ||
				type_kind == LLVMTypeKind::P128 ||
				type_kind == LLVMTypeKind::PPC_FP128;

			return
				select( is_float
					? LLVMBuildFCmp( function_context.llvm_ir_builder, LLVMRealPredicate::OEQ, l, r, g_null_string )
					: LLVMBuildICmp( function_context.llvm_ir_builder, LLVMIntPredicate::EQ, l, r, g_null_string ) );
		}
	}
	if_var( &array_type : t.GetArrayType() )
	{
		unsafe
		{
			var LLVMValueRef mut res= LLVMConstInt( fundamental_llvm_types_.bool_, 1u64, LLVMBool::False );
			for( auto mut i= 0u64; i < array_type.element_count; ++i )
			{
				var u32 index(i);
				var LLVMValueRef l_element= LLVMGetAggregateElement( l, index );
				var LLVMValueRef r_element= LLVMGetAggregateElement( r, index );
				var LLVMValueRef element_res= ConstexprCompareEqual( names_scope, function_context, l_element, r_element, array_type.element_type, src_loc );
				res= LLVMBuildAnd( function_context.llvm_ir_builder, res, element_res, g_null_string );
			}

			return res;
		}
	}
	if_var( &tuple_type : t.GetTupleType() )
	{
		unsafe
		{
			var LLVMValueRef mut res= LLVMConstInt( fundamental_llvm_types_.bool_, 1u64, LLVMBool::False );
			for( auto mut i= 0s; i < tuple_type.element_types.size(); ++i )
			{
				var u32 index(i);
				var LLVMValueRef l_element= LLVMGetAggregateElement( l, index );
				var LLVMValueRef r_element= LLVMGetAggregateElement( r, index );
				var LLVMValueRef element_res= ConstexprCompareEqual( names_scope, function_context, l_element, r_element, tuple_type.element_types[i], src_loc );
				res= LLVMBuildAnd( function_context.llvm_ir_builder, res, element_res, g_null_string );
			}

			return res;
		}
	}
	if_var( &class_type : t.GetClassType() )
	{
		if( !class_type.lock_imut().deref().is_equality_comparable )
		{
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope, src_loc, Type(class_type) )
			return unsafe( LLVMConstInt( fundamental_llvm_types_.bool_, 0u64, LLVMBool::False ) );
		}

		// Search for "==" operator.
		auto operators_value= class_type.lock_imut().deref().members.lock_imut().deref().GetThisScopeValue( OverloadedOperatorToString( OverloadedOperator::CompareEqual ) ).try_deref();
		foreach( &op_ : operators_value.Get</NamesScopeFunctionsSet/>().try_lock_imut().deref().functions_set.functions )
		{
			if( !IsEqualityCompareOperator( op_, class_type ) )
			{
				continue;
			}
			// Found proper "==" operator.

			// TODO - what if "==" is unsafe?

			auto res= constexpr_function_evaluator_.Evaluate( op_.llvm_function, ust::make_array( l, r ) );

			if( res.errors.empty() )
			{
				return res.constant;
			}

			auto errors_container_ptr= names_scope.lock_imut().deref().GetErrors();
			auto mut lock= errors_container_ptr.try_lock_mut();
			auto &mut errors_container= lock.deref();
			foreach( &err : res.errors )
			{
				var CodeBuilderError mut out_error
				{
					.code= CodeBuilderErrorCode::ConstexprFunctionEvaluationError,
					.src_loc= src_loc,
					.text= err,
				};
				errors_container.push_back( move(out_error) );
			}

			return unsafe( LLVMConstInt( fundamental_llvm_types_.bool_, 0u64, LLVMBool::False ) );
		}

		halt; // Operator not found - wtf?
	}

	halt; // Unhandled type kind
}

fn CodeBuilder::CreateLifetimeStart( this,  FunctionContext &mut function_context, LLVMValueRef llvm_value )
{
	if( !create_lifetimes_ )
	{
		return;
	}

	if( llvm_value == LLVMValueRef::Null )
	{
		return;
	}

	unsafe
	{
		auto alloca_inst= LLVMIsAAllocaInst( llvm_value );
		if( alloca_inst == LLVMValueRef::Null )
		{
			return;
		}

		var LLVMTypeRef t= LLVMGetAllocatedType( alloca_inst );
		if( LLVMTypeIsSized( t ) == LLVMBool::False ) // May be in case of error.
		{
			return;
		}

		var u64 size_of= LLVMABISizeOfType( data_layout_, t );
		var LLVMValueRef size_of_value= LLVMConstInt( fundamental_llvm_types_.u64_, size_of, LLVMBool::False );
		var LLVMValueRef mut ptr_converted= LLVMBuildPointerCast( function_context.llvm_ir_builder, llvm_value, lifetime_function_arg_type_, g_null_string );

		var [ LLVMValueRef, 2 ] mut args[ size_of_value, ptr_converted ];
		LLVMBuildCall2( function_context.llvm_ir_builder, U1_GetFunctionType(lifetime_start_intrinsic_), lifetime_start_intrinsic_, $<(args[0]), 2u, g_null_string );

		if( generate_lifetime_start_end_debug_calls_ )
		{
			LLVMBuildCall2( function_context.llvm_ir_builder, U1_GetFunctionType(lifetime_start_debug_func_), lifetime_start_debug_func_, $<(ptr_converted), 1u, g_null_string );
		}
	}
}

fn CodeBuilder::CreateLifetimeEnd( this, FunctionContext &mut function_context, LLVMValueRef llvm_value )
{
	if( !create_lifetimes_ )
	{
		return;
	}
	if( llvm_value == LLVMValueRef::Null )
	{
		return;
	}

	unsafe
	{
		auto alloca_inst= LLVMIsAAllocaInst( llvm_value );
		if( alloca_inst == LLVMValueRef::Null )
		{
			return;
		}

		var LLVMTypeRef t= LLVMGetAllocatedType( alloca_inst );
		if( LLVMTypeIsSized( t ) == LLVMBool::False ) // May be in case of error.
		{
			return;
		}

		var u64 size_of= LLVMABISizeOfType( data_layout_, t );
		var LLVMValueRef size_of_value= LLVMConstInt( fundamental_llvm_types_.u64_, size_of, LLVMBool::False );
		var LLVMValueRef mut ptr_converted= LLVMBuildPointerCast( function_context.llvm_ir_builder, llvm_value, lifetime_function_arg_type_, g_null_string );

		var [ LLVMValueRef, 2 ] mut args[ size_of_value, ptr_converted ];
		LLVMBuildCall2( function_context.llvm_ir_builder, U1_GetFunctionType(lifetime_end_intrinsic_), lifetime_end_intrinsic_, $<(args[0]), 2u, g_null_string );

		if( generate_lifetime_start_end_debug_calls_ )
		{
			LLVMBuildCall2( function_context.llvm_ir_builder, U1_GetFunctionType(lifetime_end_debug_func_), lifetime_end_debug_func_, $<(ptr_converted), 1u, g_null_string );
		}
	}
}

fn CodeBuilder::SaveFunctionContextState( FunctionContext& function_context ) : FunctionContextState
{
	unsafe
	{
		var FunctionContextState mut instructions_state
		{
			.current_block_last_instruction= LLVMGetLastInstruction( LLVMGetInsertBlock( function_context.llvm_ir_builder ) ),
			.alloca_block_last_instruction= LLVMGetLastInstruction( LLVMGetInsertBlock( function_context.alloca_ir_builder ) ),
			.current_block= LLVMGetInsertBlock( function_context.llvm_ir_builder ),
			.references_graph= function_context.references_graph,
		};
		return move(instructions_state);
	}
}

fn CodeBuilder::RestoreFunctionContextState( FunctionContext &mut function_context, FunctionContextState& state )
{
	unsafe
	{
		// TODO - use debug assert instead.
		halt if( state.current_block_last_instruction != LLVMGetLastInstruction( LLVMGetInsertBlock( function_context.llvm_ir_builder ) ) );
		halt if( state.alloca_block_last_instruction != LLVMGetLastInstruction( LLVMGetInsertBlock( function_context.alloca_ir_builder ) ) );
		halt if( state.current_block != LLVMGetInsertBlock( function_context.llvm_ir_builder ) );
	}

	function_context.references_graph= state.references_graph;
}

fn CodeBuilder::CreateGlobalFunctionContext( this ) : FunctionContext
{
	var FunctionType mut function_type
	{
		.return_type= void_type_,
		.return_value_type= ValueType::Value,
	};

	var FunctionContext mut function_context(
		llvm_context_,
		global_llvm_function_,
		move(function_type) );

	function_context.is_functionless_context= true;

	function_context.variables_frames.push_back( FunctionContext::VariablesFrame() );
	return move(function_context);
}

} // namespace U1
