import "../lex_synt_lib/keywords.uh"
import "error_reporting.uh"
import "code_builder.uh"

namespace U
{

fn CodeBuilder::constructor( LLVMContextRef llvm_context )
	(
		llvm_context_(llvm_context)
	)
{
	unsafe
	{
		fundamental_llvm_types_.i8_ = LLVMInt8TypeInContext( llvm_context_ );
		fundamental_llvm_types_.u8_ = LLVMInt8TypeInContext( llvm_context_ );
		fundamental_llvm_types_.i16_= LLVMInt16TypeInContext( llvm_context_ );
		fundamental_llvm_types_.u16_= LLVMInt16TypeInContext( llvm_context_ );
		fundamental_llvm_types_.i32_= LLVMInt32TypeInContext( llvm_context_ );
		fundamental_llvm_types_.u32_= LLVMInt32TypeInContext( llvm_context_ );
		fundamental_llvm_types_.i64_= LLVMInt64TypeInContext( llvm_context_ );
		fundamental_llvm_types_.u64_= LLVMInt64TypeInContext( llvm_context_ );
		fundamental_llvm_types_.i128_= LLVMInt128TypeInContext( llvm_context_ );
		fundamental_llvm_types_.u128_= LLVMInt128TypeInContext( llvm_context_ );

		fundamental_llvm_types_.f32_= LLVMFloatTypeInContext( llvm_context_ );
		fundamental_llvm_types_.f64_= LLVMDoubleTypeInContext( llvm_context_ );

		fundamental_llvm_types_.char8_ = LLVMInt8TypeInContext ( llvm_context_ );
		fundamental_llvm_types_.char16_= LLVMInt16TypeInContext( llvm_context_ );
		fundamental_llvm_types_.char32_= LLVMInt32TypeInContext( llvm_context_ );

		fundamental_llvm_types_.invalid_type_= LLVMInt8TypeInContext( llvm_context_ );
		fundamental_llvm_types_.void_= LLVMInt8TypeInContext( llvm_context_ );
		fundamental_llvm_types_.void_for_ret_= LLVMVoidTypeInContext( llvm_context_ );
		fundamental_llvm_types_.bool_= LLVMInt1TypeInContext( llvm_context_ );

		fundamental_llvm_types_.int_ptr= LLVMInt64TypeInContext( llvm_context_ ); // TODO - use data layout to obtaint int_ptr type
	}
}

fn CodeBuilder::BuildProgram( mut this, Synt::SyntaxAnalysisResult& ast ) : BuildResult
{
	unsafe{ module_ = LLVMModuleCreateWithName( "some_module\0"[0] ); }

	var NamesScope mut global_names_scope( "" );

	FillGlobalNamesScope( global_names_scope );
	NamesScopeFill( global_names_scope, ast.program_elements );
	NamesScopeBuild( global_names_scope );

	var BuildResult mut res{ .llvm_module= module_ };
	return move(res);
}

fn CodeBuilder::FillGlobalNamesScope( this, NamesScope &mut names_scope )
{
	names_scope.AddName( KeywordToString(Keyword::void_), Type( FundamentalType( U_FundamentalType::void_, fundamental_llvm_types_.void_ ) ) );
	names_scope.AddName( KeywordToString(Keyword::bool_), Type( FundamentalType( U_FundamentalType::bool_, fundamental_llvm_types_.bool_ ) ) );
	names_scope.AddName( KeywordToString(Keyword::i8_  ), Type( FundamentalType( U_FundamentalType::i8_  , fundamental_llvm_types_.i8_   ) ) );
	names_scope.AddName( KeywordToString(Keyword::u8_  ), Type( FundamentalType( U_FundamentalType::u8_  , fundamental_llvm_types_.u8_   ) ) );
	names_scope.AddName( KeywordToString(Keyword::i16_ ), Type( FundamentalType( U_FundamentalType::i16_ , fundamental_llvm_types_.i16_  ) ) );
	names_scope.AddName( KeywordToString(Keyword::u16_ ), Type( FundamentalType( U_FundamentalType::u16_ , fundamental_llvm_types_.u16_  ) ) );
	names_scope.AddName( KeywordToString(Keyword::i32_ ), Type( FundamentalType( U_FundamentalType::i32_ , fundamental_llvm_types_.i32_  ) ) );
	names_scope.AddName( KeywordToString(Keyword::u32_ ), Type( FundamentalType( U_FundamentalType::u32_ , fundamental_llvm_types_.u32_  ) ) );
	names_scope.AddName( KeywordToString(Keyword::i64_ ), Type( FundamentalType( U_FundamentalType::i64_ , fundamental_llvm_types_.i64_  ) ) );
	names_scope.AddName( KeywordToString(Keyword::u64_ ), Type( FundamentalType( U_FundamentalType::u64_ , fundamental_llvm_types_.u64_  ) ) );
	names_scope.AddName( KeywordToString(Keyword::i128_), Type( FundamentalType( U_FundamentalType::i128_, fundamental_llvm_types_.i128_ ) ) );
	names_scope.AddName( KeywordToString(Keyword::u128_), Type( FundamentalType( U_FundamentalType::u128_, fundamental_llvm_types_.u128_ ) ) );
	names_scope.AddName( KeywordToString(Keyword::f32_ ), Type( FundamentalType( U_FundamentalType::f32_ , fundamental_llvm_types_.f32_  ) ) );
	names_scope.AddName( KeywordToString(Keyword::f64_ ), Type( FundamentalType( U_FundamentalType::f64_ , fundamental_llvm_types_.f64_  ) ) );
	names_scope.AddName( KeywordToString(Keyword::char8_ ), Type( FundamentalType( U_FundamentalType::char8_ , fundamental_llvm_types_.char8_  ) ) );
	names_scope.AddName( KeywordToString(Keyword::char16_), Type( FundamentalType( U_FundamentalType::char16_, fundamental_llvm_types_.char16_ ) ) );
	names_scope.AddName( KeywordToString(Keyword::char32_), Type( FundamentalType( U_FundamentalType::char32_, fundamental_llvm_types_.char32_ ) ) );
}

fn CodeBuilder::NamesScopeFill( NamesScope &mut names_scope, Synt::ProgramElements& program_elements )
{
	foreach( & program_element : program_elements )
	{
		if_var( & function : program_element.get</ ust::shared_ptr_final</Synt::Function/> />() )
		{
			NamesScopeFill( names_scope, function );
		}
	}
}

fn CodeBuilder::NamesScopeFill( NamesScope &mut names_scope, ust::shared_ptr_final</Synt::Function/>& function )
{
	if( !names_scope.GetThisScopeValue( function.get_ref().name ).empty() )
	{
		REPORT_ERROR( names_scope, Redefinition, function.get_ref().file_pos )
		return;
	}

	// TODO - reuse existing functions set, report about redefinition.
	var FunctionsSet mut functions_set;

	functions_set.syntax_elements.push_back( function );

	names_scope.AddName( function.get_ref().name, NamesScopeValue( move(functions_set) ) );
}

fn CodeBuilder::NamesScopeBuild( this, NamesScope& names_scope )
{
	foreach( &el : names_scope.GetInternalContainer() )
	{
		auto functions_set= el.value().Get</ FunctionsSet />();
		if( !functions_set.empty() )
		{
			NamesScopeBuildElement( names_scope, ust::to_non_nullable( functions_set ) );
		}
	}
}

fn CodeBuilder::NamesScopeBuildElement( this, NamesScope& names_scope, ust::shared_ptr_mut</FunctionsSet/> functions_set )
{
	{ // First, lock as imut and check if complete.
		auto l= functions_set.lock_imut();
		var FunctionsSet& functions_set= l.get_ref();
		if( functions_set.syntax_elements.empty() ) // Already complete
		{
			return;
		}
	}

	auto mut l= functions_set.lock_mut();
	var FunctionsSet &mut functions_set= l.get_ref();

	while( !functions_set.syntax_elements.empty() )
	{
		auto syntax_element_ptr= functions_set.syntax_elements.back();
		PrepareFunction( syntax_element_ptr.get_ref(), names_scope, functions_set );
		functions_set.syntax_elements.drop_back();
	}
}

fn CodeBuilder::PrepareFunction(
	this,
	Synt::Function& function_declaration,
	NamesScope& names_scope,
	FunctionsSet &mut functions_set ) : bool
{
	var FunctionVariable mut function_variable;
	function_variable.t= PrepareType( names_scope, function_declaration.function_type );

	var ust::string8 mut name= function_declaration.name;
	name.push_back("\0"c8);
	unsafe{ function_variable.llvm_function= LLVMAddFunction( module_, name.front(), function_variable.t.GetLLVMType() ); }

	functions_set.functions.push_back( move(function_variable) );

	BuildFuncCode( functions_set.functions.back() ); // TODO separate body build from prototype build.

	return true;
}

fn CodeBuilder::PrepareType( this, NamesScope& names_scope, Synt::TypeName& type_name ) : Type
{
	if_var( &named_type : type_name.get</Synt::ComplexName/>() )
	{
		return PrepareType( names_scope, named_type );
	}
	if_var( &function_type : type_name.get</ ust::box</ Synt::FunctionType/> />() )
	{
		return PrepareType( names_scope, function_type.get_ref() );
	}
	halt;
}

fn CodeBuilder::PrepareType( this, NamesScope& names_scope, Synt::ComplexName& named_type ) : Type
{
	// TODO - call "ResolveValue"
	auto value= names_scope.GetThisScopeValue( named_type.name );
	if( value.empty() )
	{
		return Type( FundamentalType( U_FundamentalType::InvalidType, fundamental_llvm_types_.invalid_type_ ) );
	}

	auto value_as_type= value.get_ref().Get</Type/>();
	if( value_as_type.empty() )
	{
		return Type( FundamentalType( U_FundamentalType::InvalidType, fundamental_llvm_types_.invalid_type_ ) );
	}

	return value_as_type.lock_imut().get_ref();
}

fn CodeBuilder::PrepareType( this, NamesScope& names_scope, Synt::FunctionType& function_type ) : Type
{
	var FunctionType mut res
	{
		.return_type(
			select(
				function_type.return_type.empty()
					? Type( FundamentalType( U_FundamentalType::void_, fundamental_llvm_types_.void_for_ret_ ) )
					: PrepareType( names_scope, function_type.return_type.get_ref() ) ) )
	};

	foreach( &arg : function_type.args )
	{
		var FunctionType::Arg mut out_arg{ .arg_type( PrepareType( names_scope, arg.arg_type ) ) };
		res.args.push_back( move(out_arg) );
	}

	var ust::vector</LLVMTypeRef/> mut llvm_arg_types;
	foreach( &arg : res.args )
	{
		llvm_arg_types.push_back( arg.arg_type.get_ref().GetLLVMType() );
	}

	unsafe
	{
		if( llvm_arg_types.empty() )
		{
			auto dummy= LLVMTypeRef::Null;
			res.llvm_type=
				LLVMFunctionType(
					res.return_type.get_ref().GetLLVMType(),
					dummy, 0u, LLVMBool::False );
		}
		else
		{
			auto s= u32(llvm_arg_types.size());
			res.llvm_type=
				LLVMFunctionType(
					res.return_type.get_ref().GetLLVMType(),
					llvm_arg_types.front(), s, LLVMBool::False );
		}
	}

	return Type(move(res));
}

fn CodeBuilder::BuildFuncCode( this, FunctionVariable &mut func_variable )
{
	var FunctionContext mut function_context( llvm_context_, func_variable.llvm_function );

	// Finsih function - add remaining instructions
	unsafe{ LLVMBuildBr( function_context.alloca_ir_builder, function_context.function_basic_block ); }
}

} // amespace U
