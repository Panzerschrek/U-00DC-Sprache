import "/keywords.uh"
import "error_reporting.uh"
import "mangling.uh"
import "code_builder.uh"

namespace U1
{

fn ClearClassInternals( ClassTypePtr& class_type, NamesScopeMutPtr& dummy_class_names_scope )
{
	auto mut lock= class_type.lock_mut();
	auto &mut class_= lock.get_ref();
	class_.members= dummy_class_names_scope;
	class_.parents.clear();
	class_.virtual_table.clear();
	class_.typeinfo_src_type_.reset();
}

fn CodeBuilder::constructor( LLVMContextRef llvm_context, LLVMTargetDataRef data_layout, bool build_debug_info )
	(
		llvm_context_(llvm_context),
		data_layout_(data_layout),
		constexpr_function_evaluator_(data_layout),
		global_things_stack_ptr_(GlobalThingsStack()),
		build_debug_info_(build_debug_info)
	)
{
	unsafe
	{
		fundamental_llvm_types_.i8_ = LLVMInt8TypeInContext( llvm_context_ );
		fundamental_llvm_types_.u8_ = LLVMInt8TypeInContext( llvm_context_ );
		fundamental_llvm_types_.i16_= LLVMInt16TypeInContext( llvm_context_ );
		fundamental_llvm_types_.u16_= LLVMInt16TypeInContext( llvm_context_ );
		fundamental_llvm_types_.i32_= LLVMInt32TypeInContext( llvm_context_ );
		fundamental_llvm_types_.u32_= LLVMInt32TypeInContext( llvm_context_ );
		fundamental_llvm_types_.i64_= LLVMInt64TypeInContext( llvm_context_ );
		fundamental_llvm_types_.u64_= LLVMInt64TypeInContext( llvm_context_ );
		fundamental_llvm_types_.i128_= LLVMInt128TypeInContext( llvm_context_ );
		fundamental_llvm_types_.u128_= LLVMInt128TypeInContext( llvm_context_ );

		fundamental_llvm_types_.f32_= LLVMFloatTypeInContext( llvm_context_ );
		fundamental_llvm_types_.f64_= LLVMDoubleTypeInContext( llvm_context_ );

		fundamental_llvm_types_.char8_ = LLVMInt8TypeInContext ( llvm_context_ );
		fundamental_llvm_types_.char16_= LLVMInt16TypeInContext( llvm_context_ );
		fundamental_llvm_types_.char32_= LLVMInt32TypeInContext( llvm_context_ );

		fundamental_llvm_types_.invalid_type_= LLVMInt8TypeInContext( llvm_context_ );
		fundamental_llvm_types_.void_= LLVMInt8TypeInContext( llvm_context_ );
		fundamental_llvm_types_.void_for_ret_= LLVMVoidTypeInContext( llvm_context_ );
		fundamental_llvm_types_.bool_= LLVMInt1TypeInContext( llvm_context_ );

		fundamental_llvm_types_.int_ptr= LLVMIntPtrTypeInContext( llvm_context_, data_layout_ );
	}

	invalid_type_= FundamentalType( U_FundamentalType::InvalidType, fundamental_llvm_types_.invalid_type_ );
	void_type_= FundamentalType( U_FundamentalType::void_, fundamental_llvm_types_.void_ );
	void_type_for_ret_= FundamentalType( U_FundamentalType::void_, fundamental_llvm_types_.void_for_ret_ );
	bool_type_= FundamentalType( U_FundamentalType::bool_, fundamental_llvm_types_.bool_ );

	unsafe
	{
		size_type_= select(
			LLVMGetIntTypeWidth( fundamental_llvm_types_.int_ptr ) == 32u
			? FundamentalType( U_FundamentalType::u32_, fundamental_llvm_types_.u32_ )
			: FundamentalType( U_FundamentalType::u64_, fundamental_llvm_types_.u64_ ) );
	}
}

fn CodeBuilder::BuildProgram( mut this, SourceGraph& source_graph ) : BuildResult
{
	unsafe // Create module.
	{
		var ust::string8 mut module_name= source_graph.nodes.front().file_path_normalized;
		module_name += "\0";
		module_ = LLVMModuleCreateWithNameInContext( module_name.front_unsafe(), llvm_context_ );
		LLVMSetModuleDataLayout( module_, data_layout_ );
	}

	unsafe // Prepare dummy function.
	{
		auto global_function_llvm_type= LLVMFunctionType( fundamental_llvm_types_.void_for_ret_, LLVMTypeRef::Null, 0u, LLVMBool::False );
		global_llvm_function_= LLVMAddFunction( module_, "\0"[0], global_function_llvm_type );
	}

	unsafe // Prepare halt function.
	{
		auto halt_function_llvm_type= LLVMFunctionType( fundamental_llvm_types_.void_for_ret_, LLVMTypeRef::Null, 0u, LLVMBool::False );
		halt_function_= LLVMAddFunction( module_, "__U_halt\0"[0], halt_function_llvm_type );
	}
	AddFunctionAttribute( halt_function_, LLVMAttributeFunctionIndex, "noreturn" );
	AddFunctionAttribute( halt_function_, LLVMAttributeFunctionIndex, "nounwind" );

	// prepare debug info
	if( build_debug_info_ )
	{
		unsafe{  debug_info_.builder= LLVMCreateDIBuilder( module_ );  }

		foreach( & node : source_graph.nodes )
		{
			unsafe
			{
				debug_info_.source_file_entries.push_back(
					LLVMDIBuilderCreateFile(
						debug_info_.builder,
						node.file_path_normalized.front(), node.file_path_normalized.size(),
						"\0"c8, 0s ) );
			}
		}

		// TODO - fix this. LLVM C interface doesn't provide any way to specify custom language, so, use default value.
		var LLVMDWARFSourceLanguage c_dwarf_language_id= 0u;

		unsafe
		{
			debug_info_.compile_unit=
				LLVMDIBuilderCreateCompileUnit(
					debug_info_.builder,
					c_dwarf_language_id,
					debug_info_.source_file_entries.front(),
					"\0"c8, 0s, // TODO - set producer
					LLVMBool::False, // TODO - pass "optimized' flag
					"\0"c8, 0s, // Flags
					0u, // Runtime version
					"\0"c8, 0s, // SplitName
					LLVMDWARFEmissionKind::Full,
					0u, // DWOId
					LLVMBool::True, // SplitDebugInlining
					LLVMBool::False // DebugInfoForProfiling
				);
		}
	}

	root_errors_container_= ErrorsContainerPtr( ErrorsContainer() );

	compiled_sources_cache_.resize( source_graph.nodes.size() );
	BuildSourceGraphNode( source_graph, 0s );

	// Finalize incomplete typeinfo.
	for( auto mut i= 0s; i < typeinfo_cache_.size(); ++i )
	{
		unsafe
		{
			auto llvm_type= typeinfo_cache_[i].v.t.GetLLVMType();
			if( LLVMIsOpaqueStruct( llvm_type ) == LLVMBool::True )
			{
				auto dummy_type= LLVMTypeRef::Null;
				LLVMStructSetBody( llvm_type, dummy_type, 0u, LLVMBool::False );

				auto dummy_constant= LLVMValueRef::Null;
				auto initializer= LLVMConstNamedStruct( llvm_type, dummy_constant, 0u );
				LLVMSetInitializer( typeinfo_cache_[i].v.llvm_value, initializer );
			}
		}
	}

	unsafe{  LLVMDeleteFunction( global_llvm_function_ );  }
	global_llvm_function_= LLVMValueRef::Null;

	{ // Clear classes internals to break strong shared pointers loop and avoid memory leaks.
		var NamesScopeMutPtr dummy_class_names_scope( NamesScope( "", ust::shared_ptr_nullable_imut</NamesScope/>() ) );
		foreach( &mut node : compiled_sources_cache_ )
		{
			foreach( &mut class_table_entry : node.class_table )
			{
				ClearClassInternals( class_table_entry.key(), dummy_class_names_scope );
			}
		}

		foreach( & class_type_ptr : typeinfo_class_table_ )
		{
			ClearClassInternals( class_type_ptr, dummy_class_names_scope );
		}
	}

	compiled_sources_cache_.clear();
	generated_template_things_.clear();
	typeinfo_cache_.clear();

	if( debug_info_.builder != LLVMDIBuilderRef::Null )
	{
		unsafe
		{
			LLVMDIBuilderFinalize( debug_info_.builder );
			LLVMDisposeDIBuilder( debug_info_.builder );
		}
		debug_info_.builder= LLVMDIBuilderRef::Null;
		debug_info_.compile_unit= LLVMMetadataRef::Null;
	}

	var BuildResult mut res
	{
		.llvm_module= module_,
		.errors= root_errors_container_.lock_imut().get_ref(),
	 };

	NormalizeErrors( res.errors, source_graph.macro_expansion_contexts.lock_imut().get_ref() );

	root_errors_container_= ErrorsContainerPtr();

	return move(res);
}

fn CodeBuilder::BuildSourceGraphNode( mut this, SourceGraph& source_graph, size_type node_index )
{
	var NamesScopeMutPtr mut global_names_scope( NamesScope( "", ust::shared_ptr_nullable_imut</NamesScope/>() ) );

	{
		auto mut l= global_names_scope.lock_mut();
		auto &mut n= l.get_ref();

		n.SetErrors( root_errors_container_ );
		FillGlobalNamesScope( n );
	}

	var SourceGraph::Node& source_graph_node= source_graph.nodes[node_index];

	// Build dependent nodes.
	foreach( child_node_index : source_graph_node.children )
	{
		if( compiled_sources_cache_[child_node_index].names_scope.empty() )
		{
			BuildSourceGraphNode( source_graph, child_node_index );
		}
	}
	// Prepare class table.
	{
		var ust::unordered_map</ ClassTypePtr, ClassType /> mut tmp_class_table;
		foreach( child_node_index : source_graph_node.children )
		{
			foreach( &class_table_entry : compiled_sources_cache_[child_node_index].class_table )
			{
				if( tmp_class_table.find( class_table_entry.key() ).empty() )
				{
					tmp_class_table.insert( class_table_entry.key(), class_table_entry.value() );
					continue;
				}

				var ClassType &mut prev_class_value= tmp_class_table.find( class_table_entry.key() ).get_ref();
				var ClassType& new_class_value= class_table_entry.value();

				if( !prev_class_value.syntax_element.empty() && !new_class_value.syntax_element.empty() &&
					prev_class_value.syntax_element != new_class_value.syntax_element )
				{
					REPORT_ERROR( ClassBodyDuplication, global_names_scope, new_class_value.syntax_element.get_ref().file_pos, new_class_value.syntax_element.get_ref().name )
				}
				if( !prev_class_value.forward_declaration_syntax_element.empty() && !new_class_value.forward_declaration_syntax_element.empty() &&
					prev_class_value.forward_declaration_syntax_element != new_class_value.forward_declaration_syntax_element )
				{
					// TODO - generate another error
					REPORT_ERROR( ClassBodyDuplication, global_names_scope, new_class_value.syntax_element.get_ref().file_pos, new_class_value.forward_declaration_syntax_element.get_ref().name )
				}

				// Select complete class.
				if( !prev_class_value.is_complete && new_class_value.is_complete )
				{
					prev_class_value= new_class_value;
				}
			}
		}

		foreach( &mut class_table_entry : tmp_class_table )
		{
			current_class_table_.push_back( class_table_entry.key() );

			auto mut lock= class_table_entry.key().lock_mut();
			lock.get_ref()= class_table_entry.value();
		}
	}
	// Merge namespaces. This must be done AFTER class table praparation.
	foreach( child_node_index : source_graph_node.children )
	{
		auto ptr= ust::to_non_nullable( compiled_sources_cache_[child_node_index].names_scope );
		NamesScopeMerge( global_names_scope, ptr.lock_imut().get_ref() );
	}

	auto& program_elements= source_graph_node.synt_result.program_elements;
	NamesScopeFill( global_names_scope, program_elements );
	NamesScopeFillOutOfLineElements( global_names_scope, program_elements );
	NamesScopeBuild( global_names_scope );

	// Finalize building template classes.
	// Save and update keys separately, because "generated_template_things_storage_" may change during iterations.
	{
		var ust::unordered_map</ ust::string8, i32 /> mut generated_template_things_keys;
		foreach( &el : generated_template_things_ )
		{
			generated_template_things_keys.insert( el.key(), 0 );
		}
		auto mut new_generated_template_things_keys= generated_template_things_keys;

		while( !new_generated_template_things_keys.empty() )
		{
			foreach( &el : new_generated_template_things_keys )
			{
				auto names_scope= generated_template_things_.find(el.key()).get_ref();
				NamesScopeBuild( names_scope );
			}

			new_generated_template_things_keys.clear();
			foreach( &el : generated_template_things_ )
			{
				if( generated_template_things_keys.find( el.key() ).empty() )
				{
					generated_template_things_keys.insert( el.key(), 0 );
					new_generated_template_things_keys.insert( el.key(), 0 );
				}
			}
		}
	}

	auto class_table= take(current_class_table_);

	var SourceGraphNodeBuildResult &mut out_node_build_result= compiled_sources_cache_[node_index];
	out_node_build_result.names_scope= move(global_names_scope);

	// Fill class table of current node.
	foreach( &class_type : class_table )
	{
		out_node_build_result.class_table.insert( class_type, class_type.lock_imut().get_ref() );
	}
}

fn CodeBuilder::NamesScopeValueToValue( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, NamesScopeValue& names_scope_value, FilePos& file_pos ) : Value
{
	auto t= names_scope_value.Get</Type/>();
	if( !t.empty() )
	{
		return t.lock_imut().get_ref();
	}

	auto f_ptr= names_scope_value.Get</NamesScopeFunctionsSet/>();
	if( !f_ptr.empty() )
	{
		// In case of access to functions set using function name, build only prototype, not full body.
		BuildFunctionsSet( names_scope, ust::to_non_nullable( f_ptr ), false );

		// Append "this" to functions set of this class.
		auto class_type= names_scope.lock_imut().get_ref().GetClass();
		if( !class_type.empty() &&
			!function_context.this_.empty() &&
			ust::to_non_nullable( class_type ) == function_context.this_.get_ref().t &&
			!function_context.whole_this_is_unavailable )
		{
			var ThisMethodsSet mut this_methods_set
			{
				.this_= function_context.this_.get_ref(),
				.functions_set= f_ptr.lock_imut().get_ref().functions_set,
			};
			return move(this_methods_set);
		}

		return f_ptr.lock_imut().get_ref().functions_set;
	}

	auto var_ptr= names_scope_value.Get</NamesScopeVariable/>();
	if( !var_ptr.empty() )
	{
		auto lock= var_ptr.lock_imut();
		auto& v= lock.get_ref();

		if( v.node_id != ReferencesGraph::c_empty_node_id && function_context.references_graph.NodeIsMoved( v.node_id ) )
		{
			REPORT_ERROR( AccessingMovedVariable, names_scope, file_pos, function_context.references_graph.GetNodeName( v.node_id ) )
		}

		var Variable mut res
		{
			.t= v.t,
			.llvm_value= v.llvm_value,
			.constexpr_value= v.constexpr_value,
			.location= Variable::Location::Pointer,
			.value_type= select( v.is_mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut ),
			.node_id= v.node_id,
		};
		return move(res);
	}

	auto class_field_ptr= names_scope_value.Get</ClassField/>();
	if( !class_field_ptr.empty() )
	{
		auto field_lock= class_field_ptr.lock_imut();
		auto& field= field_lock.get_ref();
		auto& field_name= field.syntax_element.get_ref().name;

		if( field.index == ~0s ){ return ErrorValue(); } // May be in case of error

		if( function_context.this_.empty() )
		{
			REPORT_ERROR( ClassFieldAccessInStaticMethod, names_scope, file_pos, field_name )
			return ErrorValue();
		}

		auto mut this_value_corrected= function_context.this_.get_ref().llvm_value;

		var ClassTypePtr this_class= function_context.this_.get_ref().t.GetClassType().get_ref();
		auto field_source_class= field.source_class.lock();
		var ust::shared_ptr_nullable_imut</ClassType/> mut current_class= this_class;
		while( !current_class.empty() && current_class != field_source_class )
		{
			auto base_class= current_class.lock_imut().get_ref().base_class;
			if( base_class.empty() )
			{
				current_class= ust::shared_ptr_nullable_imut</ClassType/>();
				break;
			}
			this_value_corrected= CreateBaseClassFieldGEP( this_value_corrected, function_context );
			current_class= base_class;
		}

		if( current_class.empty() )
		{
			REPORT_ERROR( AccessOfNonThisClassField, names_scope, file_pos, field_name )
			return ErrorValue();
		}

		if( function_context.whole_this_is_unavailable )
		{
			if( !function_context.uninitialized_this_fields.find( field_name ).empty() ||
				( field_source_class != this_class && !function_context.uninitialized_this_fields.find( KeywordToString( Keyword::base_ ) ).empty() ) )
			{
				REPORT_ERROR( FieldIsNotInitializedYet, names_scope, file_pos, field_name )
			}
		}

		auto op_name_nt= "." + field_name + "\0";
		if( field.is_reference )
		{
			var Variable mut result
			{
				.t= field.t,
				.location= Variable::Location::Pointer,
				.value_type= select( field.is_mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut ),
			};

			auto ptr_value= CreateFieldGEP( this_value_corrected, field, function_context );
			unsafe{  result.llvm_value= LLVMBuildLoad( function_context.llvm_ir_builder, ptr_value, op_name_nt.front() );  }

			auto node_id= function_context.this_.get_ref().node_id;
			if( node_id != ReferencesGraph::c_empty_node_id )
			{
				var ust::string8 mut node_name= function_context.references_graph.GetNodeName( node_id );
				node_name+= ".";
				node_name+= field.syntax_element.get_ref().name;
				auto reference_field_node= function_context.references_graph.AddNode(
					select( field.is_mutable ? ReferencesGraph::NodeKind::ReferenceMut : ReferencesGraph::NodeKind::ReferenceImut ),
					move(node_name) );
				result.node_id= reference_field_node;

				foreach( &inner_node_value : function_context.references_graph.GetAllAccessibleVariableInnerNodes( node_id ) )
				{
					var ReferencesGraph::NodeId inner_node= inner_node_value.key();
					if( (  field.is_mutable && function_context.references_graph.HaveOutgoingLinks( inner_node ) ) ||
						( !field.is_mutable && function_context.references_graph.HaveOutgoingMutableNodes( inner_node ) ) )
					{
						REPORT_ERROR( ReferenceProtectionError, names_scope, file_pos, function_context.references_graph.GetNodeName( inner_node ) )
					}
					else
					{
						function_context.references_graph.AddLink( inner_node, reference_field_node );
					}
				}

				// Register variable for references checking.
				var NamesScopeVariable mut names_scope_variable
				{
					.t= result.t,
					.is_mutable= field.is_mutable,
					.llvm_value= result.llvm_value,
					.constexpr_value= result.constexpr_value,
					.node_id= reference_field_node,
				};
				function_context.variables_frames.back().push_back( move(names_scope_variable) );
			}

			return move(result);
		}
		else
		{
			var Variable mut result
			{
				.t= field.t,
				.location= Variable::Location::Pointer,
				.value_type= function_context.this_.get_ref().value_type,
				.llvm_value= CreateFieldGEP( this_value_corrected, field, function_context ),
				.node_id= function_context.this_.get_ref().node_id,
			};

			if( !field.is_mutable )
			{
				result.value_type= ValueType::ReferenceImut;
			}

			return move(result);
		}
	}

	auto class_type_ptr= names_scope_value.Get</ClassType/>();
	if( !class_type_ptr.empty() )
	{
		auto ptr_non_null= ust::to_non_nullable(class_type_ptr);
		return Type( ptr_non_null );
	}

	auto enum_type_ptr= names_scope_value.Get</Enum/>();
	if( !enum_type_ptr.empty() )
	{
		auto ptr_non_null= ust::to_non_nullable(enum_type_ptr);
		BuildEnum( names_scope, ptr_non_null );
		return Type( ptr_non_null );
	}

	auto type_alias_ptr= names_scope_value.Get</TypeAlias/>();
	if( !type_alias_ptr.empty() )
	{
		BuildTypeAlias( names_scope, ust::to_non_nullable(type_alias_ptr) );

		if_var( &t : type_alias_ptr.lock_imut().get_ref().t )
		{
			return t;
		}
	}

	auto global_variable_ptr= names_scope_value.Get</GlobalVariable/>();
	if( !global_variable_ptr.empty() )
	{
		BuildGlobalVariable( names_scope, ust::to_non_nullable(global_variable_ptr) );

		if_var( &v : global_variable_ptr.lock_imut().get_ref().variable )
		{
			var Variable mut res
			{
				.t= v.t,
				.llvm_value= v.llvm_value,
				.constexpr_value= v.constexpr_value,
				.location= Variable::Location::Pointer,
				.value_type= select( v.is_mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut ),
			};
			return move(res);
		}
	}

	auto global_auto_variable_ptr= names_scope_value.Get</GlobalAutoVariable/>();
	if( !global_auto_variable_ptr.empty() )
	{
		BuildGlobalAutoVariable( names_scope, ust::to_non_nullable(global_auto_variable_ptr) );

		if_var( &v : global_auto_variable_ptr.lock_imut().get_ref().variable )
		{
			var Variable mut res
			{
				.t= v.t,
				.llvm_value= v.llvm_value,
				.constexpr_value= v.constexpr_value,
				.location= Variable::Location::Pointer,
				.value_type= select( v.is_mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut ),
			};
			return move(res);
		}
	}

	auto template_arg_ptr= names_scope_value.Get</TemplateArg/>();
	if( !template_arg_ptr.empty() )
	{
		auto template_arg_lock= template_arg_ptr.lock_imut();
		auto& template_arg= template_arg_lock.get_ref();
		if_var( &t : template_arg.something.get</Type/>() )
		{
			return t;
		}
		if_var( &v : template_arg.something.get</NamesScopeVariable/>() )
		{
			var Variable mut res
			{
				.t= v.t,
				.llvm_value= v.llvm_value,
				.constexpr_value= v.constexpr_value,
				.location= Variable::Location::Pointer,
				.value_type= select( v.is_mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut ),
			};
			return move(res);
		}
		REPORT_ERROR( TemplateArgumentIsNotDeducedYet, names_scope, FilePos(), ust::string8("TODO - name" ) )
	}

	auto type_templates_set_ptr= names_scope_value.Get</TypeTemplatesSet/>();
	if( !type_templates_set_ptr.empty() )
	{
		return ust::shared_ptr_imut</TypeTemplatesSet/>( ust::to_non_nullable( type_templates_set_ptr ) );
	}

	return ErrorValue();
}

fn CodeBuilder::ResolveValue( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::ComplexName& complex_name ) : Value
{
	return ResolveValue( names_scope, function_context, complex_name, false );
}

fn CodeBuilder::ResolveValue(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	Synt::ComplexName& complex_name,
	bool skip_last_template_args ) : Value
{
	var ust::shared_ptr_nullable_imut</NamesScope/> mut current_scope(names_scope);

	var ust::optional</NamesScopeValue/> mut current_value;
	if( !complex_name.start.get</Synt::EmptyVariant/>().empty() ) // ::
	{
		while( true )
		{
			auto parent= current_scope.lock_imut().get_ref().GetParent();
			if( parent.empty() )
			{
				break;
			}
			current_scope= parent;
		}

		if_var( mut names_scope_value : current_scope.lock_imut().get_ref().GetThisScopeValue( complex_name.tail.front().get</ust::string8/>().get_ref() ) )
		{
			current_value= move(names_scope_value);
		}
	}
	else if( !complex_name.start.get</Synt::Typeof/>().empty() )
	{
		var VariablesFrameHolder temp_variables_frame_hodler(function_context);
		auto& mut function_context= temp_variables_frame_hodler.GetFunctionContext();

		auto instructions_state= SaveInstructionsState( function_context );
		var Variable variable= BuildExpressionCodeEnsureVariable( names_scope, function_context, complex_name.start.get</Synt::Typeof/>().get_ref().expr.get_ref() );
		RestoreInstructionsState( function_context, instructions_state );

		current_value= NamesScopeValue( variable.t );
	}
	else
	{
		var ust::string8& start_name= complex_name.start.get</ust::string8/>().get_ref();
		while( !current_scope.empty() )
		{
			if_var( mut names_scope_value : current_scope.lock_imut().get_ref().GetThisScopeValue( start_name ) )
			{
				current_value= move(names_scope_value);
				break;
			}
			current_scope= current_scope.lock_imut().get_ref().GetParent();
		}

		if( start_name == KeywordToString( Keyword::constructor_ ) ||
			start_name == KeywordToString( Keyword::destructor_ ) )
		{
			if( !function_context.is_in_unsafe_block )
			{
				REPORT_ERROR( ExplicitAccessToThisMethodIsUnsafe, names_scope, complex_name.file_pos, start_name )
			}
		}
	}

	if( current_value.empty() )
	{
		REPORT_ERROR( NameNotFound, names_scope, complex_name.file_pos, complex_name )
		return ErrorValue();
	}

	// TOOD - simplify this. After first component lookup do not use optional for "current_value" and nullable pointer for "current_scope"

	for( auto mut i= select( complex_name.start.get</Synt::EmptyVariant/>().empty() ? 0s : 1s ); i < complex_name.tail.size(); ++i )
	{
		auto& name_component= complex_name.tail[i];
		if_var( &name_component_name : name_component.get</ ust::string8 />() )
		{
			var ust::shared_ptr_nullable_imut</NamesScope/> mut namespace_= current_value.get_ref().Get</NamesScope/>();
			auto mut class_= current_value.get_ref().Get</ClassType/>();
			auto mut enum_= current_value.get_ref().Get</Enum/>();
			auto type_templates_set= current_value.get_ref().Get</TypeTemplatesSet/>();
			auto t= current_value.get_ref().Get</Type/>();
			auto type_alias= current_value.get_ref().Get</TypeAlias/>();
			auto template_arg= current_value.get_ref().Get</TemplateArg/>();

			if( !t.empty() )
			{
				auto lock= t.lock_imut();
				if_var( &class_type : lock.get_ref().GetClassType() )
				{
					class_= class_type;
				}
				if_var( &enum_type : lock.get_ref().GetEnumType() )
				{
					enum_= enum_type;
				}
			}
			if( !type_alias.empty() )
			{
				BuildTypeAlias( names_scope, ust::to_non_nullable(type_alias) );

				if_var( &t : type_alias.lock_imut().get_ref().t )
				{
					if_var( &class_type : t.GetClassType() )
					{
						class_= class_type;
					}
					if_var( &enum_type : t.GetEnumType() )
					{
						enum_= enum_type;
					}
				}
			}
			if( !template_arg.empty() )
			{
				if_var( &t : template_arg.lock_imut().get_ref().something.get</Type/>() )
				{
					if_var( &class_type : t.GetClassType() )
					{
						class_= class_type;
					}
					if_var( &enum_type : t.GetEnumType() )
					{
						enum_= enum_type;
					}
				}
			}

			if( !class_.empty() )
			{
				// We need to build class here, because class internal namespace may be filled in build process in case of inheritance.
				// TODO - maybe not build it here if class have no parents?
				BuildClass( ust::to_non_nullable(current_scope), ust::to_non_nullable( class_ ) );

				auto class_lock= class_.lock_imut();
				auto& class_ref= class_lock.get_ref();
				namespace_= class_ref.members;

				if( u32( names_scope.lock_imut().get_ref().GetAccessFor( ust::to_non_nullable(class_) ) ) <
					u32( class_ref.GetMemberVisibility( name_component_name ) ) )
				{
					REPORT_ERROR( AccessingNonpublicClassMember, names_scope, complex_name.file_pos, name_component_name, Type(ust::to_non_nullable(class_)).ToString() )
				}
			}

			if( !namespace_.empty() )
			{
				auto namespace_lock= namespace_.lock_imut();
				auto new_value= namespace_lock.get_ref().GetThisScopeValue( name_component_name );
				if( new_value.empty() )
				{
					REPORT_ERROR( NameNotFound, names_scope, complex_name.file_pos, name_component_name )
					return ErrorValue();
				}

				current_value.get_ref()= new_value.get_ref();
				current_scope= namespace_;
			}
			else if( !enum_.empty() )
			{
				auto enum_non_null= ust::to_non_nullable(enum_);
				BuildEnum( ust::to_non_nullable(current_scope), enum_non_null );

				auto lock= enum_.lock_imut();

				auto element= lock.get_ref().elements.find( name_component_name );
				if( element.empty() )
				{
					REPORT_ERROR( NameNotFound, names_scope, complex_name.file_pos, name_component_name )
					return ErrorValue();
				}

				var NamesScopeVariable mut v
				{
					.t= enum_non_null,
					.is_mutable= false,
					.llvm_value= element.get_ref().llvm_value,
					.constexpr_value= element.get_ref().constexpr_value,
				};

				current_value= move(v);
			}
			else if( !type_templates_set.empty() )
			{
				REPORT_ERROR( TemplateInstantiationRequired, names_scope, complex_name.file_pos, name_component_name )
				return ErrorValue();
			}
			else
			{
				REPORT_ERROR( NameNotFound, names_scope, complex_name.file_pos, name_component_name ) // TODO -print more relevant error
				return ErrorValue();
			}

			if( name_component_name == KeywordToString( Keyword::constructor_ ) ||
				name_component_name == KeywordToString( Keyword::destructor_ ) )
			{
				if( !function_context.is_in_unsafe_block )
				{
					REPORT_ERROR( ExplicitAccessToThisMethodIsUnsafe, names_scope, complex_name.file_pos, name_component_name )
				}
			}
		}
		if_var( &template_args : name_component.get</ ust::box</Synt::TemplateArgs/> />() )
		{
			auto type_templates_set= current_value.get_ref().Get</TypeTemplatesSet/>();
			auto functions_set= current_value.get_ref().Get</NamesScopeFunctionsSet/>();
			if( !type_templates_set.empty() )
			{
				BuiltTypeTemplatesSet( ust::to_non_nullable(current_scope), ust::to_non_nullable(type_templates_set) );

				if( skip_last_template_args && i + 1s == complex_name.tail.size()  )
				{
					break;
				}

				auto generated_type= GenTemplateType(
					names_scope,
					function_context,
					ust::to_non_nullable(type_templates_set),
					template_args.get_ref(),
					complex_name.file_pos );
				if( !generated_type.empty() )
				{
					current_value.get_ref()= generated_type.get_ref();
					if_var( generated_class : generated_type.get_ref().GetClassType() )
					{
						current_value= NamesScopeValue( generated_class );
						current_scope= generated_class.lock_imut().get_ref().members;
					}
				}
				else
				{
					return ErrorValue();
				}
			}
			else if( !functions_set.empty() )
			{
				BuildFunctionsSet( ust::to_non_nullable(current_scope), ust::to_non_nullable( functions_set ), false );
				auto lock= functions_set.lock_imut();
				auto& f= lock.get_ref();

				if( f.functions_set.function_templates.empty() )
				{
					REPORT_ERROR( ValueIsNotTemplate, names_scope, complex_name.file_pos )
					return ErrorValue();
				}

				current_value=
					ParametrizeTemplateFunctions(
						names_scope,
						function_context,
						f.functions_set,
						template_args.get_ref(),
						complex_name.file_pos );
				if( current_value.empty() )
				{
					return ErrorValue();
				}
			}
			else
			{
				REPORT_ERROR( ValueIsNotTemplate, names_scope, complex_name.file_pos )
				return ErrorValue();
			}
		}
	}

	{
		auto template_arg_ptr= current_value.get_ref().Get</TemplateArg/>();
		if( !template_arg_ptr.empty() )
		{
			auto template_arg_lock= template_arg_ptr.lock_imut();
			auto& template_arg= template_arg_lock.get_ref();
			if( !template_arg.something.get</TemplateArg::NotKnownYet/>().empty() )
			{
				REPORT_ERROR( TemplateArgumentIsNotDeducedYet, names_scope, complex_name.file_pos, complex_name )
				return ErrorValue();
			}
		}
	}

	return NamesScopeValueToValue( ust::to_non_nullable(current_scope), function_context, current_value.get_ref(), complex_name.file_pos );
}

fn CodeBuilder::FillGlobalNamesScope( this, NamesScope &mut names_scope )
{
	var [ tup[ Keyword, U_FundamentalType ], 17 ] constexpr types_table
	[
		[ Keyword::void_, U_FundamentalType::void_ ],
		[ Keyword::bool_, U_FundamentalType::bool_ ],
		[ Keyword::i8_  , U_FundamentalType::i8_   ],
		[ Keyword::u8_  , U_FundamentalType::u8_   ],
		[ Keyword::i16_ , U_FundamentalType::i16_  ],
		[ Keyword::u16_ , U_FundamentalType::u16_  ],
		[ Keyword::i32_ , U_FundamentalType::i32_  ],
		[ Keyword::u32_ , U_FundamentalType::u32_  ],
		[ Keyword::i64_ , U_FundamentalType::i64_  ],
		[ Keyword::u64_ , U_FundamentalType::u64_  ],
		[ Keyword::i128_, U_FundamentalType::i128_ ],
		[ Keyword::u128_, U_FundamentalType::u128_ ],
		[ Keyword::f32_ , U_FundamentalType::f32_  ],
		[ Keyword::f64_ , U_FundamentalType::f64_  ],
		[ Keyword::char8_ , U_FundamentalType::char8_  ],
		[ Keyword::char16_, U_FundamentalType::char16_ ],
		[ Keyword::char32_, U_FundamentalType::char32_ ],
	];

	foreach( &el : types_table )
	{
		names_scope.AddName( KeywordToString( el[0] ), Type( FundamentalType( el[1], GetFundamentalLLVMType(el[1]) ) ) );
	}

	names_scope.AddName( KeywordToString(Keyword::size_type_), size_type_ );
}

fn CodeBuilder::PrepareFunction(
	mut this,
	ust::shared_ptr_final</Synt::Function/>& function_declaration_ptr,
	NamesScopePtr& names_scope_ptr,
	ust::shared_ptr_nullable_mut</ClassType/>& class_type,
	FunctionsSet &mut functions_set,
	bool is_out_of_line_function ) : bool
{
	auto& function_declaration= function_declaration_ptr.get_ref();
	auto& func_name= function_declaration.name.back();

	if( !function_declaration.constructor_initializer_list.empty() && func_name != KeywordToString( Keyword::constructor_ ) )
	{
		REPORT_ERROR( InitializationListInNonconstructor, names_scope_ptr, function_declaration.constructor_initializer_list.get_ref().file_pos )
	}

	// TODO - maybe clear global constext after it's usage?
	auto mut global_function_context= CreateGlobalFunctionContext();

	// enable_if
	if( !function_declaration.condition.empty() )
	{
		auto& expr= function_declaration.condition.get_ref();
		auto condition_variable= BuildExpressionCodeEnsureVariable( names_scope_ptr, global_function_context, expr );
		if( condition_variable.t == bool_type_ )
		{
			if( condition_variable.constexpr_value != LLVMValueRef::Null )
			{
				unsafe
				{
					if( LLVMConstIntGetZExtValue( condition_variable.constexpr_value ) == 0u64 ) { return true; /* Function disabled */ }
				}
			}
			else
			{
				REPORT_ERROR( ExpectedConstantExpression, names_scope_ptr, Synt::GetFilePos( expr ) )
			}
		}
		else
		{
			REPORT_ERROR( TypesMismatch, names_scope_ptr, Synt::GetFilePos( expr ), bool_type_, condition_variable.t )
		}
	}

	var FunctionVariable mut function_variable
	{
		.t= PrepareFunctionType( names_scope_ptr, global_function_context, function_declaration.function_type, class_type )
	};
	if( function_declaration.block.empty() )
	{
		function_variable.prototype_syntax_element= function_declaration_ptr;
	}
	else
	{
		function_variable.body_syntax_element= function_declaration_ptr;
	}

	function_variable.is_this_call=
		!function_declaration.function_type.params.empty() &&
		function_declaration.function_type.params.front().name == KeywordToString( Keyword::this_ );

	auto is_constructor= func_name == KeywordToString( Keyword::constructor_ );
	auto is_destructor = func_name == KeywordToString( Keyword::destructor_  );

	function_variable.is_constructor= is_constructor;
	{
		auto& function_type= function_variable.t;
		if( ( is_constructor || is_destructor ) &&
			!(function_type.return_type == void_type_ && !function_type.return_value_is_reference ) )
		{
			REPORT_ERROR( ConstructorAndDestructorMustReturnVoid, names_scope_ptr, function_declaration.file_pos )
		}
		if( is_destructor && function_type.params.size() > 1s )
		{
			REPORT_ERROR( ExplicitArgumentsInDestructor, names_scope_ptr, function_declaration.file_pos )
		}

		CheckOverloadedOperator( class_type, function_type, function_declaration.operator, names_scope_ptr, function_declaration.file_pos );
	}

	// Check conversion constructor.
	if( function_declaration.is_conversion_constructor )
	{
		if( function_variable.t.params.size() == 2s )
		{
			function_variable.is_conversion_constructor= true;
		}
		else
		{
			REPORT_ERROR( ConversionConstructorMustHaveOneArgument, names_scope_ptr, function_declaration.file_pos )
		}
	}

	// Setup references pollution for copy methods.
	if( !class_type.empty() )
	{
		auto class_type_non_null= ust::to_non_nullable( class_type );
		if( ( is_constructor && IsCopyConstructor( function_variable, class_type_non_null ) ) ||
			( function_declaration.operator == OverloadedOperator::Assign && IsCopyAssignmentOperator( function_variable, class_type_non_null ) ) )
		{
			if( !function_declaration.function_type.references_pollution.empty() )
			{
				if( is_constructor )
				{
					REPORT_ERROR( ExplicitReferencePollutionForCopyConstructor, names_scope_ptr, function_declaration.file_pos )
				}
				else
				{
					REPORT_ERROR( ExplicitReferencePollutionForCopyAssignmentOperator, names_scope_ptr, function_declaration.file_pos )
				}
				function_variable.t.references_pollution.clear();
			}

			var FunctionType::ReferencePollution mut pollution
			{
				.dst{ .param_index= 0u8, .reference_index= 0u8 },
				.src{ .param_index= 1u8, .reference_index= 0u8 },
			};
			function_variable.t.references_pollution.push_back( move(pollution) );
		}
	}

	if( function_declaration.constexpr_ )
	{
		if( function_declaration.block.empty() )
		{
			REPORT_ERROR( ConstexprFunctionsMustHaveBody, names_scope_ptr, function_declaration.file_pos )
		}
		else if( function_declaration.virtual_kind != Synt::Function::VirtualKind::None )
		{
			REPORT_ERROR( ConstexprFunctionCanNotBeVirtual, names_scope_ptr, function_declaration.file_pos )
		}
		else
		{
			function_variable.constexpr_kind= FunctionVariable::ConstexprKind::ConstexprIncomplete;
		}
	}

	if( function_declaration.virtual_kind != Synt::Function::VirtualKind::None )
	{
		if( class_type.empty() )
		{
			REPORT_ERROR( VirtualForNonclassFunction, names_scope_ptr, function_declaration.file_pos, func_name )
		}
		if( !function_variable.is_this_call )
		{
			REPORT_ERROR( VirtualForNonThisCallFunction, names_scope_ptr, function_declaration.file_pos, func_name )
		}
		if( is_constructor )
		{
			REPORT_ERROR( FunctionCanNotBeVirtual, names_scope_ptr, function_declaration.file_pos, func_name )
		}
		if( !class_type.empty() )
		{
			auto class_lock= class_type.lock_imut();
			auto& class_ref= class_lock.get_ref();
			if( class_ref.kind == ClassType::Kind::Struct || class_ref.kind == ClassType::Kind::NonPolymorph )
			{
				REPORT_ERROR( VirtualForNonpolymorphClass, names_scope_ptr, function_declaration.file_pos, func_name )
			}
		}
		if( is_out_of_line_function )
		{
			REPORT_ERROR( VirtualForFunctionImplementation, names_scope_ptr, function_declaration.file_pos, func_name )
		}
	}

	// Check "=default" / "=delete".
	if( function_declaration.body_kind != Synt::Function::BodyKind::Regular )
	{
		var bool mut invalid_func= false;

		if( class_type.empty() ){ invalid_func= true; }
		else
		{
			auto class_type_non_null= ust::to_non_nullable( class_type );
			if( is_constructor && ( IsDefaultConstructor( function_variable, class_type_non_null ) || IsCopyConstructor( function_variable, class_type_non_null ) ) )
			{}
			else if( function_declaration.operator == OverloadedOperator::Assign && IsCopyAssignmentOperator( function_variable, class_type_non_null ) )
			{}
			else{ invalid_func= true; }
		}

		if( invalid_func )
		{
			REPORT_ERROR( InvalidMethodForBodyGeneration, names_scope_ptr, function_declaration.file_pos )
		}
		else
		{
			select( function_declaration.body_kind == Synt::Function::BodyKind::BodyGenerationRequired ? function_variable.is_generated : function_variable.is_deleted )= true;
		}
	}

	if( function_declaration.no_mangle )
	{
		if( names_scope_ptr.lock_imut().get_ref().GetParent().empty() )
		{
			function_variable.no_mangle= true;
		}
		else
		{
			REPORT_ERROR( NoMangleForNonglobalFunction, names_scope_ptr, function_declaration.file_pos, func_name )
		}
	}

	if_var( &mut prev_function : GetFunctionWithSameType( functions_set, function_variable.t ) )
	{
		if( prev_function.prototype_syntax_element.empty() )
		{
			prev_function.prototype_syntax_element= function_variable.prototype_syntax_element;
		}
		else if( !function_variable.prototype_syntax_element.empty() )
		{
			REPORT_ERROR(
				FunctionPrototypeDuplication,
				names_scope_ptr,
				ust::max( function_declaration.file_pos, prev_function.prototype_syntax_element.get_ref().file_pos ),
				func_name )
			return false;
		}

		if( prev_function.body_syntax_element.empty() )
		{
			prev_function.body_syntax_element= function_variable.body_syntax_element;
		}
		else if( !function_variable.body_syntax_element.empty() )
		{
			REPORT_ERROR(
				FunctionBodyDuplication,
				names_scope_ptr,
				ust::max( function_declaration.file_pos, prev_function.body_syntax_element.get_ref().file_pos ),
				func_name )
			return false;
		}

		if( prev_function.is_this_call != function_variable.is_this_call )
		{
			REPORT_ERROR( ThiscallMismatch, names_scope_ptr, function_declaration.file_pos, func_name )
			return false;
		}

		if( !is_out_of_line_function &&
			!prev_function.body_syntax_element.empty() && !prev_function.prototype_syntax_element.empty() &&
			prev_function.body_syntax_element.get_ref().virtual_kind != prev_function.prototype_syntax_element.get_ref().virtual_kind )
		{
			REPORT_ERROR( VirtualMismatch, names_scope_ptr, prev_function.body_syntax_element.get_ref().file_pos, func_name )
			return false;
		}
		if( !prev_function.body_syntax_element.empty() && !prev_function.prototype_syntax_element.empty() &&
			prev_function.prototype_syntax_element.get_ref().virtual_kind == Synt::Function::VirtualKind::VirtualPure )
		{
			REPORT_ERROR( BodyForPureVirtualFunction, names_scope_ptr, prev_function.body_syntax_element.get_ref().file_pos, func_name )
			return false;
		}

		if( prev_function.is_deleted != function_variable.is_deleted )
		{
			REPORT_ERROR( BodyForDeletedFunction, names_scope_ptr, prev_function.prototype_syntax_element.get_ref().file_pos, func_name )
			return false;
		}
		if( prev_function.is_generated != function_variable.is_generated )
		{
			REPORT_ERROR( BodyForGeneratedFunction, names_scope_ptr, prev_function.prototype_syntax_element.get_ref().file_pos, func_name )
			return false;
		}

		if( prev_function.no_mangle != function_variable.no_mangle )
		{
			REPORT_ERROR( NoMangleMismatch, names_scope_ptr, function_declaration.file_pos, func_name )
			return false;
		}

		if( prev_function.is_conversion_constructor != function_variable.is_conversion_constructor )
		{
			// TODO -use separate error code
			REPORT_ERROR( NotImplemented, names_scope_ptr, function_declaration.file_pos, ust::string8("changing conversion constructor name") )
			return false;
		}

		return true;
	}

	if( is_out_of_line_function )
	{
		REPORT_ERROR( FunctionDeclarationOutsideItsScope, names_scope_ptr, function_declaration.file_pos )
		return false;
	}


	var ust::string8 mut llvm_function_name;
	if( function_variable.no_mangle )
	{
		llvm_function_name= func_name + "\0";
	}
	else
	{
		llvm_function_name=
			MangleFunction(
				names_scope_ptr.lock_imut().get_ref(),
				func_name,
				function_variable.t );
	}

	unsafe
	{
		function_variable.llvm_function=
			LLVMAddFunction(
				module_,
				llvm_function_name.front(),
				function_variable.t.llvm_type );
	}

	return ApplyOverloadedFunction( functions_set, move(function_variable), names_scope_ptr, function_declaration.file_pos );
}

fn CodeBuilder::CheckOverloadedOperator(
	this,
	ust::shared_ptr_nullable_mut</ClassType/>& class_type,
	FunctionType& func_type,
	OverloadedOperator operator,
	NamesScopePtr& names_scope,
	FilePos& file_pos )
{
	if( operator == OverloadedOperator::None ) { return; } // Non-operator

	if( class_type.empty() )
	{
		REPORT_ERROR( OperatorDeclarationOutsideClass, names_scope, file_pos )
		return;
	}

	auto class_type_non_null= ust::to_non_nullable( class_type );

	auto mut is_this_class= false;
	foreach( & param : func_type.params )
	{
		if( param.t == class_type_non_null )
		{
			is_this_class= true;
			break;
		}
	}

	if( !is_this_class )
	{
		REPORT_ERROR( OperatorDoesNotHaveParentClassArguments, names_scope, file_pos )
	}

	auto ret_is_void=
		( func_type.return_type == void_type_ || func_type.return_type == void_type_for_ret_ ) &&
		!func_type.return_value_is_reference;

	if( operator == OverloadedOperator::Add ||
		operator == OverloadedOperator::Sub )
	{
		if( !( func_type.params.size() == 1s || func_type.params.size() == 2s ) )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, file_pos )
		}
	}
	else
	if( operator == OverloadedOperator::Mul ||
		operator == OverloadedOperator::Div ||
		operator == OverloadedOperator::Rem ||
		operator == OverloadedOperator::And ||
		operator == OverloadedOperator::Or  ||
		operator == OverloadedOperator::Xor ||
		operator == OverloadedOperator::ShiftLeft  ||
		operator == OverloadedOperator::ShiftRight )
	{
		if( func_type.params.size() != 2s )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, file_pos )
		}
	}
	else
	if( operator == OverloadedOperator::AssignAdd ||
		operator == OverloadedOperator::AssignSub ||
		operator == OverloadedOperator::AssignMul ||
		operator == OverloadedOperator::AssignDiv ||
		operator == OverloadedOperator::AssignRem ||
		operator == OverloadedOperator::AssignAnd ||
		operator == OverloadedOperator::AssignOr  ||
		operator == OverloadedOperator::AssignXor ||
		operator == OverloadedOperator::AssignShiftLeft  ||
		operator == OverloadedOperator::AssignShiftRight ||
		operator == OverloadedOperator::Assign )
	{
		if( func_type.params.size() != 2s )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, file_pos )
		}
		if( !ret_is_void )
		{
			REPORT_ERROR( InvalidReturnTypeForOperator, names_scope, file_pos, void_type_ )
		}
	}
	else
	if( operator == OverloadedOperator::Equal     ||
		operator == OverloadedOperator::NotEqual  ||
		operator == OverloadedOperator::Less      ||
		operator == OverloadedOperator::LessEqual ||
		operator == OverloadedOperator::Greater   ||
		operator == OverloadedOperator::GreaterEqual )
	{
		if( func_type.params.size() != 2s )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, file_pos )
		}
		if( !( func_type.return_type == bool_type_ && !func_type.return_value_is_reference ) )
		{
			REPORT_ERROR( InvalidReturnTypeForOperator, names_scope, file_pos, void_type_ )
		}
	}
	else
	if( operator == OverloadedOperator::LogicalNot ||
		operator == OverloadedOperator::BitwiseNot )
	{
		if( func_type.params.size() != 1s )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, file_pos )
		}
	}
	else
	if( operator == OverloadedOperator::Increment ||
		operator == OverloadedOperator::Decrement )
	{
		if( func_type.params.size() != 1s )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, file_pos )
		}
		if( !ret_is_void )
		{
			REPORT_ERROR( InvalidReturnTypeForOperator, names_scope, file_pos, void_type_ )
		}
	}
	else if( operator == OverloadedOperator::Indexing )
	{
		if( func_type.params.size() != 2s )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, file_pos )
		}
		// Indexing operator must have first argument of parent class.
		if( !func_type.params.empty() && func_type.params.front().t != class_type_non_null )
		{
			REPORT_ERROR( OperatorDoesNotHaveParentClassArguments, names_scope, file_pos )
		}
		// TODO - maybe also disable non-this-call indexing operator?
	}
	else if( operator == OverloadedOperator::Call )
	{
		if( func_type.params.empty() )
		{
			REPORT_ERROR( InvalidArgumentCountForOperator, names_scope, file_pos )
		}
		// Call operator must have first argument of parent class.
		if( !func_type.params.empty() && func_type.params.front().t != class_type_non_null )
		{
			REPORT_ERROR( OperatorDoesNotHaveParentClassArguments, names_scope, file_pos )
		}
		// TODO - maybe also disable non-this-call call operator?
	}
}

fn CodeBuilder::BuildFuncCode( mut this, NamesScopePtr& names_scope, FunctionVariable &mut func_variable )
{
	if( func_variable.body_syntax_element.empty() )
	{
		return;
	}
	unsafe
	{
		if( LLVMCountBasicBlocks( func_variable.llvm_function ) != 0u )
		{
			return; // Body already exists
		}
	}

	SetupLLVMFunctionAttributes( names_scope.lock_imut().get_ref(), func_variable );

	CreateFunctionDebugInfo( func_variable );

	var FunctionContext mut function_context_value(
		llvm_context_,
		func_variable.llvm_function,
		func_variable.t );

	var NamesScopeMutPtr args_names_scope_ptr( NamesScope( "", names_scope ) );

	var VariablesFrameHolder args_variables_frame_hodler(function_context_value);
	auto& mut function_context= args_variables_frame_hodler.GetFunctionContext();

	// TODO - maybe forbid incomplete types even for references?
	if( !func_variable.t.return_value_is_reference && !EnsureTypeComplete( func_variable.t.return_type ) )
	{
		REPORT_ERROR( UsingIncompleteType, names_scope, func_variable.body_syntax_element.get_ref().file_pos, func_variable.t.return_type )
	}

	{
		auto mut args_names_scope_lock= args_names_scope_ptr.lock_mut();
		auto &mut args_names_scope= args_names_scope_lock.get_ref();

		auto is_s_ret= !func_variable.t.return_value_is_reference && ( !func_variable.t.return_type.GetClassType().empty() || !func_variable.t.return_type.GetTupleType().empty() );
		if( is_s_ret )
		{
			AddFunctionAttribute( func_variable.llvm_function, LLVMAttributeFirstParamIndex, "sret" );
			unsafe
			{
				function_context.s_ret= LLVMGetParam( func_variable.llvm_function, 0u );
				var ust::array_view_imut</ char8 /> param_name= "_return_value";
				LLVMSetValueName2( function_context.s_ret, param_name.front(), param_name.size() );
			}
		}

		auto first_llvm_arg= select( is_s_ret ? 1u : 0u );
		function_context.args_nodes.resize( func_variable.t.params.size(), ReferencesGraph::c_empty_node_id );
		function_context.args_inner_variable_nodes.resize( func_variable.t.params.size(), ReferencesGraph::c_empty_node_id );
		for( auto mut arg_n= 0s; arg_n < func_variable.t.params.size(); ++arg_n )
		{
			auto& in_param= func_variable.body_syntax_element.get_ref().function_type.params[arg_n];
			auto& type_arg= cast_imut(func_variable).t.params[arg_n];
			var u32 llvm_arg_n= first_llvm_arg + u32(arg_n);

			var NamesScopeVariable mut out_arg
			{
				.t= type_arg.t,
				.is_mutable= type_arg.is_mutable,
			};

			// Ensure type completness even for reference args because of reference checking.
			if( !EnsureTypeComplete( out_arg.t ) || ( !type_arg.is_reference && out_arg.t == void_type_ ) )
			{
				REPORT_ERROR( UsingIncompleteType, names_scope, in_param.file_pos, out_arg.t )
				return;
			}

			var ReferencesGraph::NodeId mut inner_reference_variable_node_id= ReferencesGraph::c_empty_node_id;
			if( type_arg.t.GetInnerReferenceKind() != InnerReferenceKind::None )
			{
				inner_reference_variable_node_id= function_context.references_graph.AddNode( ReferencesGraph::NodeKind::Variable, in_param.name + " inner variable" );
				function_context.args_inner_variable_nodes[arg_n]= inner_reference_variable_node_id;
			}

			if( type_arg.is_reference )
			{
				unsafe
				{
					auto arg_value= LLVMGetParam( func_variable.llvm_function, llvm_arg_n );
					LLVMSetValueName2( arg_value, in_param.name.front(), in_param.name.size() );
					out_arg.llvm_value= arg_value;
				}

				// Create variable node and reference node for it.
				var ReferencesGraph::NodeId variable_node_id= function_context.references_graph.AddNode( ReferencesGraph::NodeKind::Variable, in_param.name + " variable" );

				if( inner_reference_variable_node_id != ReferencesGraph::c_empty_node_id )
				{
					auto inner_reference_node= function_context.references_graph.CreateNodeInnerReference(
						variable_node_id,
						select( type_arg.t.GetInnerReferenceKind() == InnerReferenceKind::Mut ? ReferencesGraph::NodeKind::ReferenceMut : ReferencesGraph::NodeKind::ReferenceImut ) );
					function_context.references_graph.AddLink( inner_reference_variable_node_id, inner_reference_node );
				}

				out_arg.node_id= function_context.references_graph.AddNode(
					select( type_arg.is_mutable ? ReferencesGraph::NodeKind::ReferenceMut : ReferencesGraph::NodeKind::ReferenceImut ),
					in_param.name );
				function_context.references_graph.AddLink( variable_node_id, out_arg.node_id );

				function_context.args_nodes[arg_n]= variable_node_id;
			}
			else
			{
				if( !out_arg.t.GetClassType().empty() || !out_arg.t.GetTupleType().empty() )
				{
					// Aggregate types are passed by reference.
					unsafe
					{
						auto arg_value= LLVMGetParam( func_variable.llvm_function, llvm_arg_n );
						LLVMSetValueName2( arg_value, in_param.name.front(), in_param.name.size() );
						out_arg.llvm_value= arg_value;
					}
				}
				else
				{
					auto arg_name= "_arg_" + in_param.name;
					unsafe
					{
						auto arg_value= LLVMGetParam( func_variable.llvm_function, llvm_arg_n );
						LLVMSetValueName2( arg_value, arg_name.front(), arg_name.size() );

						out_arg.llvm_value= LLVMBuildAlloca( function_context.alloca_ir_builder, out_arg.t.GetLLVMType(), (in_param.name + "\0").front() );

						LLVMBuildStore( function_context.llvm_ir_builder, arg_value, out_arg.llvm_value );
					}
				}

				CreateVariableDebugInfo( function_context, out_arg, in_param.name, in_param.file_pos );

				out_arg.node_id= function_context.references_graph.AddNode( ReferencesGraph::NodeKind::Variable, in_param.name );
				if( type_arg.t.GetInnerReferenceKind() != InnerReferenceKind::None )
				{
					auto inner_reference_node= function_context.references_graph.CreateNodeInnerReference(
						out_arg.node_id,
						select( type_arg.t.GetInnerReferenceKind() == InnerReferenceKind::Mut ? ReferencesGraph::NodeKind::ReferenceMut : ReferencesGraph::NodeKind::ReferenceImut ) );
					function_context.references_graph.AddLink( inner_reference_variable_node_id, inner_reference_node );
				}

				function_context.args_nodes[arg_n]= out_arg.node_id;
			}

			function_context.variables_frames.back().push_back( out_arg ); // Register arg for destruction and reference checking.

			if( in_param.name == KeywordToString( Keyword::this_ ) && func_variable.is_this_call && !out_arg.t.GetClassType().empty() )
			{
				var Variable mut this_variable
				{
					.t= take(out_arg.t),
					.value_type= select( out_arg.is_mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut ),
					.llvm_value= out_arg.llvm_value,
					.node_id= out_arg.node_id,
				};
				function_context.this_= move(this_variable);
				move(out_arg);
			}
			else
			{
				var bool insert_ok= !args_names_scope.AddName( in_param.name, NamesScopeValue( move(out_arg) ) ).empty();
				if( !insert_ok )
				{
					REPORT_ERROR( Redefinition, names_scope, in_param.file_pos, in_param.name )
				}
			}
		}
	}

	{
		auto& block= func_variable.body_syntax_element.get_ref().block.get_ref();

		auto& func_name= func_variable.body_syntax_element.get_ref().name.back();
		auto is_constructor= func_name == KeywordToString( Keyword::constructor_ );
		auto is_destructor = func_name == KeywordToString( Keyword::destructor_  );
		if( is_constructor )
		{
			function_context.whole_this_is_unavailable= true;

			if( !func_variable.body_syntax_element.get_ref().constructor_initializer_list.empty() )
			{
				BuildConstructorInitialization(
					args_names_scope_ptr,
					function_context,
					func_variable.body_syntax_element.get_ref().constructor_initializer_list.get_ref() );
			}
			else
			{
				var Synt::StructNamedInitializer dummy_initializer{ .file_pos= block.file_pos };
				BuildConstructorInitialization(
					args_names_scope_ptr,
					function_context,
					dummy_initializer );
			}

			function_context.whole_this_is_unavailable= false;
		}
		if( is_destructor )
		{
			unsafe{  function_context.destructor_end_block= LLVMCreateBasicBlockInContext( llvm_context_, "destructor_end\0"[0] );  }
		}

		if( is_constructor || is_destructor )
		{
			// Setup virtual table pointers before main body of constructor/destructor and after constructor initialization list.
			auto this_llvm_value= function_context.this_.get_ref().llvm_value;
			auto class_type_ptr= function_context.this_.get_ref().t.GetClassType().get_ref();
			SetupVirtualTablePointers( this_llvm_value, class_type_ptr, function_context );
		}

		if( ( is_constructor || is_destructor ) && !function_context.this_.get_ref().t.GetClassType().empty() )
		{
			auto class_type= function_context.this_.get_ref().t.GetClassType().get_ref();
			auto class_kind= class_type.lock_imut().get_ref().kind;
			if( class_kind == ClassType::Kind::Interface || class_kind == ClassType::Kind::Abstract )
			{
				function_context.whole_this_is_unavailable= true;
			}
		}

		auto block_build_info= BuildBlockElement( args_names_scope_ptr, function_context, block );
		if( !block_build_info.have_terminal_instruction_inside )
		{
			if( func_variable.t.return_type == void_type_ && !func_variable.t.return_value_is_reference )
			{
				// Manually generate "return" for void-return functions.
				CallDestructorsForAllVariablesFrames( args_names_scope_ptr, function_context, block.end_file_pos );
				CheckReferencesPollutionBeforeReturn( names_scope, function_context, block.end_file_pos );
				unsafe
				{
					if( function_context.destructor_end_block != LLVMBasicBlockRef::Null )
					{
						LLVMBuildBr( function_context.llvm_ir_builder, function_context.destructor_end_block );
					}
					else
					{
						LLVMBuildRetVoid( function_context.llvm_ir_builder );
					}
				}
			}
			else
			{
				REPORT_ERROR( NoReturnInFunctionReturningNonVoid, args_names_scope_ptr, block.end_file_pos )
				return;
			}
		}

		// Finsih function - add remaining instructions
		unsafe
		{
			LLVMBuildBr( function_context.alloca_ir_builder, function_context.function_basic_block );

			if( function_context.destructor_end_block != LLVMBasicBlockRef::Null && ! function_context.this_.empty() )
			{
				LLVMAppendExistingBasicBlock( function_context.llvm_function, function_context.destructor_end_block );
				LLVMPositionBuilderAtEnd( function_context.llvm_ir_builder, function_context.destructor_end_block );

				auto this_copy= function_context.this_.get_ref();
				if_var( &class_type : this_copy.t.GetClassType() )
				{
					BuildMembersDestructors( function_context, this_copy.llvm_value, class_type );
				}
				LLVMBuildRetVoid( function_context.llvm_ir_builder );
			}
		}
	}

	if( func_variable.constexpr_kind != FunctionVariable::ConstexprKind::NonConstexpr )
	{
		auto mut can_be_constexpr= true;

		{
			auto& function_type= func_variable.t;

			can_be_constexpr&=
				!function_type.is_unsafe &&
				function_type.return_type.CanBeConstexpr();

			foreach( &param : function_type.params )
			{
				can_be_constexpr&=
					param.t.CanBeConstexpr() &&
					param.t != void_type_ && // Disallow "void" arguments, because we currently can not constantly convert any reference to "void" in constexpr function call.
					param.t.GetFunctionPointerType().empty();  // Currently function pointers not supported.
			}
		}

		if( !can_be_constexpr )
		{
			if( func_variable.constexpr_kind != FunctionVariable::ConstexprKind::ConstexprAuto )
			{
				REPORT_ERROR( InvalidTypeForConstexprFunction, names_scope, func_variable.body_syntax_element.get_ref().file_pos )
			}
			func_variable.constexpr_kind= FunctionVariable::ConstexprKind::NonConstexpr;
		}
		else if( function_context.have_non_constexpr_operations_inside )
		{
			if( func_variable.constexpr_kind != FunctionVariable::ConstexprKind::ConstexprAuto )
			{
				REPORT_ERROR( ConstexprFunctionContainsUnallowedOperations, names_scope, func_variable.body_syntax_element.get_ref().file_pos )
			}
			func_variable.constexpr_kind= FunctionVariable::ConstexprKind::NonConstexpr;
		}
		else
		{
			func_variable.constexpr_kind= FunctionVariable::ConstexprKind::ConstexprComplete;
		}
	}
}

fn CodeBuilder::TryCallCopyConstructor(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	LLVMValueRef dst, LLVMValueRef src,
	ClassTypePtr& class_type,
	FilePos& file_pos )
{
	// TODO - maybe combine this with "BuildCopyConstructorPart" method?
	if( !class_type.lock_imut().get_ref().is_copy_constructible )
	{
		REPORT_ERROR( OperationNotSupportedForThisType, names_scope, file_pos, Type(class_type) )
		return;
	}

	// TODO - what if copy constructor is unsafe?

	BuildCopyConstructorPart( names_scope, function_context, dst, src, class_type, file_pos );
}

fn CodeBuilder::CallDestructorsForVariablesFrame( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, size_type variables_frame_index, FilePos& file_pos )
{
	// Call destructors in reverse order.
	for( auto mut i= function_context.variables_frames[variables_frame_index].size(); i > 0s; --i )
	{
		auto variable= function_context.variables_frames[variables_frame_index][i - 1s];
		// Call destructors for variables, but not for references.
		if( variable.node_id != ReferencesGraph::c_empty_node_id )
		{
			if( function_context.references_graph.GetNodeKind( variable.node_id ) == ReferencesGraph::NodeKind::Variable )
			{
				if( function_context.references_graph.HaveOutgoingLinks( variable.node_id ) )
				{
					REPORT_ERROR( DestroyedVariableStillHaveReferences, names_scope, file_pos, function_context.references_graph.GetNodeName( variable.node_id ) )
				}
				if( !function_context.references_graph.NodeIsMoved( variable.node_id ) )
				{
					BuildDestructorPart( names_scope, function_context, variable.llvm_value, variable.t, file_pos );
				}
			}

			function_context.references_graph.RemoveNode( variable.node_id );
		}
	}
}

fn CodeBuilder::CallDestructorsForTopVariablesFrame( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, FilePos& file_pos )
{
	auto variables_frame_index= function_context.variables_frames.size() - 1s;
	CallDestructorsForVariablesFrame( names_scope, function_context, variables_frame_index, file_pos );
}

fn CodeBuilder::CallDestructorsForAllVariablesFrames( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, FilePos& file_pos )
{
	for( auto mut i= function_context.variables_frames.size(); i > 0s; --i )
	{
		CallDestructorsForVariablesFrame( names_scope, function_context, i - 1s, file_pos );
	}
}

fn CodeBuilder::CallDestructorsForLoopInnerVariables( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, FilePos& file_pos )
{
	for( var size_type mut i= function_context.variables_frames.size(), i_end= function_context.loops_stack.back().variable_frames_stack_size; i > i_end; --i )
	{
		CallDestructorsForVariablesFrame( names_scope, function_context, i - 1s, file_pos );
	}
}

fn CodeBuilder::DestroyUnusedTemporaryVariables( this, NamesScopePtr& names_scope, FunctionContext& mut function_context, FilePos& file_pos )
{
	// TODO - maybe iterate in reverse order?
	// TODO - maybe we should iterate multiple times until all unused nodes is not removed?
	for( auto mut i= 0s; i < function_context.variables_frames.back().size(); ++i )
	{
		auto node_id= function_context.variables_frames.back()[i].node_id;
		if( node_id != ReferencesGraph::c_empty_node_id &&
			!function_context.references_graph.NodeIsMoved( node_id ) &&
			!function_context.references_graph.HaveOutgoingLinks( node_id ) )
		{
			function_context.references_graph.MoveNode( node_id );

			if( function_context.references_graph.GetNodeKind( node_id ) == ReferencesGraph::NodeKind::Variable )
			{
				var LLVMValueRef llvm_value= function_context.variables_frames.back()[i].llvm_value;
				var Type t= function_context.variables_frames.back()[i].t;
				BuildDestructorPart( names_scope, function_context, llvm_value, t, file_pos );
			}
		}
	}
}

fn CodeBuilder::IsReferenceAllowedForReturn( this, FunctionContext& function_context, ReferencesGraph::NodeId variable_node ) : bool
{
	foreach( &return_reference : function_context.function_type.return_references )
	{
		auto i= size_type(return_reference.param_index);
		if( return_reference.reference_index == FunctionType::c_param_reference_number &&
			variable_node == function_context.args_nodes[i] )
		{
			return true;
		}
		if( return_reference.reference_index == 0u8 &&
			variable_node == function_context.args_inner_variable_nodes[i] )
		{
			return true;
		}
	}

	return false;
}

fn CodeBuilder::CheckReferencesPollutionBeforeReturn( this, NamesScopePtr& names_scope, FunctionContext& function_context, FilePos& file_pos )
{
	auto& function_type= function_context.function_type;
	auto& params= function_type.params;
	for( auto mut i= 0s; i < params.size(); ++i )
	{
		if( !params[i].is_reference )
		{
			continue;
		}
		var ReferencesGraph::NodeId inner_reference_node= function_context.references_graph.GetNodeInnerReference( function_context.args_nodes[i] );
		if( inner_reference_node == ReferencesGraph::c_empty_node_id )
		{
			continue;
		}

		foreach( &accessible_variable_node_value : function_context.references_graph.GetAllAccessibleVariableNodes( inner_reference_node ) )
		{
			var ReferencesGraph::NodeId accessible_variable_node= accessible_variable_node_value.key();

			if( accessible_variable_node == function_context.args_inner_variable_nodes[i] )
			{
				continue;
			}

			var ust::optional</FunctionType::ParamReference/> mut param_reference;
			for( auto mut j= 0s; j < params.size(); ++j )
			{
				if( accessible_variable_node == function_context.args_nodes[j] )
				{
					var FunctionType::ParamReference mut r{ .param_index= u8(j), .reference_index= FunctionType::c_param_reference_number };
					param_reference= move(r);
				}
				if( accessible_variable_node == function_context.args_inner_variable_nodes[j] )
				{
					var FunctionType::ParamReference mut r{ .param_index= u8(j), .reference_index= 0u8 };
					param_reference= move(r);
				}
			}

			if( param_reference.empty() )
			{
				continue;
			}

			var FunctionType::ReferencePollution actual_reference_pollution
			{
				.dst{ .param_index= u8(i), .reference_index= 0u8 },
				.src= param_reference.get_ref(),
			};

			var bool mut found= false;
			foreach( &reference_pollution : function_type.references_pollution )
			{
				if( actual_reference_pollution == reference_pollution )
				{
					found= true;
					break;
				}
			}

			if( !found )
			{
				REPORT_ERROR( UnallowedReferencePollution, names_scope, file_pos )
			}
		}
	}
}

fn CodeBuilder::MergeReferencesGraphsAfterConditionalBranches( ust::array_view_imut</ReferencesGraph/> branches, NamesScopePtr names_scope, FilePos& file_pos ) : ReferencesGraph
{
	auto errors_container= names_scope.lock_imut().get_ref().GetErrors();
	auto mut lock= errors_container.lock_mut();
	return ReferencesGraph::MergeReferencesGraphsAfterConditionalBranches( branches, lock.get_ref(), file_pos );
}

fn CodeBuilder::CheckReferencesGraphAfterLoop( ReferencesGraph& state_before, ReferencesGraph& state_after, NamesScopePtr names_scope, FilePos& file_pos )
{
	auto errors_container= names_scope.lock_imut().get_ref().GetErrors();
	auto mut lock= errors_container.lock_mut();
	ReferencesGraph::CheckReferencesGraphAfterLoop( state_before, state_after, lock.get_ref(), file_pos );
}

fn CodeBuilder::SetupReferencesInCopyOrMove(
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	Type& dst_type,
	ReferencesGraph::NodeId dst_node,
	ReferencesGraph::NodeId src_node,
	FilePos& file_pos )
{
	if( dst_node == ReferencesGraph::c_empty_node_id ||
		src_node == ReferencesGraph::c_empty_node_id ||
		dst_type.GetInnerReferenceKind() == InnerReferenceKind::None )
	{
		return;
	}

	var ReferencesGraph& mut references_graph= function_context.references_graph;

	var ReferencesGraph::NodesSet dst_variable_nodes= references_graph.GetAllAccessibleVariableNodes( dst_node );
	var ReferencesGraph::NodesSet src_inner_reference_nodes= references_graph.GetAllAccessibleVariableInnerNodes( src_node );

	if( dst_variable_nodes.empty() || src_inner_reference_nodes.empty() )
	{
		return;
	}

	var bool mut node_is_mutable= false;
	foreach( &src_inner_reference_node_value : src_inner_reference_nodes )
	{
		node_is_mutable |= references_graph.GetNodeKind( src_inner_reference_node_value.key() ) == ReferencesGraph::NodeKind::ReferenceMut;
	}

	node_is_mutable&= dst_type.GetInnerReferenceKind() == InnerReferenceKind::Mut;

	foreach( &dst_variable_node_value : dst_variable_nodes )
	{
		var ReferencesGraph::NodeId dst_variable_node= dst_variable_node_value.key();
		var ReferencesGraph::NodeId mut dst_inner_reference_node= references_graph.GetNodeInnerReference( dst_variable_node );
		if( dst_inner_reference_node == ReferencesGraph::c_empty_node_id )
		{
			dst_inner_reference_node= references_graph.CreateNodeInnerReference(
				dst_variable_node,
				select( node_is_mutable ? ReferencesGraph::NodeKind::ReferenceMut : ReferencesGraph::NodeKind::ReferenceImut ) );
		}

		var bool dst_inner_reference_node_is_mutable= references_graph.GetNodeKind( dst_inner_reference_node ) == ReferencesGraph::NodeKind::ReferenceMut;

		foreach( &src_inner_reference_node_value : src_inner_reference_nodes )
		{
			var ReferencesGraph::NodeId src_inner_reference_node= src_inner_reference_node_value.key();
			var bool src_inner_reference_node_is_mutable= references_graph.GetNodeKind( src_inner_reference_node ) == ReferencesGraph::NodeKind::ReferenceMut;
			if( dst_inner_reference_node_is_mutable != src_inner_reference_node_is_mutable )
			{
				REPORT_ERROR( ReferenceProtectionError, names_scope, file_pos, references_graph.GetNodeName( src_inner_reference_node ) )
			}
			else
			{
				references_graph.AddLink( src_inner_reference_node, dst_inner_reference_node );
			}
		}
	}
}

fn CodeBuilder::IsTypeComplete( this, Type& t ) : bool
{
	if_var( &class_type_ptr : t.GetClassType() )
	{
		return class_type_ptr.lock_imut().get_ref().is_complete;
	}
	if_var( &array_type : t.GetArrayType() )
	{
		return IsTypeComplete( array_type.element_type );
	}
	if_var( &tuple_type : t.GetTupleType() )
	{
		var bool mut complete= true;
		foreach( &element_type : tuple_type.element_types )
		{
			complete&= IsTypeComplete( element_type );
		}
		return complete;
	}

	return true;
}

fn CodeBuilder::EnsureTypeComplete( mut this, Type& t ) : bool
{
	if_var( &class_type_ptr : t.GetClassType() )
	{
		// TODO - maybe names scope is not needed here?
		auto class_parent_scope= ust::to_non_nullable( class_type_ptr.lock_imut().get_ref().members.lock_imut().get_ref().GetParent() );

		BuildClass( class_parent_scope, class_type_ptr );
		return class_type_ptr.lock_imut().get_ref().is_complete;
	}
	if_var( &array_type : t.GetArrayType() )
	{
		return EnsureTypeComplete( array_type.element_type );
	}
	if_var( &tuple_type : t.GetTupleType() )
	{
		var bool mut ok= true;
		foreach( &element_type : tuple_type.element_types )
		{
			ok&= EnsureTypeComplete( element_type );
		}
		return ok;
	}

	return true;
}

fn CodeBuilder::IsDefaultConstructor( FunctionVariable& function_variable, ClassTypePtr& class_type ) : bool
{
	if( !function_variable.is_this_call ){ return false; }
	if( function_variable.t.params.size() != 1s ){ return false; }

	auto& param= function_variable.t.params.front();
	return param.t == class_type && param.is_mutable && param.is_reference;
}

fn CodeBuilder::IsCopyConstructor( FunctionVariable& function_variable, ClassTypePtr& class_type ) : bool
{
	if( !function_variable.is_this_call ){ return false; }
	if( function_variable.t.params.size() != 2s ){ return false; }

	auto& param_dst= function_variable.t.params.front();
	auto& param_src= function_variable.t.params.back();
	return
		param_dst.t == class_type &&  param_dst.is_mutable && param_dst.is_reference &&
		param_src.t == class_type && !param_src.is_mutable && param_src.is_reference;
}

fn CodeBuilder::IsCopyAssignmentOperator( FunctionVariable& function_variable, ClassTypePtr& class_type ) : bool
{
	if( function_variable.t.params.size() != 2s ){ return false; }

	auto& param_dst= function_variable.t.params.front();
	auto& param_src= function_variable.t.params.back();
	return
		param_dst.t == class_type &&  param_dst.is_mutable && param_dst.is_reference &&
		param_src.t == class_type && !param_src.is_mutable && param_src.is_reference;
}

fn CodeBuilder::AddGlobalConstantVariable( this, ust::string8& name_null_terminated, LLVMTypeRef llvm_type, LLVMValueRef initializer ) : LLVMValueRef
{
	unsafe
	{
		// Reuse existing global variable with same name and initializer.
		var LLVMValueRef prev_global_variable= LLVMGetNamedGlobal( module_, name_null_terminated.front() );
		if( prev_global_variable != LLVMValueRef::Null && LLVMGetInitializer( prev_global_variable ) == initializer )
		{
			return prev_global_variable;
		}

		var LLVMValueRef global_value= LLVMAddGlobal( module_, llvm_type, name_null_terminated.front() );
		LLVMSetLinkage( global_value, LLVMLinkage::Private );
		LLVMSetUnnamedAddress( global_value, LLVMUnnamedAddr::GlobalUnnamedAddr );
		LLVMSetGlobalConstant( global_value, LLVMBool::True );
		if( initializer != LLVMValueRef::Null )
		{
			LLVMSetInitializer( global_value, initializer );
		}
		return global_value;
	}
}

fn CodeBuilder::AddFunctionAttribute( this, LLVMValueRef llvm_function, u32 index, ust::array_view_imut</char8/> attr_name )
{
	unsafe
	{
		auto attr_kind= LLVMGetEnumAttributeKindForName( attr_name.front(), attr_name.size() );
		auto attr= LLVMCreateEnumAttribute( llvm_context_, attr_kind, 0u64 );
		LLVMAddAttributeAtIndex( llvm_function, index, attr );
	}
}

fn CodeBuilder::SetupLLVMFunctionAttributes( this, NamesScope& names_scope, FunctionVariable& func_variable )
{
	if( func_variable.is_generated || names_scope.IsInsideTemplate() )
	{
		unsafe{  LLVMSetLinkage( func_variable.llvm_function, LLVMLinkage::Private );  }
	}
	else
	{
		// Set comdat. This needed because we want linkage like "inline" in C++ but for all functions.
		unsafe
		{
			var size_type mut name_length = zero_init;
			var char8& name_start= LLVMGetValueName2( func_variable.llvm_function, name_length );

			var ust::string8 mut name_str;
			name_str.resize( name_length + 1s, "\0"c8 );
			ust::memory_copy( name_str.front_unsafe(), name_start, name_length );

			auto comdat= LLVMGetOrInsertComdat( module_, name_str.front_unsafe() );
			LLVMSetComdatSelectionKind( comdat, LLVMComdatSelectionKind::Any ); // Actually, we needs something, like ExactMatch, but it works not in all cases.
			LLVMSetComdat( func_variable.llvm_function, comdat );
		}
	}

	// Merge functions with identical code.
	// We doesn't need different addresses for different functions.
	unsafe{  LLVMSetUnnamedAddress( func_variable.llvm_function, LLVMUnnamedAddr::GlobalUnnamedAddr );  }

	// We do not support exceptions. So, mark all functions as "nounwind".
	AddFunctionAttribute( func_variable.llvm_function, LLVMAttributeFunctionIndex, "nounwind" );

	// TODO - add attribute "uwtable" if we are building debug info.
}

fn CodeBuilder::GetFundamentalLLVMType( this, U_FundamentalType t ) : LLVMTypeRef
{
	if( t == U_FundamentalType::InvalidType	) { return fundamental_llvm_types_.invalid_type_; }
	if( t == U_FundamentalType::void_		) { return fundamental_llvm_types_.void_; }
	if( t == U_FundamentalType::bool_		) { return fundamental_llvm_types_.bool_; }
	if( t == U_FundamentalType::i8_			) { return fundamental_llvm_types_.i8_	; }
	if( t == U_FundamentalType::u8_			) { return fundamental_llvm_types_.u8_	; }
	if( t == U_FundamentalType::i16_		) { return fundamental_llvm_types_.i16_	; }
	if( t == U_FundamentalType::u16_		) { return fundamental_llvm_types_.u16_	; }
	if( t == U_FundamentalType::i32_		) { return fundamental_llvm_types_.i32_	; }
	if( t == U_FundamentalType::u32_		) { return fundamental_llvm_types_.u32_	; }
	if( t == U_FundamentalType::i64_		) { return fundamental_llvm_types_.i64_	; }
	if( t == U_FundamentalType::u64_		) { return fundamental_llvm_types_.u64_	; }
	if( t == U_FundamentalType::i128_		) { return fundamental_llvm_types_.i128_; }
	if( t == U_FundamentalType::u128_		) { return fundamental_llvm_types_.u128_; }
	if( t == U_FundamentalType::f32_		) { return fundamental_llvm_types_.f32_	; }
	if( t == U_FundamentalType::f64_		) { return fundamental_llvm_types_.f64_	; }
	if( t == U_FundamentalType::char8_		) { return fundamental_llvm_types_.char8_ ; }
	if( t == U_FundamentalType::char16_		) { return fundamental_llvm_types_.char16_; }
	if( t == U_FundamentalType::char32_		) { return fundamental_llvm_types_.char32_; }

	halt;
}

fn CodeBuilder::GetZeroGEPIndex( this ) : LLVMValueRef
{
	unsafe{  return LLVMConstNull( fundamental_llvm_types_.i32_ );  }
}

fn CodeBuilder::CreateMoveToLLVMRegisterInstruction( Variable& variable, FunctionContext& function_context ) : LLVMValueRef
{
	if( variable.constexpr_value != LLVMValueRef::Null )
	{
		return variable.constexpr_value;
	}
	if( variable.location == Variable::Location::Pointer )
	{
		unsafe{  return LLVMBuildLoad( function_context.llvm_ir_builder, variable.llvm_value, "\0"[0] );  }
	}
	if( variable.location == Variable::Location::LLVMRegister )
	{
		return variable.llvm_value;
	}

	halt;
}

fn CodeBuilder::CreateReferenceCast( this, LLVMValueRef ref, Type& src_type, Type& dst_type, FunctionContext& function_context ) : LLVMValueRef
{
	if( src_type == dst_type )
	{
		return ref;
	}
	if( dst_type == void_type_ )
	{
		unsafe
		{
			auto dst_pointer_type= LLVMPointerType( dst_type.GetLLVMType(), 0u );
			return LLVMBuildPointerCast( function_context.llvm_ir_builder, ref, dst_pointer_type, "\0"[0] );
		}
	}

	auto src_class_type= src_type.GetClassType().get_ref();
	foreach( &parent : src_class_type.lock_imut().get_ref().parents )
	{
		auto mut sub_ref= LLVMValueRef::Null;
		unsafe
		{
			var [ LLVMValueRef, 2 ] indexes
			[
				GetZeroGEPIndex(),
				LLVMConstInt( fundamental_llvm_types_.u32_, u64(parent.field_number), LLVMBool::False )
			];

			sub_ref= LLVMBuildGEP( function_context.llvm_ir_builder, ref, indexes[0], 2u, "\0"[0] );
		}

		if( parent.class_ == dst_type )
		{
			return sub_ref;
		}
		else if( Type(parent.class_).ReferenceIsConvertibleTo( dst_type ) )
		{
			return CreateReferenceCast( sub_ref, parent.class_, dst_type, function_context );
		}
	}

	halt;
}

fn CodeBuilder::CreateFieldGEP( this, LLVMValueRef value, ClassField& field, FunctionContext& function_context ) : LLVMValueRef
{
	auto op_name_nt= "." + field.syntax_element.get_ref().name + "\0";
	unsafe
	{
		var [ LLVMValueRef, 2 ] indexes
		[
			GetZeroGEPIndex(),
			LLVMConstInt( fundamental_llvm_types_.u32_, u64(field.index), LLVMBool::False )
		];

		return LLVMBuildGEP( function_context.llvm_ir_builder, value, indexes[0], 2u, op_name_nt.front() );
	}
}

fn CodeBuilder::CreateParentFieldGEP( this, LLVMValueRef value, ClassType::Parent& parent, FunctionContext& function_context ) : LLVMValueRef
{
	unsafe
	{
		var [ LLVMValueRef, 2 ] indexes
		[
			GetZeroGEPIndex(),
			LLVMConstInt( fundamental_llvm_types_.u32_, u64(parent.field_number), LLVMBool::False )
		];

		return LLVMBuildGEP( function_context.llvm_ir_builder, value, indexes[0], 2u, "\0"[0] );
	}
}

fn CodeBuilder::CreateBaseClassFieldGEP( this, LLVMValueRef value, FunctionContext& function_context ) : LLVMValueRef
{
	var [ LLVMValueRef, 2 ] indexes
	[
		GetZeroGEPIndex(),
		GetZeroGEPIndex(), // Base class is always zero field.
	];

	unsafe{  return LLVMBuildGEP( function_context.llvm_ir_builder, value, indexes[0], 2u, ".base\0"[0] );  }
}

fn CodeBuilder::CreateTupleElementGEP( this, LLVMValueRef value, size_type element_index, FunctionContext& function_context ) : LLVMValueRef
{
	auto op_name_nt= "[" + ust::to_string8(element_index) + "]\0";
	unsafe
	{
		var [ LLVMValueRef, 2 ] indexes
		[
			GetZeroGEPIndex(),
			LLVMConstInt( fundamental_llvm_types_.u32_, u64(element_index), LLVMBool::False )
		];

		return LLVMBuildGEP( function_context.llvm_ir_builder, value, indexes[0], 2u, op_name_nt.front() );
	}
}

fn CodeBuilder::MoveConstantToMemory( this, LLVMValueRef ptr, LLVMValueRef constant, FunctionContext& function_context )
{
	unsafe
	{
		auto constant_type= LLVMTypeOf( constant );
		auto constant_type_kind= LLVMGetTypeKind( constant_type );
		if( constant_type_kind == LLVMTypeKind::Array )
		{
			auto length= LLVMGetArrayLength( constant_type );
			for( auto mut i= 0u; i < length; ++i )
			{
				var [ LLVMValueRef, 2 ] indexes
				[
					GetZeroGEPIndex(),
					LLVMConstInt( fundamental_llvm_types_.u32_, u64(i), LLVMBool::False )
				];
				auto element_ptr= LLVMBuildGEP( function_context.llvm_ir_builder, ptr, indexes[0], 2u, ".\0"[0] );

				auto constant_element= LLVMConstExtractValue( constant, i, 1u );

				MoveConstantToMemory( element_ptr, constant_element, function_context );
			}
		}
		else if( constant_type_kind == LLVMTypeKind::Struct )
		{
			auto length= LLVMCountStructElementTypes( constant_type );
			for( auto mut i= 0u; i < length; ++i )
			{
				var [ LLVMValueRef, 2 ] indexes
				[
					GetZeroGEPIndex(),
					LLVMConstInt( fundamental_llvm_types_.u32_, u64(i), LLVMBool::False )
				];
				auto element_ptr= LLVMBuildGEP( function_context.llvm_ir_builder, ptr, indexes[0], 2u, ".\0"[0] );

				auto constant_element= LLVMConstExtractValue( constant, i, 1u );

				MoveConstantToMemory( element_ptr, constant_element, function_context );
			}
		}
		else
		{
			LLVMBuildStore( function_context.llvm_ir_builder, constant, ptr );
		}
	}
}

fn CodeBuilder::CopyBytes( this, LLVMValueRef dst, LLVMValueRef src, Type& t, FunctionContext &mut function_context )
{
	unsafe
	{
		var LLVMTypeRef llvm_type= t.GetLLVMType();
		var LLVMTypeKind type_kind= LLVMGetTypeKind( llvm_type );
		if( type_kind == LLVMTypeKind::Integer ||
			type_kind == LLVMTypeKind::Float ||
			type_kind == LLVMTypeKind::Double ||
			type_kind == LLVMTypeKind::Pointer )
		{
			// Simple scalar - create load/store.
			if( LLVMTypeOf( dst ) == LLVMTypeOf( src ) )
			{
				auto value = LLVMBuildLoad( function_context.llvm_ir_builder, src, "\0"[0] );
				LLVMBuildStore( function_context.llvm_ir_builder, value, dst );
			}
			else if( LLVMGetElementType( LLVMTypeOf( dst ) ) == LLVMTypeOf( src ) )
			{
				LLVMBuildStore( function_context.llvm_ir_builder, src, dst );
			}
			else{ halt; }
		}
		else
		{
			// Create memcpy for aggregate types.
			var u64 size= LLVMABISizeOfType( data_layout_, llvm_type );
			var u32 alignment= LLVMABIAlignmentOfType( data_layout_, llvm_type );

			LLVMBuildMemCpy(
				function_context.llvm_ir_builder,
				dst, alignment,
				src, alignment,
				LLVMConstInt( fundamental_llvm_types_.u64_, size, LLVMBool::False ) );
		}
	}
}

fn CodeBuilder::SaveInstructionsState( FunctionContext& function_context ) : InstructionsState
{
	unsafe
	{
		var InstructionsState mut instructions_state
		{
			.current_block_last_instruction= LLVMGetLastInstruction( LLVMGetInsertBlock( function_context.llvm_ir_builder ) ),
			.alloca_block_last_instruction= LLVMGetLastInstruction( LLVMGetInsertBlock( function_context.alloca_ir_builder ) ),
			.current_block= LLVMGetInsertBlock( function_context.llvm_ir_builder ),
			.references_graph= function_context.references_graph,
		};
		return move(instructions_state);
	}
}

fn CodeBuilder::RestoreInstructionsState( FunctionContext &mut function_context, InstructionsState& state )
{
	unsafe
	{
		while( LLVMGetLastBasicBlock( function_context.llvm_function ) != state.current_block )
		{
			auto bb= LLVMGetLastBasicBlock( function_context.llvm_function );
			U1_DropAllBasicBlockUsersReferences( bb );
			LLVMDeleteBasicBlock( bb );
		}

		while( LLVMGetLastInstruction( state.current_block ) != state.current_block_last_instruction )
		{
			LLVMInstructionEraseFromParent( LLVMGetLastInstruction( state.current_block ) );
		}

		while( LLVMGetLastInstruction( function_context.alloca_basic_block ) != state.alloca_block_last_instruction )
		{
			LLVMInstructionEraseFromParent( LLVMGetLastInstruction( function_context.alloca_basic_block ) );
		}

		LLVMPositionBuilderAtEnd( function_context.llvm_ir_builder, state.current_block );
		LLVMPositionBuilderAtEnd( function_context.alloca_ir_builder, function_context.alloca_basic_block );
	}

	function_context.references_graph= state.references_graph;
}

fn CodeBuilder::CreateGlobalFunctionContext( this ) : FunctionContext
{
	var FunctionType mut function_type
	{
		.return_type= void_type_for_ret_,
		.return_value_is_reference= false,
		.return_value_is_mutable= false,
	};

	var FunctionContext mut function_context(
		llvm_context_,
		global_llvm_function_,
		move(function_type) );

	function_context.variables_frames.push_back( FunctionContext::VariablesFrame() );
	return move(function_context);
}

} // namespace U1
