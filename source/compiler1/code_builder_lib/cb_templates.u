import "/keywords.uh"
import "error_reporting.uh"
import "code_builder.uh"

namespace U1
{

template</type TemplateT/>
fn CreateTemplateErrorsContext(
	TemplateT& template_, // type template or function template
	NamesScopePtr& instantiation_point_names_scope_ptr,
	NamesScopeMutPtr& args_names_scope_ptr,
	SrcLoc& instantiation_src_loc )
{
	var ust::shared_ptr_mut</ErrorsContainer/> errors_container( ErrorsContainer() );

	var TemplateErrorsContext mut result
	{
		.errors= errors_container,
		.context_declaration_src_loc= instantiation_src_loc,
		.context_name= template_.syntax_element.deref().name,
	};

	{
		auto args_names_scope_lock= args_names_scope_ptr.lock_imut();
		var NamesScope& args_names_scope= args_names_scope_lock.deref();

		result.args_description+= "[ with ";
		foreach( &param : template_.params )
		{
			result.args_description+= param.name;
			result.args_description+= " = ";

			auto arg_ptr= args_names_scope.GetThisScopeValue( param.name ).try_deref().Get</TemplateArg/>();
			auto arg_lock= arg_ptr.try_lock_imut();
			var TemplateArg& arg= arg_lock.deref();
			if_var( &t : arg.something.get</Type/>() )
			{
				result.args_description+= t.ToString();
			}
			if_var( &v_ptr : arg.something.get</VariablePtr/>() )
			{
				auto lock= v_ptr.lock_imut();
				auto& v= lock.deref();
				result.args_description+= ConstantVariableToString( v.t, v.constexpr_value );
			}

			if( ust::ref_cmp_ne( param, template_.params.front() ) )
			{
				result.args_description+= ", ";
			}
		}
		result.args_description+= " ]";
	}

	{
		var CodeBuilderError mut template_context_error
		{
			.code= CodeBuilderErrorCode::TemplateContext,
			.src_loc= instantiation_src_loc,
			.errors_context( move(result) ),
		};

		auto parent_errors_container= instantiation_point_names_scope_ptr.lock_imut().deref().GetErrors();
		auto mut errors_container_lock= parent_errors_container.try_lock_mut();
		errors_container_lock.deref().push_back( move(template_context_error) );
	}
	{
		auto mut args_names_scope_lock= args_names_scope_ptr.lock_mut();
		var NamesScope &mut args_names_scope= args_names_scope_lock.deref();
		args_names_scope.SetErrors( errors_container );
	}
}

fn CodeBuilder::PrepareTypeTemplate(
	mut this,
	NamesScopePtr& names_scope,
	ust::shared_ptr_final</Synt::TypeTemplate/>& type_template_syntax_element,
	TypeTemplatesSet &mut out_templates_set )
{
	auto& syntax_element= type_template_syntax_element.deref();

	auto mut template_params= PrepareTemplateParams( names_scope, syntax_element.params );

	// Fill signature params and check correctness.
	var ust::vector</bool/> mut template_params_usage_flags;
	template_params_usage_flags.resize( template_params.size(), false );

	var ust::vector</ TemplateSignatureParam /> mut signature_params;
	{
		auto mut global_function_context= CreateGlobalFunctionContext();

		if( syntax_element.is_short_form )
		{
			for( auto mut i= 0s; i < template_params.size(); ++i )
			{
				var TemplateSignatureParam::TemplateParam mut p{ .index= u32(i) };
				signature_params.push_back( move(p) );
				template_params_usage_flags[i]= true;
			}
		}
		else
		{
			foreach( &signature_param : syntax_element.signature_params )
			{
				signature_params.push_back(
					CreateTemplateSignatureParam( names_scope, global_function_context, template_params, signature_param.name, template_params_usage_flags ) );

				// TODO - is this correct usage of "CreateTemplateSignatureParam" function?
				if( signature_param.default_value.get</Synt::EmptyVariant/>().empty() )
				{
					CreateTemplateSignatureParam( names_scope, global_function_context, template_params, signature_param.default_value, template_params_usage_flags );
				}
			}
		}
	}

	FillVariableTemplateParamsTypes( names_scope, syntax_element.params, template_params, template_params_usage_flags );

	// Check for usage of all template params in signature.
	for( auto mut i= 0s; i < template_params_usage_flags.size(); ++i )
	{
		if( !template_params_usage_flags[i] )
		{
			REPORT_ERROR( TemplateArgumentNotUsedInSignature, names_scope, syntax_element.params[i].src_loc, template_params[i].name )
		}
	}

	// Check default signature params correctness.
	auto mut first_default_param= syntax_element.signature_params.size();
	for( auto mut i= 0s; i < syntax_element.signature_params.size(); ++i )
	{
		if( syntax_element.signature_params[i].default_value.get</ Synt::EmptyVariant />().empty() )
		{
			first_default_param= ust::min( first_default_param, i );
		}
		else if( first_default_param < i )
		{
			REPORT_ERROR( MandatoryTemplateSignatureArgumentAfterOptionalArgument, names_scope, syntax_element.src_loc )
			return;
		}
	}

	var TypeTemplate mut type_template(
		move(template_params),
		move(signature_params),
		names_scope,
		type_template_syntax_element,
		first_default_param );

	// Check for redefinition.
	foreach( &prev_template_ptr : out_templates_set.type_templates )
	{
		if( type_template.signature_params == prev_template_ptr.deref().signature_params )
		{
			REPORT_ERROR( TypeTemplateRedefinition, names_scope, syntax_element.src_loc, syntax_element.name )
			return;
		}
	}

	out_templates_set.type_templates.push_back( TypeTemplatePtr( move(type_template) ) );
}

fn CodeBuilder::PrepareFunctionTemplate(
	mut this,
	NamesScopePtr& names_scope,
	ust::shared_ptr_final</Synt::FunctionTemplate/>& function_template_syntax_element,
	ust::shared_ptr_nullable_mut</ClassType/>& class_type ) : FunctionTemplatePtr
{
	auto& syntax_element= function_template_syntax_element.deref();
	auto& function_template_name= function_template_syntax_element.deref().name;

	if( syntax_element.function.deref().block.empty() )
	{
		REPORT_ERROR( IncompleteMemberOfClassTemplate, names_scope, function_template_syntax_element.deref().src_loc, function_template_name )
	}
	if( syntax_element.function.deref().virtual_kind != Synt::Function::VirtualKind::None )
	{
		REPORT_ERROR( VirtualForFunctionTemplate, names_scope, function_template_syntax_element.deref().src_loc, function_template_name )
	}

	auto mut template_params= PrepareTemplateParams( names_scope, syntax_element.params );

	var ust::vector</bool/> mut template_params_usage_flags;
	template_params_usage_flags.resize( template_params.size(), false );

	// Create signature params.
	var ust::vector</ TemplateSignatureParam /> mut signature_params;
	{
		auto mut global_function_context= CreateGlobalFunctionContext();

		foreach( &param : syntax_element.function.deref().function_type.params )
		{
			if( !class_type.empty() && param.name == KeywordToString( Keyword::this_ ) )
			{
				var TemplateSignatureParam::TypeParam mut t{ .t= class_type.try_to_non_nullable() };
				signature_params.push_back( move(t) );
			}
			else
			{
				signature_params.push_back(
					CreateTemplateSignatureParam( names_scope, global_function_context, template_params, param.t, template_params_usage_flags ) );
			}
		}
	}

	FillVariableTemplateParamsTypes( names_scope, syntax_element.params, template_params, template_params_usage_flags );

	var FunctionTemplate mut function_template(
		move(template_params),
		move(signature_params),
		names_scope,
		function_template_syntax_element,
		class_type );

	return FunctionTemplatePtr( move(function_template) );
}

fn CodeBuilder::PrepareTemplateParams(
	mut this,
	NamesScopePtr& names_scope,
	ust::vector</Synt::TemplateParam/>& in_params ) : ust::vector</ TemplateBase::Param />
{
	// Check for template params redefinition, fill params vector.
	var ust::vector</ TemplateBase::Param /> mut template_params;
	foreach( &param : in_params )
	{
		foreach( &prev_param : template_params )
		{
			if( param.name == prev_param.name )
			{
				REPORT_ERROR( Redefinition, names_scope, param.src_loc, param.name )
			}
		}

		var TemplateBase::Param mut out_param{ .name= param.name };
		template_params.push_back( move(out_param) );
	}

	return move(template_params);
}

fn CodeBuilder::FillVariableTemplateParamsTypes(
	mut this,
	NamesScopePtr& names_scope,
	ust::vector</Synt::TemplateParam/>& in_params,
	ust::vector</TemplateBase::Param/> &mut template_params,
	ust::vector</bool/> &mut template_params_usage_flags )
{
	halt if( in_params.size() != template_params.size() );
	halt if( template_params_usage_flags.size() != template_params.size() );

	auto mut global_function_context= CreateGlobalFunctionContext();

	for( auto mut i= 0s; i < in_params.size(); ++i )
	{
		auto& template_param= in_params[i];
		if( template_param.t.get</Synt::EmptyVariant/>().empty() )
		{
			var TemplateSignatureParam mut param=
				CreateTemplateSignatureParam( names_scope, global_function_context, template_params, template_param.t, template_params_usage_flags );
			if_var( &type_param : param.GetTypeParam() )
			{
				if( !TypeIsValidForTemplateVariableArgument(type_param.t) )
				{
					REPORT_ERROR( InvalidTypeOfTemplateVariableArgument, names_scope, Synt::GetSrcLoc(template_param.t), type_param.t )
				}
			}
			template_params[i].t= move(param);

		}
	}
}

fn CodeBuilder::CreateTemplateSignatureParam(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	ust::vector</TemplateBase::Param/>& template_params,
	Synt::Expression& param,
	ust::vector</bool/> &mut template_params_usage_flags ) : TemplateSignatureParam
{
	if_var( &complex_name : param.get</Synt::ComplexName/>() )
	{
		return CreateTemplateSignatureParam( names_scope, function_context, template_params, complex_name, template_params_usage_flags );
	}
	if_var( &array_type : param.get</ ust::box</ Synt::ArrayType /> />() )
	{
		return CreateTemplateSignatureParam( names_scope, function_context, template_params, array_type.deref(), template_params_usage_flags );
	}
	if_var( &tuple_type : param.get</ ust::box</ Synt::TupleType /> />() )
	{
		return CreateTemplateSignatureParam( names_scope, function_context, template_params, tuple_type.deref(), template_params_usage_flags );
	}
	if_var( &raw_pointer_type : param.get</ ust::box</ Synt::RawPointerType /> />() )
	{
		return CreateTemplateSignatureParam( names_scope, function_context, template_params, raw_pointer_type.deref(), template_params_usage_flags );
	}
	if_var( &function_type : param.get</ ust::box</Synt::FunctionType/> />() )
	{
		return CreateTemplateSignatureParam( names_scope, function_context, template_params, function_type.deref(), template_params_usage_flags );
	}

	// Nothing special - process as regular expression
	auto expression_value= BuildExpressionCode( names_scope, function_context, param );
	return CreateTemplateSignatureParam( names_scope, expression_value, Synt::GetSrcLoc(param) );
}

fn CodeBuilder::CreateTemplateSignatureParam(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	ust::vector</TemplateBase::Param/>& template_params,
	Synt::ComplexName& param,
	ust::vector</bool/> &mut template_params_usage_flags ) : TemplateSignatureParam
{
	if( param.tail.empty() )
	{
		if_var( &simple_name : param.start.get</ust::string8/>() )
		{
			for( auto mut i= 0s; i < template_params.size(); ++i )
			{
				if( simple_name == template_params[i].name )
				{
					template_params_usage_flags[i]= true;

					var TemplateSignatureParam::TemplateParam mut res{ .index= u32(i) };
					return move(res);
				}
			}
		}
	}

	auto value= ResolveValue( names_scope, function_context, param, true );
	if_var( &type_templates_set_ptr : value.get</ ust::shared_ptr_imut</ TypeTemplatesSet /> />() )
	{
		if( !param.tail.empty() )
		{
			if_var( &template_args : param.tail.back().get</ ust::box</ Synt::TemplateArgs /> />() )
			{
				var TemplateSignatureParam::SpecializedTemplateParam mut specialized_template_param
				{
					.type_templates_set= type_templates_set_ptr,
				};

				auto mut all_params_are_known= true;
				foreach( &arg : template_args.deref() )
				{
					auto mut out_param= CreateTemplateSignatureParam( names_scope, function_context, template_params, arg, template_params_usage_flags );

					all_params_are_known&= !out_param.GetTypeParam().empty() || !out_param.GetVariableParam().empty();

					specialized_template_param.params.push_back(move(out_param));
				}

				if( all_params_are_known )
				{
					auto value= ResolveValue( names_scope, function_context, param );
					if_var( &t : value.get</Type/>() )
					{
						var TemplateSignatureParam::TypeParam mut type_param{ .t= t };
						return move(type_param);
					}
				}

				return move(specialized_template_param);
			}
		}
		REPORT_ERROR( TemplateInstantiationRequired, names_scope, param.src_loc, param )
	}

	// Nothing special - process as regular expression
	auto expression_value= BuildExpressionCode( names_scope, function_context, param );
	return CreateTemplateSignatureParam( names_scope, expression_value, param.src_loc );
}

fn CodeBuilder::CreateTemplateSignatureParam(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	ust::vector</TemplateBase::Param/>& template_params,
	Synt::TypeName& param,
	ust::vector</bool/> &mut template_params_usage_flags ) : TemplateSignatureParam
{
	if_var( &complex_name : param.get</Synt::ComplexName/>() )
	{
		return CreateTemplateSignatureParam( names_scope, function_context, template_params, complex_name, template_params_usage_flags );
	}
	if_var( &array_type : param.get</ ust::box</Synt::ArrayType/> />() )
	{
		return CreateTemplateSignatureParam( names_scope, function_context, template_params, array_type.deref(), template_params_usage_flags );
	}
	if_var( &tuple_type : param.get</ ust::box</Synt::TupleType/> />() )
	{
		return CreateTemplateSignatureParam( names_scope, function_context, template_params, tuple_type.deref(), template_params_usage_flags );
	}
	if_var( &raw_pointer_type : param.get</ ust::box</Synt::RawPointerType/> />() )
	{
		return CreateTemplateSignatureParam( names_scope, function_context, template_params, raw_pointer_type.deref(), template_params_usage_flags );
	}
	if_var( &function_type : param.get</ ust::box</Synt::FunctionType/> />() )
	{
		return CreateTemplateSignatureParam( names_scope, function_context, template_params, function_type.deref(), template_params_usage_flags );
	}

	// Nothing special - process as regular type name.
	var TemplateSignatureParam::TypeParam mut t
	{
		.t= PrepareType( names_scope, function_context, param )
	};
	return move(t);
}

fn CodeBuilder::CreateTemplateSignatureParam(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	ust::vector</TemplateBase::Param/>& template_params,
	Synt::ArrayType& param,
	ust::vector</bool/> &mut template_params_usage_flags ) : TemplateSignatureParam
{
	var TemplateSignatureParam::ArrayTypeParam mut array_type_param
	{
		.element_type= CreateTemplateSignatureParam( names_scope, function_context, template_params, param.element_type, template_params_usage_flags ),
		.element_count= CreateTemplateSignatureParam( names_scope, function_context, template_params, param.element_count, template_params_usage_flags ),
	};

	if( !array_type_param.element_type.GetTypeParam().empty() && !array_type_param.element_count.GetVariableParam().empty() )
	{
		// All params are known types/variables, so, this is just a type.
		var TemplateSignatureParam::TypeParam mut t
		{
			.t= PrepareType( names_scope, function_context, param )
		};
		return move(t);
	}
	return move(array_type_param);
}

fn CodeBuilder::CreateTemplateSignatureParam(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	ust::vector</TemplateBase::Param/>& template_params,
	Synt::TupleType& signature_param,
	ust::vector</bool/> &mut template_params_usage_flags ) : TemplateSignatureParam
{
	var TemplateSignatureParam::TupleTypeParam mut tuple_type_param;

	var bool mut all_types_are_known= true;
	foreach( &element_type : signature_param.elements )
	{
		auto mut param= CreateTemplateSignatureParam( names_scope, function_context, template_params, element_type, template_params_usage_flags );
		all_types_are_known&= !param.GetTypeParam().empty();
		tuple_type_param.element_types.push_back( move(param) );
	}

	if( all_types_are_known )
	{
		// All params are known types, so, this is just a type.
		var TemplateSignatureParam::TypeParam mut t
		{
			.t= PrepareType( names_scope, function_context, signature_param )
		};
		return move(t);
	}

	return move(tuple_type_param);
}

fn CodeBuilder::CreateTemplateSignatureParam(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	ust::vector</TemplateBase::Param/>& template_params,
	Synt::RawPointerType& signature_param,
	ust::vector</bool/> &mut template_params_usage_flags ) : TemplateSignatureParam
{
	var TemplateSignatureParam::RawPointerTypeParam mut raw_pointer_type_param
	{
		.element_type= CreateTemplateSignatureParam( names_scope, function_context, template_params, signature_param.element_type, template_params_usage_flags )
	};

	if( !raw_pointer_type_param.element_type.GetTypeParam().empty() )
	{
		var TemplateSignatureParam::TypeParam mut t
		{
			.t= PrepareType( names_scope, function_context, signature_param )
		};
		return move(t);
	}

	return move(raw_pointer_type_param);
}

fn CodeBuilder::CreateTemplateSignatureParam(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	ust::vector</TemplateBase::Param/>& template_params,
	Synt::FunctionType& signature_param,
	ust::vector</bool/> &mut template_params_usage_flags ) : TemplateSignatureParam
{
	var TemplateSignatureParam::FunctionTypeParam mut function_type_param
	{
		.return_type( TemplateSignatureParam::TypeParam() ),
		.is_unsafe= signature_param.is_unsafe,
		.calling_convention= GetLLVMCallingConvention( signature_param.calling_convention, names_scope, signature_param.src_loc ),
		.return_value_type= ValueType::Value,
	};

	if( signature_param.return_value_reference_modifier == Synt::ReferenceModifier::Reference )
	{
		function_type_param.return_value_type= select( signature_param.return_value_mutability_modifier == Synt::MutabilityModifier::Mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut );
	}

	auto mut all_types_are_known= true;
	if( !signature_param.return_type.empty() )
	{
		function_type_param.return_type=
			CreateTemplateSignatureParam( names_scope, function_context, template_params, signature_param.return_type.try_deref(), template_params_usage_flags );
		all_types_are_known &= !function_type_param.return_type.GetTypeParam().empty();
	}
	else
	{
		var TemplateSignatureParam::TypeParam mut t{ .t= void_type_ };
		function_type_param.return_type= TemplateSignatureParam(move(t));
	}
	foreach( &param : signature_param.params )
	{
		var TemplateSignatureParam::FunctionTypeParam::Param mut out_param
		{
			.t= CreateTemplateSignatureParam( names_scope, function_context, template_params, param.t, template_params_usage_flags ),
			.value_type= ValueType::Value,
		};

		if( param.reference_modifier == Synt::ReferenceModifier::Reference )
		{
			out_param.value_type= select( param.mutability_modifier == Synt::MutabilityModifier::Mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut );
		}

		all_types_are_known &= !out_param.t.GetTypeParam().empty();

		function_type_param.params.push_back( move(out_param) );
	}

	if( all_types_are_known )
	{
		var TemplateSignatureParam::TypeParam mut t
		{
			.t= PrepareType( names_scope, function_context, signature_param )
		};
		return move(t);
	}

	return move(function_type_param);
}

fn CodeBuilder::CreateTemplateSignatureParam( mut this, NamesScopePtr& names_scope, Value& value, SrcLoc& src_loc ) : TemplateSignatureParam
{
	if_var( &t : value.get</Type/>() )
	{
		var TemplateSignatureParam::TypeParam mut type_param{ .t= t };
		return move(type_param);
	}
	if_var( &v_ptr : value.get</VariablePtr/>() )
	{
		if( v_ptr.lock_imut().deref().constexpr_value == LLVMValueRef::Null )
		{
			REPORT_ERROR( ExpectedConstantExpression, names_scope, src_loc )
			return TemplateSignatureParam::TypeParam();
		}

		var TemplateSignatureParam::VariableParam mut variable_param{ .v= v_ptr };
		return move(variable_param);
	}

	REPORT_ERROR( InvalidValueAsTemplateArgument, names_scope, src_loc, GetValueKindName( value ) )
	return TemplateSignatureParam::TypeParam();
}

fn CodeBuilder::GenTemplateType(
	mut this,
	NamesScopePtr& args_names_scope,
	FunctionContext &mut function_context,
	ust::shared_ptr_mut</TypeTemplatesSet/>& type_templates_set_ptr,
	Synt::TemplateArgs& template_args,
	SrcLoc& template_instantiation_src_loc ) : ust::optional</Type/>
{
	auto type_templates_set_lock= type_templates_set_ptr.lock_imut();
	var TypeTemplatesSet& type_templates_set= type_templates_set_lock.deref();

	var ust::vector</ TemplateTypeArgsEvaluationResult /> mut candidate_type_templates;
	foreach( &type_template_ptr : type_templates_set.type_templates )
	{
		auto mut res= EvaluateTemplateTypeArgs(
			args_names_scope,
			function_context,
			type_template_ptr,
			template_args,
			template_instantiation_src_loc );
		if_var( &r : res )
		{
			candidate_type_templates.push_back(r);
		}
	}

	if( candidate_type_templates.empty() )
	{
		REPORT_ERROR( TemplateParametersDeductionFailed, args_names_scope, template_instantiation_src_loc )
		return ust::optional</Type/>();
	}
	if( candidate_type_templates.size() == 1s )
	{
		return FinishTypeTemplateGeneration( candidate_type_templates.front(), args_names_scope, template_instantiation_src_loc );
	}

	var ust::vector</TypeTemplatePtr/> mut templates_for_check;
	foreach( &candidate : candidate_type_templates )
	{
		templates_for_check.push_back( candidate.type_template );
	}

	auto index= SelectMoreSpecializedTemplate( templates_for_check.range(), template_args.size() );
	if( index == ~0s )
	{
		REPORT_ERROR( CouldNotSelectMoreSpicializedTypeTemplate, args_names_scope, template_instantiation_src_loc )
		return ust::optional</Type/>();
	}

	return FinishTypeTemplateGeneration( candidate_type_templates[index], args_names_scope, template_instantiation_src_loc );
}

fn CodeBuilder::EvaluateTemplateTypeArgs(
	mut this,
	NamesScopePtr& args_names_scope,
	FunctionContext &mut function_context,
	TypeTemplatePtr& type_template_ptr,
	Synt::TemplateArgs& template_args,
	SrcLoc& template_instantiation_src_loc ) : ust::optional</TemplateTypeArgsEvaluationResult/>
{
	var TypeTemplate& type_template= type_template_ptr.deref();

	var Synt::TypeTemplate& syntax_element= type_template.syntax_element.deref();
	if( syntax_element.is_short_form )
	{
		if( template_args.size() != syntax_element.params.size() )
		{
			return ust::optional</TemplateTypeArgsEvaluationResult/>();
		}
	}
	else
	{
		if( template_args.size() < type_template.first_default_param ||
			template_args.size() > type_template.signature_params.size() )
		{
			return ust::optional</TemplateTypeArgsEvaluationResult/>();
		}
	}

	var NamesScopePtr names_scope= type_template.parent_names_scope.lock().try_to_non_nullable(); // Parent namespace of type template
	var NamesScopeMutPtr result_names_scope( NamesScope( NamesScope::c_template_args_namespace_name, names_scope ) ); // Where we place template arguments

	{
		auto mut result_names_scope_lock= result_names_scope.lock_mut();
		for( auto mut i= 0s; i < type_template.params.size(); ++i )
		{
			var TemplateArg mut template_arg{ .index= u32(i) };
			result_names_scope_lock.deref().AddName( type_template.params[i].name, move(template_arg) );
		}
	}

	auto mut all_ok= true;
	var TemplateArgsFinished mut result_signature_template_args;

	if( syntax_element.is_short_form )
	{
		for( auto mut i= 0s; i < template_args.size(); ++i )
		{
			auto arg= BuildExpressionCode( args_names_scope, function_context, template_args[i] );
			if( arg.get</Type/>().empty() && arg.get</VariablePtr/>().empty() )
			{
				REPORT_ERROR( InvalidValueAsTemplateArgument, args_names_scope, Synt::GetSrcLoc(template_args[i]), GetValueKindName(arg) )
				all_ok= false;
				continue;
			}

			if_var( &t : arg.get</Type/>() )
			{
				result_signature_template_args.push_back( t );
			}
			if_var( &v_ptr : arg.get</VariablePtr/>() )
			{
				result_signature_template_args.push_back( v_ptr );
			}

			all_ok&= MatchTemplateArgument( result_names_scope, type_template, type_template.signature_params[i], result_signature_template_args.back(), Synt::GetSrcLoc(template_args[i]) );
		}
	}
	else
	{
		for( auto mut i= 0s; i < syntax_element.signature_params.size(); ++i )
		{
			var Value mut arg;
			var SrcLoc mut src_loc;
			if( i < template_args.size() )
			{
				src_loc= Synt::GetSrcLoc( template_args[i] );
				arg= BuildExpressionCode( args_names_scope, function_context, template_args[i] );
			}
			else
			{
				src_loc= Synt::GetSrcLoc( syntax_element.signature_params[i].default_value );
				arg= BuildExpressionCode( result_names_scope, function_context, syntax_element.signature_params[i].default_value );
			}

			if( arg.get</Type/>().empty() && arg.get</VariablePtr/>().empty() )
			{
				REPORT_ERROR( InvalidValueAsTemplateArgument, args_names_scope, src_loc, GetValueKindName(arg) )
				all_ok= false;
				continue;
			}

			if_var( &t : arg.get</Type/>() )
			{
				result_signature_template_args.push_back( t );
			}
			if_var( &v_ptr : arg.get</VariablePtr/>() )
			{
				result_signature_template_args.push_back( v_ptr );
			}

			all_ok&= MatchTemplateArgument( result_names_scope, type_template, type_template.signature_params[i], result_signature_template_args.back(), src_loc );
		}
	}

	if( !all_ok )
	{
		return ust::optional</TemplateTypeArgsEvaluationResult/>();
	}

	var TemplateTypeArgsEvaluationResult mut result
	{
		.type_template= type_template_ptr,
		.args_names_scope= result_names_scope,
		.signature_args= move(result_signature_template_args),
	};

	return move(result);
}

fn CodeBuilder::FinishTypeTemplateGeneration(
	mut this,
	TemplateTypeArgsEvaluationResult& template_args_evaluation_result,
	NamesScopePtr& instantiation_point_names_scope,
	SrcLoc& template_instantiation_src_loc ) : ust::optional</Type/>
{
	var TypeTemplatePtr& type_template_ptr= template_args_evaluation_result.type_template;

	auto template_key=
		ust::to_string8( ust::ref_to_int( type_template_ptr.deref() ) ) +
		mangler_.deref().MangleTemplateArgs( template_args_evaluation_result.signature_args );

	var ust::string8 template_class_name= "_";

	if_var( prev_names_scope : generated_template_things_.find( template_key ) )
	{
		if_var( result_name : prev_names_scope.lock_imut().deref().GetThisScopeValue( template_class_name ) )
		{
			auto class_type= result_name.Get</ClassType/>();
			if( !class_type.empty() )
			{
				return Type( class_type.try_to_non_nullable() );
			}
			auto t= result_name.Get</Type/>();
			if( !t.empty() )
			{
				return t.try_lock_imut().deref();
			}
		}
	}

	var Synt::TypeTemplate& syntax_element= type_template_ptr.deref().syntax_element.deref();
	var NamesScopeMutPtr& args_names_scope= template_args_evaluation_result.args_names_scope;

	CreateTemplateErrorsContext(
		type_template_ptr.deref(),
		instantiation_point_names_scope,
		args_names_scope,
		template_instantiation_src_loc );

	if_var( &class_syntax_element : syntax_element.something.get</ ust::shared_ptr_final</ Synt::Class /> />() )
	{
		auto class_type= NamesScopeAddClass( args_names_scope, class_syntax_element );
		if( class_type.empty() )
		{
			return ust::optional</Type/>();
		}

		{
			var ClassType::BaseTemplate mut base_template
			{
				.class_template= type_template_ptr,
				.signature_args= template_args_evaluation_result.signature_args,
			};

			auto mut lock= class_type.try_lock_mut();
			lock.deref().base_template= move(base_template);
		}

		auto mangled_llvm_type_name= mangler_.deref().MangleType( class_type.try_to_non_nullable() );
		unsafe( U1_SetStructName( class_type.try_lock_imut().deref().llvm_type, mangled_llvm_type_name.front() ) );

		AddNewTemplateThing( template_key, args_names_scope );
		return Type( class_type.try_to_non_nullable() );
	}
	if_var( &type_alias_syntax_element : syntax_element.something.get</ ust::shared_ptr_final</ Synt::TypeAlias /> />() )
	{
		// Prepare type
		var Type mut t;
		{
			auto mut global_function_context= CreateGlobalFunctionContext();
			t= PrepareType( args_names_scope, global_function_context, type_alias_syntax_element.deref().type_name );
		}

		// Cache result.
		{
			auto mut names_scope_lock= args_names_scope.lock_mut();
			names_scope_lock.deref().AddName( template_class_name, t );
		}

		AddNewTemplateThing( template_key, args_names_scope );

		return move(t);
	}

	halt; // Unhandled type template kind.
}

fn CodeBuilder::GenTemplateFunction(
	mut this,
	FunctionTemplatePtr& function_template_ptr,
	ust::array_view_imut</VariableTypeExtended/> mut args,
	bool first_arg_is_this,
	NamesScopePtr& instantiation_point_names_scope,
	SrcLoc& src_loc ) : ust::optional</FunctionVariable/>
{
	return GenTemplateFunction(
		function_template_ptr,
		TemplateArgsFinished(),
		args,
		first_arg_is_this,
		instantiation_point_names_scope,
		src_loc );
}

fn CodeBuilder::GenTemplateFunction(
	mut this,
	FunctionTemplatePtr& function_template_ptr,
	TemplateArgsFinished& known_template_args,
	ust::array_view_imut</VariableTypeExtended/> mut args,
	bool first_arg_is_this,
	NamesScopePtr& instantiation_point_names_scope,
	SrcLoc& src_loc ) : ust::optional</FunctionVariable/>
{
	var FunctionTemplate& function_template= function_template_ptr.deref();

	var Synt::FunctionTemplate& template_syntax_element= function_template.syntax_element.deref();
	var Synt::Function& function_syntax_element= template_syntax_element.function.deref();

	if( first_arg_is_this &&
		( function_syntax_element.function_type.params.empty() ||
		function_syntax_element.function_type.params.front().name != KeywordToString( Keyword::this_ ) ) )
	{
		args.drop_front();
	}
	if( args.size() != function_syntax_element.function_type.params.size() )
	{
		return ust::optional</FunctionVariable/>();
	}

	var NamesScopePtr names_scope= function_template.parent_names_scope.lock().try_to_non_nullable(); // Parent namespace of type template
	var NamesScopeMutPtr result_names_scope( NamesScope( NamesScope::c_template_args_namespace_name, names_scope ) ); // Where we place template arguments

	FillKnownFunctionTemplateArgsIntoNamespace( function_template, known_template_args, result_names_scope );

	auto mut all_ok= true;
	for( auto mut i= 0s; i < args.size(); ++i )
	{
		var Synt::FunctionType::Param& function_param= function_syntax_element.function_type.params[i];
		var VariableTypeExtended& arg= args[i];

		auto is_this= function_param.name == KeywordToString( Keyword::this_ );
		auto param_is_mutable_reference=
			function_param.mutability_modifier == Synt::MutabilityModifier::Mutable &&
			( function_param.reference_modifier == Synt::ReferenceModifier::Reference || is_this );
		if( param_is_mutable_reference && arg.value_type != ValueType::ReferenceMut )
		{
			return ust::optional</FunctionVariable/>();
		}

		auto& param= function_template.signature_params[i];
		if_var( &template_param : param.GetTemplateParam() )
		{
			auto& param_name= function_template.params[template_param.index].name;
			auto template_arg_value= result_names_scope.lock_imut().deref().GetThisScopeValue( param_name ).try_deref();
			auto template_arg_ptr= template_arg_value.Get</TemplateArg/>();

			auto template_arg_lock= template_arg_ptr.try_lock_imut();
			auto& template_arg= template_arg_lock.deref();

			if_var( &t : template_arg.something.get</Type/>() )
			{
				// TODO - maybe forbid type conversion for copy and conversion constructors?
				all_ok&=
					arg.t.ReferenceIsConvertibleTo( t ) ||
					( !param_is_mutable_reference && !GetConversionConstructor( result_names_scope, t, arg.t, src_loc ).empty() );
				continue;
			}
		}
		if_var( &type_param : param.GetTypeParam() )
		{
			// TODO - maybe forbid type conversion for copy and conversion constructors?
			all_ok&=
				arg.t.ReferenceIsConvertibleTo( type_param.t ) ||
				( !param_is_mutable_reference && !GetConversionConstructor( result_names_scope, type_param.t, arg.t, src_loc ).empty() );
			continue;
		}

		all_ok&= MatchTemplateArgument( result_names_scope, function_template, param, arg.t, src_loc );
	}

	if( !all_ok )
	{
		return ust::optional</FunctionVariable/>();
	}

	return FinishTemplateFunctionGeneration( function_template_ptr, result_names_scope, instantiation_point_names_scope, src_loc );
}

fn CodeBuilder::FinishFunctionTemplateParametrization(
	mut this,
	ParametrizedFunctionTemplate& parametrized_function_template,
	SrcLoc& src_loc ) : ust::optional</FunctionVariable/>
{
	auto& function_template= parametrized_function_template.base_template.deref();
	auto& known_template_args= parametrized_function_template.known_args;

	halt if( function_template.params.size() != known_template_args.size() );

	var NamesScopeMutPtr result_names_scope(
		NamesScope(
			"",
			function_template.parent_names_scope.lock().try_to_non_nullable() ) ); // Where we place template arguments

	FillKnownFunctionTemplateArgsIntoNamespace( function_template, known_template_args, result_names_scope );

	return FinishTemplateFunctionGeneration(
		parametrized_function_template.base_template,
		result_names_scope,
		parametrized_function_template.instantiation_point_names_scope,
		src_loc );
}

fn CodeBuilder::FinishTemplateFunctionGeneration(
	mut this,
	FunctionTemplatePtr& function_template_ptr,
	NamesScopeMutPtr& result_names_scope,
	NamesScopePtr& instantiation_point_names_scope,
	SrcLoc& src_loc ) : ust::optional</FunctionVariable/>
{
	var FunctionTemplate& function_template= function_template_ptr.deref();
	var Synt::FunctionTemplate& template_syntax_element= function_template.syntax_element.deref();
	var Synt::Function& function_syntax_element= template_syntax_element.function.deref();

	var TemplateArgsFinished mut result_template_args;
	{
		auto mut result_names_scope_lock= result_names_scope.lock_imut();
		for( auto mut i= 0s; i < function_template.params.size(); ++i )
		{
			auto arg_value= result_names_scope_lock.deref().GetThisScopeValue( function_template.params[i].name ).try_deref();
			auto template_arg_ptr= arg_value.Get</TemplateArg/>();

			auto template_arg_lock= template_arg_ptr.try_lock_imut();
			auto& something= template_arg_lock.deref().something;
			if_var( &t : something.get</Type/>() )
			{
				result_template_args.push_back(t);
				continue;
			}
			if_var( &v_ptr : something.get</VariablePtr/>() )
			{
				result_template_args.push_back( v_ptr );
				continue;
			}

			REPORT_ERROR( TemplateParametersDeductionFailed, result_names_scope, src_loc )
			return ust::optional</FunctionVariable/>();
		}
	}

	// Use combination of template args (not signature params) and template pointer. This combination should be unique.
	auto template_key=
		ust::to_string8( ust::ref_to_int( function_template_ptr.deref() ) ) +
		mangler_.deref().MangleTemplateArgs( result_template_args );

	auto& function_name= function_syntax_element.name.back();
	if_var( prev_names_scope : generated_template_things_.find( template_key ) )
	{
		auto namespace_value= prev_names_scope.lock_imut().deref().GetThisScopeValue( function_name ).try_deref();

		auto functions_set_ptr= namespace_value.Get</NamesScopeFunctionsSet/>();
		auto functions_set_lock= functions_set_ptr.try_lock_imut();
		auto & functions_set= functions_set_lock.deref();

		if( functions_set.functions_set.functions.size() == 1s )
		{
			return functions_set.functions_set.functions.front();
		}

		return ust::optional</FunctionVariable/>();
	}
	AddNewTemplateThing( template_key, result_names_scope );

	CreateTemplateErrorsContext(
		function_template,
		instantiation_point_names_scope,
		result_names_scope,
		src_loc );

	NamesScopeFill( result_names_scope, template_syntax_element.function, function_template.class_, Synt::ClassVisibility::Public /* TODO - set correct visibility */ );
	auto result_namespace_value= result_names_scope.lock_imut().deref().GetThisScopeValue( function_name ).try_deref();

	auto result_functions_set_ptr= result_namespace_value.Get</NamesScopeFunctionsSet/>();
	BuildFunctionsSet( result_names_scope, result_functions_set_ptr.try_to_non_nullable(), false );

	if( result_functions_set_ptr.try_lock_imut().deref().functions_set.functions.size() != 1s )
	{
		return ust::optional</FunctionVariable/>();
	}

	// Set base template and mangled name.
	auto mut function_variable= result_functions_set_ptr.try_lock_imut().deref().functions_set.functions.front();
	function_variable.base_template= function_template_ptr;

	auto name_mangled=
		mangler_.deref().MangleFunction( function_template.parent_names_scope.lock().try_lock_imut().deref(), function_name, function_variable.t, result_template_args );
	unsafe( LLVMSetValueName2( function_variable.llvm_function, cast_mut(name_mangled).data(), name_mangled.size() - 1s ) );

	{
		auto mut lock= result_functions_set_ptr.try_lock_mut();
		lock.deref().functions_set.functions.front()= function_variable;
	}

	// Build func code to know constexpr-ness.
	// TODO - do not even try to build func code right now, if function can't be constexpr because of types in signature.
	if( function_variable.constexpr_kind != FunctionVariable::ConstexprKind::ConstexprComplete )
	{
		function_variable.constexpr_kind= FunctionVariable::ConstexprKind::ConstexprAuto;
		BuildFuncCode( result_names_scope, function_variable );
	}

	{
		auto mut lock= result_functions_set_ptr.try_lock_mut();
		lock.deref().functions_set.functions.front()= function_variable;
	}

	return move(function_variable);
}

fn CodeBuilder::ParametrizeTemplateFunctions(
	mut this,
	NamesScopePtr& args_names_scope,
	FunctionContext &mut function_context,
	FunctionsSet& functions_set,
	Synt::TemplateArgs& template_args,
	SrcLoc& src_loc ) : ust::optional</NamesScopeValue/>
{
	var TemplateArgsFinished mut template_args_finished;
	auto mut have_some_errors= false;
	foreach( &arg : template_args )
	{
		auto value= BuildExpressionCode( args_names_scope, function_context, arg );
		if_var( &t : value.get</Type/>() )
		{
			template_args_finished.push_back( t );
			continue;
		}
		if_var( &v_ptr : value.get</VariablePtr/>() )
		{
			with( &t : v_ptr.lock_imut().deref().t )
			{
				if( !TypeIsValidForTemplateVariableArgument( t ) )
				{
					REPORT_ERROR( InvalidTypeOfTemplateVariableArgument, args_names_scope, src_loc, t )
					have_some_errors= true;
				}
			}

			template_args_finished.push_back( v_ptr );
			continue;
		}

		have_some_errors= true;
		REPORT_ERROR( InvalidValueAsTemplateArgument, args_names_scope, Synt::GetSrcLoc(arg), GetValueKindName(value) )
	}

	if( have_some_errors )
	{
		return ust::optional</NamesScopeValue/>();
	}

	var ust::string8 mut cache_key= "_parametrized_";
	foreach( &function_template_ptr : functions_set.function_templates )
	{
		cache_key+= ust::to_string8( ust::ref_to_int( function_template_ptr.deref() ) );
		cache_key+= "_";
	}
	cache_key+= mangler_.deref().MangleTemplateArgs( template_args_finished );

	var ust::string8 names_scope_value_key= "_";

	if_var( &prev_namespace_ptr : generated_template_things_.find( cache_key ) )
	{
		auto lock= prev_namespace_ptr.lock_imut();
		return lock.deref().GetThisScopeValue( names_scope_value_key ).try_deref();
	}

	var NamesScopeFunctionsSet mut result_functions_set;
	foreach( &function_template_ptr : functions_set.function_templates )
	{
		auto& function_template= function_template_ptr.deref();
		if( function_template.params.size() < template_args_finished.size() )
		{
			continue;
		}

		var NamesScopeMutPtr result_names_scope(
			NamesScope(
				"",
				function_template.parent_names_scope.lock().try_to_non_nullable() ) );

		{
			auto mut result_names_scope_lock= result_names_scope.lock_mut();
			for( auto mut i= 0s; i < function_template.params.size(); ++i )
			{
				var TemplateArg mut template_arg{ .index= u32(i) };
				result_names_scope_lock.deref().AddName( function_template.params[i].name, move(template_arg) );
			}
		}

		auto mut all_ok= true;
		for( auto mut i= 0s; i < template_args_finished.size(); ++i )
		{
			var TemplateSignatureParam::TemplateParam mut signature_param{ .index= u32(i) };
			var TemplateSignatureParam signature_param_abstract( move(signature_param) );

			if( !MatchTemplateArgument( result_names_scope, function_template, signature_param_abstract, template_args_finished[i], src_loc ) )
			{
				all_ok= false;
				break;
			}
		}

		if( !all_ok )
		{
			continue;
		}

		var ParametrizedFunctionTemplate mut parametrized_function_template
		{
			.known_args= template_args_finished,
			.base_template= function_template_ptr,
			.instantiation_point_names_scope= args_names_scope,
		};

		result_functions_set.functions_set.parametrized_function_templates.push_back( move(parametrized_function_template) );
	}

	if( result_functions_set.functions_set.parametrized_function_templates.empty() )
	{
		REPORT_ERROR( TemplateFunctionGenerationFailed, args_names_scope, src_loc, ust::string8("TODO - name") )
		return ust::optional</NamesScopeValue/>();
	}

	var NamesScopeValue mut names_scope_value( move(result_functions_set) );

	// Cache result.
	var NamesScopeMutPtr result_names_scope( NamesScope( "", functions_set.function_templates.front().deref().parent_names_scope.lock() ) );
	{
		auto mut lock= result_names_scope.lock_mut();
		lock.deref().AddName( names_scope_value_key, names_scope_value );
	}
	AddNewTemplateThing( move(cache_key), result_names_scope );

	return move(names_scope_value);
}

fn CodeBuilder::MatchTemplateArgument(
	mut this,
	NamesScopePtr& names_scope,
	TemplateBase& template_,
	TemplateSignatureParam& param,
	TemplateArgFinished& given_arg,
	SrcLoc& src_loc ) : bool
{
	if_var( &template_param : param.GetTemplateParam() )
	{
		return MatchTemplateArgumentImpl( names_scope, template_, template_param, given_arg, src_loc );
	}
	if_var( &type_param : param.GetTypeParam() )
	{
		return MatchTemplateArgumentImpl( names_scope, template_, type_param, given_arg, src_loc );
	}
	if_var( &variable_param : param.GetVariableParam() )
	{
		return MatchTemplateArgumentImpl( names_scope, template_, variable_param, given_arg, src_loc );
	}
	if_var( &array_type_param : param.GetArrayTypeParam() )
	{
		return MatchTemplateArgumentImpl( names_scope, template_, array_type_param, given_arg, src_loc );
	}
	if_var( &tuple_type_param : param.GetTupleTypeParam() )
	{
		return MatchTemplateArgumentImpl( names_scope, template_, tuple_type_param, given_arg, src_loc );
	}
	if_var( &raw_pointer_type_param : param.GetRawPointerTypeParam() )
	{
		return MatchTemplateArgumentImpl( names_scope, template_, raw_pointer_type_param, given_arg, src_loc );
	}
	if_var( &function_type_param : param.GetFunctionTypeParam() )
	{
		return MatchTemplateArgumentImpl( names_scope, template_, function_type_param, given_arg, src_loc );
	}
	if_var( &specialized_template_param : param.GetSpecializedTemplateParam() )
	{
		return MatchTemplateArgumentImpl( names_scope, template_, specialized_template_param, given_arg, src_loc );
	}

	halt;
}

fn CodeBuilder::MatchTemplateArgumentImpl(
	mut this,
	NamesScopePtr& names_scope,
	TemplateBase& template_,
	TemplateSignatureParam::TemplateParam& template_param,
	TemplateArgFinished& given_arg,
	SrcLoc& src_loc ) : bool
{
	auto& param_name= template_.params[template_param.index].name;
	auto template_arg_value= names_scope.lock_imut().deref().GetThisScopeValue( param_name ).try_deref();
	auto template_arg_ptr= template_arg_value.Get</TemplateArg/>();

	auto mut template_arg_lock= template_arg_ptr.try_lock_mut();
	auto &mut template_arg= template_arg_lock.deref();

	auto& param_type= template_.params[template_param.index].t;
	if( !param_type.empty() )
	{
		// Value param
		if_var( &given_variable_ptr : given_arg.get</VariablePtr/>() )
		{
			auto given_variable_lock= given_variable_ptr.lock_imut();
			auto& given_variable= given_variable_lock.deref();

			if( !TypeIsValidForTemplateVariableArgument( given_variable.t ) )
			{
				REPORT_ERROR( InvalidTypeOfTemplateVariableArgument, names_scope, src_loc, given_variable.t )
				return false;
			}
			if( given_variable.constexpr_value == LLVMValueRef::Null )
			{
				REPORT_ERROR( ExpectedConstantExpression, names_scope, src_loc )
				return false;
			}

			if( !MatchTemplateArgument( names_scope, template_, param_type.try_deref(), given_variable.t, src_loc ) )
			{
				return false;
			}

			if( !template_arg.something.get</TemplateArg::NotKnownYet/>().empty() )
			{
				var Variable mut out_var
				{
					.t= given_variable.t,
					.value_type= ValueType::ReferenceImut,
					.location= Variable::Location::Pointer,
					.constexpr_value= given_variable.constexpr_value,
					.llvm_value= AddGlobalConstantVariable( param_name + "\0", given_variable.t.GetLLVMType(), given_variable.constexpr_value ),
					.name= param_name,
				};

				template_arg.something= VariablePtr( move(out_var) );
				return true;
			}
			if_var( &v_ptr : template_arg.something.get</VariablePtr/>() )
			{
				auto lock= v_ptr.lock_imut();
				auto& v= lock.deref();

				if( given_variable.t != v.t )
				{
					return false;
				}

				if( given_variable.constexpr_value == LLVMValueRef::Null || v.constexpr_value == LLVMValueRef::Null )
				{
					REPORT_ERROR( ExpectedConstantExpression, names_scope, src_loc )
					return false;
				}

				return unsafe(
					LLVMConstIntGetZExtValue( given_variable.constexpr_value ) ==
					LLVMConstIntGetZExtValue( v.constexpr_value ) );
			}
		}
	}
	else
	{
		// Type param
		if_var( &given_type : given_arg.get</Type/>() )
		{
			if( !template_arg.something.get</TemplateArg::NotKnownYet/>().empty() )
			{
				template_arg.something= given_type;
				return true;
			}
			if_var( &t : template_arg.something.get</Type/>() )
			{
				return given_type == t;
			}
		}
	}

	return false;
}

fn CodeBuilder::MatchTemplateArgumentImpl(
	mut this,
	NamesScopePtr& names_scope,
	TemplateBase& template_,
	TemplateSignatureParam::TypeParam& type_param,
	TemplateArgFinished& given_arg,
	SrcLoc& src_loc ) : bool
{
	if_var( &given_type : given_arg.get</Type/>() )
	{
		return type_param.t == given_type;
	}
	return false;
}

fn CodeBuilder::MatchTemplateArgumentImpl(
	mut this,
	NamesScopePtr& names_scope,
	TemplateBase& template_,
	TemplateSignatureParam::VariableParam& variable_param,
	TemplateArgFinished& given_arg,
	SrcLoc& src_loc ) : bool
{
	if_var( &given_variable_ptr : given_arg.get</VariablePtr/>() )
	{
		auto given_variable_lock= given_variable_ptr.lock_imut();
		auto& given_variable= given_variable_lock.deref();

		auto variable_param_lock= variable_param.v.lock_imut();
		auto& variable_param_ref= variable_param_lock.deref();

		if( given_variable.t != variable_param_ref.t )
		{
			return false;
		}

		if( given_variable.constexpr_value == LLVMValueRef::Null || variable_param_ref.constexpr_value == LLVMValueRef::Null )
		{
			REPORT_ERROR( ExpectedConstantExpression, names_scope, src_loc )
			return false;
		}

		return unsafe(
			LLVMConstIntGetZExtValue( given_variable.constexpr_value ) ==
			LLVMConstIntGetZExtValue( variable_param_ref.constexpr_value ) );
	}

	return false;
}

fn CodeBuilder::MatchTemplateArgumentImpl(
	mut this,
	NamesScopePtr& names_scope,
	TemplateBase& template_,
	TemplateSignatureParam::ArrayTypeParam& array_type_param,
	TemplateArgFinished& given_arg,
	SrcLoc& src_loc ) : bool
{
	if_var( &given_type : given_arg.get</Type/>() )
	{
		if_var( &given_array_type : given_type.GetArrayType() )
		{
			if( !MatchTemplateArgument( names_scope, template_, array_type_param.element_type, given_array_type.element_type, src_loc ) )
			{
				return false;
			}

			var Variable mut size_var
			{
				.t= size_type_,
				.value_type= ValueType::Value,
				.location= Variable::Location::LLVMRegister,
				.name= "array_size",
			};
			size_var.constexpr_value= unsafe( LLVMConstInt( size_type_.GetLLVMType(), given_array_type.element_count, LLVMBool::False ) );
			size_var.llvm_value= size_var.constexpr_value;

			if( !MatchTemplateArgument( names_scope, template_, array_type_param.element_count, VariablePtr( move(size_var) ), src_loc ) )
			{
				return false;
			}
			return true;
		}
	}
	return false;
}

fn CodeBuilder::MatchTemplateArgumentImpl(
	mut this,
	NamesScopePtr& names_scope,
	TemplateBase& template_,
	TemplateSignatureParam::TupleTypeParam& tuple_type_param,
	TemplateArgFinished& given_arg,
	SrcLoc& src_loc ) : bool
{
	if_var( &given_type : given_arg.get</Type/>() )
	{
		if_var( &given_tuple_type : given_type.GetTupleType() )
		{
			if( given_tuple_type.element_types.size() != tuple_type_param.element_types.size() )
			{
				return false;
			}

			for( auto mut i= 0s; i < given_tuple_type.element_types.size(); ++i )
			{
				if( !MatchTemplateArgument( names_scope, template_, tuple_type_param.element_types[i], given_tuple_type.element_types[i], src_loc ) )
				{
					return false;
				}
			}

			return true;
		}
	}

	return false;
}

fn CodeBuilder::MatchTemplateArgumentImpl(
	mut this,
	NamesScopePtr& names_scope,
	TemplateBase& template_,
	TemplateSignatureParam::RawPointerTypeParam& raw_pointer_type_param,
	TemplateArgFinished& given_arg,
	SrcLoc& src_loc ) : bool
{
	if_var( &given_type : given_arg.get</Type/>() )
	{
		if_var( &given_raw_pointer_type : given_type.GetRawPointerType() )
		{
			return MatchTemplateArgument( names_scope, template_, raw_pointer_type_param.element_type, given_raw_pointer_type.element_type, src_loc );
		}
	}
	return false;
}

fn CodeBuilder::MatchTemplateArgumentImpl(
	mut this,
	NamesScopePtr& names_scope,
	TemplateBase& template_,
	TemplateSignatureParam::FunctionTypeParam& function_type_param,
	TemplateArgFinished& given_arg,
	SrcLoc& src_loc ) : bool
{
	if_var( &given_type : given_arg.get</Type/>() )
	{
		if_var( &given_function_pointer_type : given_type.GetFunctionPointerType() )
		{
			var FunctionType& given_function_type= given_function_pointer_type.function_type;

			if( given_function_type.return_value_type != function_type_param.return_value_type ||
				given_function_type.is_unsafe != function_type_param.is_unsafe ||
				given_function_type.calling_convention != function_type_param.calling_convention )
			{
				return false;
			}

			if( !MatchTemplateArgument( names_scope, template_, function_type_param.return_type, given_function_type.return_type, src_loc ) )
			{
				return false;
			}

			if( given_function_type.params.size() != function_type_param.params.size() )
			{
				return false;
			}

			for( auto mut i= 0s; i < function_type_param.params.size(); ++i )
			{
				auto& expected_param= function_type_param.params[i];
				auto& given_arg= given_function_type.params[i];

				if( expected_param.value_type != given_arg.value_type )
				{
					return false;
				}
				if( !MatchTemplateArgument( names_scope, template_, expected_param.t, given_arg.t, src_loc ) )
				{
					return false;
				}
			}

			return true;
		}
	}

	return false;
}

fn CodeBuilder::MatchTemplateArgumentImpl(
	mut this,
	NamesScopePtr& names_scope,
	TemplateBase& template_,
	TemplateSignatureParam::SpecializedTemplateParam& specialized_template_param,
	TemplateArgFinished& given_arg,
	SrcLoc& src_loc ) : bool
{
	if_var( &given_type : given_arg.get</Type/>() )
	{
		if_var( &class_type : given_type.GetClassType() )
		{
			auto class_type_lock= class_type.lock_imut();
			if_var( &base_template : class_type_lock.deref().base_template )
			{
				auto mut is_one_of_templates= false;
				foreach( &type_template_ptr : specialized_template_param.type_templates_set.lock_imut().deref().type_templates )
				{
					if( base_template.class_template == type_template_ptr )
					{
						is_one_of_templates= true;
						break;
					}
				}

				if( !is_one_of_templates )
				{
					return false;
				}

				if( base_template.signature_args.size() != specialized_template_param.params.size() )
				{
					return false;
				}
				for( auto mut i= 0s; i < specialized_template_param.params.size(); ++i )
				{
					if( !MatchTemplateArgument( names_scope, template_, specialized_template_param.params[i], base_template.signature_args[i], src_loc ) )
					{
						return false;
					}
				}

				return true;
			}
		}
	}

	return false;
}

fn CodeBuilder::FillKnownFunctionTemplateArgsIntoNamespace(
	mut this,
	FunctionTemplate& function_template,
	TemplateArgsFinished& known_template_args,
	NamesScopeMutPtr& target_namespace )
{
	auto mut lock= target_namespace.lock_mut();
	var NamesScope &mut target_namespace_ref= lock.deref();

	for( auto mut i= 0s; i < function_template.params.size(); ++i )
	{
		var ust::string8& param_name= function_template.params[i].name;

		var TemplateArg mut template_arg{ .index= u32(i) };

		if( i < known_template_args.size() )
		{
			if_var( &t : known_template_args[i].get</Type/>() )
			{
				template_arg.something= t;
			}
			if_var( &v_ptr : known_template_args[i].get</VariablePtr/>() )
			{
				auto lock= v_ptr.lock_imut();
				auto& v= lock.deref();

				var Variable mut out_var
				{
					.t= v.t,
					.value_type= ValueType::ReferenceImut,
					.location= Variable::Location::Pointer,
					.llvm_value= AddGlobalConstantVariable( param_name + "\0", v.t.GetLLVMType(), v.constexpr_value ),
					.constexpr_value= v.constexpr_value,
					.name= param_name,
				};
				template_arg.something= VariablePtr( move(out_var) );
			}
		}
		target_namespace_ref.AddName( param_name, move(template_arg) );
	}
}

fn CodeBuilder::AddNewTemplateThing( mut this, ust::string8 mut key, NamesScopePtr& thing )
{
	generated_template_things_.insert( key, thing );
	generated_template_things_sequence_.push_back( move(key) );
}

fn CodeBuilder::TypeIsValidForTemplateVariableArgument( Type& t ) : bool
{
	if( !t.GetEnumType().empty() )
	{
		// All enums are valid.
		return true;
	}

	if_var( &fundamental_type : t.GetFundamentalType() )
	{
		return
			IsInteger( fundamental_type.fundamental_type ) ||
			IsChar( fundamental_type.fundamental_type ) ||
			IsByte( fundamental_type.fundamental_type ) ||
			fundamental_type.fundamental_type == U_FundamentalType::bool_;
	}

	return false;
}

} // namespace U1
