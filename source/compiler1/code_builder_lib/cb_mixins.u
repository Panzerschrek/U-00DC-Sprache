import "/keywords.uh"
import "../lex_synt_lib/lexical_analyzer.uh"
import "../lex_synt_lib/syntax_analyzer.uh"
import "error_reporting.uh"
import "code_builder.uh"

namespace U1
{

fn CodeBuilder::ProcessMixins( mut this, NamesScopeMutPtr& names_scope_ptr )
{
	// Perform several iterations in order to process mixins within mixins.
	for( auto mut i= 0u; i < g_max_mixins_depth; ++i )
	{
		// First evaluate all expressions. Doing so we prevent symbols produced in expansion of one mixin visible in expression of another.
		var u32 num_expressions= EvaluateMixinsExpressions_r( names_scope_ptr );
		if( num_expressions == 0u )
		{
			break;
		}

		if( i == g_max_mixins_depth - 1u )
		{
			REPORT_ERROR( MixinExpansionDepthReached, names_scope_ptr, SrcLoc( 0u, 1u, 0u ) )
		}

		// Populate name scopes using expressions evaluated on previous step.
		ExpandNamespaceMixins_r( names_scope_ptr );
	}
}

fn CodeBuilder::EvaluateMixinsExpressions_r( mut this, NamesScopePtr& names_scope_ptr ) : u32
{
	var u32 mut result(0);
	foreach( &el : names_scope_ptr.lock_imut().deref() )
	{
		if_var( &nested_names_scope_ptr : el.value().something_.get</NamesScopeMutPtr/>() )
		{
			result+= EvaluateMixinsExpressions_r( nested_names_scope_ptr );
		}
		else if_var( &mixins_ptr : el.value().something_.get</ ust::shared_ptr_mut</Mixins/> />() )
		{
			with( mut lock : mixins_ptr.lock_mut() )
			{
				result+= u32(lock.deref().size());
				foreach( &mut mixin_ : lock.deref() )
				{
					EvaluateMixinExpression( names_scope_ptr, mixin_ );
				}
			}
		}
	}

	return result;
}

fn CodeBuilder::ExpandNamespaceMixins_r( mut this, NamesScopeMutPtr& names_scope_ptr )
{
	// First collect mixins into a container, than expand mixins.
	// Doing so we avoid modifying names_scope while iterating it.
	var ust::vector</Mixins/> mut all_mixins;

	foreach( &el : names_scope_ptr.lock_imut().deref() )
	{
		if_var( &nested_names_scope_ptr : el.value().something_.get</NamesScopeMutPtr/>() )
		{
			ExpandNamespaceMixins_r( nested_names_scope_ptr );
		}
		else if_var( &mixins_ptr : el.value().something_.get</ ust::shared_ptr_mut</Mixins/> />() )
		{
			with( mut lock : mixins_ptr.lock_mut() )
			{
				all_mixins.push_back( take(lock.deref()) ); // Take mixins, because they are not needed later.
			}
		}
	}

	foreach( &mut mixins : all_mixins )
	{
		foreach( &mut mixin_ : mixins )
		{
			ExpandNamespaceMixin( names_scope_ptr, mixin_ );
		}
	}
}

fn CodeBuilder::ExpandNamespaceMixin( mut this, NamesScopeMutPtr& names_scope_ptr, Mixin &mut mixin_ )
{
	if( mixin_.string_constant == LLVMValueRef::Null )
	{
		return;
	}

	var size_type mut str_length= 0s;
	var $(char8) str_start= unsafe( LLVMGetAsString( mixin_.string_constant, str_length ) );

	auto mixin_text= unsafe( ust::string_view8( str_start, str_length ) );

	auto lexems= PrepareMixinLexems( names_scope_ptr, mixin_.src_loc, mixin_text );
	if( lexems.empty() )
	{
		return;
	}

	// TODO
	// Synt::ParseNamespaceElements( lexems.try_deref() );
}

fn CodeBuilder::EvaluateMixinExpression( mut this, NamesScopePtr& names_scope_ptr, Mixin &mut mixin_ )
{
	if( mixin_.syntax_element.empty() )
	{
		return;
	}
	auto syntax_element= mixin_.syntax_element.try_to_non_nullable();

	auto mut function_context= CreateGlobalFunctionContext();
	var VariableLite variable= BuildExpressionCodeEnsureVariable( names_scope_ptr, function_context, syntax_element.deref().expression ).lock_imut().deref();
	move(function_context);

	mixin_.syntax_element.reset();

	if( variable.constexpr_value == LLVMValueRef::Null )
	{
		REPORT_ERROR( ExpectedConstantExpression, names_scope_ptr, syntax_element.deref().src_loc )
		return;
	}

	if_var( &array_type : variable.t.GetArrayType() )
	{
		if( array_type.element_type != FundamentalType( U_FundamentalType::char8_, fundamental_llvm_types_.char8_ ) )
		{
			REPORT_ERROR( TypesMismatch, names_scope_ptr, syntax_element.deref().src_loc, "char8 array", variable.t.ToString() )
			return;
		}
	}
	else
	{
		REPORT_ERROR( TypesMismatch, names_scope_ptr, syntax_element.deref().src_loc, "char8 array", variable.t.ToString() )
		return;
	}

	// TODO - check UTF-8
	// TODO - check if constant data array

	mixin_.string_constant= variable.constexpr_value;
}

fn CodeBuilder::PrepareMixinLexems( mut this, NamesScopePtr& names_scope_ptr, SrcLoc& src_loc, ust::string_view8 mixin_text ) : ust::optional</Lexems/>
{
	auto mut lex_result= LexicalAnalysis( mixin_text );

	// Create new macro expansion context for mixin expansion.
	var u32 mut macro_expansion_index(0);
	with( mut lock : source_graph_.try_deref().macro_expansion_contexts.lock_mut() )
	{
		macro_expansion_index= u32(lock.deref().size());

		lock.deref().push_back(
			Synt::MacroExpansionContext
			{
				.macro_name= KeywordToString( Keyword::mixin_ ),
				.src_loc= src_loc,
				.macro_declaration_src_loc= src_loc,
			} );
	}

	// Use file index of the mixin for lexems in its expansion.
	var u32 file_index= src_loc.GetFileIndex();

	// Numerate lines in mixin lexems starting with line of the mixin expansion point.
	var u32 line_shift= src_loc.GetLine() - 1u;

	foreach( &mut lexem : lex_result.lexems )
	{
		lexem.src_loc.SetFileIndex( file_index );
		lexem.src_loc.SetMacroExpansionIndex( macro_expansion_index );
		var u32 line_corrected= lexem.src_loc.GetLine() + line_shift;
		lexem.src_loc.SetLine( line_corrected );
	}

	if( !lex_result.errors.empty() )
	{
		foreach( & error : lex_result.errors )
		{
			var SrcLoc mut src_loc_corrected= error.src_loc;
			src_loc_corrected.SetFileIndex( file_index );
			src_loc_corrected.SetMacroExpansionIndex( macro_expansion_index );
			var u32 line_corrected= src_loc_corrected.GetLine() + line_shift;
			src_loc_corrected.SetLine( line_corrected );

			REPORT_ERROR( MixinLexicalError, names_scope_ptr, src_loc_corrected, error.text )
		}

		return ust::null_optional;
	}

	return take(lex_result.lexems);
}

var u32 g_max_mixins_depth(4);

} // namespace U
