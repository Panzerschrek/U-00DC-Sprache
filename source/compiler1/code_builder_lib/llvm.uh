// This file contains prototypes of functions defined in llvm c interface.
// This prototypes is written manually. If llvm updated, all this function should be revised.

// Use enums for replacement of pointers, because Ãœ have no pointers.
?macro <? DefineLLVMRef:namespace ?name:ident ?>
	->
<?
	enum ?name : size_type { Null }
?>

// Types

DefineLLVMRef LLVMContextRef
DefineLLVMRef LLVMModuleRef
DefineLLVMRef LLVMBuilderRef
DefineLLVMRef LLVMTypeRef
DefineLLVMRef LLVMValueRef
DefineLLVMRef LLVMBasicBlockRef

type NullTerminatedString= char8;

enum LLVMBool : i32
{
	False,
	True,
}

// Functions

// Context
fn nomangle LLVMContextCreate() unsafe : LLVMContextRef;
fn nomangle LLVMContextDispose(LLVMContextRef C);

// Module
fn nomangle LLVMModuleCreateWithName(NullTerminatedString& ModuleID) unsafe : LLVMModuleRef;
fn nomangle LLVMDisposeModule(LLVMModuleRef M) unsafe;

// Type
fn nomangle LLVMInt1TypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMInt8TypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMInt16TypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMInt32TypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMInt64TypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMInt128TypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMFloatTypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMDoubleTypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMVoidTypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;

fn nomangle LLVMFunctionType(
	LLVMTypeRef ReturnType,
	LLVMTypeRef &ParamTypes, u32 ParamCount,
	LLVMBool IsVarArg) unsafe : LLVMTypeRef;

// Global value

fn nomangle LLVMAddFunction(LLVMModuleRef M, NullTerminatedString& Name, LLVMTypeRef FunctionTy) unsafe : LLVMValueRef;

// Basic block

fn nomangle LLVMAppendBasicBlockInContext(LLVMContextRef C, LLVMValueRef Fn, NullTerminatedString& Name) : LLVMBasicBlockRef;

// Module helpers

fn nomangle LLVMDumpModule(LLVMModuleRef M) unsafe;


// IRBuilder

fn nomangle LLVMCreateBuilderInContext(LLVMContextRef C) unsafe : LLVMBuilderRef;
fn nomangle LLVMDisposeBuilder(LLVMBuilderRef Builder) unsafe;

fn nomangle LLVMPositionBuilderAtEnd(LLVMBuilderRef Builder, LLVMBasicBlockRef Block) unsafe;

// Instructions

fn nomangle LLVMBuildBr(LLVMBuilderRef Builder, LLVMBasicBlockRef Dest) unsafe : LLVMValueRef;
