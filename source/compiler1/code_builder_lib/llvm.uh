// This file contains prototypes of functions defined in llvm c interface.
// This prototypes is written manually. If llvm updated, all this function should be revised.

// Use enums for replacement of pointers, because Ãœ have no pointers.
?macro <? DefineLLVMRef:namespace ?name:ident ?>
	->
<?
	enum ?name : size_type { Null }
?>

// Types

DefineLLVMRef LLVMContextRef
DefineLLVMRef LLVMModuleRef
DefineLLVMRef LLVMBuilderRef
DefineLLVMRef LLVMTypeRef
DefineLLVMRef LLVMValueRef
DefineLLVMRef LLVMBasicBlockRef
DefineLLVMRef LLVMTargetDataRef // Actually this is DataLayout
DefineLLVMRef LLVMAttributeRef
DefineLLVMRef LLVMComdatRef
DefineLLVMRef LLVMDIBuilderRef
DefineLLVMRef LLVMMetadataRef

type NullTerminatedString= char8;

enum LLVMBool : i32
{
	False,
	True,
}

enum LLVMLinkage : u32
{
	External,    /**< Externally visible function */
	AvailableExternally,
	LinkOnceAny, /**< Keep one copy of function when linking (inline)*/
	LinkOnceODR, /**< Same, but only replaced by something equivalent. */
	LinkOnceODRAutoHide, /**< Obsolete */
	WeakAny,     /**< Keep one copy of function when linking (weak) */
	WeakODR,     /**< Same, but only replaced by something equivalent. */
	Appending,   /**< Special purpose, only applies to global arrays */
	Internal,    /**< Rename collisions when linking (static functions) */
	Private,     /**< Like Internal, but omit from symbol table */
	DLLImport,   /**< Obsolete */
	DLLExport,   /**< Obsolete */
	ExternalWeak,/**< ExternalWeak linkage description */
	Ghost,       /**< Obsolete */
	Common,      /**< Tentative definitions */
	LinkerPrivate, /**< Like Private, but linker removes. */
	LinkerPrivateWeak /**< Like LinkerPrivate, but is weak. */
}

enum LLVMIntPredicate : u32
{
	Dummy00, Dummy01, Dummy02, Dummy03, Dummy04, Dummy05, Dummy06, Dummy07,
	Dummy08, Dummy09, Dummy0A, Dummy0B, Dummy0C, Dummy0D, Dummy0E, Dummy0F,
	Dummy10, Dummy11, Dummy12, Dummy13, Dummy14, Dummy15, Dummy16, Dummy17,
	Dummy18, Dummy19, Dummy1A, Dummy1B, Dummy1C, Dummy1D, Dummy1E, Dummy1F,

	// Shoud start with 32
	EQ      , /**< equal */
	NE,      /**< not equal */
	UGT,     /**< unsigned greater than */
	UGE,     /**< unsigned greater or equal */
	ULT,     /**< unsigned less than */
	ULE,     /**< unsigned less or equal */
	SGT,     /**< signed greater than */
	SGE,     /**< signed greater or equal */
	SLT,     /**< signed less than */
	SLE      /**< signed less or equal */
}

static_assert( u32(LLVMIntPredicate::EQ) == 32u );

enum LLVMRealPredicate : u32
{
	PredicateFalse, /**< Always false (always folded) */
	OEQ,            /**< True if ordered and equal */
	OGT,            /**< True if ordered and greater than */
	OGE,            /**< True if ordered and greater than or equal */
	OLT,            /**< True if ordered and less than */
	OLE,            /**< True if ordered and less than or equal */
	ONE,            /**< True if ordered and operands are unequal */
	ORD,            /**< True if ordered (no nans) */
	UNO,            /**< True if unordered: isnan(X) | isnan(Y) */
	UEQ,            /**< True if unordered or equal */
	UGT,            /**< True if unordered or greater than */
	UGE,            /**< True if unordered, greater than, or equal */
	ULT,            /**< True if unordered or less than */
	ULE,            /**< True if unordered, less than, or equal */
	UNE,            /**< True if unordered or not equal */
	PredicateTrue   /**< Always true (always folded) */
}

enum LLVMTypeKind : u32
{
	Void,        /**< type with no size */
	Half,        /**< 16 bit floating point type */
	Float,       /**< 32 bit floating point type */
	Double,      /**< 64 bit floating point type */
	X86_FP80,    /**< 80 bit floating point type (X87) */
	P128,       /**< 128 bit floating point type (112-bit mantissa)*/
	PPC_FP128,   /**< 128 bit floating point type (two 64-bits) */
	Label,       /**< Labels */
	Integer,     /**< Arbitrary bit width integers */
	Function,    /**< Functions */
	Struct,      /**< Structures */
	Array,       /**< Arrays */
	Pointer,     /**< Pointers */
	Vector,      /**< SIMD 'packed' format, or other vector type */
	Metadata,    /**< Metadata */
	X86_MMX,     /**< X86 MMX */
	Token,        /**< Tokens */
}

enum LLVMUnnamedAddr : u32
{
	NoUnnamedAddr,    /**< Address of the GV is significant. */
	LocalUnnamedAddr, /**< Address of the GV is locally insignificant. */
	GlobalUnnamedAddr /**< Address of the GV is globally insignificant. */
}

type LLVMAttributeIndex= u32;
auto LLVMAttributeReturnIndex= 0u;
auto LLVMAttributeFunctionIndex= ~0u;
auto LLVMAttributeFirstParamIndex= 1u;

enum LLVMComdatSelectionKind : u32
{
	Any,        ///< The linker may choose any COMDAT.
	ExactMatch, ///< The data referenced by the COMDAT must  be the same.
	Largest,    ///< The linker will choose the largest COMDAT.
	NoDuplicates, ///< No other Module may specify this COMDAT.
	SameSize ///< The data referenced by the COMDAT must be the same size.
}

type LLVMCallConvID = u32;

namespace LLVMCallConv
{
	var LLVMCallConvID
		C		(0),
		Fast	(8),
		Cold	(9),
		X86Stdcall(64);
}

type LLVMDWARFSourceLanguage= u32;
type LLVMDIFlags= u32;

enum LLVMDWARFTypeEncoding : u32
{
	none,
	address,
	boolean,
	complex_float,
	float,
	signed,
	signed_char,
	unsigned,
	unsigned_char,
}
static_assert( i32(LLVMDWARFTypeEncoding::unsigned_char) == 0x08 );

enum LLVMDWARFEmissionKind : u32
{
	None,
	Full,
	LineTablesOnly
}

// Functions

// Context
fn nomangle LLVMContextCreate() unsafe : LLVMContextRef;
fn nomangle LLVMContextDispose(LLVMContextRef C) unsafe;

// Module
fn nomangle LLVMModuleCreateWithNameInContext(NullTerminatedString& ModuleID, LLVMContextRef C) unsafe : LLVMModuleRef;
fn nomangle LLVMDisposeModule(LLVMModuleRef M) unsafe;
fn nomangle LLVMSetModuleDataLayout(LLVMModuleRef M, LLVMTargetDataRef DL) unsafe;
fn nomangle LLVMSetTarget(LLVMModuleRef M, NullTerminatedString& Triple) unsafe;

// Data layout

fn nomangle LLVMABISizeOfType(LLVMTargetDataRef TD, LLVMTypeRef Ty) unsafe : u64;
fn nomangle LLVMABIAlignmentOfType(LLVMTargetDataRef TD, LLVMTypeRef Ty) unsafe : u32;
fn nomangle LLVMOffsetOfElement(LLVMTargetDataRef TD, LLVMTypeRef StructTy, u32 Element) unsafe : u64;
fn nomangle LLVMPointerSize(LLVMTargetDataRef TD) : u32;

// Type
fn nomangle LLVMInt1TypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMInt8TypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMInt16TypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMInt32TypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMInt64TypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMInt128TypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMFloatTypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMDoubleTypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMVoidTypeInContext(LLVMContextRef C) unsafe : LLVMTypeRef;
fn nomangle LLVMIntPtrTypeInContext(LLVMContextRef C, LLVMTargetDataRef TD) unsafe : LLVMTypeRef;

fn nomangle LLVMGetIntTypeWidth(LLVMTypeRef IntegerTy) unsafe : u32;

fn nomangle LLVMArrayType(LLVMTypeRef ElementType, u32 ElementCount) unsafe : LLVMTypeRef;

fn nomangle LLVMFunctionType(
	LLVMTypeRef ReturnType,
	$(LLVMTypeRef) ParamTypes, u32 ParamCount,
	LLVMBool IsVarArg) unsafe : LLVMTypeRef;

fn nomangle LLVMPointerType(LLVMTypeRef ElementType, u32 AddressSpace) unsafe : LLVMTypeRef;

fn nomangle LLVMStructTypeInContext(LLVMContextRef C, $(LLVMTypeRef) ElementTypes, u32 ElementCount, LLVMBool Packed) unsafe : LLVMTypeRef;
fn nomangle LLVMStructCreateNamed(LLVMContextRef C, NullTerminatedString& Name) unsafe : LLVMTypeRef;
fn nomangle LLVMStructSetBody(LLVMTypeRef StructTy, $(LLVMTypeRef) ElementTypes, u32 ElementCount, LLVMBool Packed) unsafe;
fn nomangle LLVMIsOpaqueStruct(LLVMTypeRef StructTy) unsafe : LLVMBool;

fn nomangle LLVMStructGetTypeAtIndex(LLVMTypeRef StructTy, u32 i) unsafe : LLVMTypeRef;
fn nomangle LLVMCountStructElementTypes(LLVMTypeRef StructTy) unsafe: u32;

fn nomangle LLVMGetArrayLength(LLVMTypeRef ArrayTy) unsafe : u32;

fn nomangle LLVMGetElementType(LLVMTypeRef Ty) unsafe : LLVMTypeRef;

fn nomangle LLVMGetTypeKind(LLVMTypeRef Ty) unsafe : LLVMTypeKind;

fn nomangle LLVMTypeIsSized(LLVMTypeRef Ty) unsafe : LLVMBool;

// Value

fn nomangle LLVMTypeOf(LLVMValueRef Val) unsafe : LLVMTypeRef;
fn nomangle LLVMGetValueName2(LLVMValueRef Val, size_type &mut Length) unsafe : $(char8);
fn nomangle LLVMSetValueName2(LLVMValueRef Val, $(char8) Name, size_type NameLen) unsafe;
fn nomangle LLVMConstIntGetZExtValue(LLVMValueRef ConstantVal) unsafe : u64;
fn nomangle LLVMConstIntGetSExtValue(LLVMValueRef ConstantVal) unsafe : i64;
fn nomangle LLVMGetInitializer(LLVMValueRef GlobalVar) unsafe : LLVMValueRef;
fn nomangle LLVMGetOperand(LLVMValueRef Val, u32 Index) unsafe : LLVMValueRef;
fn nomangle LLVMGetNumOperands(LLVMValueRef Val) unsafe : i32;
fn nomangle LLVMIsConstant(LLVMValueRef Val) unsafe : LLVMBool;
fn nomangle LLVMIsUndef(LLVMValueRef Val) unsafe : LLVMBool;

fn nomangle LLVMReplaceAllUsesWith(LLVMValueRef OldVal, LLVMValueRef NewVal) unsafe;

fn nomangle LLVMIsAArgument(LLVMValueRef Val) unsafe : LLVMValueRef;
fn nomangle LLVMIsAAllocaInst(LLVMValueRef Val) unsafe : LLVMValueRef;
fn nomangle LLVMIsAConstantExpr(LLVMValueRef Val) unsafe : LLVMValueRef;

fn nomangle LLVMSetFunctionCallConv(LLVMValueRef Fn, LLVMCallConvID CC) unsafe;
fn nomangle LLVMSetInstructionCallConv(LLVMValueRef Instr, LLVMCallConvID CC) unsafe;

// Global value

fn nomangle LLVMAddFunction(LLVMModuleRef M, NullTerminatedString& Name, LLVMTypeRef FunctionTy) unsafe : LLVMValueRef;
fn nomangle LLVMSetLinkage(LLVMValueRef Global, LLVMLinkage Linkage) unsafe;
fn nomangle LLVMSetUnnamedAddress(LLVMValueRef Global, LLVMUnnamedAddr UnnamedAddr) unsafe;

// Global variable

fn nomangle LLVMGetNamedGlobal(LLVMModuleRef M, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMAddGlobal(LLVMModuleRef M, LLVMTypeRef Ty, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMSetInitializer(LLVMValueRef GlobalVar, LLVMValueRef ConstantVal) unsafe : LLVMValueRef;
fn nomangle LLVMSetGlobalConstant(LLVMValueRef GlobalVar, LLVMBool IsConstant) unsafe;

// Function

fn nomangle LLVMGetParam(LLVMValueRef Fn, u32 Index) unsafe : LLVMValueRef;
fn nomangle LLVMCountBasicBlocks(LLVMValueRef Fn) unsafe : u32;
fn nomangle LLVMGetLastBasicBlock(LLVMValueRef Fn) unsafe : LLVMBasicBlockRef;
fn nomangle LLVMDeleteFunction(LLVMValueRef Fn) unsafe;

// Basic block

fn nomangle LLVMInstructionEraseFromParent(LLVMValueRef Inst) unsafe;
fn nomangle LLVMGetLastInstruction(LLVMBasicBlockRef BB) unsafe : LLVMValueRef;

fn nomangle LLVMCreateBasicBlockInContext(LLVMContextRef C, NullTerminatedString& Name) unsafe : LLVMBasicBlockRef;
fn nomangle LLVMAppendBasicBlockInContext(LLVMContextRef C, LLVMValueRef Fn, NullTerminatedString& Name) unsafe : LLVMBasicBlockRef;
fn nomangle LLVMAppendExistingBasicBlock(LLVMValueRef Fn, LLVMBasicBlockRef BB) unsafe;
fn nomangle LLVMDeleteBasicBlock(LLVMBasicBlockRef BB) unsafe;

// Comdat

fn nomangle LLVMGetOrInsertComdat(LLVMModuleRef M, NullTerminatedString& Name) unsafe : LLVMComdatRef;
fn nomangle LLVMGetComdatSelectionKind(LLVMComdatRef C) unsafe : LLVMComdatSelectionKind;
fn nomangle LLVMSetComdatSelectionKind(LLVMComdatRef C, LLVMComdatSelectionKind Kind) unsafe;
fn nomangle LLVMGetComdat(LLVMValueRef V) unsafe : LLVMComdatRef;
fn nomangle LLVMSetComdat(LLVMValueRef V, LLVMComdatRef C) unsafe;

// Module helpers

fn nomangle LLVMDumpModule(LLVMModuleRef M) unsafe;


// IRBuilder

fn nomangle LLVMCreateBuilderInContext(LLVMContextRef C) unsafe : LLVMBuilderRef;
fn nomangle LLVMDisposeBuilder(LLVMBuilderRef Builder) unsafe;

fn nomangle LLVMGetInsertBlock(LLVMBuilderRef Builder) unsafe : LLVMBasicBlockRef;

fn nomangle LLVMPositionBuilderAtEnd(LLVMBuilderRef Builder, LLVMBasicBlockRef Block) unsafe;
fn nomangle LLVMInsertExistingBasicBlockAfterInsertBlock(LLVMBuilderRef Builder, LLVMBasicBlockRef BB) unsafe;

fn nomangle LLVMSetCurrentDebugLocation2(LLVMBuilderRef Builder, LLVMMetadataRef Loc) unsafe;

// Constants
fn nomangle LLVMConstInt(LLVMTypeRef IntTy, u64 N, LLVMBool SignExtend) unsafe : LLVMValueRef;
fn nomangle LLVMConstReal(LLVMTypeRef RealTy, f64 N) unsafe : LLVMValueRef;
fn nomangle LLVMGetUndef(LLVMTypeRef Ty) unsafe : LLVMValueRef;
fn nomangle LLVMConstNull(LLVMTypeRef Ty) unsafe : LLVMValueRef; /* all zeroes */
fn nomangle LLVMConstArray(LLVMTypeRef ElementTy, $(LLVMValueRef) ConstantVals, u32 Length)  unsafe : LLVMValueRef;
fn nomangle LLVMConstStructInContext(LLVMContextRef C, $(LLVMValueRef) ConstantVals, u32 Count, LLVMBool Packed) unsafe : LLVMValueRef;
fn nomangle LLVMConstNamedStruct(LLVMTypeRef StructTy, $(LLVMValueRef) ConstantVals, u32 Count) unsafe : LLVMValueRef;
fn nomangle LLVMConstStringInContext(LLVMContextRef C, $(char8) Str, u32 Length, LLVMBool DontNullTerminate) unsafe : LLVMValueRef;

fn nomangle LLVMConstExtractValue(LLVMValueRef AggConstant, u32& IdxList, u32 NumIdx) unsafe : LLVMValueRef;

// Instructions

fn nomangle LLVMBuildBr(LLVMBuilderRef Builder, LLVMBasicBlockRef Dest) unsafe : LLVMValueRef;
fn nomangle LLVMBuildCondBr(LLVMBuilderRef Builder, LLVMValueRef If, LLVMBasicBlockRef Then, LLVMBasicBlockRef Else) unsafe : LLVMValueRef;

fn nomangle LLVMBuildRetVoid(LLVMBuilderRef Builder) unsafe : LLVMValueRef;
fn nomangle LLVMBuildRet(LLVMBuilderRef Builder, LLVMValueRef V) unsafe : LLVMValueRef;

fn nomangle LLVMBuildLoad(LLVMBuilderRef Builder, LLVMValueRef PointerVal, NullTerminatedString& name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildStore(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMValueRef Ptr) unsafe : LLVMValueRef;

fn nomangle LLVMBuildAlloca(LLVMBuilderRef Builder, LLVMTypeRef Ty, NullTerminatedString& name) unsafe : LLVMValueRef;

fn nomangle LLVMBuildGEP(LLVMBuilderRef BBuilder, LLVMValueRef Pointer, $(LLVMValueRef) Indices, u32 NumIndices, NullTerminatedString& Name) unsafe : LLVMValueRef;

fn nomangle LLVMBuildCall(LLVMBuilderRef Builder, LLVMValueRef Fn, $(LLVMValueRef) Args, u32 NumArgs, NullTerminatedString& Name) unsafe: LLVMValueRef;
fn nomangle LLVMBuildSelect(LLVMBuilderRef Builder, LLVMValueRef If, LLVMValueRef Then, LLVMValueRef Else, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildUnreachable(LLVMBuilderRef Builder) unsafe : LLVMValueRef;

// PHI

fn nomangle LLVMBuildPhi(LLVMBuilderRef Builder, LLVMTypeRef Ty, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMAddIncoming(LLVMValueRef PhiNode, $(LLVMValueRef) IncomingValues, $(LLVMBasicBlockRef) IncomingBlocks, u32 Count) unsafe;

// Arithmetic
fn nomangle LLVMBuildAdd(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildSub(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildMul(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildUDiv(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildExactUDiv(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildSDiv(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildExactSDiv(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildURem(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildSRem(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;

// Binary bitwise operators
fn nomangle LLVMBuildAnd(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildOr(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildXor(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;

// Bit shift operators
fn nomangle LLVMBuildShl(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildLShr(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildAShr(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;

// Floating point arithmetic
fn nomangle LLVMBuildFAdd(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildFSub(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildFMul(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildFDiv(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildFRem(LLVMBuilderRef Builder, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;

// Compare
fn nomangle LLVMBuildICmp(LLVMBuilderRef Builder, LLVMIntPredicate Op, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildFCmp(LLVMBuilderRef Builder, LLVMRealPredicate Op, LLVMValueRef LHS, LLVMValueRef RHS, NullTerminatedString& Name) unsafe : LLVMValueRef;

// Unary arithmetic
fn nomangle LLVMBuildNeg(LLVMBuilderRef Builder, LLVMValueRef V, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildFNeg(LLVMBuilderRef Builder, LLVMValueRef V, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildNot(LLVMBuilderRef Builder, LLVMValueRef V, NullTerminatedString& Name) unsafe : LLVMValueRef;

// Casts

fn nomangle LLVMBuildTrunc(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMTypeRef DestTy, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildZExt(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMTypeRef DestTy, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildSExt(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMTypeRef DestTy, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildFPToUI(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMTypeRef DestTy, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildFPToSI(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMTypeRef DestTy, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildUIToFP(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMTypeRef DestTy, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildSIToFP(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMTypeRef DestTy, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildFPTrunc(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMTypeRef DestTy, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildFPExt(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMTypeRef DestTy, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildPointerCast(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMTypeRef DestTy, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildPtrToInt(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMTypeRef DestTy, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildIntToPtr(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMTypeRef DestTy, NullTerminatedString& Name) unsafe : LLVMValueRef;
fn nomangle LLVMBuildBitCast(LLVMBuilderRef Builder, LLVMValueRef Val, LLVMTypeRef DestTy, NullTerminatedString& Name) unsafe : LLVMValueRef;

// Intrinsics

fn nomangle LLVMBuildMemCpy(
	LLVMBuilderRef B,
	LLVMValueRef Dst, u32 DstAlign,
	LLVMValueRef Src, u32 SrcAlign,
	LLVMValueRef Size) unsafe : LLVMValueRef;

fn nomangle LLVMLookupIntrinsicID($(char8) Name, size_type NameLen) unsafe : u32;

fn nomangle LLVMGetIntrinsicDeclaration(
	LLVMModuleRef Mod,
	u32 ID,
	$(LLVMTypeRef) ParamTypes, size_type ParamCount) unsafe : LLVMValueRef;

// Attributes
fn nomangle LLVMCreateEnumAttribute(LLVMContextRef C, u32 KindID, u64 Val) unsafe : LLVMAttributeRef;
fn nomangle LLVMGetEnumAttributeKindForName($(char8) Name, size_type SLen) unsafe : u32;

fn nomangle LLVMAddAttributeAtIndex(LLVMValueRef F, LLVMAttributeIndex Idx, LLVMAttributeRef A) unsafe;

// Metadata

fn nomangle LLVMSetMetadata(LLVMValueRef Val, u32 KindID, LLVMValueRef Node) unsafe;
fn nomangle LLVMGetMDKindIDInContext(LLVMContextRef C, $(char8) Name, u32 SLen) unsafe : u32;
fn nomangle LLVMMDNodeInContext2(LLVMContextRef C, $(LLVMMetadataRef) MDs, size_type Count) unsafe : LLVMMetadataRef;
fn nomangle LLVMMetadataAsValue(LLVMContextRef C, LLVMMetadataRef MD) unsafe : LLVMValueRef;

// Debug info
fn nomangle LLVMCreateDIBuilder(LLVMModuleRef M) unsafe : LLVMDIBuilderRef;
fn nomangle LLVMDIBuilderFinalize(LLVMDIBuilderRef Builder) unsafe;
fn nomangle LLVMDisposeDIBuilder(LLVMDIBuilderRef Builder) unsafe;

fn nomangle LLVMDIBuilderCreateFile(
	LLVMDIBuilderRef Builder,
	$(char8) Filename, size_type FilenameLen,
	$(char8) Directory, size_type DirectoryLen) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderCreateCompileUnit(
	LLVMDIBuilderRef Builder,
	LLVMDWARFSourceLanguage Lang,
	LLVMMetadataRef FileRef,
	$(char8) Producer, size_type ProducerLen,
	LLVMBool isOptimized,
	$(char8) Flags, size_type FlagsLen,
	u32 RuntimeVer,
	$(char8) SplitName, size_type SplitNameLen,
	LLVMDWARFEmissionKind Kind,
	u32 DWOId,
	LLVMBool SplitDebugInlining,
	LLVMBool DebugInfoForProfiling) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderCreateLexicalBlock(
	LLVMDIBuilderRef Builder,
	LLVMMetadataRef Scope,
	LLVMMetadataRef File,
	u32 Line,
	u32 Column) unsafe : LLVMMetadataRef;

fn nomangle LLVMDILocationGetScope(LLVMMetadataRef Location) unsafe : LLVMMetadataRef;
fn nomangle LLVMGetSubprogram(LLVMValueRef Func) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderCreateAutoVariable(
	LLVMDIBuilderRef Builder,
	LLVMMetadataRef Scope,
	$(char8) Name, size_type NameLen,
	LLVMMetadataRef File,
	u32 LineNo,
	LLVMMetadataRef Ty,
	LLVMBool AlwaysPreserve,
	LLVMDIFlags Flags,
	u32 AlignInBits) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderInsertDeclareAtEnd(
	LLVMDIBuilderRef Builder,
	LLVMValueRef Storage,
	LLVMMetadataRef VarInfo,
	LLVMMetadataRef Expr,
	LLVMMetadataRef DebugLoc,
	LLVMBasicBlockRef Block) unsafe : LLVMValueRef;

fn nomangle LLVMDIBuilderCreateFunction(
	LLVMDIBuilderRef Builder,
	LLVMMetadataRef Scope,
	$(char8) Name, size_type NameLen,
	$(char8) LinkageName, size_type LinkageNameLen,
	LLVMMetadataRef File,
	u32 LineNo,
	LLVMMetadataRef Ty,
	LLVMBool IsLocalToUnit,
	LLVMBool IsDefinition,
	u32 ScopeLine,
	LLVMDIFlags Flags,
	LLVMBool IsOptimized) unsafe : LLVMMetadataRef;

fn nomangle LLVMSetSubprogram(LLVMValueRef Func, LLVMMetadataRef SP) unsafe;

fn nomangle LLVMDIBuilderCreateDebugLocation(
	LLVMContextRef Ctx,
	u32 Line,
	u32 Column,
	LLVMMetadataRef Scope,
	LLVMMetadataRef InlinedAt) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderCreateExpression(LLVMDIBuilderRef Builder, i64& Addr, size_type Length) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderCreateBasicType(
	LLVMDIBuilderRef Builder,
	$(char8) Name, size_type NameLen,
	u32 SizeInBits,
	LLVMDWARFTypeEncoding Encoding,
	LLVMDIFlags Flags) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderCreatePointerType(
	LLVMDIBuilderRef Builder,
	LLVMMetadataRef PointeeTy,
	u64 SizeInBits,
	u32 AlignInBits,
	u32 AddressSpace,
	$(char8) Name, size_type NameLen) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderCreateSubroutineType(
	LLVMDIBuilderRef Builder,
	LLVMMetadataRef File,
	$(LLVMMetadataRef) ParameterTypes, u32 NumParameterTypes,
	LLVMDIFlags Flags) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderCreateStructType(
	LLVMDIBuilderRef Builder,
	LLVMMetadataRef Scope,
	$(char8) Name, size_type NameLen,
	LLVMMetadataRef File,
	u32 LineNumber,
	u64 SizeInBits,
	u32 AlignInBits,
	LLVMDIFlags Flags,
	LLVMMetadataRef DerivedFrom,
	$(LLVMMetadataRef) Elements, u32 NumElements,
	u32 RunTimeLang,
	LLVMMetadataRef VTableHolder,
	$(char8) UniqueId, size_type UniqueIdLen) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderCreateMemberType(
	LLVMDIBuilderRef Builder,
	LLVMMetadataRef Scope,
	$(char8) Name, size_type NameLen,
	LLVMMetadataRef File,
	u32 LineNo,
	u64 SizeInBits,
	u32 AlignInBits,
	u64 OffsetInBits,
	LLVMDIFlags Flags,
	LLVMMetadataRef Ty) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderCreateClassType(
	LLVMDIBuilderRef Builder,
	LLVMMetadataRef Scope,
	$(char8) Name, size_type NameLen,
	LLVMMetadataRef File,
	u32 LineNumber,
	u64 SizeInBits,
	u32 AlignInBits,
	u64 OffsetInBits,
	LLVMDIFlags Flags,
	LLVMMetadataRef DerivedFrom,
	$(LLVMMetadataRef) Elements, u32 NumElements,
	LLVMMetadataRef VTableHolder,
	LLVMMetadataRef TemplateParamsNode,
	$(char8) UniqueIdentifier, size_type UniqueIdentifierLen) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderGetOrCreateSubrange(LLVMDIBuilderRef Builder, i64 LowerBound, i64 Count) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderCreateArrayType(
	LLVMDIBuilderRef Builder,
	u64 Size,
	u32 AlignInBits,
	LLVMMetadataRef Ty,
	$(LLVMMetadataRef) Subscripts, u32 NumSubscripts) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderCreateEnumerator(
	LLVMDIBuilderRef Builder,
	$(char8) Name, size_type NameLen,
	i64 Value,
	LLVMBool IsUnsigned) unsafe : LLVMMetadataRef;

fn nomangle LLVMDIBuilderCreateEnumerationType(
	LLVMDIBuilderRef Builder,
	LLVMMetadataRef Scope,
	$(char8) Name, size_type NameLen,
	LLVMMetadataRef File,
	u32 LineNumber,
	u64 SizeInBits,
	u32 AlignInBits,
	$(LLVMMetadataRef) Elements, u32 NumElements,
	LLVMMetadataRef ClassTy) unsafe : LLVMMetadataRef;
