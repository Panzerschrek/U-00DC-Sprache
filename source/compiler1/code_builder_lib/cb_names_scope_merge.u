import "/keywords.uh"
import "error_reporting.uh"
import "code_builder.uh"


namespace U1
{

fn CodeBuilder::NamesScopeMerge(
	NamesScopeMutPtr& dst_ptr,
	NamesScope& src,
	ClassesMembersNamespacesTable& src_classes_members_namespaces_table )
{
	foreach( &el : src )
	{
		with( dst_lock : dst_ptr.lock_imut() )
		{
			if_var( &dst_value : dst_lock.deref().GetThisScopeValue( el.key() ) )
			{
				NamesScopeMergeValues( dst_value, el.value(), el.key(), dst_ptr, src_classes_members_namespaces_table );
				continue;
			}
		}
		with( mut dst_lock : dst_ptr.lock_mut() )
		{
			dst_lock.deref().AddName( el.key(), DeepCopyNamesScopeValue( el.value(), dst_ptr, src_classes_members_namespaces_table ) );
		}
	}
}

fn CodeBuilder::DeepCopyNamesScopeValue(
	NamesScopeValue& value,
	NamesScopePtr& target_names_scope,
	ClassesMembersNamespacesTable& src_classes_members_namespaces_table ) : NamesScopeValue
{
	variant_visit( &el : value.something_ )
	{
		type ElementT= typeof(el);
		static_if(
			same_type</ ElementT, NamesScopeMutPtr/> ||
			same_type</ ElementT, ClassTypePtr/> )
		{
			return DeepCopyNamesScopeValue( el, target_names_scope, src_classes_members_namespaces_table );
		}
		else
		{
			return DeepCopyNamesScopeValue( el );
		}
	}
	halt;
}

fn CodeBuilder::DeepCopyNamesScopeValue(
	NamesScopeMutPtr& namespace_,
	NamesScopePtr& target_names_scope,
	ClassesMembersNamespacesTable& src_classes_members_namespaces_table ) : NamesScopeValue
{
	auto src_lock= namespace_.lock_imut();
	auto& src= src_lock.deref();

	var NamesScopeMutPtr copy_ptr( NamesScope( src.GetThisNamespaceName(), target_names_scope ) );

	with( mut copy_lock : copy_ptr.lock_mut() )
	{
		copy_lock.deref().CopyAccessRightsFrom( src );
	}

	NamesScopeMerge( copy_ptr, src, src_classes_members_namespaces_table );

	return copy_ptr;
}

fn CodeBuilder::DeepCopyNamesScopeValue(
	ClassTypePtr& class_type,
	NamesScopePtr& target_names_scope,
	ClassesMembersNamespacesTable& src_classes_members_namespaces_table ) : NamesScopeValue
{
	// Take copy of internal class namespace to prevent modification of source namespace.
	auto src_namespace= src_classes_members_namespaces_table[ class_type ];
	auto src_lock= src_namespace.lock_imut();
	auto& src= src_lock.deref();

	var NamesScopeMutPtr mut dst_namespace( NamesScope( src.GetThisNamespaceName(), target_names_scope ) );

	with( mut lock : dst_namespace.lock_mut() )
	{
		lock.deref().CopyAccessRightsFrom( src );
		lock.deref().SetClass( class_type );
	}

	NamesScopeMerge( dst_namespace, src, src_classes_members_namespaces_table );

	auto mut class_lock= class_type.lock_mut();
	// It's fine to modify members pointer. Anyway we save members namespace for each source file in special table.
	class_lock.deref().members= dst_namespace;

	return class_type;
}

fn CodeBuilder::DeepCopyNamesScopeValue( ust::shared_ptr_mut</Type/>& t ) : NamesScopeValue
{
	// We have only global types as "type" in global names scope. It is unchanged, so, we can just take copy of shared pointer.
	return t;
}

fn CodeBuilder::DeepCopyNamesScopeValue( ust::shared_ptr_mut</Variable/>& variable ) : NamesScopeValue
{
	// Global namespaces should not contain "Variable", only "GlobalVariable" or "GlobalAutoVariable"
	ust::ignore_unused( variable );
	halt;
}

fn CodeBuilder::DeepCopyNamesScopeValue( ust::shared_ptr_mut</FunctionsSet/>& functions_set ) : NamesScopeValue
{
	// Functions set may be extended, so, copy it.
	return NamesScopeValue( functions_set.lock_imut().deref() );
}

fn CodeBuilder::DeepCopyNamesScopeValue( ust::shared_ptr_mut</ClassField/>& class_field ) : NamesScopeValue
{
	// If cass namespace cotains class field, class must be complete in it's compilation unit and will not be modified later.
	// So, take copy of shared pointer.
	return class_field;
}

fn CodeBuilder::DeepCopyNamesScopeValue( EnumTypePtr& enum_type ) : NamesScopeValue
{
	// Enum type is uncahged once it prepared, so, we can just take copy of shared pointer.
	// Enum internal namespace does not contain actual data, so, we can just take copy of its shared pointer.
	return enum_type;
}

fn CodeBuilder::DeepCopyNamesScopeValue( ust::shared_ptr_mut</TypeAlias/>& type_alias ) : NamesScopeValue
{
	// Type alias is unchaged once it prepared, so, we can just take copy of shared pointer.
	return type_alias;
}

fn CodeBuilder::DeepCopyNamesScopeValue( ust::shared_ptr_mut</TypeTemplatesSet/>& type_templates_set ) : NamesScopeValue
{
	// Type templates set may be extended, so, take copy of value.
	return NamesScopeValue( type_templates_set.lock_imut().deref() );
}

fn CodeBuilder::DeepCopyNamesScopeValue( ust::shared_ptr_mut</TemplateArg/>& template_arg ) : NamesScopeValue
{
	// Only template args namespaces may contain template args. We should not process them here.
	ust::ignore_unused( template_arg );
	halt;
}

fn CodeBuilder::DeepCopyNamesScopeValue( ust::shared_ptr_mut</GlobalVariable/>& global_variable ) : NamesScopeValue
{
	// Global variable is uncahged once it prepared, so, we can just take copy of shared pointer.
	return global_variable;
}

fn CodeBuilder::DeepCopyNamesScopeValue( ust::shared_ptr_mut</GlobalAutoVariable/>& global_auto_variable ) : NamesScopeValue
{
	// Global auto variable is uncahged once it prepared, so, we can just take copy of shared pointer.
	return global_auto_variable;
}

fn CodeBuilder::DeepCopyNamesScopeValue( ust::shared_ptr_mut</GlobalStaticAssertsSet/>& global_static_asserts ) : NamesScopeValue
{
	// Just ignore imported static asserts and create value for new static asserts.
	ust::ignore_unused( global_static_asserts );
	return GlobalStaticAssertsSet();
}

fn CodeBuilder::DeepCopyNamesScopeValue( ust::shared_ptr_mut</Mixins/>& mixins ) : NamesScopeValue
{
	// Mixins are expanded earlier and this container should be empty. Do not bother copying it.
	ust::ignore_unused( mixins );
	return Mixins();
}

fn CodeBuilder::NamesScopeMergeValues(
	NamesScopeValue& dst,
	NamesScopeValue& src,
	ust::string8& name,
	NamesScopePtr& target_names_scope,
	ClassesMembersNamespacesTable& src_classes_members_namespaces_table )
{
	if( dst.something_.index() != src.something_.index() )
	{
		auto src_src_loc= GetValueSrcLoc( src );
		auto dst_src_loc= GetValueSrcLoc( dst );
		auto src_loc= ( src_src_loc.GetLine() == 0u32 ? dst_src_loc : src_src_loc );

		REPORT_ERROR( Redefinition, target_names_scope, src_loc, name )
		return;
	}

	{ // Merge namespaces.
		auto dst_namespace= dst.Get</NamesScope/>();
		auto src_namespace= src.Get</NamesScope/>();
		if( !dst_namespace.empty() )
		{
			NamesScopeMerge( dst_namespace.try_to_non_nullable(), src_namespace.try_lock_imut().deref(), src_classes_members_namespaces_table );
			return;
		}
	}
	{ // Check types.
		auto dst_type_ptr= dst.Get</Type/>();
		auto src_type_ptr= src.Get</Type/>();
		if( !dst_type_ptr.empty() )
		{
			if( dst_type_ptr.try_lock_imut().deref() != src_type_ptr.try_lock_imut().deref() )
			{
				REPORT_ERROR( Redefinition, target_names_scope, SrcLoc() /* TODO - src_loc */, name )
				return;
			}
			return;
		}
	}
	{ // Functions sets.
		auto dst_functions_set_ptr= dst.Get</FunctionsSet/>();
		auto src_functions_set_ptr= src.Get</FunctionsSet/>();
		if( !dst_functions_set_ptr.empty() )
		{
			auto mut dst_lock= dst_functions_set_ptr.try_lock_mut();
			auto &mut dst= dst_lock.deref();

			auto mut src_lock= src_functions_set_ptr.try_lock_mut();
			auto& src= src_lock.deref();

			foreach( &function : src.functions )
			{
				var SrcLoc mut func_src_loc;
				if_var( &el :function.prototype_syntax_element )
				{
					func_src_loc= el.src_loc;
				}
				if_var( &el : function.body_syntax_element )
				{
					func_src_loc= el.src_loc;
				}

				if_var( &mut prev_function : GetFunctionWithSameType( dst, function.t ) )
				{
					if( function.prototype_syntax_element == prev_function.prototype_syntax_element )
					{
						// TODO - check here attrubute mismatch (nomangle, virtual, generated, etc.).
						if( function.body_syntax_element == prev_function.body_syntax_element )
						{
							// Ok - body is same or empty.
						}
						else if( function.body_syntax_element.empty() && !prev_function.body_syntax_element.empty() )
						{
							// Ok - prev function has body and new function has no body.
						}
						else if( !function.body_syntax_element.empty() && prev_function.body_syntax_element.empty() )
						{
							// Ok - set body.
							prev_function.body_syntax_element= function.body_syntax_element;
						}
						else
						{
							// Non-empty different bodies.
							REPORT_ERROR( FunctionBodyDuplication, target_names_scope, func_src_loc, name )
						}
					}
					else
					{
						REPORT_ERROR( FunctionPrototypeDuplication, target_names_scope, func_src_loc, name )
					}

					continue;
				}

				ApplyOverloadedFunction( dst, function, target_names_scope, func_src_loc );
			}

			foreach( &function_template : src.function_templates ) label function_templates_loop
			{
				foreach( &prev_function_template : dst.function_templates )
				{
					if( function_template == prev_function_template )
					{
						continue label function_templates_loop;
					}
				}

				// Not found.
				dst.function_templates.push_back( function_template );
			}

			return;
		}
	}
	{ // Class type.
		auto dst_class_type_ptr= dst.Get</ClassType/>();
		auto src_class_type_ptr= src.Get</ClassType/>();
		if( !dst_class_type_ptr.empty() )
		{
			if( dst_class_type_ptr != src_class_type_ptr )
			{
				REPORT_ERROR( Redefinition, target_names_scope, src_class_type_ptr.try_lock_imut().deref().syntax_element.try_deref().src_loc, name )
			}
			else
			{
				// Merge changes made in internal namespace of the class.
				// This affects almost only functions sets.
				auto src_namespace= src_classes_members_namespaces_table[ src_class_type_ptr.try_to_non_nullable() ];
				NamesScopeMerge( dst_class_type_ptr.try_lock_imut().deref().members, src_namespace.lock_imut().deref(), src_classes_members_namespaces_table );
			}
			return;
		}
	}
	{ // Enum type.
		auto dst_enum_type_ptr= dst.Get</Enum/>();
		auto src_enum_type_ptr= src.Get</Enum/>();
		if( !dst_enum_type_ptr.empty() )
		{
			if( dst_enum_type_ptr != src_enum_type_ptr )
			{
				REPORT_ERROR( Redefinition, target_names_scope, src_enum_type_ptr.try_lock_imut().deref().syntax_element.deref().src_loc, name )
			}
			return;
		}
	}
	{ // Type alias.
		auto dst_type_alias_ptr= dst.Get</TypeAlias/>();
		auto src_type_alias_ptr= src.Get</TypeAlias/>();
		if( !dst_type_alias_ptr.empty() )
		{
			if( dst_type_alias_ptr.try_lock_imut().deref().syntax_element != src_type_alias_ptr.try_lock_imut().deref().syntax_element )
			{
				REPORT_ERROR( Redefinition, target_names_scope, src_type_alias_ptr.try_lock_imut().deref().syntax_element.deref().src_loc, name )
			}
			return;
		}
	}
	{ // Merge type template sets.
		auto dst_type_templates_set_ptr= dst.Get</TypeTemplatesSet/>();
		auto src_type_templates_set_ptr= src.Get</TypeTemplatesSet/>();
		if( !dst_type_templates_set_ptr.empty() )
		{
			auto src_lock= src_type_templates_set_ptr.try_lock_imut();
			auto& src= src_lock.deref();

			auto mut dst_lock= dst_type_templates_set_ptr.try_lock_mut();
			auto &mut dst= dst_lock.deref();

			if( src != dst )
			{
				// Require defining a set of overloaded type templates in a single file.
				// This is needed in order to prevent possible mangling problems of template types with arguments - overloaded type templates.
				REPORT_ERROR( OverloadingImportedTypeTemplate, target_names_scope, src.type_templates.front().lock_imut().deref().syntax_element.deref().src_loc )
			}

			return;
		}
	}
	{ // Global variable.
		auto dst_global_variable_ptr= dst.Get</GlobalVariable/>();
		auto src_global_variable_ptr= src.Get</GlobalVariable/>();
		if( !dst_global_variable_ptr.empty() )
		{
			if( dst_global_variable_ptr.try_lock_imut().deref().syntax_element != src_global_variable_ptr.try_lock_imut().deref().syntax_element )
			{
				REPORT_ERROR( Redefinition, target_names_scope, src_global_variable_ptr.try_lock_imut().deref().syntax_element.deref().src_loc, name )
			}
			return;
		}
	}
	{ // Global auto variable.
		auto dst_global_auto_variable_ptr= dst.Get</GlobalAutoVariable/>();
		auto src_global_auto_variable_ptr= src.Get</GlobalAutoVariable/>();
		if( !dst_global_auto_variable_ptr.empty() )
		{
			if( dst_global_auto_variable_ptr.try_lock_imut().deref().syntax_element != src_global_auto_variable_ptr.try_lock_imut().deref().syntax_element )
			{
				REPORT_ERROR( Redefinition, target_names_scope, src_global_auto_variable_ptr.try_lock_imut().deref().syntax_element.deref().src_loc, name )
			}
			return;
		}
	}
	{ // Static asserts. Do not merge them, just skip content.
		if( !dst.Get</GlobalStaticAssertsSet/>().empty() )
		{
			return;
		}
	}
	{ // Mixins. Do not merge them, just skip content.
		if( !dst.Get</Mixins/>().empty() )
		{
			return;
		}
	}
	{ // class field
		auto src_class_field_ptr= dst.Get</ClassField/>();
		auto dst_class_field_ptr= src.Get</ClassField/>();
		if( src_class_field_ptr == dst_class_field_ptr )
		{
			return;
		}
	}

	// Can not merge things ot this kind.
	REPORT_ERROR( Redefinition, target_names_scope, GetValueSrcLoc( src ), name )
}

fn CodeBuilder::GetValueSrcLoc( NamesScopeValue& value ) : SrcLoc
{
	{
		auto functions_set_ptr= value.Get</FunctionsSet/>();
		if( !functions_set_ptr.empty() )
		{
			var SrcLoc mut min_src_loc( SrcLoc::c_max_file_index, SrcLoc::c_max_line, SrcLoc::c_max_column );

			auto lock= functions_set_ptr.try_lock_imut();
			var FunctionsSet& functions_set= lock.deref();

			foreach( &syntax_element : functions_set.syntax_elements )
			{
				min_src_loc= ust::min( SrcLoc(min_src_loc), syntax_element.deref().src_loc );
			}
			foreach( &syntax_element : functions_set.out_of_line_syntax_elements )
			{
				min_src_loc= ust::min( SrcLoc(min_src_loc), syntax_element.deref().src_loc );
			}
			foreach( &syntax_element : functions_set.function_templates_syntax_elements )
			{
				min_src_loc= ust::min( SrcLoc(min_src_loc), syntax_element.deref().src_loc );
			}

			foreach( &function : functions_set.functions )
			{
				if_var( &syntax_element : function.prototype_syntax_element )
				{
					min_src_loc= ust::min( SrcLoc(min_src_loc), syntax_element.src_loc );
				}
				else if_var( &syntax_element : function.body_syntax_element )
				{
					min_src_loc= ust::min( SrcLoc(min_src_loc), syntax_element.src_loc );
				}
			}
			foreach( &function_template_ptr : functions_set.function_templates )
			{
				min_src_loc= ust::min( SrcLoc(min_src_loc), function_template_ptr.lock_imut().deref().syntax_element.deref().src_loc );
			}

			return min_src_loc;
		}
	}
	{
		auto type_alias_ptr= value.Get</TypeAlias/>();
		if( !type_alias_ptr.empty() )
		{
			return type_alias_ptr.try_lock_imut().deref().syntax_element.deref().src_loc;
		}
	}
	{
		auto type_templates_set_ptr= value.Get</TypeTemplatesSet/>();
		if( !type_templates_set_ptr.empty() )
		{
			var SrcLoc mut min_src_loc( SrcLoc::c_max_file_index, SrcLoc::c_max_line, SrcLoc::c_max_column );

			auto lock= type_templates_set_ptr.try_lock_imut();
			var TypeTemplatesSet& type_templates_set= lock.deref();

			foreach( &syntax_element : type_templates_set.syntax_elements )
			{
				min_src_loc= ust::min( SrcLoc(min_src_loc), syntax_element.deref().src_loc );
			}
			foreach( &type_template_ptr : type_templates_set.type_templates )
			{
				min_src_loc= ust::min( SrcLoc(min_src_loc), type_template_ptr.lock_imut().deref().syntax_element.deref().src_loc );
			}

			return min_src_loc;
		}
	}
	{
		auto class_type_ptr= value.Get</ClassType/>();
		if( !class_type_ptr.empty() )
		{
			return class_type_ptr.try_lock_imut().deref().syntax_element.try_deref().src_loc;
		}
	}
	{
		auto enum_type_ptr= value.Get</Enum/>();
		if( !enum_type_ptr.empty() )
		{
			return enum_type_ptr.try_lock_imut().deref().syntax_element.deref().src_loc;
		}
	}
	{
		auto global_variable_ptr= value.Get</GlobalVariable/>();
		if( !global_variable_ptr.empty() )
		{
			return global_variable_ptr.try_lock_imut().deref().syntax_element.deref().src_loc;
		}
	}
	{
		auto global_auto_variable_ptr= value.Get</GlobalAutoVariable/>();
		if( !global_auto_variable_ptr.empty() )
		{
			return global_auto_variable_ptr.try_lock_imut().deref().syntax_element.deref().src_loc;
		}
	}

	return SrcLoc();
}

} // namespace U1
