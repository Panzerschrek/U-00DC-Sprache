import "function_context.uh"

namespace U1
{

fn FunctionContext::constructor(
	LLVMContextRef llvm_context,
	LLVMValueRef in_llvm_function,
	Type mut in_return_type,
	bool in_return_value_is_reference,
	bool in_return_value_is_mutable )
	(
		return_type(in_return_type),
		llvm_function(in_llvm_function),
		return_value_is_reference(in_return_value_is_reference),
		return_value_is_mutable(in_return_value_is_mutable),
	)
{
	unsafe
	{
		alloca_basic_block= LLVMAppendBasicBlockInContext( llvm_context, llvm_function, "allocations\0"[0] );
		alloca_ir_builder= LLVMCreateBuilderInContext( llvm_context );
		LLVMPositionBuilderAtEnd( alloca_ir_builder, alloca_basic_block );

		function_basic_block= LLVMAppendBasicBlockInContext( llvm_context, llvm_function, "func_code\0"[0] );
		llvm_ir_builder= LLVMCreateBuilderInContext( llvm_context );
		LLVMPositionBuilderAtEnd( llvm_ir_builder, function_basic_block );
	}
}

fn FunctionContext::destructor()
{
	unsafe
	{
		LLVMDisposeBuilder( llvm_ir_builder );
		LLVMDisposeBuilder( alloca_ir_builder );
	}
}

} // namespace U1
