import "/string_conversions.u"
import "/keywords.uh"
import "mangling.uh"

namespace U1
{

fn CreateManglerMSVC(bool is_32_bit) : ust::box</IMangler/>
{
	return ust::make_box(ManglerMSVC(is_32_bit));
}

class ManglerMSVC final : IMangler
{
public:
	fn constructor(bool is_32_bit);

	fn virtual override MangleFunction(
		mut this,
		NamesScope& parent_scope,
		ust::string8& name,
		FunctionType& function_type ) : ust::string8;

	fn virtual override MangleFunction(
		mut this,
		NamesScope& parent_scope,
		ust::string8& name,
		FunctionType& function_type,
		TemplateArgsFinished& template_args ) : ust::string8;

	fn virtual override MangleGlobalVariable( mut this, NamesScope& parent_scope, ust::string8& variable_name, Type& t, bool is_constant ) : ust::string8;
	fn virtual override MangleType( mut this, Type& t ) : ust::string8;
	fn virtual override MangleVirtualTable( mut this, Type& t ) : ust::string8;

private:
	fn MangleFunctionImpl(
		mut this,
		NamesScope& parent_scope,
		ust::string8& name,
		FunctionType& function_type,
		ust::optional_ref_imut</TemplateArgsFinished/> template_args ) : ust::string8;

	fn EncodeType( this, ManglerState &mut mangler_state, Type& t );
	fn EncodeFunctionType( this, ManglerState &mut mangler_state, FunctionType& function_type, bool encode_full_type );
	fn EncodeFunctionParams( this, ManglerState &mut mangler_state, ust::vector</FunctionType::Param/>& params );
	fn EncodeTemplateArgs( this, ManglerState &mut mangler_state, TemplateArgsFinished& template_args );
	fn EncodeFullName( this, ManglerState &mut mangler_state, ust::string_view8 name, NamesScope& scope );
	fn EncodeNamespacePostfix_r( this, ManglerState &mut mangler_state, NamesScope& scope );
	fn EncodeTemplateClassName( this, ManglerState &mut mangler_state, ClassType& the_class );
	fn EncodeCoroutineClassName( this, ManglerState &mut mangler_state, ClassType& the_class );
	fn EncodeNumber( this, ManglerState &mut mangler_state, i64 num );
	fn EncodeNumber( this, ManglerState &mut mangler_state, u64 num );
	fn EncodeReferencePollution( this, ManglerState &mut mangler_state, ust::vector</FunctionType::ReferencePollution/>& references_pollution );
	fn EncodeReturnReferences( this, ManglerState &mut mangler_state, FunctionType::ParamReferences& return_references );
	fn EncodeReturnInnerReferences( this, ManglerState &mut mangler_state, ust::vector</FunctionType::ParamReferences/>& return_inner_references );
	fn EncodeParamReference( this, ManglerState &mut mangler_state, FunctionType::ParamReference& param_reference );

private:
	ust::string8 imut pointer_types_modifier_;
}

fn ManglerMSVC::constructor(bool is_32_bit)
	( pointer_types_modifier_( select( is_32_bit ? ust::string8("") : ust::string8("E") ) ) )
{
}

fn ManglerMSVC::MangleFunction(
	mut this,
	NamesScope& parent_scope,
	ust::string8& name,
	FunctionType& function_type ) : ust::string8
{
	return MangleFunctionImpl( parent_scope, name, function_type, ust::optional_ref_imut</TemplateArgsFinished/>() );
}

fn ManglerMSVC::MangleFunction(
	mut this,
	NamesScope& parent_scope,
	ust::string8& name,
	FunctionType& function_type,
	TemplateArgsFinished& template_args ) : ust::string8
{
	return MangleFunctionImpl( parent_scope, name, function_type, ust::optional_ref_imut</TemplateArgsFinished/>(template_args) );
}

fn ManglerMSVC::MangleGlobalVariable( mut this, NamesScope& parent_scope, ust::string8& variable_name, Type& t, bool is_constant ) : ust::string8
{
	var ManglerState mut mangler_state;

	mangler_state.PushElement( g_name_prefix );
	EncodeFullName( mangler_state, variable_name.range(), parent_scope );

	mangler_state.PushElement( "3"c8 ); // Special name for global variables.
	EncodeType( mangler_state, t );
	mangler_state.PushElement( select( is_constant ? g_imut_prefix : g_mut_prefix ) );

	return MakeNullTerminatedString( mangler_state.TakeRes() );
}

fn ManglerMSVC::MangleType( mut this, Type& t ) : ust::string8
{
	var ManglerState mut mangler_state;
	EncodeType( mangler_state, t );
	return MakeNullTerminatedString( mangler_state.TakeRes() );
}

fn ManglerMSVC::MangleVirtualTable( mut this, Type& t ) : ust::string8
{
	var ManglerState mut mangler_state;

	mangler_state.PushElement( g_name_prefix );
	mangler_state.PushElement( "?_7" ); // Special name for virtual functions table.
	EncodeNamespacePostfix_r( mangler_state, t.GetClassType().try_deref().lock_imut().deref().members.lock_imut().deref() );
	mangler_state.PushElement( g_terminator ); // Finish list of name components
	mangler_state.PushElement( "6" ); // "6" for "vftable"
	mangler_state.PushElement( g_imut_prefix );
	mangler_state.PushElement( g_terminator );

	return MakeNullTerminatedString( mangler_state.TakeRes() );
}

fn ManglerMSVC::MangleFunctionImpl(
	mut this,
	NamesScope& parent_scope,
	ust::string8& name,
	FunctionType& function_type,
	ust::optional_ref_imut</TemplateArgsFinished/> template_args ) : ust::string8
{
	// For class methods do not encode stuff like access labels, or methods-related stuff.
	// Just encode class methods as regular functions inside namespaces, with "this" as regular param.

	var ManglerState mut mangler_state;

	mangler_state.PushElement( g_name_prefix );

	auto op_name= DecodeOperator( name );

	if( !template_args.empty() )
	{
		// Use separate backreferences table.
		var ManglerState mut template_mangler_state;
		{
			template_mangler_state.PushElement( g_template_prefix );
			if( !op_name.empty() )
			{
				template_mangler_state.PushElement( op_name );
			}
			else
			{
				template_mangler_state.EncodeName( name.range() );
			}
			EncodeTemplateArgs( template_mangler_state, template_args.try_deref() );
		}
		// Do not create backreference for template name, just push template name instead.
		mangler_state.PushElement( template_mangler_state.TakeRes().range() );
	}
	else
	{
		if( !op_name.empty() )
		{
			mangler_state.PushElement( op_name );
		}
		else
		{
			mangler_state.EncodeName( name.range() );
		}
	}

	EncodeNamespacePostfix_r( mangler_state, parent_scope );
	// Finish list of name components.
	mangler_state.PushElement( g_terminator );

	// Access label. Use global access modifier. There is no reason to use real access modifiers for class members
	mangler_state.PushElement( "Y" );

	// No need to encode full function type, like "unsafe" flag or return references/references pollution,
	// since it's not possible to overload function unsing only such data.
	auto encode_full_function_type= false;
	EncodeFunctionType( mangler_state, function_type, encode_full_function_type );

	return MakeNullTerminatedString( mangler_state.TakeRes() );
}

fn ManglerMSVC::EncodeType( this, ManglerState &mut mangler_state, Type& t )
{
	if_var( &fundamental_type : t.GetFundamentalType() )
	{
		mangler_state.PushElement( EncodeFundamentalTypeName( fundamental_type.fundamental_type ) );
	}
	else if( !t.GetArrayType().empty() )
	{
		// Process nested arrays.
		var ust::vector</u64/> mut dimensions;

		var Type mut element_type= t;
		loop
		{
			if_var( element_type_as_array_type : element_type.GetArrayType() )
			{
				dimensions.push_back( element_type_as_array_type.element_count );
				auto mut t= element_type_as_array_type.element_type;
				element_type= move(t);
			}
			else
			{
				break;
			}
		}

		mangler_state.PushElement( "Y" );
		EncodeNumber( mangler_state, u64(dimensions.size()) );
		foreach( dimension_size : dimensions )
		{
			EncodeNumber( mangler_state, dimension_size );
		}
		EncodeType( mangler_state, element_type );
	}
	else if_var( &tuple_type : t.GetTupleType() )
	{
		// Encode tuples, like type templates.
		var TemplateArgsFinished mut template_args;
		foreach( &element_type : tuple_type.element_types )
		{
			template_args.push_back( element_type );
		}

		mangler_state.PushElement( g_class_type_prefix );

		// Use separate backreferences table.
		{
			var ManglerState mut template_mangler_state;

			template_mangler_state.PushElement( g_template_prefix );
			template_mangler_state.EncodeName( KeywordToString( Keyword::tup_ ) );
			EncodeTemplateArgs( template_mangler_state, template_args );

			mangler_state.EncodeNameNoTerminator( template_mangler_state.TakeRes().range() );
		}
		// Finish class name.
		mangler_state.PushElement( g_terminator );
	}
	else if_var( &class_type_ptr : t.GetClassType() )
	{
		auto class_lock= class_type_ptr.lock_imut();
		auto& class_type= class_lock.deref();
		auto class_members= class_type.members;
		auto class_members_lock= class_members.lock_imut();
		auto& class_members_ref= class_members_lock.deref();

		mangler_state.PushElement( g_class_type_prefix );

		if_var( &typeinfo_class_description : class_type.generated_class_data.get</ TypeinfoClassDescription />() )
		{
			// Encode typeinfo, like type template.

			// Use separate backreferences table.
			{
				var ManglerState mut template_mangler_state;

				template_mangler_state.PushElement( g_template_prefix );
				template_mangler_state.EncodeName( class_members_ref.GetThisNamespaceName().range() );
				EncodeType( template_mangler_state, typeinfo_class_description.source_type );
				// Finish list of template arguments.
				template_mangler_state.PushElement( g_terminator );

				mangler_state.EncodeNameNoTerminator( template_mangler_state.TakeRes().range() );
			}
			// Finish class name.
			mangler_state.PushElement( g_terminator );
		}
		else if( !class_type.generated_class_data.get</ ClassType::BaseTemplate />().empty() )
		{
			EncodeTemplateClassName( mangler_state, class_type );
			// Finish list of name components.
			mangler_state.PushElement( g_terminator );
		}
		else if( !class_type.generated_class_data.get</ CoroutineTypeDescription />().empty() )
		{
			EncodeCoroutineClassName( mangler_state, class_type );
			// Finish list of name components.
			mangler_state.PushElement( g_terminator );
		}
		else
		{
			EncodeFullName( mangler_state, class_members_ref.GetThisNamespaceName().range(), class_members_ref.GetParent().try_lock_imut().deref() );
		}
	}
	else if_var( &enum_type : t.GetEnumType() )
	{
		mangler_state.PushElement( "W" );
		mangler_state.PushElement( "4" ); // Underlying type. Modern MSVC uses "4" for all enums independent on underlying type.

		auto enum_members= enum_type.lock_imut().deref().names_scope;
		auto enum_members_lock= enum_members.lock_imut();
		auto& enum_members_ref= enum_members_lock.deref();
		EncodeFullName( mangler_state, enum_members_ref.GetThisNamespaceName().range(), enum_members_ref.GetParent().try_lock_imut().deref() );
	}
	else if_var( &raw_poiter_type : t.GetRawPointerType() )
	{
		mangler_state.PushElement( g_pointer_prefix );
		mangler_state.PushElement( pointer_types_modifier_.range() );
		mangler_state.PushElement( g_mut_prefix );
		EncodeType( mangler_state, raw_poiter_type.element_type );
	}
	else if_var( &function_pointer_type : t.GetFunctionPointerType() )
	{
		mangler_state.PushElement( g_pointer_prefix );
		mangler_state.PushElement( "6" );
		EncodeFunctionType( mangler_state, function_pointer_type.function_type, true );
	}
	else { halt; }
}

fn ManglerMSVC::EncodeFunctionType( this, ManglerState &mut mangler_state, FunctionType& function_type, bool encode_full_type )
{
	mangler_state.PushElement( GetCallingConventionName( function_type.calling_convention ) );

	if( function_type.return_value_type != ValueType::Value )
	{
		mangler_state.PushElement( g_reference_prefix );
		mangler_state.PushElement( pointer_types_modifier_.range() );
		mangler_state.PushElement( select( function_type.return_value_type == ValueType::ReferenceMut ? g_mut_prefix : g_imut_prefix ) );
	}
	else if(
		!function_type.return_type.GetClassType().empty()||
		!function_type.return_type.GetEnumType().empty() ||
		!function_type.return_type.GetTupleType().empty() )
	{
		mangler_state.PushElement( "?" );
		mangler_state.PushElement( g_mut_prefix ); // Return value is mutable
	}

	EncodeType( mangler_state, function_type.return_type );

	EncodeFunctionParams( mangler_state, function_type.params );

	var bool mut params_empty= function_type.params.empty();

	if( encode_full_type )
	{
		// Encode additional function properties as params.
		if( function_type.is_unsafe )
		{
			// Encode "unsafe" flag as param of type "unsafe".
			params_empty= false;

			mangler_state.PushElement( g_class_type_prefix );
			mangler_state.PushElement( KeywordToString( Keyword::unsafe_ ) );
			// Finish list of name components.
			mangler_state.PushElement( g_terminator );
			// Finish class name.
			mangler_state.PushElement( g_terminator );
		}
		if( !function_type.references_pollution.empty() )
		{
			params_empty= false;
			EncodeReferencePollution( mangler_state, function_type.references_pollution );
		}
		if( !function_type.return_references.empty() )
		{
			params_empty= false;
			EncodeReturnReferences( mangler_state, function_type.return_references );
		}
		if( !function_type.return_inner_references.empty() )
		{
			params_empty= false;
			EncodeReturnInnerReferences( mangler_state, function_type.return_inner_references );
		}
	}

	if( params_empty )
	{
		mangler_state.PushElement( EncodeFundamentalTypeName( U_FundamentalType::void_ ) ); // In case of empty params just leave single type - "void" without terminator symbol.
	}
	else
	{
		mangler_state.PushElement( g_terminator ); // Finish list of params.
	}

	mangler_state.PushElement( "Z" );
}

fn ManglerMSVC::EncodeFunctionParams( this, ManglerState &mut mangler_state, ust::vector</FunctionType::Param/>& params )
{
	var ust::vector</FunctionType::Param/> mut back_references;

	foreach( & param : params )
	{
		if( param.value_type == ValueType::Value && !param.t.GetFundamentalType().empty() )
		{
			// For trivial params (fundamentals with no reference modifiers) do not create backreferences.
			EncodeType( mangler_state, param.t );
		}
		else
		{

			var bool mut found = false;
			for( auto mut i= 0s; i < back_references.size(); ++i )
			{
				if( param == back_references[i] )
				{
					mangler_state.PushElement( char8(i + size_type("0"c8)) );
					found= true;
					break;
				}
			}

			if( !found )
			{
				if( param.value_type != ValueType::Value )
				{
					mangler_state.PushElement( g_reference_prefix );
					mangler_state.PushElement( pointer_types_modifier_.range() );
					mangler_state.PushElement( select( param.value_type == ValueType::ReferenceMut ? g_mut_prefix : g_imut_prefix ) );
				}

				EncodeType( mangler_state, param.t );

				if( back_references.size() < g_num_back_references )
				{
					back_references.push_back( param );
				}
			}
		}
	}
}

fn ManglerMSVC::EncodeTemplateArgs( this, ManglerState &mut mangler_state, TemplateArgsFinished& template_args )
{
	foreach( template_arg : template_args )
	{
		if_var( &t : template_arg.get</Type/>() )
		{
			if( !t.GetArrayType().empty() )
			{
				mangler_state.PushElement( "$$B" );
			}

			EncodeType( mangler_state, t );
		}
		else if_var( &v_ptr : template_arg.get</VariablePtr/>() )
		{
			auto lock= v_ptr.lock_imut();
			auto& v= lock.deref();

			// HACK!
			// This is not how C++ compiler encodes value template args.
			// In C++ this is just numbers.
			// In Ü it's possible to create several type templates with same name and single value template param
			// but with different param type.
			// And it's possible to use same numeric value with diffirent types for instantiation of different type templates.
			// So, we need to distinguish between such template types.
			// Because of that prefix each numeric arg with type, like this is just hidden type param for each value param.
			EncodeType( mangler_state, v.t );

			mangler_state.PushElement( g_numeric_template_arg_prefix );

			auto mut is_signed= false;
			if_var( fundamental_type : v.t.GetFundamentalType() )
			{
				is_signed= IsSignedInteger( fundamental_type.fundamental_type );
			}
			else if_var( enum_type : v.t.GetEnumType() )
			{
				is_signed= IsSignedInteger( enum_type.lock_imut().deref().underlying_type.fundamental_type );
			}

			if( is_signed )
			{
				EncodeNumber( mangler_state, unsafe( LLVMConstIntGetSExtValue( v.constexpr_value ) ) );
			}
			else
			{
				EncodeNumber( mangler_state, unsafe( LLVMConstIntGetZExtValue( v.constexpr_value ) ) );
			}
		}
	}

	// Finish list of arguments.
	mangler_state.PushElement( g_terminator );
}

fn ManglerMSVC::EncodeFullName( this, ManglerState &mut mangler_state, ust::string_view8 name, NamesScope& scope )
{
	mangler_state.EncodeName( name );
	EncodeNamespacePostfix_r( mangler_state, scope );
	// Finish list of name components.
	mangler_state.PushElement(g_terminator );
}

fn ManglerMSVC::EncodeNamespacePostfix_r( this, ManglerState &mut mangler_state, NamesScope& scope )
{
	if( scope.GetParent().empty() ) // Root namespace.
	{
		return;
	}

	auto class_ptr= scope.GetClass();
	if( !class_ptr.empty() )
	{
		auto class_lock= class_ptr.try_lock_imut();
		auto& class_= class_lock.deref();
		if( !class_.generated_class_data.get</ ClassType::BaseTemplate />().empty() )
		{
			EncodeTemplateClassName( mangler_state, class_ );
			return;
		}
		if( !class_.generated_class_data.get</ CoroutineTypeDescription />().empty() )
		{
			EncodeCoroutineClassName( mangler_state, class_ );
			return;
		}
	}

	mangler_state.EncodeName( scope.GetThisNamespaceName().range() );

	EncodeNamespacePostfix_r( mangler_state, scope.GetParent().try_lock_imut().deref() );
}

fn ManglerMSVC::EncodeTemplateClassName( this, ManglerState &mut mangler_state, ClassType& the_class )
{
	var ClassType::BaseTemplate& base_template= the_class.generated_class_data.get</ ClassType::BaseTemplate />().try_deref();
	auto lock= base_template.class_template.lock_imut();
	var TypeTemplate& type_template= lock.deref();

	// Use separate backreferences table.
	{
		var ManglerState mut template_mangler_state;

		template_mangler_state.PushElement( g_template_prefix );
		template_mangler_state.EncodeName( type_template.syntax_element.deref().name.range() );
		EncodeTemplateArgs( template_mangler_state, base_template.signature_args );

		mangler_state.EncodeNameNoTerminator( template_mangler_state.TakeRes().range() );
	}

	EncodeNamespacePostfix_r( mangler_state, type_template.parent_names_scope.lock().try_lock_imut().deref() );
}

fn ManglerMSVC::EncodeCoroutineClassName( this, ManglerState &mut mangler_state, ClassType& the_class )
{
	var CoroutineTypeDescription& coroutine_type_description= the_class.generated_class_data.get</ CoroutineTypeDescription />().try_deref();

	// Use separate backreferences table.
	var ManglerState mut template_mangler_state;

	template_mangler_state.PushElement( g_template_prefix );
	template_mangler_state.EncodeName( the_class.members.lock_imut().deref().GetThisNamespaceName().range() );

	// Return value.
	if( coroutine_type_description.return_value_type != ValueType::Value )
	{
		template_mangler_state.PushElement( g_reference_prefix );
		template_mangler_state.PushElement( pointer_types_modifier_.range() );
		template_mangler_state.PushElement( select( coroutine_type_description.return_value_type == ValueType::ReferenceMut ? g_mut_prefix : g_imut_prefix ) );
	}
	EncodeType( template_mangler_state, coroutine_type_description.return_type );

	// non-sync tag.
	if( coroutine_type_description.non_sync_ )
	{
		template_mangler_state.PushElement( EncodeFundamentalTypeName( U_FundamentalType::bool_ ) );
		template_mangler_state.PushElement( g_numeric_template_arg_prefix );
		EncodeNumber( template_mangler_state, 1u64 );
	}

	// Inner reference kind.
	foreach( inner_reference_kind : coroutine_type_description.inner_references )
	{
		template_mangler_state.PushElement( EncodeFundamentalTypeName( U_FundamentalType::u32_ ) );
		template_mangler_state.PushElement( g_numeric_template_arg_prefix );
		EncodeNumber( template_mangler_state, u64(inner_reference_kind) );
	}

	if( !coroutine_type_description.return_references.empty() )
	{
		EncodeReturnReferences( template_mangler_state, coroutine_type_description.return_references );
	}
	if( !coroutine_type_description.return_inner_references.empty() )
	{
		EncodeReturnInnerReferences( template_mangler_state, coroutine_type_description.return_inner_references );
	}

	// Finish list of template arguments.
	template_mangler_state.PushElement( g_terminator );

	mangler_state.EncodeNameNoTerminator( template_mangler_state.TakeRes().range() );
}

fn ManglerMSVC::EncodeNumber( this, ManglerState &mut mangler_state, i64 num )
{
	if( num < 0i64 )
	{
		mangler_state.PushElement( "?" );
		EncodeNumber( mangler_state, u64(-num) );
	}
	else
	{
		EncodeNumber( mangler_state, u64(num) );
	}
}

fn ManglerMSVC::EncodeNumber( this, ManglerState &mut mangler_state, u64 num )
{
	if( num == 0u64 )
	{
		mangler_state.PushElement( "A@" );
	}
	else if( num <= 10u64 )
	{
		mangler_state.PushElement( char8(num - 1u64 + u64("0"c8)) );
	}
	else
	{
		// Use hex numbers with digits in range [A;Q)
		var i64 mut hex_digit(15);
		while((num & (u64(0xF) << u64(hex_digit << 2u))) == 0u64)
		{
			--hex_digit; // It's impossible to reach zero here since "num" is non-zero.
		}

		while(hex_digit >= 0i64)
		{
			mangler_state.PushElement( char8(u64("A"c8) + ((num >> u64(hex_digit << 2u)) & u64(0xF))) );
			--hex_digit;
		}

		// Finish list of digits.
		mangler_state.PushElement( g_terminator );
	}
}

fn ManglerMSVC::EncodeReferencePollution( this, ManglerState &mut mangler_state, ust::vector</FunctionType::ReferencePollution/>& references_pollution )
{
	// Encode references pollution like template class with special name and numeric args.
	mangler_state.PushElement( g_class_type_prefix );

	// Use separate backreferences table.
	{
		var ManglerState mut template_mangler_state;

		template_mangler_state.PushElement( g_template_prefix );
		template_mangler_state.EncodeName( "_RP" );

		template_mangler_state.PushElement( "$" );
		template_mangler_state.PushElement( "2" );
		template_mangler_state.PushElement( "$$BY2" );
		EncodeNumber( template_mangler_state, u64( references_pollution.size() ) );
		EncodeNumber( template_mangler_state, 2u64 );
		EncodeNumber( template_mangler_state, 2u64 );
		template_mangler_state.PushElement( EncodeFundamentalTypeName( U_FundamentalType::char8_ ) );

		foreach( &pollution_element : references_pollution )
		{
			template_mangler_state.PushElement( "2" );
			template_mangler_state.PushElement( "$$BY1" );
			EncodeNumber( template_mangler_state, 2u64 );
			EncodeNumber( template_mangler_state, 2u64 );
			template_mangler_state.PushElement( EncodeFundamentalTypeName( U_FundamentalType::char8_ ) );

			EncodeParamReference( template_mangler_state, pollution_element.dst );
			EncodeParamReference( template_mangler_state, pollution_element.src );

			template_mangler_state.PushElement( "@" );
		}

		template_mangler_state.PushElement( "@" );

		// Finish list of template args.
		template_mangler_state.PushElement( g_terminator );

		mangler_state.EncodeNameNoTerminator( template_mangler_state.TakeRes().range() );
	}
	// Finish class name.
	mangler_state.PushElement( g_terminator );
}

fn ManglerMSVC::EncodeReturnReferences( this, ManglerState &mut mangler_state, FunctionType::ParamReferences& return_references )
{
	// Encode return references, like template class with special name and numeric args.

	mangler_state.PushElement( g_class_type_prefix );

	// Use separate backreferences table.
	{
		var ManglerState mut template_mangler_state;

		template_mangler_state.PushElement( g_template_prefix );
		template_mangler_state.EncodeName( "_RR" );

		template_mangler_state.PushElement( "$" );
		template_mangler_state.PushElement( "2" );
		template_mangler_state.PushElement( "$$BY1" );
		EncodeNumber( template_mangler_state, u64(return_references.size()) );
		EncodeNumber( template_mangler_state, 2u64 );
		template_mangler_state.PushElement( EncodeFundamentalTypeName( U_FundamentalType::char8_ ) );

		foreach( &param_reference : return_references )
		{
			EncodeParamReference( template_mangler_state, param_reference );
		}

		template_mangler_state.PushElement( g_terminator );

		// Finish list of template args.
		template_mangler_state.PushElement( g_terminator );

		mangler_state.EncodeNameNoTerminator( template_mangler_state.TakeRes().range() );
	}
	// Finish class name.
	mangler_state.PushElement( g_terminator );
}

fn ManglerMSVC::EncodeReturnInnerReferences( this, ManglerState &mut mangler_state, ust::vector</FunctionType::ParamReferences/>& return_inner_references )
{
	// Encode return inner references, like template class with special name and numeric args.
	mangler_state.PushElement( g_class_type_prefix );

	// Use separate backreferences table.
	{
		var ManglerState mut template_mangler_state;

		template_mangler_state.PushElement( g_template_prefix );
		template_mangler_state.EncodeName( "_RIR" );

		template_mangler_state.PushElement( "$" );

		template_mangler_state.PushElement( "2" );

		// Hack! Just use "tup" as type name, without specifying exact values.
		template_mangler_state.PushElement( "U" );
		template_mangler_state.PushElement( KeywordToString( Keyword::tup_ ) );
		template_mangler_state.PushElement( g_terminator );
		template_mangler_state.PushElement( g_terminator );

		foreach( &return_references : return_inner_references )
		{
			template_mangler_state.PushElement( "2" );
			template_mangler_state.PushElement( "$$BY1" );
			EncodeNumber( template_mangler_state, u64(return_references.size()) );
			EncodeNumber( template_mangler_state, 2u64 );
			template_mangler_state.PushElement( EncodeFundamentalTypeName( U_FundamentalType::char8_ ) );

			foreach( &param_reference : return_references )
			{
				EncodeParamReference( template_mangler_state, param_reference );
			}

			template_mangler_state.PushElement( g_terminator );
		}

		template_mangler_state.PushElement( g_terminator );

		// Finish list of template args.
		template_mangler_state.PushElement( g_terminator );

		mangler_state.EncodeNameNoTerminator( template_mangler_state.TakeRes().range() );
	}
	// Finish class name.
	mangler_state.PushElement( g_terminator );
}

fn ManglerMSVC::EncodeParamReference( this, ManglerState &mut mangler_state, FunctionType::ParamReference& param_reference )
{
	// HACK! Use encoding as for structs, instead as for arrays, because old versions of "undname.exe" can't parse arrays.
	mangler_state.PushElement( "2" );
	mangler_state.PushElement( "$$BY0" );
	EncodeNumber( mangler_state, 2u64 );
	mangler_state.PushElement( EncodeFundamentalTypeName( U_FundamentalType::char8_ ) );

	mangler_state.PushElement( EncodeFundamentalTypeName( U_FundamentalType::char8_ ) );
	mangler_state.PushElement( "0" );
	EncodeNumber( mangler_state, u64("0"c8) + u64(param_reference.param_index) );

	mangler_state.PushElement( EncodeFundamentalTypeName( U_FundamentalType::char8_ ) );
	mangler_state.PushElement( "0" );
	var u64 param_reference_char= select( param_reference.reference_index == FunctionType::c_param_reference_number ? u64("_"c8) : ( u64("a"c8) + u64(param_reference.reference_index)) );
	EncodeNumber( mangler_state, param_reference_char );

	mangler_state.PushElement( g_terminator );
}

class ManglerState
{
public:

	// Push name and possible create or use backreferences.
	fn EncodeName( mut this, ust::string_view8 str )
	{
		EncodeNameImpl( str, true );
	}

	fn EncodeNameNoTerminator( mut this, ust::string_view8 str )
	{
		EncodeNameImpl( str, false );
	}

	// Push non-name element (no need to create backreferences for it).
	fn PushElement( mut this, ust::string_view8 str )
	{
		res_+= str;
	}

	fn PushElement( mut this, char8 c )
	{
		res_.push_back( c );
	}

	fn TakeRes( mut this ) : ust::string8
	{
		return take(res_);
	}

private:
	fn EncodeNameImpl( mut this, ust::string_view8 str, bool use_terminator )
	{
		for( auto mut i= 0s; i < g_num_back_references; ++i )
		{
			var BackReference br= back_references_[i];
			if( res_.range().subrange( size_type(br.pos), size_type(br.pos + br.count) ) == str )
			{
				res_.push_back( char8(i + size_type("0"c8) ) );
				return;
			}
			if( br.count == 0u )
			{
				// Reached empty space - fill it.
				back_references_[i].pos= u32(res_.size());
				back_references_[i].count= u32(str.size());
				break;
			}
		}

		// Not found or reached backreferences limit.
		res_+= str;
		if( use_terminator )
		{
			res_.push_back( g_terminator );
		}
	}

private:
	// Store backreference as position and length in destination string.
	struct BackReference{ u32 pos= 0u; u32 count= 0u; }

private:
	[ BackReference, g_num_back_references ] back_references_;
	ust::string8 res_;
}

fn DecodeOperator( ust::string8& o ) : ust::string_view8
{
	if( o == "+" ){ return "?H"; }
	if( o == "-" ){ return "?G"; }
	if( o == "*" ){ return "?D"; }
	if( o == "/" ){ return "?K"; }
	if( o == "%" ){ return "?L"; }

	if( o == "==" ){ return "?8"; }
	if( o == "<=>" ){ return "?__M"; } // C++ spaceship operator

	if( o == "&" ){ return "?I"; }
	if( o == "|" ){ return "?U"; }
	if( o == "^" ){ return "?T"; }

	if( o == "<<" ){ return "?6"; }
	if( o == ">>" ){ return "?5"; }

	if( o == "+=" ){ return "?Y"; }
	if( o == "-=" ){ return "?Z"; }
	if( o == "*=" ){ return "?X"; }
	if( o == "/=" ){ return "?_0"; }
	if( o == "%=" ){ return "?_1"; }

	if( o == "&=" ){ return "?_4"; }
	if( o == "|=" ){ return "?_5"; }
	if( o == "^=" ){ return "?_6"; }

	if( o == "<<=" ){ return "?_3"; }
	if( o == ">>=" ){ return "?_2"; }

	if( o == "!" ){ return "?7"; }
	if( o == "~" ){ return "?S"; }

	if( o == "=" ){ return "?4"; }
	if( o == "++" ){ return "?E"; }
	if( o == "--" ){ return "?F"; }

	if( o == "()" ){ return "?R"; }
	if( o == "[]" ){ return "?A"; }

	return "";
}

fn EncodeFundamentalTypeName( U_FundamentalType t ) : ust::string_view8
{
	switch(t)
	{
		U_FundamentalType::InvalidType	-> { return ""; },
		U_FundamentalType::void_		-> { return "X"; },
		U_FundamentalType::bool_		-> { return "_N"; },
		U_FundamentalType::i8_			-> { return "C"; },
		U_FundamentalType::u8_			-> { return "E"; },
		U_FundamentalType::i16_		-> { return "F"; },
		U_FundamentalType::u16_		-> { return "G"; },
		U_FundamentalType::i32_		-> { return "H"; },
		U_FundamentalType::u32_		-> { return "I"; },
		U_FundamentalType::i64_		-> { return "_J"; },
		U_FundamentalType::u64_		-> { return "_K"; },
		U_FundamentalType::i128_	-> { return "_L"; },
		U_FundamentalType::u128_	-> { return "_M"; },
		U_FundamentalType::f32_		-> { return "M"; },
		U_FundamentalType::f64_		-> { return "N"; },
		U_FundamentalType::char8_	-> { return "D"; },
		U_FundamentalType::char16_	-> { return "_S"; },
		U_FundamentalType::char32_	-> { return "_U"; },
	// Encode "byte" types as regular structs in global namspace.
		U_FundamentalType::byte8_	-> { return "Ubyte8@@"  ; },
		U_FundamentalType::byte16_	-> { return "Ubyte16@@" ; },
		U_FundamentalType::byte32_	-> { return "Ubyte32@@" ; },
		U_FundamentalType::byte64_	-> { return "Ubyte64@@" ; },
		U_FundamentalType::byte128_ -> { return "Ubyte128@@"; },
	}
}

fn MakeNullTerminatedString( ust::string8 mut str ) : ust::string8
{
	str.push_back( "\0"c8 );
	return move(str);
}

fn GetCallingConventionName( LLVMCallConvID cc ) : ust::string_view8
{
	if( cc == LLVMCallConv::C )
	{
		return "A";
	}
	if( cc == LLVMCallConv::Fast )
	{
		return "I";
	}
	if( cc == LLVMCallConv::Cold )
	{
		return "U";
	}
	if( cc == LLVMCallConv::X86Stdcall )
	{
		return "G";
	}

	return "A";
}

auto g_num_back_references= 10s;
auto g_name_prefix= "?"c8; // All names (function, variables) should start with it.
auto g_terminator= "@"c8;
auto& g_template_prefix= "?$";
auto& g_numeric_template_arg_prefix= "$0";
auto g_class_type_prefix = "U"c8;
auto g_reference_prefix = "A"c8;
auto g_pointer_prefix = "P"c8;
auto g_mut_prefix= "A"c8;
auto g_imut_prefix= "B"c8;

} // namespace U1
