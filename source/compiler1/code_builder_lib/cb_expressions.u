import "../lex_synt_lib/keywords.uh"
import "error_reporting.uh"
import "code_builder.uh"

namespace U
{

fn CodeBuilder::BuildExpressionCodeEnsureVariable( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::Expression& expression ) : Variable
{
	var Value mut value= BuildExpressionCode( names_scope, function_context, expression );

	if_var( &mut v : value.get</Variable/>())
	{
		return take(v);
	}

	REPORT_ERROR( ExpectedVariable, names_scope, Synt::GetFilePos(expression), GetValueKindName(value) )

	var Variable mut dummy;
	dummy.t= FundamentalType( U_FundamentalType::InvalidType, fundamental_llvm_types_.invalid_type_ );
	dummy.location= Variable::Location::LLVMRegister;
	unsafe{  dummy.llvm_value= LLVMGetUndef( fundamental_llvm_types_.invalid_type_ );  }
	return move(dummy);
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::Expression& expression ) : Value
{
	variant_visit( &el : expression )
	{
		return BuildExpressionCode( names_scope, function_context, el );
	}

	halt;
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::EmptyVariant& empty_variant ) : Value
{
	// "EmptyVariant" used only as stub during expression building in syntax analyzer. It should never be in final result.
	halt;
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::NumericConstant& numeric_constant ) : Value
{
	var ust::array_view_imut</char8/> mut type_suffix( numeric_constant.num.type_suffix );
	while( !type_suffix.empty() && type_suffix.back() == "\0"c8 )
	{
		type_suffix.drop_back();
	}

	auto mut t= U_FundamentalType::InvalidType;
	if( type_suffix.empty() )
	{
		t= select( numeric_constant.num.has_fractional_point ? U_FundamentalType::f64_ : U_FundamentalType::i32_ );
	}
	else if( type_suffix == ust::string8("u") )
	{
		t= U_FundamentalType::u32_;
	}
	else if( type_suffix == ust::string8("s") )
	{
		t= size_type_.GetFundamentalType().get_ref().fundamental_type;
	}
	else if( type_suffix == ust::string8("f") )
	{
		t= U_FundamentalType::f32_;
	}
	else if( type_suffix == ust::string8("c8") )
	{
		t= U_FundamentalType::char8_;
	}
	else if( type_suffix == ust::string8("c16") )
	{
		t= U_FundamentalType::char16_;
	}
	else if( type_suffix == ust::string8("c32") )
	{
		t= U_FundamentalType::char32_;
	}
	else
	{
		t= GetFundamentalTypeByName( type_suffix );
	}

	if( t == U_FundamentalType::InvalidType )
	{
		REPORT_ERROR( UnknownNumericConstantType, names_scope, numeric_constant.file_pos, ust::string8(type_suffix) )
		return ErrorValue();
	}

	var Variable mut res
	{
		.t= Type( FundamentalType( t, GetFundamentalLLVMType(t) ) ),
		.location= Variable::Location::LLVMRegister,
		.value_type= ValueType::Value,
	};

	unsafe
	{
		if( IsFloatingPoint( t ) )
		{
			res.constexpr_value= LLVMConstReal( res.t.GetLLVMType(), numeric_constant.num.value_double );
		}
		else if( IsSignedInteger( t ) )
		{
			res.constexpr_value= LLVMConstInt( res.t.GetLLVMType(), numeric_constant.num.value_int, LLVMBool::True  );
		}
		else if( IsUnsignedInteger( t ) || IsChar( t ) )
		{
			res.constexpr_value= LLVMConstInt( res.t.GetLLVMType(), numeric_constant.num.value_int, LLVMBool::False );
		}
		else{ halt; }
	}
	res.llvm_value= res.constexpr_value;

	return move(res);
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::BooleanConstant& boolean_constant ) : Value
{
	var Variable mut res;
	res.t= Type( FundamentalType( U_FundamentalType::bool_ , fundamental_llvm_types_.bool_ ) );
	res.location= Variable::Location::LLVMRegister;

	unsafe{ res.constexpr_value= LLVMConstInt( res.t.GetLLVMType(), select( boolean_constant.value ? 1u64 : 0u64 ), LLVMBool::True ); }
	res.llvm_value= res.constexpr_value;

	return move(res);
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::ComplexName& named_operand ) : Value
{
	if( named_operand.tail.empty() && named_operand.name == KeywordToString( Keyword::this_ ) )
	{
		if( function_context.this_.empty() || function_context.whole_this_is_unavailable )
		{
			REPORT_ERROR( ThisUnavailable, names_scope, named_operand.file_pos )
			return ErrorValue();
		}
		return function_context.this_.get_ref();
	}
	if( named_operand.tail.empty() && named_operand.name == KeywordToString( Keyword::base_ ) )
	{
		if( function_context.this_.empty() )
		{
			REPORT_ERROR( BaseUnavailable, names_scope, named_operand.file_pos )
			return ErrorValue();
		}

		auto &this_= function_context.this_.get_ref();

		auto class_type= this_.t.GetClassType().get_ref();
		auto base_class= class_type.lock_imut().get_ref().base_class;
		if( base_class.empty() )
		{
			REPORT_ERROR( BaseUnavailable, names_scope, named_operand.file_pos )
			return ErrorValue();
		}

		var Type base_type= ust::to_non_nullable(base_class);
		var Variable mut base_
		{
			.t= base_type,
			.value_type= this_.value_type,
			.llvm_value= CreateReferenceCast( this_.llvm_value, this_.t, base_type, function_context ),
		};

		return move(base_);
	}
	if( named_operand.tail.empty() && !function_context.this_.empty() )
	{
		// Process access to "this" and parent class fields separately.
		// This needed, because parent class fields does not added into class namespace.

		var ust::shared_ptr_nullable_mut</ClassType/> mut class_type= function_context.this_.get_ref().t.GetClassType().get_ref();
		var ust::optional</NamesScopeValue/> mut class_member;

		auto mut this_value_corrected= function_context.this_.get_ref().llvm_value;
		while( !class_type.empty() && class_member.empty() )
		{
			var ust::shared_ptr_nullable_mut</ClassType/> mut next;
			{
				auto class_type_lock= class_type.lock_imut();
				auto class_members_lock= class_type_lock.get_ref().members.lock_imut();
				if_var( &member : class_members_lock.get_ref().GetThisScopeValue( named_operand.name ) )
				{
					class_member= member;
					break;
				}

				next= class_type_lock.get_ref().base_class;
				if( !next.empty() )
				{
					unsafe
					{
						var [ LLVMValueRef, 2 ] indexes
						[
							GetZeroGEPIndex(),
							LLVMConstInt( fundamental_llvm_types_.u32_, u64(0u /* base is zero */), LLVMBool::False )
						];

						this_value_corrected= LLVMBuildGEP( function_context.llvm_ir_builder, this_value_corrected, indexes[0], 2u, ".base\0"[0] );
					}
				}
			}

			class_type= next;
		}

		if( !class_member.empty() )
		{
			auto field_ptr= class_member.get_ref().Get</ClassField/>();
			if( !field_ptr.empty() )
			{
				if( function_context.whole_this_is_unavailable && !function_context.uninitialized_this_fields.find( named_operand.name ).empty() )
				{
					REPORT_ERROR( FieldIsNotInitializedYet, names_scope, named_operand.file_pos, named_operand.name  )
				}

				auto field_lock= field_ptr.lock_imut();
				auto& field= field_lock.get_ref();
				if( field.index == ~0s ){ return ErrorValue(); } // May be in case of error

				auto mut gep_value= LLVMValueRef::Null;
				auto op_name_nt= "." + named_operand.name + "\0";
				unsafe
				{
					var [ LLVMValueRef, 2 ] indexes
					[
						GetZeroGEPIndex(),
						LLVMConstInt( fundamental_llvm_types_.u32_, u64(field.index), LLVMBool::False )
					];

					gep_value= LLVMBuildGEP( function_context.llvm_ir_builder, this_value_corrected, indexes[0], 2u, op_name_nt.front() );
				}

				var Variable mut result{ .t= field.t, .location= Variable::Location::Pointer };

				if( field.is_reference )
				{
					result.value_type= select( field.is_mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut );
					unsafe{  result.llvm_value= LLVMBuildLoad( function_context.llvm_ir_builder, gep_value, "\0"[0] );  }
				}
				else
				{
					result.value_type= select( field.is_mutable ? function_context.this_.get_ref().value_type : ValueType::ReferenceImut );
					result.llvm_value= gep_value;
				}
				return move(result);
			}
		}
	}

	return ResolveValue( names_scope, function_context, named_operand );
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::BinaryOperator& binary_operator ) : Value
{
	if( binary_operator.operator == BinaryOperatorType::LazyLogicalAnd || binary_operator.operator == BinaryOperatorType::LazyLogicalOr )
	{
		return BuildLazyBinaryOperator( names_scope, function_context, binary_operator );
	}

	if_var( & res :
		TryCallOverloadedBinaryOperator(
			names_scope,
			function_context,
			GetOverloadedOperatorForBinaryOperator( binary_operator.operator ),
			binary_operator.l,
			binary_operator.r,
			ArgsEvaluationOrder::Direct,
			binary_operator.file_pos ) )
	{
		return res;
	}

	auto mut l_var= BuildExpressionCodeEnsureVariable( names_scope, function_context, binary_operator.l.get_ref() );
	// Save l_var in register, prevent its modification during r_var calculation.
	l_var.llvm_value= CreateMoveToLLVMRegisterInstruction( l_var, function_context );
	l_var.location= Variable::Location::LLVMRegister;
	l_var.value_type= ValueType::Value;

	auto r_var= BuildExpressionCodeEnsureVariable( names_scope, function_context, binary_operator.r.get_ref() );

	return BuildBinaryOperator( names_scope, function_context, l_var, r_var, binary_operator.operator, binary_operator.file_pos );
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::BracketExpression& bracket_expression ) : Value
{
	return BuildExpressionCode( names_scope, function_context, bracket_expression.expr.get_ref() );
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::IndexationOperator& indexation_operator ) : Value
{
	auto variable= BuildExpressionCodeEnsureVariable( names_scope, function_context, indexation_operator.value.get_ref() );
	auto index= BuildExpressionCodeEnsureVariable( names_scope, function_context, indexation_operator.index.get_ref() );

	if_var( &variable_array_type : variable.t.GetArrayType() )
	{
		if_var( &index_fundamental_type : index.t.GetFundamentalType() )
		{
			if( !(
				IsUnsignedInteger( index_fundamental_type.fundamental_type ) ||
				( IsSignedInteger( index_fundamental_type.fundamental_type ) && index.constexpr_value != LLVMValueRef::Null ) ) )
			{
				REPORT_ERROR( OperationNotSupportedForThisType, names_scope, indexation_operator.file_pos, index.t )
				return ErrorValue();
			}
			if( variable.location != Variable::Location::Pointer )
			{
				// TODO - Strange variable location.
				return ErrorValue();
			}

			var LLVMValueRef mut index_value= CreateMoveToLLVMRegisterInstruction( index, function_context );
			if( index.constexpr_value != LLVMValueRef::Null )
			{
				// Statically check index.
				auto mut index_value_num= 0u64;
				unsafe{  index_value_num= LLVMConstIntGetZExtValue( index_value );  }
				if( index_value_num >= variable_array_type.element_count )
				{
					REPORT_ERROR( ArrayIndexOutOfBounds, names_scope, indexation_operator.file_pos, index_value_num, variable_array_type.element_count )
					return ErrorValue();
				}
			}
			else
			{
				// Dynamically check index.
				unsafe
				{
					auto mut index_value_for_compare= index_value;
					auto index_type_size= index_fundamental_type.GetSize();
					auto size_type_size= size_type_.GetFundamentalType().get_ref().GetSize();
					if( index_type_size > size_type_size )
					{
						index_value_for_compare= LLVMBuildTrunc( function_context.llvm_ir_builder, index_value_for_compare, fundamental_llvm_types_.int_ptr, "\0"[0] );
					}
					else if( index_type_size < size_type_size )
					{
						index_value_for_compare= LLVMBuildZExt( function_context.llvm_ir_builder, index_value_for_compare, fundamental_llvm_types_.int_ptr, "\0"[0] );
					}

					auto size_value= LLVMConstInt( fundamental_llvm_types_.int_ptr, variable_array_type.element_count, LLVMBool::False );
					auto condition= LLVMBuildICmp( function_context.llvm_ir_builder, LLVMIntPredicate::UGE, index_value_for_compare, size_value, "\0"[0] );
					auto halt_block = LLVMCreateBasicBlockInContext( llvm_context_, "\0"[0] );
					auto ok_block= LLVMCreateBasicBlockInContext( llvm_context_, "\0"[0] );

					LLVMBuildCondBr( function_context.llvm_ir_builder, condition, halt_block, ok_block );

					LLVMAppendExistingBasicBlock( function_context.llvm_function, halt_block );
					LLVMPositionBuilderAtEnd( function_context.llvm_ir_builder, halt_block );

					LLVMBuildCall( function_context.llvm_ir_builder, halt_function_, LLVMValueRef::Null, 0u, "\0"[0] );
					LLVMBuildUnreachable( function_context.llvm_ir_builder );

					LLVMAppendExistingBasicBlock( function_context.llvm_function, ok_block );
					LLVMPositionBuilderAtEnd( function_context.llvm_ir_builder, ok_block );
				}
			}

			var Variable mut result
			{
				.t= variable_array_type.element_type.get_ref(),
				.location= Variable::Location::Pointer,
				.value_type= variable.value_type,
			};

			unsafe
			{
				var [ LLVMValueRef, 2 ] indexes[ GetZeroGEPIndex(), index_value ];
				result.llvm_value= LLVMBuildGEP( function_context.llvm_ir_builder, variable.llvm_value, indexes[0], 2u, "[]\0"[0] ); // TODO - maybe add "inbounds" attribute?
			}

			if( variable.constexpr_value != LLVMValueRef::Null && index.constexpr_value != LLVMValueRef::Null )
			{
				unsafe
				{
					result.constexpr_value= LLVMConstExtractValue( variable.constexpr_value, u32( LLVMConstIntGetZExtValue( index_value ) ), 1u );
				}
			}

			return move(result);
		}
		REPORT_ERROR( OperationNotSupportedForThisType, names_scope, indexation_operator.file_pos, index.t )
	}
	if( !variable.t.GetClassType().empty() )
	{
		var [ FunctionType::Arg, 2 ] args
		[
			{
				.arg_type(variable.t),
				.is_mutable= variable.value_type == ValueType::ReferenceMut,
				.is_reference= variable.value_type != ValueType::Value,
			},
			{
				.arg_type(index.t),
				.is_mutable= index.value_type == ValueType::ReferenceMut,
				.is_reference= index.value_type != ValueType::Value,
			},
		];

		// TODO - is this correct to pass preevaluated args? Maybe evaluate args in "DoCallFunction" instead?
		if_var( &overloaded_operator : GetOverloadedOperator( args, OverloadedOperator::Indexing, names_scope, indexation_operator.file_pos ) )
		{
			var [ Variable, 2 ] args[ variable, index ];
			return DoCallFunction(
				names_scope,
				function_context,
				overloaded_operator,
				args,
				ust::array_view_imut</ ust::shared_ptr_final</Synt::Expression/> />(),
				ArgsEvaluationOrder::Direct,
				indexation_operator.file_pos );
		}
	}

	REPORT_ERROR( OperationNotSupportedForThisType, names_scope, indexation_operator.file_pos, variable.t )

	return ErrorValue();
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::CallOperator& call_operator ) : Value
{
	auto function= BuildExpressionCode( names_scope, function_context, call_operator.value.get_ref() );

	var ust::optional_ref</ FunctionsSet, false /> mut functions_set;
	var ust::optional_ref</ Variable, false /> mut this_;

	if_var( &t : function.get</Type/>() )
	{
		return BuildTempVariableConstruction( names_scope, function_context, t, call_operator.args, call_operator.file_pos );
	}
	if_var( & in_functions_set : function.get</FunctionsSet/>() )
	{
		functions_set.reset(in_functions_set);
	}
	if_var( & this_methods_set : function.get</ThisMethodsSet/>() )
	{
		functions_set.reset(this_methods_set.functions_set);
		this_.reset(this_methods_set.this_);
	}
	if_var( & variable : function.get</Variable/>() )
	{
		if_var( &function_pointer_type : variable.t.GetFunctionPointerType() )
		{
			var FunctionVariable function_variable
			{
				.t= function_pointer_type.function_type,
				.llvm_function= CreateMoveToLLVMRegisterInstruction( variable , function_context )
			};

			return DoCallFunction(
				names_scope,
				function_context,
				ust::optional_ref</ Variable, false />(),
				function_variable,
				call_operator.args.range(),
				call_operator.file_pos );
		}

		// Try to call overloaded () operator.

		var ust::vector</FunctionType::Arg/> mut args;

		{
			var FunctionType::Arg mut this_arg
			{
				.arg_type(variable.t),
				.is_mutable= variable.value_type == ValueType::ReferenceMut,
				.is_reference= variable.value_type != ValueType::Value,
			};
			args.push_back(move(this_arg));
		}

		{
			var VariablesFrameHolder temp_variables_frame_hodler(function_context);
			auto& mut function_context= temp_variables_frame_hodler.GetFunctionContext();
			auto instructions_state= SaveInstructionsState( function_context );

			foreach( &in_arg : call_operator.args )
			{
				auto arg= BuildExpressionCodeEnsureVariable( names_scope, function_context, in_arg.get_ref() );
				var FunctionType::Arg mut f_arg
				{
					.arg_type(arg.t),
					.is_mutable= arg.value_type == ValueType::ReferenceMut,
					.is_reference= arg.value_type != ValueType::Value,
				};
				args.push_back( move(f_arg) );
			}

			RestoreInstructionsState( function_context, instructions_state );
		}

		if_var( &overloaded_operator : GetOverloadedOperator( args.range(), OverloadedOperator::Call, names_scope, call_operator.file_pos ) )
		{
			return DoCallFunction(
				names_scope,
				function_context,
				ust::optional_ref</ Variable, false />(variable),
				overloaded_operator,
				call_operator.args.range(),
				call_operator.file_pos );
		}
	}

	if( functions_set.empty() )
	{
		REPORT_ERROR( OperationNotSupportedForThisType, names_scope, call_operator.file_pos, ust::string8("non-function value") )
		return ErrorValue();
	}

	return CallFunctionsSet( names_scope, function_context, this_, functions_set.get_ref(), call_operator.args.range(), call_operator.file_pos );
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::MemberAccessOperator& member_access_operator ) : Value
{
	if( member_access_operator.member_name == KeywordToString( Keyword::constructor_ ) ||
		member_access_operator.member_name == KeywordToString( Keyword::destructor_ ) )
	{
		if( !function_context.is_in_unsafe_block )
		{
			REPORT_ERROR( ExplicitAccessToThisMethodIsUnsafe, names_scope, member_access_operator.file_pos, member_access_operator.member_name )
		}
	}

	auto variable= BuildExpressionCodeEnsureVariable( names_scope, function_context, member_access_operator.value.get_ref() );
	if( !EnsureTypeComplete( variable.t ) )
	{
		REPORT_ERROR( UsingIncompleteType, names_scope, member_access_operator.file_pos, variable.t )
		return ErrorValue();
	}

	auto class_type_ref= variable.t.GetClassType();
	if( class_type_ref.empty() )
	{
		REPORT_ERROR( OperationNotSupportedForThisType, names_scope, member_access_operator.file_pos, variable.t )
		return ErrorValue();
	}

	var ust::shared_ptr_nullable_mut</ClassType/> mut class_type= class_type_ref.get_ref();
	var ust::optional</NamesScopeValue/> mut class_member;

	auto mut this_value_corrected= variable.llvm_value;
	while( !class_type.empty() && class_member.empty() )
	{
		var ust::shared_ptr_nullable_mut</ClassType/> mut next;
		{
			auto class_type_lock= class_type.lock_imut();
			auto class_members_lock= class_type_lock.get_ref().members.lock_imut();
			if_var( &member : class_members_lock.get_ref().GetThisScopeValue( member_access_operator.member_name ) )
			{
				class_member= member;
				break;
			}

			next= class_type_lock.get_ref().base_class;
			if( !next.empty() )
			{
				unsafe
				{
					var [ LLVMValueRef, 2 ] indexes
					[
						GetZeroGEPIndex(),
						LLVMConstInt( fundamental_llvm_types_.u32_, u64(0u /* base is zero */), LLVMBool::False )
					];

					this_value_corrected= LLVMBuildGEP( function_context.llvm_ir_builder, this_value_corrected, indexes[0], 2u, ".base\0"[0] );
				}
			}
		}

		class_type= next;
	}

	if( class_member.empty() )
	{
		REPORT_ERROR( NameNotFound, names_scope, member_access_operator.file_pos, member_access_operator.member_name )
		return ErrorValue();
	}

	{
		auto field_ptr= class_member.get_ref().Get</ClassField/>();
		if( !field_ptr.empty() )
		{
			if( !member_access_operator.template_args.empty() )
			{
				REPORT_ERROR( ValueIsNotTemplate, names_scope, member_access_operator.file_pos )
			}

			auto field_lock= field_ptr.lock_imut();
			auto& field= field_lock.get_ref();

			if( field.index == ~0s ){ return ErrorValue(); } // May be in case of error

			auto op_name_nt= "." + member_access_operator.member_name + "\0";
			if( field.is_reference )
			{
				var Variable mut result
				{
					.t= field.t,
					.location= Variable::Location::Pointer,
					.value_type= select( field.is_mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut ),
				};

				unsafe
				{
					var [ LLVMValueRef, 2 ] indexes
					[
						GetZeroGEPIndex(),
						LLVMConstInt( fundamental_llvm_types_.u32_, u64(field.index), LLVMBool::False )
					];

					auto ptr_value= LLVMBuildGEP( function_context.llvm_ir_builder, this_value_corrected, indexes[0], 2u, "\0"[0] );
					result.llvm_value= LLVMBuildLoad( function_context.llvm_ir_builder, ptr_value, op_name_nt.front() );
				}

				return move(result);
			}
			else
			{
				var Variable mut result
				{
					.t= field.t,
					.location= Variable::Location::Pointer,
					.value_type= variable.value_type,
				};

				if( !field.is_mutable )
				{
					result.value_type= ValueType::ReferenceImut;
				}

				unsafe
				{
					var [ LLVMValueRef, 2 ] indexes
					[
						GetZeroGEPIndex(),
						LLVMConstInt( fundamental_llvm_types_.u32_, u64(field.index), LLVMBool::False )
					];

					result.llvm_value= LLVMBuildGEP( function_context.llvm_ir_builder, this_value_corrected, indexes[0], 2u, op_name_nt.front() );
				}

				return move(result);
			}
		}
		{
			auto functions_set_ptr= class_member.get_ref().Get</NamesScopeFunctionsSet/>();
			if( !functions_set_ptr.empty() )
			{
				BuildFunctionsSet( class_type.lock_imut().get_ref().members, ust::to_non_nullable( functions_set_ptr ), false );

				var ThisMethodsSet mut this_methods_set{ .this_= variable };

				if( !member_access_operator.template_args.empty() )
				{
					auto functions_set_lock= functions_set_ptr.lock_imut();
					auto& functions_set= functions_set_lock.get_ref().functions_set;

					if( functions_set.function_templates.empty() )
					{
						REPORT_ERROR( ValueIsNotTemplate, names_scope, member_access_operator.file_pos )
						return ErrorValue();
					}

					auto val= ParametrizeTemplateFunctions(
						names_scope,
						function_context,
						functions_set,
						member_access_operator.template_args.get_ref(),
						member_access_operator.file_pos );
					if( val.empty() )
					{
						return ErrorValue();
					}

					this_methods_set.functions_set= val.get_ref().Get</NamesScopeFunctionsSet/>().lock_imut().get_ref().functions_set;
				}
				else
				{
					this_methods_set.functions_set= functions_set_ptr.lock_imut().get_ref().functions_set;
				}

				return move(this_methods_set);
			}
		}
	}

	REPORT_ERROR( NotImplemented, names_scope, member_access_operator.file_pos, ust::string8("class members, except fields or methods") )
	return ErrorValue();
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::UnaryPlus& unary_plus ) : Value
{
	// Do nothing with unary plus.
	// TODO - maybe check type or do something else?
	return BuildExpressionCode( names_scope, function_context, unary_plus.expr.get_ref() );
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::UnaryMinus& unary_minus ) : Value
{
	auto variable= BuildExpressionCodeEnsureVariable( names_scope, function_context, unary_minus.expr.get_ref() );

	if( !variable.t.GetClassType().empty() )
	{
		var [ FunctionType::Arg, 1 ] args
		[ {
			.arg_type(variable.t),
			.is_mutable= variable.value_type == ValueType::ReferenceMut,
			.is_reference= variable.value_type != ValueType::Value,
		} ];

		if_var( &overloaded_operator : GetOverloadedOperator( args, OverloadedOperator::Sub, names_scope, unary_minus.file_pos ) )
		{
			return DoCallFunction(
				names_scope,
				function_context,
				ust::optional_ref</ Variable, false />(variable),
				overloaded_operator,
				ust::array_view_imut</ ust::shared_ptr_final</Synt::Expression/> />(),
				unary_minus.file_pos );
		}
	}

	auto fundamental_type= variable.t.GetFundamentalType();
	if( fundamental_type.empty() )
	{
		REPORT_ERROR( OperationNotSupportedForThisType, names_scope, unary_minus.file_pos, variable.t )
		return ErrorValue();
	}

	auto value_in_register= CreateMoveToLLVMRegisterInstruction( variable, function_context );

	var Variable mut result
	{
		.t= variable.t,
		.location= Variable::Location::LLVMRegister,
	};

	if( IsInteger( fundamental_type.get_ref().fundamental_type ) )
	{
		unsafe{  result.llvm_value= LLVMBuildNeg( function_context.llvm_ir_builder, value_in_register, "-\0"[0] );  }
	}
	else if( IsFloatingPoint( fundamental_type.get_ref().fundamental_type ) )
	{
		unsafe{  result.llvm_value= LLVMBuildFNeg( function_context.llvm_ir_builder, value_in_register, "-\0"[0] );  }
	}
	else
	{
		REPORT_ERROR( OperationNotSupportedForThisType, names_scope, unary_minus.file_pos, variable.t )
		return ErrorValue();
	}

	unsafe{  if( LLVMIsConstant( result.llvm_value ) == LLVMBool::True ){ result.constexpr_value= result.llvm_value; }  }

	return move(result);
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::LogicalNot& logical_not ) : Value
{
	auto variable= BuildExpressionCodeEnsureVariable( names_scope, function_context, logical_not.expr.get_ref() );

	if( !variable.t.GetClassType().empty() )
	{
		var [ FunctionType::Arg, 1 ] args
		[ {
			.arg_type(variable.t),
			.is_mutable= variable.value_type == ValueType::ReferenceMut,
			.is_reference= variable.value_type != ValueType::Value,
		} ];

		if_var( &overloaded_operator : GetOverloadedOperator( args, OverloadedOperator::LogicalNot, names_scope, logical_not.file_pos ) )
		{
			return DoCallFunction(
				names_scope,
				function_context,
				ust::optional_ref</ Variable, false />(variable),
				overloaded_operator,
				ust::array_view_imut</ ust::shared_ptr_final</Synt::Expression/> />(),
				logical_not.file_pos );
		}
	}

	if( variable.t != bool_type_ )
	{
		REPORT_ERROR( OperationNotSupportedForThisType, names_scope, logical_not.file_pos, variable.t )
		return ErrorValue();
	}

	auto value_in_register= CreateMoveToLLVMRegisterInstruction( variable, function_context );

	var Variable mut result
	{
		.t= bool_type_,
		.location= Variable::Location::LLVMRegister,
	};

	unsafe
	{
		result.llvm_value= LLVMBuildNot( function_context.llvm_ir_builder, value_in_register, "!\0"[0] );
		if( LLVMIsConstant( result.llvm_value ) == LLVMBool::True ){ result.constexpr_value= result.llvm_value; }
	}

	return move(result);
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::BitwiseNot& bitwise_not ) : Value
{
	auto variable= BuildExpressionCodeEnsureVariable( names_scope, function_context, bitwise_not.expr.get_ref() );

	if( !variable.t.GetClassType().empty() )
	{
		var [ FunctionType::Arg, 1 ] args
		[ {
			.arg_type(variable.t),
			.is_mutable= variable.value_type == ValueType::ReferenceMut,
			.is_reference= variable.value_type != ValueType::Value,
		} ];

		if_var( &overloaded_operator : GetOverloadedOperator( args, OverloadedOperator::BitwiseNot, names_scope, bitwise_not.file_pos ) )
		{
			return DoCallFunction(
				names_scope,
				function_context,
				ust::optional_ref</ Variable, false />(variable),
				overloaded_operator,
				ust::array_view_imut</ ust::shared_ptr_final</Synt::Expression/> />(),
				bitwise_not.file_pos );
		}
	}

	auto fundamental_type= variable.t.GetFundamentalType();
	if( fundamental_type.empty() || !IsInteger( fundamental_type.get_ref().fundamental_type ) )
	{
		REPORT_ERROR( OperationNotSupportedForThisType, names_scope, bitwise_not.file_pos, variable.t )
		return ErrorValue();
	}

	auto value_in_register= CreateMoveToLLVMRegisterInstruction( variable, function_context );

	var Variable mut result
	{
		.t= variable.t,
		.location= Variable::Location::LLVMRegister,
	};

	unsafe
	{
		result.llvm_value= LLVMBuildNot( function_context.llvm_ir_builder, value_in_register, "~\0"[0] );
		if( LLVMIsConstant( result.llvm_value ) == LLVMBool::True ){ result.constexpr_value= result.llvm_value; }
	}

	return move(result);
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, ust::box</Synt::ArrayType/>& array_type ) : Value
{
	return PrepareType( names_scope, function_context, array_type );
}

fn CodeBuilder::BuildExpressionCode( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, ust::box</Synt::FunctionType/>& function_type ) : Value
{
	return PrepareType( names_scope, function_context, function_type );
}

fn CodeBuilder::BuildBinaryOperator( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Variable& l_var, Variable& r_var, BinaryOperatorType operator, FilePos& file_pos ) : Value
{
	auto l_in_register= CreateMoveToLLVMRegisterInstruction( l_var, function_context );
	auto r_in_register= CreateMoveToLLVMRegisterInstruction( r_var, function_context );

	var Type& l_type= l_var.t;
	var Type& r_type= r_var.t;
	auto l_fundamental_type= l_type.GetFundamentalType();
	auto r_fundamental_type= r_type.GetFundamentalType();

	if(
		operator == BinaryOperatorType::Add ||
		operator == BinaryOperatorType::Sub ||
		operator == BinaryOperatorType::Mul ||
		operator == BinaryOperatorType::Div ||
		operator == BinaryOperatorType::Rem )
	{
		if( l_type != r_type )
		{
			REPORT_ERROR( NoMatchBinaryOperatorForGivenTypes, names_scope, file_pos, r_type, l_type, BinaryOperatorToString( operator ) )
			return ErrorValue();
		}
		if( l_fundamental_type.empty() )
		{
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope, file_pos, l_type )
			return ErrorValue();
		}
		if( l_fundamental_type.get_ref().GetSize() < 4s )
		{
			// Operation supported only for 32 and 64bit operands
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope, file_pos, l_type )
			return ErrorValue();
		}

		var bool is_float= IsFloatingPoint( l_fundamental_type.get_ref().fundamental_type );
		if( !( IsInteger( l_fundamental_type.get_ref().fundamental_type  ) || is_float ) )
		{
			// this operations allowed only for integer and floating point operands.
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope, file_pos, l_type )
			return ErrorValue();
		}

		var bool is_signed= IsSignedInteger( l_fundamental_type.get_ref().fundamental_type );

		var Variable mut res
		{
			.t= l_type,
			.location= Variable::Location::LLVMRegister,
			.value_type= ValueType::Value,
		};

		unsafe
		{
				 if( operator == BinaryOperatorType::Add )
			{
				if( is_float )
				{
					res.llvm_value= LLVMBuildFAdd( function_context.llvm_ir_builder, l_in_register, r_in_register, "+\0"[0] );
				}
				else
				{
					res.llvm_value= LLVMBuildAdd( function_context.llvm_ir_builder, l_in_register, r_in_register, "+\0"[0] );
				}
			}
			else if( operator == BinaryOperatorType::Sub )
			{
				if( is_float )
				{
					res.llvm_value= LLVMBuildFSub( function_context.llvm_ir_builder, l_in_register, r_in_register, "-\0"[0] );
				}
				else
				{
					res.llvm_value= LLVMBuildSub( function_context.llvm_ir_builder, l_in_register, r_in_register, "-\0"[0] );
				}
			}
			else if( operator == BinaryOperatorType::Mul )
			{
				if( is_float )
				{
					res.llvm_value= LLVMBuildFMul( function_context.llvm_ir_builder, l_in_register, r_in_register, "*\0"[0] );
				}
				else
				{
					res.llvm_value= LLVMBuildMul( function_context.llvm_ir_builder, l_in_register, r_in_register, "*\0"[0] );
				}
			}
			else if( operator == BinaryOperatorType::Div )
			{
				if( is_float )
				{
					res.llvm_value= LLVMBuildFDiv( function_context.llvm_ir_builder, l_in_register, r_in_register, "/\0"[0] );
				}
				else if( is_signed )
				{
					res.llvm_value= LLVMBuildSDiv( function_context.llvm_ir_builder, l_in_register, r_in_register, "/\0"[0] );
				}
				else
				{
					res.llvm_value= LLVMBuildUDiv( function_context.llvm_ir_builder, l_in_register, r_in_register, "/\0"[0] );
				}
			}
			else if( operator == BinaryOperatorType::Rem )
			{
				if( is_float )
				{
					res.llvm_value= LLVMBuildFRem( function_context.llvm_ir_builder, l_in_register, r_in_register, "%\0"[0] );
				}
				else if( is_signed )
				{
					res.llvm_value= LLVMBuildSRem( function_context.llvm_ir_builder, l_in_register, r_in_register, "%\0"[0] );
				}
				else
				{
					res.llvm_value= LLVMBuildURem( function_context.llvm_ir_builder, l_in_register, r_in_register, "%\0"[0] );
				}
			}

			if( LLVMIsConstant( res.llvm_value ) == LLVMBool::True )
			{
				res.constexpr_value= res.llvm_value;

				if( LLVMIsUndef( res.constexpr_value ) == LLVMBool::True )
				{
					res.constexpr_value= LLVMValueRef::Null;
					REPORT_ERROR( ConstantExpressionResultIsUndefined, names_scope, file_pos )
				}
			}
		}

		return move(res);
	}
	else if(
		operator == BinaryOperatorType::And ||
		operator == BinaryOperatorType::Or  ||
		operator == BinaryOperatorType::Xor )
	{
		if( l_type != r_type )
		{
			REPORT_ERROR( NoMatchBinaryOperatorForGivenTypes, names_scope, file_pos, r_type, l_type, BinaryOperatorToString( operator ) )
			return ErrorValue();
		}
		if( l_fundamental_type.empty() )
		{
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope, file_pos, l_type )
			return ErrorValue();
		}
		if( !( IsInteger( l_fundamental_type.get_ref().fundamental_type ) || l_fundamental_type.get_ref().fundamental_type == U_FundamentalType::bool_ ) )
		{
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope, file_pos, l_type )
			return ErrorValue();
		}

		var Variable mut res
		{
			.t= l_type,
			.location= Variable::Location::LLVMRegister,
			.value_type= ValueType::Value,
		};

		unsafe
		{
				 if( operator == BinaryOperatorType::And )
			{
				res.llvm_value= LLVMBuildAnd( function_context.llvm_ir_builder, l_in_register, r_in_register, "&\0"[0] );
			}
			else if( operator == BinaryOperatorType::Or  )
			{
				res.llvm_value= LLVMBuildOr ( function_context.llvm_ir_builder, l_in_register, r_in_register, "|\0"[0] );
			}
			else if( operator == BinaryOperatorType::Xor )
			{
				res.llvm_value= LLVMBuildXor( function_context.llvm_ir_builder, l_in_register, r_in_register, "^\0"[0] );
			}

			if( LLVMIsConstant( res.llvm_value ) == LLVMBool::True ){ res.constexpr_value= res.llvm_value; }
		}

		return move(res);
	}
	else if(
		operator == BinaryOperatorType::ShiftLeft ||
		operator == BinaryOperatorType::ShiftRight )
	{
		if( l_fundamental_type.empty() || !IsInteger( l_fundamental_type.get_ref().fundamental_type ) )
		{
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope, file_pos, l_type )
			return ErrorValue();
		}
		if( r_fundamental_type.empty() || !IsUnsignedInteger( r_fundamental_type.get_ref().fundamental_type ) )
		{
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope,file_pos, r_type )
			return ErrorValue();
		}

		auto mut l_value_for_op= l_in_register;
		auto mut r_value_for_op= r_in_register;

		var Variable mut res
		{
			.t= l_type,
			.location= Variable::Location::LLVMRegister,
			.value_type= ValueType::Value,
		};

		unsafe
		{
			// Convert value of shift to type of shifted value. LLVM Reuqired this.
			if( r_fundamental_type.get_ref().GetSize() > l_fundamental_type.get_ref().GetSize() )
			{
				r_value_for_op= LLVMBuildTrunc( function_context.llvm_ir_builder, r_value_for_op, l_type.GetLLVMType(), "\0"[0] );
			}
			else if( r_fundamental_type.get_ref().GetSize() < l_fundamental_type.get_ref().GetSize() )
			{
				r_value_for_op= LLVMBuildZExt( function_context.llvm_ir_builder, r_value_for_op, l_type.GetLLVMType(), "\0"[0] );
			}

			if( operator == BinaryOperatorType::ShiftLeft )
			{
				res.llvm_value= LLVMBuildShl( function_context.llvm_ir_builder, l_value_for_op, r_value_for_op, "\0"[0] );
			}
			else if( operator == BinaryOperatorType::ShiftRight )
			{
				if( IsSignedInteger( l_fundamental_type.get_ref().fundamental_type ) )
				{
					res.llvm_value= LLVMBuildAShr( function_context.llvm_ir_builder, l_value_for_op, r_value_for_op, "\0"[0] );
				}
				else
				{
					res.llvm_value= LLVMBuildLShr( function_context.llvm_ir_builder, l_value_for_op, r_value_for_op, "\0"[0] );
				}
			}
			else{ halt; }

			if( LLVMIsConstant( res.llvm_value ) == LLVMBool::True ){ res.constexpr_value= res.llvm_value; }
		}

		return move(res);
	}
	else if(
		operator == BinaryOperatorType::Equal ||
		operator == BinaryOperatorType::NotEqual )
	{
		if( l_type != r_type )
		{
			REPORT_ERROR( NoMatchBinaryOperatorForGivenTypes, names_scope, file_pos, r_type, l_type, BinaryOperatorToString( operator ) )
			return ErrorValue();
		}
		if( l_fundamental_type.empty() && l_type.GetEnumType().empty() && l_type.GetFunctionPointerType().empty() )
		{
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope, file_pos, l_type )
			return ErrorValue();
		}

		var bool if_float= !l_fundamental_type.empty() && IsFloatingPoint( l_fundamental_type.get_ref().fundamental_type );

		var Variable mut res
		{
			.t= bool_type_,
			.location= Variable::Location::LLVMRegister,
			.value_type= ValueType::Value,
		};

		// Use ordered floating point compare operations, which result is false for NaN, except !=. nan != nan must be true.
		unsafe
		{
				 if( operator == BinaryOperatorType::Equal )
			{
				if( if_float )
				{
					res.llvm_value= LLVMBuildFCmp( function_context.llvm_ir_builder, LLVMRealPredicate::OEQ, l_in_register, r_in_register, "==\0"[0] );
				}
				else
				{
					res.llvm_value= LLVMBuildICmp( function_context.llvm_ir_builder, LLVMIntPredicate::EQ, l_in_register, r_in_register, "==\0"[0] );
				}
			}
			else if( operator == BinaryOperatorType::NotEqual )
			{
				if( if_float )
				{
					res.llvm_value= LLVMBuildFCmp( function_context.llvm_ir_builder, LLVMRealPredicate::UNE, l_in_register, r_in_register, "!=\0"[0] );
				}
				else
				{
					res.llvm_value= LLVMBuildICmp( function_context.llvm_ir_builder, LLVMIntPredicate::NE, l_in_register, r_in_register, "!=\0"[0] );
				}
			}

			if( LLVMIsConstant( res.llvm_value ) == LLVMBool::True ){ res.constexpr_value= res.llvm_value; }
		}

		return move(res);
	}
	else if(
		operator == BinaryOperatorType::Less ||
		operator == BinaryOperatorType::LessEqual ||
		operator == BinaryOperatorType::Greater ||
		operator == BinaryOperatorType::GreaterEqual )
	{
		if( l_type != r_type )
		{
			REPORT_ERROR( NoMatchBinaryOperatorForGivenTypes, names_scope, file_pos, r_type, l_type, BinaryOperatorToString( operator ) )
			return ErrorValue();
		}
		if( l_fundamental_type.empty() )
		{
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope, file_pos, l_type )
			return ErrorValue();
		}

		var bool if_float= IsFloatingPoint( l_fundamental_type.get_ref().fundamental_type );
		var bool is_char= IsChar( l_fundamental_type.get_ref().fundamental_type );
		var bool is_signed= !is_char && IsSignedInteger( l_fundamental_type.get_ref().fundamental_type );
		if( !( IsInteger( l_fundamental_type.get_ref().fundamental_type ) || if_float || is_char ) )
		{
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope, file_pos, l_type )
			return ErrorValue();
		}

		var Variable mut res
		{
			.t= bool_type_,
			.location= Variable::Location::LLVMRegister,
			.value_type= ValueType::Value,
		};

		unsafe
		{
				 if( operator == BinaryOperatorType::Less )
			{
				if( if_float )
				{
					res.llvm_value= LLVMBuildFCmp( function_context.llvm_ir_builder, LLVMRealPredicate::OLT, l_in_register, r_in_register, "<\0"[0] );
				}
				else if( is_signed )
				{
					res.llvm_value= LLVMBuildICmp( function_context.llvm_ir_builder, LLVMIntPredicate::SLT, l_in_register, r_in_register, "<\0"[0] );
				}
				else
				{
					res.llvm_value= LLVMBuildICmp( function_context.llvm_ir_builder, LLVMIntPredicate::ULT, l_in_register, r_in_register, "<\0"[0] );
				}
			}
			else if( operator == BinaryOperatorType::LessEqual )
			{
				if( if_float )
				{
					res.llvm_value= LLVMBuildFCmp( function_context.llvm_ir_builder, LLVMRealPredicate::OLE, l_in_register, r_in_register, "<=\0"[0] );
				}
				else if( is_signed )
				{
					res.llvm_value= LLVMBuildICmp( function_context.llvm_ir_builder, LLVMIntPredicate::SLE, l_in_register, r_in_register, "<=\0"[0] );
				}
				else
				{
					res.llvm_value= LLVMBuildICmp( function_context.llvm_ir_builder, LLVMIntPredicate::ULE, l_in_register, r_in_register, "<=\0"[0] );
				}
			}
			else if( operator == BinaryOperatorType::Greater )
			{
				if( if_float )
				{
					res.llvm_value= LLVMBuildFCmp( function_context.llvm_ir_builder, LLVMRealPredicate::OGT, l_in_register, r_in_register, ">\0"[0] );
				}
				else if( is_signed )
				{
					res.llvm_value= LLVMBuildICmp( function_context.llvm_ir_builder, LLVMIntPredicate::SGT, l_in_register, r_in_register, ">\0"[0] );
				}
				else
				{
					res.llvm_value= LLVMBuildICmp( function_context.llvm_ir_builder, LLVMIntPredicate::UGT, l_in_register, r_in_register, ">\0"[0] );
				}
			}
			else if( operator == BinaryOperatorType::GreaterEqual )
			{
				if( if_float )
				{
					res.llvm_value= LLVMBuildFCmp( function_context.llvm_ir_builder, LLVMRealPredicate::OGE, l_in_register, r_in_register, ">=\0"[0] );
				}
				else if( is_signed )
				{
					res.llvm_value= LLVMBuildICmp( function_context.llvm_ir_builder, LLVMIntPredicate::SGE, l_in_register, r_in_register, ">=\0"[0] );
				}
				else
				{
					res.llvm_value= LLVMBuildICmp( function_context.llvm_ir_builder, LLVMIntPredicate::UGE, l_in_register, r_in_register, ">=\0"[0] );
				}
			}

			if( LLVMIsConstant( res.llvm_value ) == LLVMBool::True ){ res.constexpr_value= res.llvm_value; }
		}

		return move(res);
	}
	else
	{
		halt;
	}
}

fn CodeBuilder::BuildLazyBinaryOperator( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::BinaryOperator& binary_operator ) : Value
{
	var Variable l_var= BuildExpressionCodeEnsureVariable( names_scope, function_context, binary_operator.l.get_ref() );
	if( l_var.t != bool_type_ )
	{
		REPORT_ERROR( TypesMismatch, names_scope, binary_operator.file_pos, bool_type_, l_var.t )
		return ErrorValue();
	}

	var LLVMBasicBlockRef mut l_part_block= zero_init, mut r_part_block= zero_init, mut block_after_operator= zero_init;
	unsafe
	{
		l_part_block= LLVMGetInsertBlock( function_context.llvm_ir_builder );
		r_part_block= LLVMCreateBasicBlockInContext( llvm_context_, "\0"[0] );
		block_after_operator= LLVMCreateBasicBlockInContext( llvm_context_, "\0"[0] );
	}

	auto l_var_in_register= CreateMoveToLLVMRegisterInstruction( l_var, function_context );
	unsafe
	{
		if( binary_operator.operator == BinaryOperatorType::LazyLogicalAnd )
		{
			LLVMBuildCondBr( function_context.llvm_ir_builder, l_var_in_register, r_part_block, block_after_operator );
		}
		else if( binary_operator.operator == BinaryOperatorType::LazyLogicalOr )
		{
			LLVMBuildCondBr( function_context.llvm_ir_builder, l_var_in_register, block_after_operator, r_part_block );
		}
		else { halt; }

		LLVMAppendExistingBasicBlock( function_context.llvm_function, r_part_block );
		LLVMPositionBuilderAtEnd( function_context.llvm_ir_builder, r_part_block );
	}

	auto mut r_var_in_register= LLVMValueRef::Null;
	{
		var VariablesFrameHolder temp_variables_frame_hodler(function_context);
		auto& mut function_context= temp_variables_frame_hodler.GetFunctionContext();

		var Variable r_var= BuildExpressionCodeEnsureVariable( names_scope, function_context, binary_operator.r.get_ref() );
		if( r_var.t != bool_type_ )
		{
			REPORT_ERROR( TypesMismatch, names_scope, binary_operator.file_pos, bool_type_, r_var.t )
			return ErrorValue();
		}

		r_var_in_register= CreateMoveToLLVMRegisterInstruction( r_var, function_context );
		CallDestructorsForTopVariablesFrame( names_scope, function_context, binary_operator.file_pos );
	}

	auto mut phi_node= LLVMValueRef::Null;
	unsafe
	{
		auto r_part_end_block= LLVMGetInsertBlock( function_context.llvm_ir_builder );
		LLVMBuildBr( function_context.llvm_ir_builder, block_after_operator );
		LLVMAppendExistingBasicBlock( function_context.llvm_function, block_after_operator );
		LLVMPositionBuilderAtEnd( function_context.llvm_ir_builder, block_after_operator );

		phi_node= LLVMBuildPhi( function_context.llvm_ir_builder, fundamental_llvm_types_.bool_, "\0"[0] );

		var [ LLVMValueRef, 2 ] incoming_values[ l_var_in_register, r_var_in_register ];
		var [ LLVMBasicBlockRef, 2 ] incoming_blocks[ l_part_block, r_part_end_block ];
		LLVMAddIncoming( phi_node, incoming_values[0], incoming_blocks[0], 2u );
	}

	var Variable mut result
	{
		.t= bool_type_,
		.location= Variable::Location::LLVMRegister,
		.value_type= ValueType::Value,
		.llvm_value= phi_node
	};

	unsafe
	{
		if( LLVMIsConstant( l_var_in_register ) == LLVMBool::True && LLVMIsConstant( r_var_in_register ) == LLVMBool::True )
		{
			if( binary_operator.operator == BinaryOperatorType::LazyLogicalAnd )
			{
				result.constexpr_value= LLVMBuildAnd( function_context.llvm_ir_builder, l_var_in_register, r_var_in_register, "\0"[0] );
			}
			else if( binary_operator.operator == BinaryOperatorType::LazyLogicalOr )
			{
				result.constexpr_value= LLVMBuildOr ( function_context.llvm_ir_builder, l_var_in_register, r_var_in_register, "\0"[0] );
			}
			else{ halt; }
		}
	}

	return move(result);
}

fn CodeBuilder::TryCallOverloadedBinaryOperator(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	OverloadedOperator operator,
	ust::shared_ptr_final</Synt::Expression/>& arg_l,
	ust::shared_ptr_final</Synt::Expression/>& arg_r,
	ArgsEvaluationOrder args_evaluation_order,
	FilePos& file_pos ) : ust::optional</Value/>
{
	var [ ust::shared_ptr_final</Synt::Expression/>, 2 ] in_args[ arg_l, arg_r ];

	var ust::vector</FunctionType::Arg/> mut args;

	{
		var VariablesFrameHolder temp_variables_frame_hodler(function_context);
		auto& mut function_context= temp_variables_frame_hodler.GetFunctionContext();
		auto instructions_state= SaveInstructionsState( function_context );

		foreach( &in_arg : in_args )
		{
			auto arg= BuildExpressionCodeEnsureVariable( names_scope, function_context, in_arg.get_ref() );
			var FunctionType::Arg mut f_arg
			{
				.arg_type(arg.t),
				.is_mutable= arg.value_type == ValueType::ReferenceMut,
				.is_reference= arg.value_type != ValueType::Value,
			};
			args.push_back( move(f_arg) );
		}

		RestoreInstructionsState( function_context, instructions_state );
	}

	if_var( &overloaded_operator : GetOverloadedOperator( args.range(), operator, names_scope, file_pos ) )
	{
		return DoCallFunction(
			names_scope,
			function_context,
			overloaded_operator,
			ust::array_view_imut</ Variable />(),
			in_args,
			args_evaluation_order,
			file_pos );
	}

	return ust::optional</Value/>();
}

fn CodeBuilder::CallFunctionsSet(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	ust::optional_ref</ Variable, false /> mut this_,
	FunctionsSet& functions_set,
	ust::array_view_imut</ ust::shared_ptr_final</Synt::Expression/> />& args,
	FilePos& file_pos ) : Value
{
	// Pre-evaluate arguments to know exact types and select exact function.
	var ust::vector</FunctionType::Arg/> mut args_evaluated;
	{
		var VariablesFrameHolder temp_variables_frame_hodler(function_context);
		auto& mut function_context= temp_variables_frame_hodler.GetFunctionContext();

		auto instructions_state= SaveInstructionsState( function_context );

		if( !this_.empty() )
		{
			var FunctionType::Arg mut out_arg
			{
				.arg_type( this_.get_ref().t ),
				.is_mutable= this_.get_ref().value_type == ValueType::ReferenceMut,
				.is_reference= true,
			};
			args_evaluated.push_back( move(out_arg) );
		}

		foreach( &arg : args )
		{
			auto arg_variable= BuildExpressionCodeEnsureVariable( names_scope, function_context, arg.get_ref() );
			var FunctionType::Arg mut out_arg
			{
				.arg_type( arg_variable.t ),
				.is_mutable= arg_variable.value_type == ValueType::ReferenceMut,
				.is_reference= arg_variable.value_type != ValueType::Value,
			};
			args_evaluated.push_back( move(out_arg) );
		}

		RestoreInstructionsState( function_context, instructions_state );
	}

	auto function_selected=
		GetOverloadedFunction(
			functions_set,
			args_evaluated.range(),
			!this_.empty(),
			names_scope,
			file_pos,
			true );
	if( function_selected.empty() )
	{
		return ErrorValue();
	}

	if( !this_.empty() && !function_selected.get_ref().is_this_call )
	{
		this_.reset();
	}

	return DoCallFunction(
		names_scope,
		function_context,
		this_,
		function_selected.get_ref(),
		args,
		file_pos );
}

fn CodeBuilder::DoCallFunction(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	ust::optional_ref</ Variable, false />& this_,
	FunctionVariable& function,
	ust::array_view_imut</ ust::shared_ptr_final</Synt::Expression/> />& args,
	FilePos& file_pos ) : Value
{
	if( function.is_this_call && this_.empty() )
	{
		REPORT_ERROR( CallOfThiscallFunctionUsingNonthisArgument, names_scope, file_pos )
		return ErrorValue();
	}
	/* TODO - what if we call non-this-call function using "this", like
		struct S{ fn Foo( S& s ); }
		fn Bar( S& s ) { s.Foo(); }
	???
	*/

	var ust::vector</ Variable /> mut preevaluated_args;
	if( !this_.empty() )
	{
		preevaluated_args.push_back( this_.get_ref() );
	}

	return DoCallFunction(
		names_scope,
		function_context,
		function,
		preevaluated_args.range(),
		args,
		ArgsEvaluationOrder::Direct,
		file_pos );
}

fn CodeBuilder::DoCallFunction(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	FunctionVariable& function,
	ust::array_view_imut</ Variable />& preevaluated_args,
	ust::array_view_imut</ ust::shared_ptr_final</Synt::Expression/> />& args,
	ArgsEvaluationOrder args_evaluation_order,
	FilePos& file_pos ) : Value
{
	auto total_args= preevaluated_args.size() + args.size();

	var FunctionType& function_type= function.t;

	if( total_args != function_type.args.size() )
	{
		REPORT_ERROR( InvalidFunctionArgumentCount, names_scope, file_pos, total_args, function_type.args.size() )
		return ErrorValue();
	}

	// TODO - maybe forbid calling functions with incomplete type for returned reference?
	if( !function_type.return_value_is_reference && !EnsureTypeComplete( function_type.return_type.get_ref() ) )
	{
		REPORT_ERROR( UsingIncompleteType, names_scope, file_pos, function_type.return_type.get_ref() )
		return ErrorValue();
	}
	if( function_type.is_unsafe && !function_context.is_in_unsafe_block )
	{
		REPORT_ERROR( UnsafeFunctionCallOutsideUnsafeBlock, names_scope, file_pos )
	}

	var ust::vector</LLVMValueRef/> mut llvm_args;

	auto mut s_ret_value= LLVMValueRef::Null;
	auto is_s_ret= !function_type.return_value_is_reference && !function_type.return_type.get_ref().GetClassType().empty();
	if( is_s_ret )
	{
		unsafe{  s_ret_value= LLVMBuildAlloca( function_context.alloca_ir_builder, function_type.return_type.get_ref().GetLLVMType(), "\0"[0] );  }
		llvm_args.push_back( s_ret_value );
	}

	auto first_llvm_arg_number= select( is_s_ret ? 1s : 0s );
	llvm_args.resize( first_llvm_arg_number + total_args, LLVMValueRef::Null );

	for( var size_type mut i= 0s; i < total_args; ++i )
	{
		auto arg_n= select( args_evaluation_order == ArgsEvaluationOrder::Direct ? i : total_args - i - 1s );
		auto &mut llvm_arg= llvm_args[ first_llvm_arg_number + arg_n ];

		var Type& expected_arg_type= function_type.args[arg_n].arg_type.get_ref();
		auto arg=
			select( arg_n < preevaluated_args.size()
				? preevaluated_args[arg_n]
				: BuildExpressionCodeEnsureVariable( names_scope, function_context, args[ arg_n - preevaluated_args.size() ].get_ref() ) );

		if( function_type.args[arg_n].is_reference )
		{
			if( function_type.args[arg_n].is_mutable )
			{
				if( arg.value_type == ValueType::Value )
				{
					REPORT_ERROR( ExpectedReferenceValue, names_scope, file_pos )
				}
				else if( arg.value_type != ValueType::ReferenceMut )
				{
					REPORT_ERROR( BindingConstReferenceToNonconstReference, names_scope, file_pos )
				}
			}
			if( arg.t != expected_arg_type && !arg.t.ReferenceIsConvertibleTo( expected_arg_type ) )
			{
				REPORT_ERROR( TypesMismatch, names_scope, file_pos, arg.t, expected_arg_type )
				return ErrorValue();
			}

			if( arg.location == Variable::Location::LLVMRegister )
			{
				// Bind value to const reference.
				unsafe
				{
					auto temp_storage= LLVMBuildAlloca( function_context.alloca_ir_builder, arg.t.GetLLVMType(), "\0"[0] );
					LLVMBuildStore( function_context.llvm_ir_builder, arg.llvm_value, temp_storage );
					llvm_arg= temp_storage;
				}
			}
			else
			{
				llvm_arg= arg.llvm_value;
			}

			llvm_arg= CreateReferenceCast( llvm_arg, arg.t, expected_arg_type, function_context );
		}
		else
		{
			if( arg.t != expected_arg_type )
			{
				REPORT_ERROR( TypesMismatch, names_scope, file_pos, arg.t, expected_arg_type )
				return ErrorValue();
			}

			if( !arg.t.GetClassType().empty() )
			{
				auto mut var_copy= LLVMValueRef::Null;
				unsafe
				{
					var_copy= LLVMBuildAlloca( function_context.alloca_ir_builder, arg.t.GetLLVMType(), "\0"[0] );
				}
				TryCallCopyConstructor( names_scope, function_context, var_copy, arg.llvm_value, arg.t.GetClassType().get_ref(), file_pos );

				llvm_arg= var_copy;
			}
			else
			{
				llvm_arg= CreateMoveToLLVMRegisterInstruction( arg, function_context );
			}
		}
	}

	var Variable mut result
	{
		.t= function_type.return_type.get_ref(),
	};

	if( function_type.return_value_is_reference )
	{
		result.location= Variable::Location::Pointer;
		result.value_type= select( function_type.return_value_is_mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut );
	}
	else
	{
		result.location= Variable::Location::LLVMRegister;
		result.value_type= ValueType::Value;
	}

	unsafe
	{
		if( llvm_args.empty() )
		{
			auto dummy= LLVMValueRef::Null;
			result.llvm_value= LLVMBuildCall( function_context.llvm_ir_builder, function.llvm_function, dummy, 0u, "\0"[0] );
		}
		else
		{
			result.llvm_value= LLVMBuildCall( function_context.llvm_ir_builder, function.llvm_function, cast_imut(llvm_args).front(), u32(llvm_args.size()), "\0"[0] );
		}
	}

	if( is_s_ret )
	{
		result.llvm_value= s_ret_value;
		result.location= Variable::Location::Pointer;

		// Register result variable of non-trival type for destruction. TODO - maybe do it for all result variables?
		var NamesScopeVariable names_scope_variable
		{
			.t= result.t,
			.is_mutable= true,
			.llvm_value= result.llvm_value,
		};
		function_context.variables_frames.back().push_back( names_scope_variable );
	}

	return move(result);
}

fn CodeBuilder::BuildTempVariableConstruction(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	Type& t,
	ust::vector</ ust::shared_ptr_final</Synt::Expression/> />& args,
	FilePos& file_pos ) : Value
{
	if( !EnsureTypeComplete( t ) )
	{
		REPORT_ERROR( UsingIncompleteType, names_scope, file_pos, t )
		return ErrorValue();
	}

	var Variable mut result
	{
		.t= t,
		.location= Variable::Location::Pointer,
		.value_type= ValueType::Value,
	};

	auto name= "_temp_" + t.ToString() + "\0";
	unsafe{  result.llvm_value= LLVMBuildAlloca( function_context.alloca_ir_builder, t.GetLLVMType(), name.front() );  }

	{
		var NamesScopeVariable names_scope_variable
		{
			.t= t,
			.is_mutable= true,
			.llvm_value= result.llvm_value,
		};
		result.constexpr_value= BuildConstructorInitializer( names_scope, function_context, names_scope_variable, args, file_pos );

		function_context.variables_frames.back().push_back( names_scope_variable );
	}

	return move(result);
}

} // namespace U
