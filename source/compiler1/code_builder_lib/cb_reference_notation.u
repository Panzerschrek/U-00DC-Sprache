import "/scoped_array.u"
import "/sort.u"
import "error_reporting.uh"
import "code_builder.uh"

namespace U1
{

fn CodeBuilder::EvaluateReferenceFieldTag( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::Expression& expression ) : ust::optional</u8/>
{
	var VariableLite variable= EvaluateReferenceNotationExpression( names_scope, function_context, expression );
	var SrcLoc src_loc= Synt::GetSrcLoc( expression );

	var FundamentalType expected_type( U_FundamentalType::char8_, fundamental_llvm_types_.char8_ );
	if( variable.t != expected_type )
	{
		REPORT_ERROR( TypesMismatch, names_scope, src_loc, Type(expected_type), variable.t )
		return ust::null_optional;
	}
	if( variable.constexpr_value == LLVMValueRef::Null )
	{
		REPORT_ERROR( ExpectedConstantExpression, names_scope, src_loc )
		return ust::null_optional;
	}

	var u64 value= unsafe( LLVMConstIntGetZExtValue( variable.constexpr_value ) );
	if( value >= u64( "a"c8 ) && value <= u64( "z"c8 ) )
	{
		return u8( value - u64( "a"c8 ) );
	}
	else
	{
		REPORT_ERROR( InvalidInnerReferenceTagName, names_scope, src_loc, value )
		return ust::null_optional;
	}
}

fn CodeBuilder::EvaluateReferenceFieldInnerTags( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::Expression& expression ) : ust::optional</ust::vector</u8/>/>
{
	var VariableLite variable= EvaluateReferenceNotationExpression( names_scope, function_context, expression );
	var SrcLoc src_loc= Synt::GetSrcLoc( expression );
	if_var( &array_type : variable.t.GetArrayType() )
	{
		var FundamentalType expected_type( U_FundamentalType::char8_, fundamental_llvm_types_.char8_ );
		if( array_type.element_type != expected_type )
		{
			REPORT_ERROR( TypesMismatch, names_scope, src_loc, Type(expected_type), variable.t )
			return ust::null_optional;
		}
		if( variable.constexpr_value == LLVMValueRef::Null )
		{
			REPORT_ERROR( ExpectedConstantExpression, names_scope, src_loc )
			return ust::null_optional;
		}

		var ust::vector</u8/> mut result;
		result.resize( size_type(array_type.element_count), 0u8 );

		for( auto mut i= 0u64; i < array_type.element_count; ++i )
		{
			var u64 value= unsafe( LLVMConstIntGetZExtValue( LLVMGetAggregateElement( variable.constexpr_value, u32(i) ) ) );
			if( value >= u64( "a"c8 ) && value <= u64( "z"c8 ) )
			{
				result[ size_type(i) ]= u8( value - u64( "a"c8 ) );
			}
			else
			{
				REPORT_ERROR( InvalidInnerReferenceTagName, names_scope, src_loc, value )
				return ust::null_optional;
			}
		}
		return result;
	}
	else
	{
		REPORT_ERROR( TypesMismatch, names_scope, src_loc, "array of char8", variable.t )
		return ust::null_optional;
	}
}

fn CodeBuilder::EvaluateFunctionReferencePollution(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	Synt::Expression& expression,
	size_type num_params ) : FunctionType::ReferencesPollution
{
	var FunctionType::ReferencesPollution mut result;

	var VariableLite variable= EvaluateReferenceNotationExpression( names_scope, function_context, expression );
	var SrcLoc src_loc= Synt::GetSrcLoc( expression );

	if_var( &array_type : variable.t.GetArrayType() )
	{
		if( array_type.element_type != reference_notation_pollution_element_type_ )
		{
			REPORT_ERROR( TypesMismatch, names_scope, src_loc, reference_notation_pollution_element_type_, variable.t )
			return result;
		}
		if( variable.constexpr_value == LLVMValueRef::Null )
		{
			REPORT_ERROR( ExpectedConstantExpression, names_scope, src_loc )
			return result;
		}

		for( auto mut i= 0u64; i < array_type.element_count; ++i )
		{
			auto pollution_constant= unsafe( LLVMGetAggregateElement( variable.constexpr_value, u32(i) ) );
			auto dst_reference= ParseEvaluatedParamReference( unsafe( LLVMGetAggregateElement( pollution_constant, 0u ) ), num_params, names_scope, src_loc );
			auto src_reference= ParseEvaluatedParamReference( unsafe( LLVMGetAggregateElement( pollution_constant, 1u ) ), num_params, names_scope, src_loc );
			if( dst_reference.empty() || src_reference.empty() )
			{
				continue;
			}

			var FunctionType::ReferencePollution pollution
			{
				.dst= dst_reference.try_deref(),
				.src= src_reference.try_deref(),
			};

			if( pollution.dst.reference_index == FunctionType::c_param_reference_number )
			{
				REPORT_ERROR( ArgReferencePollution, names_scope, src_loc )
				continue;
			}

			if( pollution.dst == pollution.src )
			{
				REPORT_ERROR( SelfReferencePollution, names_scope, src_loc )
				continue;
			}

			result.push_back( pollution );
		}

		NormalizeReferencesPollution(result);
		return result;
	}
	else
	{
		REPORT_ERROR( TypesMismatch, names_scope, src_loc, "array of " + reference_notation_pollution_element_type_.ToString(), variable.t )
		return result;
	}
}

fn CodeBuilder::EvaluateFunctionReturnReferences(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	Synt::Expression& expression,
	size_type num_params ) : FunctionType::ParamReferences
{
	var FunctionType::ParamReferences mut result;

	var VariableLite variable= EvaluateReferenceNotationExpression( names_scope, function_context, expression );
	var SrcLoc src_loc= Synt::GetSrcLoc( expression );

	if_var( &array_type : variable.t.GetArrayType() )
	{
		if( array_type.element_type != reference_notation_param_reference_description_type_ )
		{
			REPORT_ERROR( TypesMismatch, names_scope, src_loc, reference_notation_pollution_element_type_, variable.t )
			return result;
		}
		if( variable.constexpr_value == LLVMValueRef::Null )
		{
			REPORT_ERROR( ExpectedConstantExpression, names_scope, src_loc )
			return result;
		}

		for( auto mut i= 0u64; i < array_type.element_count; ++i )
		{
			if_var( &param_reference : ParseEvaluatedParamReference( unsafe( LLVMGetAggregateElement( variable.constexpr_value, u32(i) ) ), num_params, names_scope, src_loc ) )
			{
				result.push_back( param_reference );
			}
		}

		NormalizeParamReferencesList(result);
		return result;
	}
	else
	{
		REPORT_ERROR( TypesMismatch, names_scope, src_loc, "array of " + reference_notation_pollution_element_type_.ToString(), variable.t )
		return result;
	}
}

fn CodeBuilder::EvaluateFunctionReturnInnerReferences(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	Synt::Expression& expression,
	size_type num_params ) : FunctionType::ReturnInnerReferences
{
	var FunctionType::ReturnInnerReferences mut result;

	var VariableLite variable= EvaluateReferenceNotationExpression( names_scope, function_context, expression );
	var SrcLoc src_loc= Synt::GetSrcLoc( expression );

	if( variable.constexpr_value == LLVMValueRef::Null )
	{
		REPORT_ERROR( ExpectedConstantExpression, names_scope, src_loc )
		return result;
	}

	if_var( &tuple_type : variable.t.GetTupleType() )
	{
		result.resize( tuple_type.element_types.size() );
		for( auto mut i= 0s; i < tuple_type.element_types.size(); ++i )
		{
			var Type& tuple_element_type= tuple_type.element_types[i];
			if_var( &array_type : tuple_element_type.GetArrayType() )
			{
				if( array_type.element_type != reference_notation_param_reference_description_type_ )
				{
					REPORT_ERROR( TypesMismatch, names_scope, src_loc, reference_notation_param_reference_description_type_, array_type.element_type )
					continue;
				}

				auto tag_constant= unsafe( LLVMGetAggregateElement( variable.constexpr_value, u32(i) ) );
				auto& mut tag_list= result[i];
				for( auto mut j= 0u64; j < array_type.element_count; ++j )
				{
					if_var( &param_reference : ParseEvaluatedParamReference( unsafe( LLVMGetAggregateElement( tag_constant, u32(j) ) ), num_params, names_scope, src_loc ) )
					{
						tag_list.push_back( param_reference );
					}
				}
				NormalizeParamReferencesList( tag_list );
			}
			else
			{
				REPORT_ERROR( TypesMismatch, names_scope, src_loc, "array of " + reference_notation_param_reference_description_type_.ToString(), tuple_element_type )
				continue;
			}
		}

		return result;
	}
	else
	{
		REPORT_ERROR( TypesMismatch, names_scope, src_loc, "tuple of " + reference_notation_param_reference_description_type_.ToString() + " arrays", variable.t )
		return result;
	}
}

fn CodeBuilder::EvaluateReferenceNotationExpression( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::Expression& expression ) : VariableLite
{
	return WithVariablesFrame(
		function_context,
		lambda[&]( CodeBuilder &mut self, FunctionContext &mut function_context ) : VariableLite
		{
			return self.BuildExpressionCodeEnsureVariable( names_scope, function_context, expression );
		} );
}

fn CodeBuilder::NormalizeParamReferencesList( FunctionType::ParamReferences &mut param_references )
{
	NormalizeList( param_references );
}

fn CodeBuilder::NormalizeReferencesPollution( FunctionType::ReferencesPollution &mut references_pollution )
{
	NormalizeList( references_pollution );
}

fn CodeBuilder::GetReturnReferencesConstant( this, FunctionType::ParamReferences& return_references ) : ReferenceNotationConstant
{
	scoped_array LLVMValueRef mut constant_initializers[ return_references.size() ]( LLVMValueRef::Null );

	for( auto mut i= 0s; i < return_references.size(); ++i )
	{
		constant_initializers[i]= GetParamReferenceConstant( return_references[i] );
	}

	var LLVMTypeRef element_llvm_type= reference_notation_param_reference_description_type_.GetLLVMType();

	return ust::make_tuple(
		Type(
			ArrayType
			{
				.element_type= reference_notation_param_reference_description_type_,
				.element_count= u64( constant_initializers.size() ),
				.llvm_type= unsafe( LLVMArrayType( element_llvm_type, u32( constant_initializers.size() ) ) ),
			} ),
		unsafe( LLVMConstArray( element_llvm_type, constant_initializers.data(), u32(constant_initializers.size()) ) ) );
}

fn CodeBuilder::GetReturnInnerReferencesConstant( this, FunctionType::ReturnInnerReferences& return_inner_references ) : ReferenceNotationConstant
{
	var TupleType mut tuple_type;
	scoped_array LLVMTypeRef mut elements_llvm_types[ return_inner_references.size() ]( LLVMTypeRef::Null );
	scoped_array LLVMValueRef mut constant_initializers[ return_inner_references.size() ]( LLVMValueRef::Null );

	for( auto mut i= 0s; i < return_inner_references.size(); ++i )
	{
		auto return_references_contant= GetReturnReferencesConstant( return_inner_references[i] );
		tuple_type.element_types.push_back( return_references_contant[0] );
		elements_llvm_types[i]= return_references_contant[0].GetLLVMType();
		constant_initializers[i]= return_references_contant[1];
	}

	tuple_type.llvm_type= unsafe( LLVMStructTypeInContext( llvm_context_, elements_llvm_types.data(), u32(elements_llvm_types.size()), LLVMBool::False ) );

	return ust::make_tuple(
		Type( move(tuple_type) ),
		unsafe( LLVMConstStructInContext( llvm_context_, constant_initializers.data(), u32(constant_initializers.size()), LLVMBool::False ) ) );
}

fn CodeBuilder::GetReferencesPollutionConstant( this, FunctionType::ReferencesPollution& references_pollution ) : ReferenceNotationConstant
{
	scoped_array LLVMValueRef mut constant_initializers[ references_pollution.size() ]( LLVMValueRef::Null );

	var LLVMTypeRef pair_element_llvm_type= reference_notation_param_reference_description_type_.GetLLVMType();
	for( auto mut i= 0s; i < references_pollution.size(); ++i )
	{
		var FunctionType::ReferencePollution& pollution= references_pollution[i];
		var [ LLVMValueRef, 2 ] mut initializer
		[
			GetParamReferenceConstant( pollution.dst ),
			GetParamReferenceConstant( pollution.src ),
		];
		constant_initializers[i]= unsafe( LLVMConstArray( pair_element_llvm_type, $<(initializer[0]), 2u ) );
	}

	var LLVMTypeRef element_llvm_type= reference_notation_pollution_element_type_.GetLLVMType();

	return ust::make_tuple(
		Type(
			ArrayType
			{
				.element_type= reference_notation_pollution_element_type_,
				.element_count= u64( constant_initializers.size() ),
				.llvm_type= unsafe( LLVMArrayType( element_llvm_type, u32( constant_initializers.size() ) ) ),
			} ),
		unsafe( LLVMConstArray( element_llvm_type, constant_initializers.data(), u32(constant_initializers.size()) ) ) );
}

fn CodeBuilder::GetParamReferenceConstant( this, FunctionType::ParamReference& param_reference ) : LLVMValueRef
{
	var [ char8, 2 ] mut initializer
	[
		char8( u32( "0"c8 ) + u32( param_reference.param_index ) ),
		( ( param_reference.reference_index == FunctionType::c_param_reference_number
				? "_"c8
				: char8( u32( "a"c8 ) + u32( param_reference.reference_index ) ) ) ),
	];
	return unsafe( U1_ConstDataArray( fundamental_llvm_types_.char8_, ust::ptr_cast_to_byte8( $<(initializer) ), 2s, 2s ) );
}

fn ParseEvaluatedParamReference( LLVMValueRef constant, size_type num_params, NamesScopePtr& names_scope, SrcLoc& src_loc ) : ust::optional</ FunctionType::ParamReference />
{
	var u64 param= unsafe( LLVMConstIntGetZExtValue( LLVMGetAggregateElement( constant, 0u ) ) );
	var u64 ref= unsafe( LLVMConstIntGetZExtValue( LLVMGetAggregateElement( constant, 1u ) ) );

	if( !( param >= u64( "0"c8 ) && param <= u64( "9"c8 ) ) )
	{
		REPORT_ERROR( InvalidParamNumber, names_scope, src_loc, param )
		return ust::null_optional;
	}

	if( !( ( ref >= u64( "a"c8 ) && ref <= u64( "z"c8 ) ) || ref == u64( "_"c8 ) ) )
	{
		REPORT_ERROR( InvalidInnerReferenceTagName, names_scope, src_loc, ref )
		return ust::null_optional;
	}

	var FunctionType::ParamReference result
	{
		.param_index= u8( param - u64( "0"c8 ) ),
		.reference_index= ( ref == u64( "_"c8 ) ? FunctionType::c_param_reference_number : u8( ref - u64( "a"c8 ) ) )
	};

	if( size_type(result.param_index) >= num_params )
	{
		REPORT_ERROR( ParamNumberOutOfRange, names_scope, src_loc, size_type(result.param_index), num_params )
		return ust::null_optional;
	}

	return result;
}

template</type T/>
fn NormalizeList( ust::vector</T/> &mut v )
{
	ust::sort( v );
	v.remove_adjacent_duplicates();
}

} // namespace U1
