import "/box.u"
import "/shared_ptr.u"
import "/shared_ptr_final.u"
import "/unordered_map.u"
import "/variant.u"
import "/vector.u"
import "../lex_synt_lib/syntax_elements.uh"
import "lang_types.uh"
import "llvm_ext.uh"
import "references_graph.uh"
import "/code_builder_errors.uh"

/*

This header contains defenitions of Type structs, Value structs, NamesScopeValue structs, NamesScope, Class.
This needed, because of dependency loop Type->Class->NamesScope->Value->Type.

*/

namespace U1
{

//
// Type
//

enum InnerReferenceKind : u8
{
	None, // Type have no inner references
	Imut, // Type have immutable inner ereference
	Mut, // Type have mutable inner reference
}

struct FundamentalType
{
	U_FundamentalType fundamental_type= U_FundamentalType::InvalidType;
	LLVMTypeRef llvm_type= LLVMTypeRef::Null;

	fn constructor()= default;
	fn constructor( U_FundamentalType in_fundamental_type, LLVMTypeRef in_llvm_type );

	op==( FundamentalType& l, FundamentalType& r ) : bool;

	fn GetSize(this) : size_type;
}

struct ArrayType
{
	Type element_type;
	u64 element_count= 0u64;
	LLVMTypeRef llvm_type= LLVMTypeRef::Null;

	op==( ArrayType& l, ArrayType& r ) : bool;
}

struct TupleType
{
	ust::vector</ Type /> element_types;
	LLVMTypeRef llvm_type= LLVMTypeRef::Null;

	op==( TupleType& l, TupleType& r ) : bool;
}

struct RawPointerType
{
	Type element_type;
	LLVMTypeRef llvm_type= LLVMTypeRef::Null;

	op==( RawPointerType& l, RawPointerType& r ) : bool;
}

struct FunctionType
{
	type Param = VariableTypeExtended;

	struct ParamReference
	{
		u8 param_index;
		u8 reference_index; // ~0 for param reference, 0 for inner reference

		op<=>(ParamReference& l, ParamReference& r) : i32;
	}
	var u8 c_param_reference_number= ~0u8;

	struct ReferencePollution
	{
		ParamReference dst;
		ParamReference src;

		op<=>(ReferencePollution& l, ReferencePollution& r) : i32;
	}

	ust::vector</Param/> params;
	Type return_type;
	ValueType return_value_type;

	bool is_unsafe= false;

	// for functions, returning references this is references of reference itslef.
	// For function, returning values, this is inner references.
	ust::vector</ParamReference/> return_references; // Sorted by param index.

	// Sorted.
	ust::vector</ReferencePollution/> references_pollution;

	LLVMTypeRef llvm_type= LLVMTypeRef::Null;

	op==( FunctionType& l, FunctionType& r ) : bool;

	fn PointerCanBeConvertedTo( this, FunctionType& dst ) : bool;
	fn IsStructRet( this ) : bool;
}

fn FunctionParamsToString( ust::array_view_imut</FunctionType::Param/> params ) : ust::string8;

struct FunctionPointerType
{
	FunctionType function_type;
	LLVMTypeRef llvm_type= LLVMTypeRef::Null;

	op==( FunctionPointerType& l, FunctionPointerType& r ) : bool;
}

struct ClassType
{
	NamesScopeMutPtr members; // Mutable, because it may be filled in class build process in case of inheritance.

	// Namespace of class declaration.
	// This namespace does not changes in import.
	NamesScopeMutPtr members_initial;

	ust::shared_ptr_final_nullable</ Synt::Class /> forward_declaration_syntax_element;
	ust::shared_ptr_final_nullable</ Synt::Class /> syntax_element;

	// This class fields names ordered by offset.
	ust::vector</tup[ust::string8, ClassFieldPtr]/> fields_order;

	struct BaseTemplate
	{
		TypeTemplatePtr class_template;
		TemplateArgsFinished signature_args;
	}
	ust::optional</BaseTemplate/> base_template;

	LLVMTypeRef llvm_type= LLVMTypeRef::Null;

	bool is_complete= false;

	bool is_default_constructible= false;
	bool is_copy_constructible= false;
	bool is_copy_assignable= false;
	bool is_equality_comparable= false;
	bool have_explicit_noncopy_constructors= false;
	bool can_be_constexpr= false;
	bool have_shared_state= false;

	InnerReferenceKind inner_reference_kind= InnerReferenceKind::None;

	enum Kind : u8
	{
		Struct,
		NonPolymorph,
		Interface,
		Abstract,
		PolymorphNonFinal,
		PolymorphFinal,
	}
	Kind kind= Kind::Struct;

	struct Parent
	{
		ClassTypePtr class_;
		u32 field_number= ~0u; // Allways 0 for base class.
	}
	ust::shared_ptr_nullable_mut</ClassType/> base_class;
	ust::vector</Parent/> parents; // Parents, include base class.

	struct VirtualTableEntry
	{
		ust::string8 name;
		FunctionVariable function_variable;
		bool is_pure;
		bool is_final;

		// Virtual table may consist of many nested structs, because virtual table of child contains virtual tables of parents.
		u32 index_in_table;
		u32 parent_virtual_table_index;
	}

	ust::vector</VirtualTableEntry/> virtual_table;
	LLVMTypeRef virtual_table_llvm_type= LLVMTypeRef::Null;
	LLVMValueRef virtual_table_llvm_variable= LLVMValueRef::Null; // May be null for interfaces and abstract classes.
	LLVMValueRef polymorph_type_id_table= LLVMValueRef::Null; // Exists in polymorph classes.

	// non-empty, if this is typeinfo class (root or some of list nodes)
	ust::optional</Type/> typeinfo_src_type_;

	// Contains only "protected" and "private" members. If ther is no entry for member - it has "public" visibility
	ust::unordered_map</ust::string8, Synt::ClassVisibility/> members_visibility;

	fn GetMemberVisibility( this, ust::string8& member_name ) : Synt::ClassVisibility;
	fn SetMemberVisibility( mut this, ust::string8& member_name, Synt::ClassVisibility visibility );
}

type ClassTypePtr= ust::shared_ptr_mut</ClassType/>;

class Type
{
public:
	fn constructor() = default;
	fn constructor( mut this, Type &imut other )= default;
	op=( mut this, Type &imut other )= default;

	fn conversion_constructor( FundamentalType mut fundamental_type );
	fn conversion_constructor( ArrayType mut array_type );
	fn conversion_constructor( TupleType mut tuple_type );
	fn conversion_constructor( RawPointerType mut raw_pointer_type );
	fn conversion_constructor( FunctionType mut function_type );
	fn conversion_constructor( FunctionPointerType mut function_pointer_type );
	fn conversion_constructor( ClassTypePtr mut class_type );
	fn conversion_constructor( EnumTypePtr mut enum_type );

	fn GetFundamentalType( imut this ) : ust::optional_ref_imut</FundamentalType />'this';
	fn GetArrayType( imut this ) : ust::optional_ref_imut</ArrayType />'this';
	fn GetTupleType( imut this ) : ust::optional_ref_imut</TupleType />'this';
	fn GetRawPointerType( imut this ) : ust::optional_ref_imut</RawPointerType />'this';
	fn GetFunctionType( imut this ) : ust::optional_ref_imut</FunctionType />'this';
	fn GetFunctionPointerType( imut this ) : ust::optional_ref_imut</FunctionPointerType />'this';
	fn GetClassType( imut this ) : ust::optional_ref_imut</ClassTypePtr />'this';
	fn GetEnumType( imut this ) : ust::optional_ref_imut</EnumTypePtr />'this';

	fn GetLLVMType( this ) : LLVMTypeRef;

	fn IsDefaultConstructible( this ) : bool;
	fn IsCopyConstructible( this ) : bool;
	fn IsCopyAssignable( this ) : bool;
	fn IsEqualityComparable( this ) : bool;
	fn CanBeConstexpr( this ) : bool;
	fn IsAbstract( this ) : bool;

	fn GetInnerReferenceKind( this ) : InnerReferenceKind;

	fn ReferenceIsConvertibleTo( this, Type& dst ) : bool;

	// Convert type name to human-readable format.
	fn ToString( this ) : ust::string8;

	op==( Type& l, Type& r ) : bool;

private:
	ust::variant</ tup[
		FundamentalType,
		ust::shared_ptr_final</ArrayType/>,
		ust::shared_ptr_final</TupleType/>,
		ust::shared_ptr_final</RawPointerType/>,
		ust::shared_ptr_final</FunctionType/>,
		ust::shared_ptr_final</FunctionPointerType/>,
		ClassTypePtr,
		EnumTypePtr
	] /> something_;
}

//
// Value
//

enum ValueType : u8
{
	Value,
	ReferenceMut,
	ReferenceImut,
}

struct Variable
{
	enum Location : u8
	{
		Pointer,
		LLVMRegister,
	}

	Type t;
	Location location= Location::Pointer;
	ValueType value_type= ValueType::ReferenceImut;
	LLVMValueRef llvm_value= LLVMValueRef::Null;
	LLVMValueRef constexpr_value= LLVMValueRef::Null; // Exists only for constant expressions.

	ReferencesGraph::NodeId node_id= ReferencesGraph::c_empty_node_id;
}

fn ConstantVariableToString( Type&  t, LLVMValueRef constant_value ) : ust::string8;

struct VariableTypeExtended
{
	Type t;
	ValueType value_type;
}

struct FunctionVariable
{
	FunctionType t;
	LLVMValueRef llvm_function= LLVMValueRef::Null;

	bool is_this_call= false;
	bool is_constructor= false;
	bool is_conversion_constructor= false;
	bool is_generated= false;
	bool is_deleted= false;
	bool no_mangle= false;
	u32 virtual_table_index= ~0u; // For virtual functions number in virtual functions table in class of first arg(this).

	enum ConstexprKind : u8
	{
		NonConstexpr,
		ConstexprIncomplete,  // Can be used in body of constexpr functions, but result of call can not be constexpr.
		ConstexprComplete,
		ConstexprAuto, // May be, or may be not constexpr. Becomes "NonConstexpr" or "ConstexprComplete" after function code building.
	}

	ConstexprKind constexpr_kind= ConstexprKind::NonConstexpr;

	ust::shared_ptr_final_nullable</ Synt::Function /> prototype_syntax_element;
	ust::shared_ptr_final_nullable</ Synt::Function /> body_syntax_element;

	ust::shared_ptr_final_nullable</ FunctionTemplate /> base_template;

	fn VirtuallyEquals( this, FunctionVariable& other ) : bool;
}

// Set of functions and function templates with same name in one scope.
struct FunctionsSet
{
	ust::vector</FunctionVariable/> functions;
	ust::vector</FunctionTemplatePtr/> function_templates;
	ust::vector</ParametrizedFunctionTemplate/> parametrized_function_templates;
}

struct ThisMethodsSet
{
	Variable this_;
	FunctionsSet functions_set;
}

struct ErrorValue{}

type Value= ust::variant</ tup[
	Variable,
	Type,
	FunctionsSet,
	ThisMethodsSet,
	ust::shared_ptr_imut</TypeTemplatesSet/>,
	ErrorValue
	] />;

fn GetValueKindName( Value& v ) : ust::array_view_imut</ char8 />;

//
// NamesScopeValue
//

struct NamesScopeVariable
{
	Type t;
	bool is_mutable = false;
	LLVMValueRef llvm_value= LLVMValueRef::Null;
	LLVMValueRef constexpr_value= LLVMValueRef::Null; // Exists only for constant expressions.

	ReferencesGraph::NodeId node_id= ReferencesGraph::c_empty_node_id;
}

struct NamesScopeFunctionsSet
{
	FunctionsSet functions_set;
	ust::shared_ptr_nullable_mut</ClassType/> class_; // Non-empty for function set in struct/class.

	// Is incomplete, if there are some syntax elements in containers.
	ust::vector</ ust::shared_ptr_final</ Synt::Function /> /> syntax_elements;
	ust::vector</ ust::shared_ptr_final</ Synt::Function /> /> out_of_line_syntax_elements;
	ust::vector</ ust::shared_ptr_final</ Synt::FunctionTemplate /> /> function_templates_syntax_elements;
}

struct ClassField
{
	Type t;
	bool is_reference;
	bool is_mutable;
	size_type index= ~0s; // for "getelementptr" instruction
	size_type original_index= ~0s; // Index of class field in class declaration
	ust::shared_ptr_final</ Synt::ClassField /> syntax_element;

	// Class, where this field is defined. May be not same class in case of inheritance.
	ClassTypePtr source_class;
}

type ClassFieldPtr = ust::shared_ptr_mut</ClassField/>;

struct Enum
{
	NamesScopePtr names_scope; // Contains nothing, needed only for mangling.

	FundamentalType underlaying_type;

	struct Element
	{
		LLVMValueRef llvm_value= LLVMValueRef::Null; // Pointer to global variable
		LLVMValueRef constexpr_value= LLVMValueRef::Null;
	}
	ust::unordered_map</ ust::string8, Element /> elements;

	ust::shared_ptr_final</ Synt::Enum /> syntax_element;
}

type EnumTypePtr= ust::shared_ptr_mut</Enum/>;

struct TypeAlias
{
	ust::optional</ Type /> t; // empty if incomplete

	ust::shared_ptr_final</ Synt::TypeAlias /> syntax_element;
}

//
// Templates
//

class TemplateBase polymorph
{
	struct Param
	{
		ust::string8 name;
		ust::optional</ TemplateSignatureParam /> t;
	}
	ust::vector</Param/> params;

	ust::vector</ TemplateSignatureParam /> signature_params;

	ust::weak_ptr_imut</NamesScope/> parent_names_scope; // Needed because template should see names scope of original file.

	fn constructor(
		ust::vector</Param/> mut in_params,
		ust::vector</ TemplateSignatureParam /> mut in_signature_params,
		ust::weak_ptr_imut</NamesScope/> mut in_parent_names_scope )
		(
			params(move(in_params)),
			parent_names_scope(move(in_parent_names_scope)),
			signature_params(move(in_signature_params))
		)
	{}
}

class TypeTemplate final : TemplateBase
{
	ust::shared_ptr_final</Synt::TypeTemplate/> syntax_element;

	size_type first_default_param;

	fn constructor(
		ust::vector</TemplateBase::Param/> mut in_params,
		ust::vector</ TemplateSignatureParam /> mut in_signature_params,
		ust::weak_ptr_imut</NamesScope/> mut in_parent_names_scope,
		ust::shared_ptr_final</Synt::TypeTemplate/> mut in_syntax_element,
		size_type in_first_default_param )
		(
			base( move(in_params), move(in_signature_params), move(in_parent_names_scope) ),
			syntax_element( move(in_syntax_element) ),
			first_default_param( in_first_default_param )
		)
	{}
}

type TypeTemplatePtr = ust::shared_ptr_final</TypeTemplate/>;

struct TypeTemplatesSet
{
	ust::vector</TypeTemplatePtr/> type_templates;

	// Is incomplete, if there are some syntax elements in containers.
	ust::vector</ ust::shared_ptr_final</Synt::TypeTemplate/> /> syntax_elements;
}

class FunctionTemplate final : TemplateBase
{
	ust::shared_ptr_final</Synt::FunctionTemplate/> syntax_element;
	ust::shared_ptr_nullable_mut</ClassType/> class_; // Non-empty for function set in struct/class.

	fn constructor(
		ust::vector</TemplateBase::Param/> mut in_params,
		ust::vector</ TemplateSignatureParam /> mut in_signature_params,
		ust::weak_ptr_imut</NamesScope/> mut in_parent_names_scope,
		ust::shared_ptr_final</Synt::FunctionTemplate/> mut in_syntax_element,
		ust::shared_ptr_nullable_mut</ClassType/> mut in_class )
		(
			base( move(in_params), move(in_signature_params), move(in_parent_names_scope) ),
			syntax_element( move(in_syntax_element) ),
			class_( move(in_class) )
		)
	{}
}

type FunctionTemplatePtr= ust::shared_ptr_final</FunctionTemplate/>;

struct ParametrizedFunctionTemplate
{
	TemplateArgsFinished known_args;
	FunctionTemplatePtr base_template;
	NamesScopePtr instantiation_point_names_scope;
}

struct TemplateArg
{
	size_type index;

	struct NotKnownYet{}
	ust::variant</ tup[ NotKnownYet, Type, NamesScopeVariable ] /> something;
}

type TemplateArgFinished= ust::variant</ tup[ Type, Variable ] />;
type TemplateArgsFinished= ust::vector</ TemplateArgFinished />;

class TemplateSignatureParam
{
public:
	struct TemplateParam
	{
		size_type index;
	}

	struct TypeParam
	{
		Type t;
	}

	struct VariableParam
	{
		Variable v;

		op==(VariableParam& l, VariableParam& r) : bool;
	}

	struct ArrayTypeParam
	{
		TemplateSignatureParam element_type;
		TemplateSignatureParam element_count;
	}

	struct TupleTypeParam
	{
		ust::vector</TemplateSignatureParam/> element_types;
	}

	struct RawPointerTypeParam
	{
		TemplateSignatureParam element_type;
	}

	struct FunctionTypeParam
	{
		TemplateSignatureParam return_type;
		ValueType return_value_type;

		bool is_unsafe;

		struct Param
		{
			TemplateSignatureParam t;
			ValueType value_type;
		}
		ust::vector</Param/> params;
	}

	struct SpecializedTemplateParam
	{
		ust::shared_ptr_imut</ TypeTemplatesSet /> type_templates_set;
		ust::vector</ TemplateSignatureParam /> params;
	}

	fn conversion_constructor( TemplateParam mut template_param );
	fn conversion_constructor( TypeParam mut type_param );
	fn conversion_constructor( VariableParam mut variable_param );
	fn conversion_constructor( ArrayTypeParam mut array_type_param );
	fn conversion_constructor( TupleTypeParam mut tuple_type_param );
	fn conversion_constructor( RawPointerTypeParam mut raw_pointer_type_param );
	fn conversion_constructor( FunctionTypeParam mut function_type_param );
	fn conversion_constructor( SpecializedTemplateParam mut specialized_template_param );

	fn GetTemplateParam(this) : ust::optional_ref_imut</ TemplateParam />'this';
	fn GetTypeParam(this) : ust::optional_ref_imut</ TypeParam />'this';
	fn GetVariableParam(this) : ust::optional_ref_imut</ VariableParam />'this';
	fn GetArrayTypeParam(this) : ust::optional_ref_imut</ ArrayTypeParam />'this';
	fn GetTupleTypeParam(this) : ust::optional_ref_imut</ TupleTypeParam />'this';
	fn GetRawPointerTypeParam(this) : ust::optional_ref_imut</ RawPointerTypeParam />'this';
	fn GetFunctionTypeParam(this) : ust::optional_ref_imut</ FunctionTypeParam />'this';
	fn GetSpecializedTemplateParam(this) : ust::optional_ref_imut</ SpecializedTemplateParam />'this';

	op==(TemplateSignatureParam& l, TemplateSignatureParam& r) : bool;

private:
	type Container= ust::variant</ tup[
		TemplateParam,
		TypeParam,
		VariableParam,
		ust::box</ ArrayTypeParam />,
		ust::box</ TupleTypeParam />,
		ust::box</ RawPointerTypeParam />,
		ust::box</ FunctionTypeParam />,
		ust::box</ SpecializedTemplateParam />
		] />;

	Container something_;
}

//
// Other global stuff
//

struct GlobalVariable
{
	ust::optional</NamesScopeVariable/> variable; // empty if incomplete

	ust::shared_ptr_final</ Synt::VariablesDeclaration /> syntax_element;
	size_type variable_index;
}

struct GlobalAutoVariable
{
	ust::optional</NamesScopeVariable/> variable; // empty if incomplete

	ust::shared_ptr_final</ Synt::AutoVariableDeclaration /> syntax_element;
}

// Empty vector if all static asserts are complete.
type GlobalStaticAssertsSet= ust::vector</ ust::shared_ptr_final</ Synt::StaticAssert /> />;

class NamesScopeValue
{
public:
	fn constructor( mut this, NamesScopeValue &imut other ) = default;
	op=( mut this, NamesScopeValue &imut other ) = default;

	// TODO - add method for deep copy

	// TODO - rework this class. It is ugly.

	template</ type T />
	fn enable_if( !IsSharedPtr</T/>::value ) conversion_constructor( T mut t )
		( something_( ust::make_shared_ptr(move(t))) )
	{}

	template</ type T />
	fn enable_if( IsSharedPtr</T/>::value ) conversion_constructor( T mut t )
		( something_(move(t)) )
	{}

	template</type T/>
	fn Get( imut this ) : ust::shared_ptr_nullable_mut</T/>
	{
		auto x= something_.get</ ust::shared_ptr_mut</T/> />();
		if( x.empty() )
		{
			return ust::shared_ptr_nullable_mut</T/>();
		}
		return ust::shared_ptr_nullable_mut</T/>(x.try_deref());
	}

	// Compare shared pointers
	op==( NamesScopeValue&l, NamesScopeValue& r ) : bool;

private:
	template</type T/> struct IsSharedPtr{ auto value= false; }
	template</type T, bool is_nullable, bool is_mutable/> struct IsSharedPtr</ ust::shared_ptr_base</T, is_nullable, is_mutable/> /> { auto value= true; }

public:
	ust::variant</ tup[
		NamesScopeMutPtr,
		ust::shared_ptr_mut</Type/>,
		ust::shared_ptr_mut</NamesScopeVariable/>,
		ust::shared_ptr_mut</NamesScopeFunctionsSet/>,
		ClassTypePtr,
		ClassFieldPtr,
		EnumTypePtr,
		ust::shared_ptr_mut</TypeAlias/>,
		ust::shared_ptr_mut</TypeTemplatesSet/>,
		ust::shared_ptr_mut</TemplateArg/>,
		ust::shared_ptr_mut</GlobalVariable/>,
		ust::shared_ptr_mut</GlobalAutoVariable/>,
		ust::shared_ptr_mut</GlobalStaticAssertsSet/>
	] /> something_;
}

//
// NamesScope
//

type ErrorsContainerPtr= ust::shared_ptr_nullable_mut</ErrorsContainer/>;

type NamesScopeMutPtr = ust::shared_ptr_mut </NamesScope/>;
type NamesScopePtr= ust::shared_ptr_imut</NamesScope/>;

class NamesScope
{
public:
	fn constructor( ust::string8 mut name, ust::shared_ptr_nullable_imut</NamesScope/>& parent );

	fn GetThisScopeValue( this, ust::string8& name ) : ust::optional_ref_imut</ NamesScopeValue />'this';

	fn AddName( mut this, ust::string8 mut name, NamesScopeValue mut value ) : ust::optional_ref_mut</ NamesScopeValue />'this';

	fn GetParent( this ) : ust::shared_ptr_nullable_imut</NamesScope/>;

	fn SetErrors( mut this, ErrorsContainerPtr errors_container );
	fn GetErrors( this ) : ErrorsContainerPtr;

	// For iteration over NamesScope values
	fn range( this ) : ust::unordered_map</ust::string8, NamesScopeValue/>::unordered_map_range</false/>'this';

	fn GetThisNamespaceName( this ) : ust::string8&;

	auto& c_template_args_namespace_name= "_tp_ns";
	fn IsInsideTemplate( this ) : bool;

	// Get full name (with enclosing namespaces) un human-readable format.
	fn ToString( this ) : ust::string8;

	// Sometimes it's needed to identify class namespace. So, store pointer to class directly inside it's names_scope.
	fn SetClass( mut this, ust::shared_ptr_nullable_mut</ClassType/> in_class_ );
	fn GetClass( this ) : ust::shared_ptr_nullable_mut</ClassType/>;

	fn AddAccessRightsFor( mut this, ClassTypePtr& class_type, Synt::ClassVisibility visibility );
	fn GetAccessFor( this, ClassTypePtr& class_type ) : Synt::ClassVisibility;
	fn CopyAccessRightsFrom( mut this, NamesScope& src );

private:
	ust::string8 name_;
	ust::weak_ptr_imut</NamesScope/> parent_;
	ust::unordered_map</ ust::string8, NamesScopeValue /> names_map_;
	ust::shared_ptr_nullable_mut</ClassType/> class_;
	ust::unordered_map</ClassTypePtr, Synt::ClassVisibility/> access_rights_;
	ErrorsContainerPtr errors_container_;
}

} // namespace U1
