import "/assert.u"
import "error_reporting.uh"
import "references_graph.uh"

namespace U1
{

fn ReferencesGraph::AddNode( mut this, VariablePtr& node )
{
	debug_assert( nodes_.find( node ).empty(), "Node is already registered!" );

	var NodeState mut node_state{ .moved= false };
	nodes_.insert( node, move(node_state) );

	with( &node_val : node.lock_imut().deref() )
	{
		if( node_val.parent.lock().empty() )
		{
			foreach( &inner_reference_node : node_val.inner_reference_nodes )
			{
				AddNode( inner_reference_node );
			}
		}
	}
}

fn ReferencesGraph::AddNodeIfNotExists( mut this, VariablePtr& node )
{
	var NodeState mut node_state{ .moved= false };
	nodes_.insert( node, move(node_state) );

	foreach( &inner_reference_node : node.lock_imut().deref().inner_reference_nodes )
	{
		AddNodeIfNotExists( inner_reference_node );
	}
}

fn ReferencesGraph::RemoveNode( mut this, VariablePtr& node )
{
	if( nodes_.find( node ).empty() )
	{
		return;
	}

	with( &node_val : node.lock_imut().deref() )
	{
		if( node_val.parent.lock().empty() )
		{
			foreach( &inner_reference_node : node_val.inner_reference_nodes )
			{
				RemoveNode( inner_reference_node );
			}
		}

		foreach( &child : node_val.children )
		{
			if( !child.empty() )
			{
				RemoveNode( child.try_to_non_nullable() );
			}
		}
	}

	RemoveNodeLinks( node );

	// Erase node.
	nodes_.erase( node );
}

fn ReferencesGraph::AddLink( mut this, VariablePtr& from, VariablePtr& to )
{
	debug_assert( !nodes_.find( from ).empty(), "Node is not registered!" );
	debug_assert( !nodes_.find( to ).empty(), "Node is not registered!" );

	if( from == to )
	{
		return;
	}

	var Link link{ .src= from, .dst= to };

	foreach( &prev_link : links_ )
	{
		if( link == prev_link )
		{
			return;
		}
	}
	links_.push_back( link );
}

fn ReferencesGraph::TryAddLink( mut this, VariablePtr& from, VariablePtr& to, NamesScopePtr& names_scope, SrcLoc& src_loc )
{
	if( ( to.lock_imut().deref().value_type == ValueType::ReferenceMut && HaveOutgoingLinks( from ) ) ||
		HaveOutgoingMutableNodes( from ) )
	{
		REPORT_ERROR( ReferenceProtectionError, names_scope, src_loc, from.lock_imut().deref().name )
		return;
	}

	AddLink( from, to );
}

fn ReferencesGraph::TryAddInnerLinks( mut this, VariablePtr& from, VariablePtr& to, NamesScopePtr& names_scope, SrcLoc& src_loc )
{
	with( &to_val : to.lock_imut().deref() )
	{
		auto reference_tag_count= to_val.t.ReferencesTagsCount();
		if( reference_tag_count == 0u )
		{
			return;
		}

		with( &from_val : from.lock_imut().deref() )
		{
			for( auto mut i= 0u; i < reference_tag_count; ++i )
			{
				TryAddLink( from_val.inner_reference_nodes[i], to_val.inner_reference_nodes[i], names_scope, src_loc );
			}
		}
	}
}

fn ReferencesGraph::TryAddInnerLinksForTupleElement( mut this, VariablePtr& from, VariablePtr& to, size_type element_index, NamesScopePtr& names_scope, SrcLoc& src_loc )
{
	with( &to_val : to.lock_imut().deref() )
	{
		auto element_type_reference_tag_count= to_val.t.ReferencesTagsCount();
		if( element_type_reference_tag_count == 0u )
		{
			return;
		}

		with( &from_val : from.lock_imut().deref() )
		{
			auto& tuple_type= from_val.t.GetTupleType().try_deref();

			var size_type mut offset= 0s;
			for( auto mut i= 0s; i < element_index; ++i )
			{
				offset+= size_type( tuple_type.element_types[i].ReferencesTagsCount() );
			}

			for( auto mut i= 0s; i < size_type(element_type_reference_tag_count); ++i )
			{
				TryAddLink( from_val.inner_reference_nodes[i + offset], to_val.inner_reference_nodes[i], names_scope, src_loc );
			}
		}
	}
}

fn ReferencesGraph::MoveNode( mut this, VariablePtr& node )
{
	debug_assert( !nodes_.find( node ).empty(), "Node is not registered!" );

	with( &mut node_state : nodes_[node] )
	{
		debug_assert( !node_state.moved, "Node is already moved!" );
		node_state.moved= true;
	}

	with( &node_val : node.lock_imut().deref() )
	{
		foreach( &inner_reference_node : node_val.inner_reference_nodes )
		{
			RemoveNodeLinks( inner_reference_node );
		}

		// Move child nodes first in order to replace links from children with links from parent.
		foreach( &child : node_val.children )
		{
			if( !child.empty() )
			{
				var VariablePtr child_non_null= child.try_to_non_nullable();
				if( !nodes_.find(child_non_null).empty() ) // Children nodes are lazily-added.
				{
					MoveNode( child_non_null );
				}
			}
		}
	}

	RemoveNodeLinks( node );
}

fn ReferencesGraph::NodeIsMoved( this, VariablePtr& node ) : bool
{
	debug_assert( !nodes_.find( node ).empty(), "Node is not registered!" );

	return nodes_[node].moved;
}

fn ReferencesGraph::HaveOutgoingLinks( this, VariablePtr& from ) : bool
{
	debug_assert( !nodes_.find( from ).empty(), "Node is not registered!" );

	// Check if any parent have links and any child (including children of children) have links.
	// Doesn't count sibling nodes and other indirect relatives.

	if( HaveOutgoingLinksIncludingChildrenLinks_r( from ) )
	{
		return true;
	}

	var VariableNullablePtr mut parent= from.lock_imut().deref().parent.lock();
	while( !parent.empty() )
	{
		var VariablePtr parent_non_null= parent.try_to_non_nullable();
		if( HaveDirectOutgoingLinks( parent_non_null ) )
		{
			return true;
		}
		parent= parent_non_null.lock_imut().deref().parent.lock();
	}

	return false;
}

fn ReferencesGraph::HaveOutgoingMutableNodes( this, VariablePtr& from ) : bool
{
	debug_assert( !nodes_.find( from ).empty(), "Node is not registered!" );

	// Check if any parent have mutable links and any child (including children of children) have mutable links.
	// Doesn't count sibling nodes and other indirect relatives.

	if( HaveOutgoingMutableNodesIncludingChildrenNodes_r( from ) )
	{
		return true;
	}

	var VariableNullablePtr mut parent= from.lock_imut().deref().parent.lock();
	while( !parent.empty() )
	{
		var VariablePtr parent_non_null= parent.try_to_non_nullable();
		if( HaveDirectOutgoingMutableNodes( parent_non_null ) )
		{
			return true;
		}
		parent= parent_non_null.lock_imut().deref().parent.lock();
	}

	return false;
}

fn ReferencesGraph::EnsureHaveNoOutgoingLinks( this, VariablePtr& from, NamesScopePtr& names_scope, SrcLoc& src_loc )
{
	if( HaveOutgoingLinks( from ) )
	{
		REPORT_ERROR( ReferenceProtectionError, names_scope, src_loc, from.lock_imut().deref().name )
	}
}

fn ReferencesGraph::EnsureHaveNoOutgoingMutableNodes( this, VariablePtr& from, NamesScopePtr& names_scope, SrcLoc& src_loc )
{
	if( HaveOutgoingMutableNodes( from ) )
	{
		REPORT_ERROR( ReferenceProtectionError, names_scope, src_loc, from.lock_imut().deref().name )
	}
}

fn ReferencesGraph::GetAllAccessibleVariableNodes( this, VariablePtr& node ) : NodesSet
{
	debug_assert( !nodes_.find( node ).empty(), "Node is not registered!" );

	var NodesSet mut nodes_set;
	GetAllAccessibleVariableNodes_r( node, nodes_set );
	return move(nodes_set);
}

fn ReferencesGraph::GetNodeInputLinks( this, VariablePtr& node ) : NodesSet
{
	debug_assert( !nodes_.find( node ).empty(), "Node is not registered!" );

	var NodesSet mut result;

	var VariablePtr mut current_node= node;
	loop
	{
		foreach( &link : links_ )
		{
			if( link.dst == current_node )
			{
				result.insert( link.src );
			}
		}

		var VariableNullablePtr parent= current_node.lock_imut().deref().parent.lock();
		if( parent.empty() )
		{
			break;
		}
		current_node= parent.try_to_non_nullable();
	}

	return result;
}

fn ReferencesGraph::TryAddLinkToAllAccessibleVariableNodesInnerReferences( mut this, VariablePtr& from, VariablePtr& to, NamesScopePtr& names_scope, SrcLoc& src_loc )
{
	TryAddLinkToAllAccessibleVariableNodesInnerReferences_r( from, to, names_scope, src_loc );
}

fn ReferencesGraph::MergeReferencesGraphsAfterConditionalBranches( ust::array_view_imut</ReferencesGraph/> branches,  ErrorsContainer &mut errors, SrcLoc& src_loc ) : ReferencesGraph
{
	var ReferencesGraph mut result;

	foreach( &branch_state : branches )
	{
		foreach( &node_pair : branch_state.nodes_ )
		{
			var VariablePtr& node= node_pair.key();
			var NodeState& src_node= node_pair.value();

			if( result.nodes_.find( node ).empty() )
			{
				result.nodes_.insert( node, src_node );
			}

			var NodeState& dst_node= result.nodes_[ node ];
			if( src_node.moved != dst_node.moved )
			{
				errors.push_back( ReportError( CodeBuilderErrorCode::ConditionalMove, src_loc, node.lock_imut().deref().name ) );
			}
		}

		foreach( &src_link : branch_state.links_ )
		{
			var bool mut found= false;
			foreach( &dst_link : result.links_ )
			{
				if( src_link == dst_link )
				{
					found= true;
					break;
				}
			}

			if( !found )
			{
				result.links_.push_back( src_link );
			}
		}
	}

	// See the comment in same code in Compiler0.

	return move(result);
}

fn ReferencesGraph::CheckReferencesGraphAfterLoop( ReferencesGraph& state_before, ReferencesGraph& state_after, ErrorsContainer &mut errors, SrcLoc& src_loc )
{
	foreach( &node_before_pair : state_before.nodes_ )
	{
		var VariablePtr& node_ptr= node_before_pair.key();

		var NodeState& node_before= node_before_pair.value();
		var NodeState& node_after= state_after.nodes_[node_ptr];

		with( &node : node_ptr.lock_imut().deref() )
		{
			if( !node_before.moved && node_after.moved )
			{
				errors.push_back( ReportError( CodeBuilderErrorCode::OuterVariableMoveInsideLoop, src_loc, node.name ) );
			}

			if( node.value_type == ValueType::Value )
			{
				// If this is a variable node with inner reference check if no input links was added in loop body.
				// Reference nodes also may have inner reference nodes, but adding of input links (pollution) for them is not possible, so, ignore them.
				foreach( &inner_reference_node : node.inner_reference_nodes )
				{
					var NodesSet nodes_before= state_before.GetNodeInputLinks( inner_reference_node);
					var NodesSet mut nodes_after= state_after.GetNodeInputLinks( inner_reference_node  );
					foreach( & prev_link_node : nodes_before )
					{
						nodes_after.drop(prev_link_node);
					}

					foreach( & newly_linked_node : nodes_after )
					{
						errors.push_back( ReportError( CodeBuilderErrorCode::ReferencePollutionOfOuterLoopVariable, src_loc, node.name, newly_linked_node.lock_imut().deref().name ) );
					}
				}
			}
		}
	}
}

fn ReferencesGraph::GetAllAccessibleVariableNodes_r( this, VariablePtr& node, NodesSet &mut out_nodes )
{
	if( node.lock_imut().deref().value_type == ValueType::Value )
	{
		out_nodes.insert( node );
	}

	foreach( &link : links_ )
	{
		if( link.dst == node )
		{
			GetAllAccessibleVariableNodes_r( link.src, out_nodes );
		}
	}

	var VariableNullablePtr parent= node.lock_imut().deref().parent.lock();
	if( !parent.empty() )
	{
		GetAllAccessibleVariableNodes_r( parent.try_to_non_nullable(), out_nodes );
	}
	// Children nodes can't have input links. So, ignore them.
}

fn ReferencesGraph::HaveDirectOutgoingLinks( this, VariablePtr& from ) : bool
{
	foreach( &link : links_ )
	{
		if( link.src == from )
		{
			return true;
		}
	}

	return false;
}

fn ReferencesGraph::HaveOutgoingLinksIncludingChildrenLinks_r( this, VariablePtr& from ) : bool
{
	if( HaveDirectOutgoingLinks( from ) )
	{
		return true;
	}

	foreach( &child : from.lock_imut().deref().children )
	{
		if( !child.empty() )
		{
			var VariablePtr child_non_null= child.try_to_non_nullable();
			if( !nodes_.find( child_non_null ).empty() && // Children nodes are lazily-added.
				HaveOutgoingLinksIncludingChildrenLinks_r( child_non_null ) )
			{
				return true;
			}
		}
	}

	return false;
}

fn ReferencesGraph::HaveDirectOutgoingMutableNodes( this, VariablePtr& from ) : bool
{
	foreach( &link : links_ )
	{
		if( link.src == from && link.dst.lock_imut().deref().value_type == ValueType::ReferenceMut )
		{
			return true;
		}
	}

	return false;
}

fn ReferencesGraph::HaveOutgoingMutableNodesIncludingChildrenNodes_r( this, VariablePtr& from ) : bool
{
	if( HaveDirectOutgoingMutableNodes( from ) )
	{
		return true;
	}

	foreach( &child : from.lock_imut().deref().children )
	{
		if( !child.empty() )
		{
			var VariablePtr child_non_null= child.try_to_non_nullable();
			if( !nodes_.find( child_non_null ).empty() && // Children nodes are lazily-added.
				HaveOutgoingMutableNodesIncludingChildrenNodes_r( child_non_null ) )
			{
				return true;
			}
		}
	}

	return false;
}

fn ReferencesGraph::TryAddLinkToAllAccessibleVariableNodesInnerReferences_r( mut this, VariablePtr& from, VariablePtr& to, NamesScopePtr& names_scope, SrcLoc& src_loc )
{
	if( to.lock_imut().deref().is_variable_inner_reference_node )
	{
		TryAddLink( from, to, names_scope, src_loc );
	}
	else
	{
		// Use index-based for since "links_" container may be modified in recursive call.
		// It is fine to use index-based for since new links may be only added, but not removed.
		for( auto mut i = 0s; i < links_.size(); ++i )
		{
			if( links_[i].dst == to )
			{
				auto src= links_[i].src;
				TryAddLinkToAllAccessibleVariableNodesInnerReferences_r( from, src, names_scope, src_loc );
			}
		}
	}
}

fn ReferencesGraph::RemoveNodeLinks( mut this, VariablePtr& node )
{
	// Collect in/out nodes.
	var NodesSet mut in_nodes, mut out_nodes;
	foreach( &link : links_ )
	{
		if( link.src == link.dst ){ continue; } // Self-loop link.

		if( link.src == node ) { out_nodes.insert( link.dst ); }
		if( link.dst == node ) {  in_nodes.insert( link.src ); }
	}

	// Remove links.
	for( auto mut i= 0s; i < links_.size(); )
	{
		if( links_[i].src == node || links_[i].dst == node )
		{
			auto back= links_.size() - 1s;
			links_.swap( i, back );
			links_.pop_back();
		}
		else
		{
			++i;
		}
	}

	// Create new links.
	foreach( &from : in_nodes )
	{
		foreach( &to : out_nodes )
		{
			AddLink( from, to );
		}
	}

	// If this is a child node, replace links from it with links from parent.
	var VariableNullablePtr parent= node.lock_imut().deref().parent.lock();
	if( !parent.empty() )
	{
		debug_assert( in_nodes.empty(), "Non-empty input nodes list for node with parent!" );

		var VariablePtr parent_non_null= parent.try_to_non_nullable();
		foreach( &to : out_nodes )
		{
			AddLink( parent_non_null, to );
		}
	}
}

} // namespace U1
