import "../lex_synt_lib/keywords.uh"
import "error_reporting.uh"
import "mangling.uh"
import "code_builder.uh"

namespace U
{

fn CodeBuilder::TryGenerateDefaultConstructor( mut this, ClassTypePtr& class_type )
{
	auto class_members= class_type.lock_imut().get_ref().members;

	// Search for explicit default constructor.
	auto mut have_explicit_noncopy_constructors= false;

	// Constructors value should always exists and should always be NamesScopeFunctionsSet.
	auto constructors_ptr= class_members.lock_imut().get_ref().GetThisScopeValue( KeywordToString( Keyword::constructor_ ) ).get_ref().Get</NamesScopeFunctionsSet/>();
	auto mut constructors_lock= constructors_ptr.lock_mut();
	auto &mut constructors= constructors_lock.get_ref().functions_set;

	// Search for copy constructor.
	auto mut constructor_index= ~0s;
	for( auto mut i= 0s; i < constructors.functions.size(); ++i )
	{
		auto& constructor_= constructors.functions[i];
		if( IsDefaultConstructor( constructor_, class_type ) )
		{
			if( constructor_.is_generated )
			{
				constructor_index= i;
				break;
			}
			else
			{
				auto mut class_lock= class_type.lock_mut();
				class_lock.get_ref().is_default_constructible= !constructor_.is_deleted;
				return;
			}
		}
		else if( IsCopyConstructor( constructor_, class_type ) ) {}
		else
		{
			// Generation of default constructor disabled because class have explicit noncopy constructors.
			have_explicit_noncopy_constructors= true;
		}
	}

	if( have_explicit_noncopy_constructors && constructor_index == ~0s )
	{
		return;
	}

	// Check if all fields is default-constructible.
	auto mut all_fields_is_default_constructible= true;
	foreach( &member : class_members.lock_imut().get_ref().GetInternalContainer() )
	{
		auto field_ptr= member.value().Get</ClassField/>();
		if( field_ptr.empty() )
		{
			continue;
		}

		auto field_lock= field_ptr.lock_imut();
		auto& field= field_lock.get_ref();
		if( !field.syntax_element.get_ref().initializer.get</Synt::EmptyVariant/>().empty() &&
			( field.is_reference || !field.t.IsDefaultConstructible() ) )
		{
			all_fields_is_default_constructible= false;
			break;
		}
	}

	auto base_class= class_type.lock_imut().get_ref().base_class;
	if( !base_class.empty() && !base_class.lock_imut().get_ref().is_default_constructible )
	{
		all_fields_is_default_constructible= false;
	}

	if( !all_fields_is_default_constructible )
	{
		if( constructor_index != ~0s )
		{
			REPORT_ERROR( MethodBodyGenerationFailed, class_members, constructors.functions[constructor_index].prototype_syntax_element.get_ref().file_pos )
		}
		return;
	}

	// All ok - set default constructible flag.
	{
		auto mut class_lock= class_type.lock_mut();
		class_lock.get_ref().is_default_constructible= true;
	}

	if( constructor_index == ~0s )
	{
		// Prepare function type.
		var FunctionType mut function_type
		{
			.return_type( void_type_for_ret_ ),
			.return_value_is_mutable= false,
			.return_value_is_reference= false,
		};
		{
			var FunctionType::Param mut this_param
			{
				.t( Type( class_type ) ),
				.is_reference= true,
				.is_mutable= true,
			};
			function_type.params.push_back( move(this_param) );
		}

		unsafe
		{
			function_type.llvm_type=
				LLVMFunctionType(
					fundamental_llvm_types_.void_for_ret_,
					LLVMPointerType( class_type.lock_imut().get_ref().llvm_type, 0u ),
					1u,
					LLVMBool::False );
		}

		// Prepare function variable.
		var FunctionVariable mut function_variable
		{
			.is_this_call= true,
			.is_generated= true,
			.t= function_type,
			.constexpr_kind= select( class_type.lock_imut().get_ref().can_be_constexpr ? FunctionVariable::ConstexprKind::ConstexprComplete : FunctionVariable::ConstexprKind::NonConstexpr ),
		};

		unsafe
		{
			function_variable.llvm_function=
				LLVMAddFunction(
					module_,
					MangleFunction(
						class_members.lock_imut().get_ref(),
						KeywordToString( Keyword::constructor_ ),
						function_variable.t ).front(),
					function_variable.t.llvm_type );
		}

		constructor_index= constructors.functions.size();
		constructors.functions.push_back( move(function_variable) );
	}
	var FunctionVariable &mut function_variable= constructors.functions[constructor_index];

	// Build code itself.

	var FunctionContext mut function_context(
		llvm_context_,
		function_variable.llvm_function,
		function_variable.t.return_type,
		function_variable.t.return_value_is_reference,
		function_variable.t.return_value_is_mutable );

	auto mut this_llvm_value= LLVMValueRef::Null;
	unsafe{  this_llvm_value= LLVMGetParam( function_variable.llvm_function, 0u );  }

	if( !base_class.empty() )
	{
		var NamesScopeVariable base_variable
		{
			.t= ust::to_non_nullable(base_class),
			.is_mutable= true,
			.llvm_value= CreateBaseClassFieldGEP( this_llvm_value, function_context ),
		};

		BuildEmptyInitializer( class_members, function_context, base_variable, KeywordToString( Keyword::base_ ), FilePos( /* TODO - set correct file_pos */ ) );
	}

	foreach( &member : class_members.lock_imut().get_ref().GetInternalContainer() )
	{
		auto field_ptr= member.value().Get</ClassField/>();
		if( field_ptr.empty() )
		{
			continue;
		}

		auto field_lock= field_ptr.lock_imut();
		var ClassField & class_field= field_lock.get_ref();

		if( class_field.index == ~0s ){ continue; } // May be in case of error

		var NamesScopeVariable field_variable
		{
			.t= class_field.t,
			.is_mutable= true,
			.llvm_value= CreateFieldGEP( this_llvm_value, class_field, function_context )
		};

		auto& initializer= class_field.syntax_element.get_ref().initializer;
		if( !initializer.get</Synt::EmptyVariant/>().empty() )
		{
			BuildEmptyInitializer( class_members, function_context, field_variable, member.key(), FilePos( /* TODO - set correct file_pos */ ) );
		}
		else
		{
			BuildInitializer( class_members, function_context, field_variable, initializer );
		}
	}

	SetupVirtualTablePointers( this_llvm_value, class_type, function_context );

	// Finish function - add remaining instructions.
	unsafe
	{
		LLVMBuildBr( function_context.alloca_ir_builder, function_context.function_basic_block );
		LLVMBuildRetVoid( function_context.llvm_ir_builder );
	}
}

fn CodeBuilder::TryGenerateCopyConstructor( mut this, ClassTypePtr& class_type )
{
	auto class_members= class_type.lock_imut().get_ref().members;

	// Constructors value should always exists and should always be NamesScopeFunctionsSet.
	auto constructors_ptr= class_members.lock_imut().get_ref().GetThisScopeValue( KeywordToString( Keyword::constructor_ ) ).get_ref().Get</NamesScopeFunctionsSet/>();
	auto mut constructors_lock= constructors_ptr.lock_mut();
	auto &mut constructors= constructors_lock.get_ref().functions_set;

	// Search for copy constructor.
	auto mut constructor_index= ~0s;
	for( auto mut i= 0s; i < constructors.functions.size(); ++i )
	{
		auto& constructor_= constructors.functions[i];
		if( IsCopyConstructor( constructor_, class_type ) )
		{
			if( constructor_.is_generated )
			{
				constructor_index= i;
				break;
			}
			else
			{
				auto mut class_lock= class_type.lock_mut();
				class_lock.get_ref().is_copy_constructible= !constructor_.is_deleted;
				return;
			}
		}
	}

	// Check if all fields is copy-constructible.
	auto mut all_fields_is_copy_constructible= true;
	foreach( &member : class_members.lock_imut().get_ref().GetInternalContainer() )
	{
		auto field_ptr= member.value().Get</ClassField/>();
		if( field_ptr.empty() )
		{
			continue;
		}

		auto field_lock= field_ptr.lock_imut();
		auto& field= field_lock.get_ref();
		if( !field.is_reference && !field.t.IsCopyConstructible() )
		{
			all_fields_is_copy_constructible= false;
			break;
		}
	}

	auto base_class= class_type.lock_imut().get_ref().base_class;
	if( !base_class.empty() && !base_class.lock_imut().get_ref().is_copy_constructible )
	{
		all_fields_is_copy_constructible= false;
	}

	if( !all_fields_is_copy_constructible )
	{
		if( constructor_index != ~0s )
		{
			REPORT_ERROR( MethodBodyGenerationFailed, class_members, constructors.functions[constructor_index].prototype_syntax_element.get_ref().file_pos )
		}
		return;
	}

	// All ok - set copy constructible flag.
	{
		auto mut class_lock= class_type.lock_mut();
		auto &mut class_= class_lock.get_ref();

		if( class_.kind != ClassType::Kind::Struct && constructor_index == ~0s )
		{
			// By-default do not generate copy constructors for classes, generate them only for structs.
			class_.is_copy_constructible= false;
			return;
		}

		class_.is_copy_constructible= true;
	}

	if( constructor_index == ~0s )
	{
		// Prepare function type.
		var FunctionType mut function_type
		{
			.return_type( void_type_for_ret_ ),
			.return_value_is_mutable= false,
			.return_value_is_reference= false,
		};
		{
			var FunctionType::Param mut dst_param
			{
				.t( Type( class_type ) ),
				.is_reference= true,
				.is_mutable= true,
			};
			var FunctionType::Param mut src_param
			{
				.t( Type( class_type ) ),
				.is_reference= true,
				.is_mutable= false,
			};
			function_type.params.push_back( move(dst_param) );
			function_type.params.push_back( move(src_param) );
		}

		unsafe
		{
			var[ LLVMTypeRef, 2 ] args_llvm_types
			[
				LLVMPointerType( class_type.lock_imut().get_ref().llvm_type, 0u ),
				LLVMPointerType( class_type.lock_imut().get_ref().llvm_type, 0u ),
			];

			function_type.llvm_type=
				LLVMFunctionType(
					fundamental_llvm_types_.void_for_ret_,
					args_llvm_types[0],
					2u,
					LLVMBool::False );
		}

		// Prepare function variable.
		var FunctionVariable mut function_variable
		{
			.is_this_call= true,
			.is_generated= true,
			.t= function_type,
			.constexpr_kind= select( class_type.lock_imut().get_ref().can_be_constexpr ? FunctionVariable::ConstexprKind::ConstexprComplete : FunctionVariable::ConstexprKind::NonConstexpr ),
		};

		unsafe
		{
			function_variable.llvm_function=
				LLVMAddFunction(
					module_,
					MangleFunction(
						class_members.lock_imut().get_ref(),
						KeywordToString( Keyword::constructor_ ),
						function_variable.t ).front(),
					function_variable.t.llvm_type );
		}

		constructor_index= constructors.functions.size();
		constructors.functions.push_back( move(function_variable) );
	}
	var FunctionVariable &mut function_variable= constructors.functions[ constructor_index ];

	// Build code itself.

	var FunctionContext mut function_context(
		llvm_context_,
		function_variable.llvm_function,
		function_variable.t.return_type,
		function_variable.t.return_value_is_reference,
		function_variable.t.return_value_is_mutable );

	var LLVMValueRef mut dst_llvm_value= zero_init, mut src_llvm_value= zero_init;
	unsafe
	{
		dst_llvm_value= LLVMGetParam( function_variable.llvm_function, 0u );
		src_llvm_value= LLVMGetParam( function_variable.llvm_function, 1u );
	}

	auto file_pos= class_type.lock_imut().get_ref().syntax_element.get_ref().file_pos;

	if( !base_class.empty() )
	{
		auto dst_member_value= CreateBaseClassFieldGEP( dst_llvm_value, function_context );
		auto src_member_value= CreateBaseClassFieldGEP( src_llvm_value, function_context );

		BuildCopyConstructorPart( class_members, function_context, dst_member_value, src_member_value, ust::to_non_nullable(base_class), file_pos );
	}

	foreach( &member : class_members.lock_imut().get_ref().GetInternalContainer() )
	{
		auto field_ptr= member.value().Get</ClassField/>();
		if( field_ptr.empty() )
		{
			continue;
		}
		auto field_lock= field_ptr.lock_imut();
		var ClassField & class_field= field_lock.get_ref();

		if( class_field.index == ~0s ){ continue; } // May be in case of error

		auto dst_member_value= CreateFieldGEP( dst_llvm_value, class_field, function_context );
		auto src_member_value= CreateFieldGEP( src_llvm_value, class_field, function_context );

		if( class_field.is_reference )
		{
			unsafe
			{
				LLVMBuildStore(
					function_context.llvm_ir_builder,
					LLVMBuildLoad( function_context.llvm_ir_builder, src_member_value, "\0"[0] ),
					dst_member_value );
			}
		}
		else
		{
			BuildCopyConstructorPart( class_members, function_context, dst_member_value, src_member_value, class_field.t, file_pos );
		}
	}

	SetupVirtualTablePointers( dst_llvm_value, class_type, function_context );

	// Finish function - add remaining instructions
	unsafe
	{
		LLVMBuildBr( function_context.alloca_ir_builder, function_context.function_basic_block );
		LLVMBuildRetVoid( function_context.llvm_ir_builder );
	}
}

fn CodeBuilder::TryGenerateCopyAssignmentOperator( mut this, ClassTypePtr& class_type )
{
	auto class_members_ptr= class_type.lock_imut().get_ref().members;
	auto class_members_lock= class_members_ptr.lock_imut();
	auto& class_members= class_members_lock.get_ref();

	// Assignment operators value should always exists and should always be NamesScopeFunctionsSet.
	auto operators_ptr= class_members.GetThisScopeValue( OverloadedOperatorToString( OverloadedOperator::Assign ) ).get_ref().Get</NamesScopeFunctionsSet/>();
	auto mut operators_lock= operators_ptr.lock_mut();
	auto &mut operators= operators_lock.get_ref().functions_set;

	// Search for copy assignment operator.
	auto mut operator_index= ~0s;
	for( auto mut i= 0s; i < operators.functions.size(); ++i )
	{
		auto& operator= operators.functions[i];
		if( IsCopyAssignmentOperator( operator, class_type ) )
		{
			if( operator.is_generated )
			{
				operator_index= i;
				break;
			}
			else
			{
				auto mut class_lock= class_type.lock_mut();
				class_lock.get_ref().is_copy_assignable= !operator.is_deleted;
				return;
			}
		}
	}

	// Check if all fields is copy-assignable.
	auto mut all_fields_is_copy_assignable= true;
	foreach( &member : class_members.GetInternalContainer() )
	{
		auto field_ptr= member.value().Get</ClassField/>();
		if( field_ptr.empty() )
		{
			continue;
		}

		auto field_lock= field_ptr.lock_imut();
		auto& field= field_lock.get_ref();
		if( field.is_reference || !field.is_mutable || !field.t.IsCopyAssignable() )
		{
			all_fields_is_copy_assignable= false;
			break;
		}
	}

	auto base_class= class_type.lock_imut().get_ref().base_class;
	if( !base_class.empty() && !base_class.lock_imut().get_ref().is_copy_assignable )
	{
		all_fields_is_copy_assignable= false;
	}

	if( !all_fields_is_copy_assignable )
	{
		if( operator_index != ~0s )
		{
			REPORT_ERROR( MethodBodyGenerationFailed, class_members_ptr, operators.functions[operator_index].prototype_syntax_element.get_ref().file_pos )
		}
		return;
	}

	// All ok - set copy constructible flag.
	{
		auto mut class_lock= class_type.lock_mut();
		auto &mut class_= class_lock.get_ref();

		if( class_.kind != ClassType::Kind::Struct && operator_index == ~0s )
		{
			// By-default do not generate copy assignment operators for classes, generate them only for structs.
			class_.is_copy_assignable= false;
			return;
		}

		class_.is_copy_assignable= true;
	}

	if( operator_index == ~0s )
	{
		// Prepare function type.
		var FunctionType mut function_type
		{
			.return_type( void_type_for_ret_ ),
			.return_value_is_mutable= false,
			.return_value_is_reference= false,
		};
		{
			var FunctionType::Param mut dst_param
			{
				.t( Type( class_type ) ),
				.is_reference= true,
				.is_mutable= true,
			};
			var FunctionType::Param mut src_param
			{
				.t( Type( class_type ) ),
				.is_reference= true,
				.is_mutable= false,
			};
			function_type.params.push_back( move(dst_param) );
			function_type.params.push_back( move(src_param) );
		}

		unsafe
		{
			var[ LLVMTypeRef, 2 ] args_llvm_types
			[
				LLVMPointerType( class_type.lock_imut().get_ref().llvm_type, 0u ),
				LLVMPointerType( class_type.lock_imut().get_ref().llvm_type, 0u ),
			];

			function_type.llvm_type=
				LLVMFunctionType(
					fundamental_llvm_types_.void_for_ret_,
					args_llvm_types[0],
					2u,
					LLVMBool::False );
		}

		// Prepare function variable.
		var FunctionVariable mut function_variable
		{
			.is_this_call= true,
			.is_generated= true,
			.t= function_type,
			.constexpr_kind= select( class_type.lock_imut().get_ref().can_be_constexpr ? FunctionVariable::ConstexprKind::ConstexprComplete : FunctionVariable::ConstexprKind::NonConstexpr ),
		};

		unsafe
		{
			function_variable.llvm_function=
				LLVMAddFunction(
					module_,
					MangleFunction(
						class_members,
						OverloadedOperatorToString( OverloadedOperator::Assign ),
						function_variable.t ).front(),
					function_variable.t.llvm_type);
		}

		operator_index= operators.functions.size();
		operators.functions.push_back( move(function_variable) );
	}
	var FunctionVariable &mut function_variable= operators.functions[operator_index];

	// Build code itself.

	var FunctionContext mut function_context(
		llvm_context_,
		function_variable.llvm_function,
		function_variable.t.return_type,
		function_variable.t.return_value_is_reference,
		function_variable.t.return_value_is_mutable );

	var LLVMValueRef mut dst_llvm_value= zero_init, mut src_llvm_value= zero_init;
	unsafe
	{
		dst_llvm_value= LLVMGetParam( function_variable.llvm_function, 0u );
		src_llvm_value= LLVMGetParam( function_variable.llvm_function, 1u );
	}

	auto file_pos= class_type.lock_imut().get_ref().syntax_element.get_ref().file_pos;

	if( !base_class.empty() )
	{		
		auto dst_member_value= CreateBaseClassFieldGEP( dst_llvm_value, function_context );
		auto src_member_value= CreateBaseClassFieldGEP( src_llvm_value, function_context );

		BuildCopyAssignmentOperatorPart( class_members_ptr, function_context, dst_member_value, src_member_value, ust::to_non_nullable(base_class), file_pos );
	}

	foreach( &member : class_members.GetInternalContainer() )
	{
		auto field_ptr= member.value().Get</ClassField/>();
		if( field_ptr.empty() )
		{
			continue;
		}
		auto field_lock= field_ptr.lock_imut();
		var ClassField & class_field= field_lock.get_ref();

		if( class_field.index == ~0s ){ continue; } // May be in case of error

		auto dst_member_value= CreateFieldGEP( dst_llvm_value, class_field, function_context );
		auto src_member_value= CreateFieldGEP( src_llvm_value, class_field, function_context );

		BuildCopyAssignmentOperatorPart( class_members_ptr, function_context, dst_member_value, src_member_value, class_field.t, file_pos );
	}

	// Finish function - add remaining instructions.
	unsafe
	{
		LLVMBuildBr( function_context.alloca_ir_builder, function_context.function_basic_block );
		LLVMBuildRetVoid( function_context.llvm_ir_builder );
	}
}

fn CodeBuilder::TryGenerateDestructorPrototype( this, ClassTypePtr& class_type )
{
	auto class_members_ptr= class_type.lock_imut().get_ref().members;
	auto class_members_lock= class_members_ptr.lock_imut();
	auto& class_members= class_members_lock.get_ref();

	// Destructors value should always exists and should always be NamesScopeFunctionsSet.
	auto destructors_ptr= class_members.GetThisScopeValue( KeywordToString( Keyword::destructor_ ) ).get_ref().Get</NamesScopeFunctionsSet/>();
	auto mut destructors_lock= destructors_ptr.lock_mut();
	auto &mut destructors= destructors_lock.get_ref().functions_set;

	if( !destructors.functions.empty() )
	{
		return; // user already specified destructor.
	}

	// Prepare function type.
	var FunctionType mut function_type
	{
		.return_type( void_type_for_ret_ ),
		.return_value_is_mutable= false,
		.return_value_is_reference= false,
	};
	{
		var FunctionType::Param mut this_param
		{
			.t( Type( class_type ) ),
			.is_reference= true,
			.is_mutable= true,
		};
		function_type.params.push_back( move(this_param) );
	}

	unsafe
	{
		function_type.llvm_type=
			LLVMFunctionType(
				fundamental_llvm_types_.void_for_ret_,
				LLVMPointerType( class_type.lock_imut().get_ref().llvm_type, 0u ),
				1u,
				LLVMBool::False );
	}

	// Prepare function variable.
	var FunctionVariable mut function_variable
	{
		.is_this_call= true,
		.is_generated= true,
		.t= function_type,
	};

	unsafe
	{
		function_variable.llvm_function=
			LLVMAddFunction(
				module_,
				MangleFunction(
					class_members,
					KeywordToString( Keyword::destructor_ ),
					function_variable.t ).front(),
				function_variable.t.llvm_type );
	}

	destructors.functions.push_back( move(function_variable) );
}

fn CodeBuilder::TryGenerateDestructor( this, ClassTypePtr& class_type )
{
	auto class_members_ptr= class_type.lock_imut().get_ref().members;
	auto class_members_lock= class_members_ptr.lock_imut();
	auto& class_members= class_members_lock.get_ref();

	// Destructors value should always exists and should always be NamesScopeFunctionsSet.
	auto destructors_ptr= class_members.GetThisScopeValue( KeywordToString( Keyword::destructor_ ) ).get_ref().Get</NamesScopeFunctionsSet/>();
	auto mut destructors_lock= destructors_ptr.lock_mut();
	auto &mut destructors= destructors_lock.get_ref().functions_set;

	auto mut use_existing_destructor_variable= false;
	if( !destructors.functions.back().is_generated ) // Should be nonempty - contain user-specified destructor of prepared prototype.
	{
		return; // user already specified destructor.
	}

	// Generate body for previously generated prototype.
	var FunctionVariable &mut function_variable= destructors.functions.back();

	// Build code itself.

	var FunctionContext mut function_context(
		llvm_context_,
		function_variable.llvm_function,
		function_variable.t.return_type,
		function_variable.t.return_value_is_reference,
		function_variable.t.return_value_is_mutable );

	auto mut this_llvm_value= LLVMValueRef::Null;
	unsafe{  this_llvm_value= LLVMGetParam( function_variable.llvm_function, 0u );  }

	BuildMembersDestructors( function_context, this_llvm_value, class_type );

	// Finish function - add remaining instructions.
	unsafe
	{
		LLVMBuildBr( function_context.alloca_ir_builder, function_context.function_basic_block );
		LLVMBuildRetVoid( function_context.llvm_ir_builder );
	}
}

fn CodeBuilder::BuildCopyConstructorPart( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, LLVMValueRef dst, LLVMValueRef src, Type& t, FilePos& file_pos )
{
	if( !t.GetFundamentalType().empty() || !t.GetEnumType().empty() || !t.GetFunctionPointerType().empty() )
	{
		unsafe
		{
			if( LLVMTypeOf( dst ) == LLVMTypeOf( src ) )
			{
				// two pointers - do load-store
				auto mut value= LLVMBuildLoad( function_context.llvm_ir_builder, src, "\0"[0] );
				LLVMBuildStore( function_context.llvm_ir_builder, value, dst );
			}
			else if( LLVMTypeOf( dst ) == LLVMPointerType( LLVMTypeOf( src ), 0u ) )
			{
				// pointer and value in llvm register - do simple store
				LLVMBuildStore( function_context.llvm_ir_builder, src, dst );
			}
			else{ halt; }
		}
		return;
	}
	if_var( &array_type : t.GetArrayType() )
	{
		CB_GENERATE_LOOP(
			function_context,
			array_type.element_count,
			{
				var LLVMValueRef mut dst_element_value= zero_init, mut src_element_value= zero_init;

				unsafe
				{
					var [ LLVMValueRef, 2 ] indexes[ GetZeroGEPIndex(), counter_value ];
					dst_element_value= LLVMBuildGEP( function_context.llvm_ir_builder, dst, indexes[0], 2u, "[]\0"[0] );
					src_element_value= LLVMBuildGEP( function_context.llvm_ir_builder, src, indexes[0], 2u, "[]\0"[0] );
				}

				BuildCopyConstructorPart( names_scope, function_context, dst_element_value, src_element_value, array_type.element_type, file_pos );
			}
		)
		return;
	}
	if_var( &tuple_type : t.GetTupleType() )
	{
		for( auto mut i= 0s; i < tuple_type.element_types.size(); ++i )
		{
			auto dst_element_value= CreateTupleElementGEP( dst, i, function_context );
			auto src_element_value= CreateTupleElementGEP( src, i, function_context );
			BuildCopyConstructorPart( names_scope, function_context, dst_element_value, src_element_value, tuple_type.element_types[i], file_pos );
		}

		return;
	}
	if_var( &class_type : t.GetClassType() )
	{
		if( !class_type.lock_imut().get_ref().is_copy_constructible )
		{
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope, file_pos, Type(class_type) )
			return;
		}

		// Constructors value should always exists and should always be NamesScopeFunctionsSet.
		auto constructors_ptr= class_type.lock_imut().get_ref().members.lock_imut().get_ref().GetThisScopeValue( KeywordToString( Keyword::constructor_ ) ).get_ref().Get</NamesScopeFunctionsSet/>();

		// Search for copy constructor.
		foreach( &constructor_ : constructors_ptr.lock_imut().get_ref().functions_set.functions )
		{
			if( IsCopyConstructor( constructor_, class_type ) )
			{
				// SPRACHE_TODO - maybe disallow unsafe copy constructors?
				if( constructor_.t.is_unsafe && !function_context.is_in_unsafe_block )
				{
					REPORT_ERROR( UnsafeFunctionCallOutsideUnsafeBlock, names_scope, file_pos )
				}

				// Call it.
				unsafe
				{
					var[ LLVMValueRef, 2 ] llvm_args[ dst, src ];
					LLVMBuildCall( function_context.llvm_ir_builder, constructor_.llvm_function, llvm_args[0], 2u, "\0"[0] );
				}
				break;
			}
		}
		return;
	}

	halt; // Unhandled type kind
}

fn CodeBuilder::BuildCopyAssignmentOperatorPart( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, LLVMValueRef dst, LLVMValueRef src, Type& t, FilePos& file_pos )
{
	if( !t.GetFundamentalType().empty() || !t.GetEnumType().empty() || !t.GetFunctionPointerType().empty() )
	{
		unsafe
		{
			if( LLVMTypeOf( dst ) == LLVMTypeOf( src ) )
			{
				// two pointers - do load-store
				auto mut value= LLVMBuildLoad( function_context.llvm_ir_builder, src, "\0"[0] );
				LLVMBuildStore( function_context.llvm_ir_builder, value, dst );
			}
			else if( LLVMTypeOf( dst ) == LLVMPointerType( LLVMTypeOf( src ), 0u ) )
			{
				// pointer and value in llvm register - do simple store
				LLVMBuildStore( function_context.llvm_ir_builder, src, dst );
			}
			else{ halt; }
		}
		return;
	}
	if_var( &array_type : t.GetArrayType() )
	{
		CB_GENERATE_LOOP(
			function_context,
			array_type.element_count,
			{
				var LLVMValueRef mut dst_element_value= zero_init, mut src_element_value= zero_init;

				unsafe
				{
					var [ LLVMValueRef, 2 ] indexes[ GetZeroGEPIndex(), counter_value ];
					dst_element_value= LLVMBuildGEP( function_context.llvm_ir_builder, dst, indexes[0], 2u, "[]\0"[0] );
					src_element_value= LLVMBuildGEP( function_context.llvm_ir_builder, src, indexes[0], 2u, "[]\0"[0] );
				}

				BuildCopyAssignmentOperatorPart( names_scope, function_context, dst_element_value, src_element_value, array_type.element_type, file_pos );
			}
		)
		return;
	}
	if_var( &tuple_type : t.GetTupleType() )
	{
		for( auto mut i= 0s; i < tuple_type.element_types.size(); ++i )
		{
			auto dst_element_value= CreateTupleElementGEP( dst, i, function_context );
			auto src_element_value= CreateTupleElementGEP( src, i, function_context );
			BuildCopyAssignmentOperatorPart( names_scope, function_context, dst_element_value, src_element_value, tuple_type.element_types[i], file_pos );
		}

		return;
	}
	if_var( &class_type : t.GetClassType() )
	{
		if( !class_type.lock_imut().get_ref().is_copy_assignable )
		{
			// TODO - maybe generate error here?
			return;
		}

		// Assignment operators value should always exists and should always be NamesScopeFunctionsSet.
		auto operators_ptr= class_type.lock_imut().get_ref().members.lock_imut().get_ref().GetThisScopeValue( OverloadedOperatorToString( OverloadedOperator::Assign ) ).get_ref().Get</NamesScopeFunctionsSet/>();

		// Search for copy assignment operator.
		foreach( &operator_ : operators_ptr.lock_imut().get_ref().functions_set.functions )
		{
			if( IsCopyAssignmentOperator( operator_, class_type ) )
			{
				// SPRACHE_TODO - maybe disallow unsafe copy assignment operators?
				if( operator_.t.is_unsafe && !function_context.is_in_unsafe_block )
				{
					REPORT_ERROR( UnsafeFunctionCallOutsideUnsafeBlock, names_scope, file_pos )
				}

				// Call it.
				unsafe
				{
					var[ LLVMValueRef, 2 ] llvm_args[ dst, src ];
					LLVMBuildCall( function_context.llvm_ir_builder, operator_.llvm_function, llvm_args[0], 2u, "\0"[0] );
				}
				break;
			}
		}
		return;
	}

	halt; // Unhandled type kind
}

fn CodeBuilder::BuildDestructorPart( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, LLVMValueRef value, Type& t, FilePos& file_pos )
{
	if_var( &array_type : t.GetArrayType() )
	{
		CB_GENERATE_LOOP(
			function_context,
			array_type.element_count,
			{
				auto mut element_value= LLVMValueRef::Null;

				unsafe
				{
					var [ LLVMValueRef, 2 ] indexes[ GetZeroGEPIndex(), counter_value ];
					element_value= LLVMBuildGEP( function_context.llvm_ir_builder, value, indexes[0], 2u, "[]\0"[0] );
				}

				BuildDestructorPart( names_scope, function_context, element_value, array_type.element_type, file_pos );
			}
		)
	}
	if_var( &tuple_type : t.GetTupleType() )
	{
		for( auto mut i= 0s; i < tuple_type.element_types.size(); ++i )
		{
			var LLVMValueRef element_value= CreateTupleElementGEP( value, i, function_context );
			BuildDestructorPart( names_scope, function_context, element_value, tuple_type.element_types[i], file_pos );
		}
	}
	if_var( &class_type : t.GetClassType() )
	{
		// Destructors value should always exists and should always be NamesScopeFunctionsSet.
		auto destructors_ptr= class_type.lock_imut().get_ref().members.lock_imut().get_ref().GetThisScopeValue( KeywordToString( Keyword::destructor_ ) ).get_ref().Get</NamesScopeFunctionsSet/>();

		// Destructors set should contain exactly one function.
		auto destructors_lock= destructors_ptr.lock_imut();
		auto& destructor_= destructors_lock.get_ref().functions_set.functions.front();

		// SPRACHE_TODO - maybe disallow unsafe destructors?
		if( destructor_.t.is_unsafe && !function_context.is_in_unsafe_block )
		{
			REPORT_ERROR( UnsafeFunctionCallOutsideUnsafeBlock, names_scope, file_pos )
		}

		// Call it.
		unsafe
		{
			LLVMBuildCall( function_context.llvm_ir_builder, destructor_.llvm_function, value, 1u, "\0"[0] );
		}
	}
}

fn CodeBuilder::BuildMembersDestructors( this, FunctionContext &mut function_context, LLVMValueRef value, ClassTypePtr& class_type )
{
	auto class_members= class_type.lock_imut().get_ref().members;

	var FilePos mut file_pos;
	{
		auto syntax_element= class_type.lock_imut().get_ref().syntax_element;
		if( !syntax_element.empty() )
		{
			file_pos= syntax_element.get_ref().file_pos;
		}
	}

	foreach( &parent : class_type.lock_imut().get_ref().parents )
	{
		auto parent_llvm_value= CreateParentFieldGEP( value, parent, function_context );
		BuildDestructorPart( class_members, function_context, parent_llvm_value, parent.class_, file_pos );
	}

	foreach( &member : class_members.lock_imut().get_ref().GetInternalContainer() )
	{
		auto field_ptr= member.value().Get</ClassField/>();
		if( field_ptr.empty() )
		{
			continue;
		}

		auto field_lock= field_ptr.lock_imut();
		var ClassField& class_field= field_lock.get_ref();

		if( class_field.index == ~0s ){ continue; } // May be in case of error
		if( class_field.is_reference ) { continue; }

		auto field_llvm_value= CreateFieldGEP( value, class_field, function_context );

		BuildDestructorPart( class_members, function_context, field_llvm_value, class_field.t, file_pos ); // TODO - maybe use field file_pos instead?
	}
}

} // namespace U
