import "/keywords.uh"
import "error_reporting.uh"
import "code_builder.uh"

namespace U1
{

fn CodeBuilder::TryGenerateDefaultConstructor( mut this, ClassTypePtr& class_type )
{
	auto class_members_ptr= class_type.lock_imut().deref().members;
	auto class_members_lock= class_members_ptr.lock_imut();
	auto& class_members= class_members_lock.deref();

	// Search for explicit default constructor.
	auto mut have_explicit_noncopy_constructors= false;

	// Constructors value should always exists and should always be NamesScopeFunctionsSet.
	auto constructors_ptr= class_members.GetThisScopeValue( KeywordToString( Keyword::constructor_ ) ).try_deref().Get</NamesScopeFunctionsSet/>();
	auto mut constructors_lock= constructors_ptr.try_lock_mut();
	auto &mut constructors= constructors_lock.deref().functions_set;

	// Search for copy constructor.
	auto mut constructor_index= ~0s;
	for( auto mut i= 0s; i < constructors.functions.size(); ++i )
	{
		auto& constructor_= constructors.functions[i];
		if( IsDefaultConstructor( constructor_, class_type ) )
		{
			if( constructor_.is_generated )
			{
				constructor_index= i;
				break;
			}
			else
			{
				auto mut class_lock= class_type.lock_mut();
				class_lock.deref().is_default_constructible= !constructor_.is_deleted;
				return;
			}
		}
		else if( IsCopyConstructor( constructor_, class_type ) ) {}
		else
		{
			// Generation of default constructor disabled because class have explicit noncopy constructors.
			have_explicit_noncopy_constructors= true;
		}
	}

	if( have_explicit_noncopy_constructors && constructor_index == ~0s )
	{
		return;
	}

	// Check if all fields is default-constructible.
	auto mut all_fields_is_default_constructible= true;
	foreach( &field_pair : class_type.lock_imut().deref().fields_order )
	{
		auto field_lock= field_pair[1].lock_imut();
		auto& field= field_lock.deref();

		if( !field.syntax_element.deref().initializer.get</Synt::EmptyVariant/>().empty() &&
			( field.is_reference || !field.t.IsDefaultConstructible() ) )
		{
			all_fields_is_default_constructible= false;
			break;
		}
	}

	auto base_class= class_type.lock_imut().deref().base_class;
	if( !base_class.empty() && !base_class.try_lock_imut().deref().is_default_constructible )
	{
		all_fields_is_default_constructible= false;
	}

	if( !all_fields_is_default_constructible )
	{
		if( constructor_index != ~0s )
		{
			REPORT_ERROR( MethodBodyGenerationFailed, class_members_ptr, constructors.functions[constructor_index].prototype_syntax_element.try_deref().src_loc )
		}
		return;
	}

	// All ok - set default constructible flag.
	{
		auto mut class_lock= class_type.lock_mut();
		class_lock.deref().is_default_constructible= true;
	}

	if( constructor_index == ~0s )
	{
		// Prepare function type.
		var FunctionType mut function_type
		{
			.return_type( void_type_ ),
			.return_value_type= ValueType::Value,
		};
		{
			var FunctionType::Param mut this_param
			{
				.t( Type( class_type ) ),
				.value_type= ValueType::ReferenceMut,
			};
			function_type.params.push_back( move(this_param) );
		}

		FillLLVMFunctionType( function_type );

		// Prepare function variable.
		var FunctionVariable mut function_variable
		{
			.is_this_call= true,
			.is_generated= true,
			.t= function_type,
		};

		unsafe
		{
			function_variable.llvm_function=
				LLVMAddFunction(
					module_,
					mangler_.deref().MangleFunction(
						class_members,
						KeywordToString( Keyword::constructor_ ),
						function_variable.t ).front(),
					function_variable.t.llvm_type );
		}
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex, "nonnull" );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex, "noalias" );

		constructor_index= constructors.functions.size();
		constructors.functions.push_back( move(function_variable) );
	}
	var FunctionVariable &mut function_variable= constructors.functions[constructor_index];
	function_variable.constexpr_kind= select( class_type.lock_imut().deref().can_be_constexpr ? FunctionVariable::ConstexprKind::ConstexprComplete : FunctionVariable::ConstexprKind::NonConstexpr );

	SetupFunctionParamsAndRetAttributes( function_variable );

	// Build code itself.

	var FunctionContext mut function_context(
		llvm_context_,
		function_variable.llvm_function,
		function_variable.t );
	function_context.variables_frames.push_back( FunctionContext::VariablesFrame() );

	auto mut this_llvm_value= LLVMValueRef::Null;
	unsafe{  this_llvm_value= LLVMGetParam( function_variable.llvm_function, 0u );  }

	auto src_loc= class_type.lock_imut().deref().syntax_element.try_deref().src_loc;

	if( !base_class.empty() )
	{
		var NamesScopeVariable base_variable
		{
			.t= base_class.try_to_non_nullable(),
			.is_mutable= true,
			.llvm_value= CreateBaseClassFieldGEP( this_llvm_value, function_context ),
		};

		BuildEmptyInitializer( class_members_ptr, function_context, base_variable, KeywordToString( Keyword::base_ ), src_loc );
	}

	// Use initial class members namespace for own fields initializers evaluation.
	auto class_members_initial= class_type.lock_imut().deref().members_initial;

	foreach( &field_pair : class_type.lock_imut().deref().fields_order )
	{
		auto field_lock= field_pair[1].lock_imut();
		var ClassField & class_field= field_lock.deref();

		if( class_field.index == ~0s ){ continue; } // May be in case of error

		var NamesScopeVariable field_variable
		{
			.t= class_field.t,
			.is_mutable= true,
			.llvm_value= CreateFieldGEP( this_llvm_value, class_field, function_context )
		};

		auto& initializer= class_field.syntax_element.deref().initializer;
		if( !initializer.get</Synt::EmptyVariant/>().empty() )
		{
			BuildEmptyInitializer( class_members_ptr, function_context, field_variable, field_pair[0], src_loc );
		}
		else
		{
			if( class_field.is_reference )
			{
				var NamesScopeVariable this_variable{ .t= class_type, .llvm_value= this_llvm_value };
				InitializeReferenceField( class_members_initial, function_context, this_variable, class_field, initializer );
			}
			else
			{
				BuildInitializer( class_members_initial, function_context, field_variable, initializer );
			}
		}
	}

	SetupVirtualTablePointers( this_llvm_value, class_type, function_context );

	// Finish function - add remaining instructions.
	unsafe
	{
		LLVMBuildBr( function_context.alloca_ir_builder, function_context.function_basic_block );
		LLVMBuildRetVoid( function_context.llvm_ir_builder );
	}
}

fn CodeBuilder::TryGenerateCopyConstructor( mut this, ClassTypePtr& class_type )
{
	auto class_members_ptr= class_type.lock_imut().deref().members;
	auto class_members_lock= class_members_ptr.lock_imut();
	auto& class_members= class_members_lock.deref();

	// Constructors value should always exists and should always be NamesScopeFunctionsSet.
	auto constructors_ptr= class_members.GetThisScopeValue( KeywordToString( Keyword::constructor_ ) ).try_deref().Get</NamesScopeFunctionsSet/>();
	auto mut constructors_lock= constructors_ptr.try_lock_mut();
	auto &mut constructors= constructors_lock.deref().functions_set;

	// Search for copy constructor.
	auto mut constructor_index= ~0s;
	for( auto mut i= 0s; i < constructors.functions.size(); ++i )
	{
		auto& constructor_= constructors.functions[i];
		if( IsCopyConstructor( constructor_, class_type ) )
		{
			if( constructor_.is_generated )
			{
				constructor_index= i;
				break;
			}
			else
			{
				auto mut class_lock= class_type.lock_mut();
				class_lock.deref().is_copy_constructible= !constructor_.is_deleted;
				return;
			}
		}
	}

	// Check if all fields is copy-constructible.
	auto mut all_fields_is_copy_constructible= true;
	foreach( &field_pair : class_type.lock_imut().deref().fields_order )
	{
		auto field_lock= field_pair[1].lock_imut();
		auto& field= field_lock.deref();
		if( !field.is_reference && !field.t.IsCopyConstructible() )
		{
			all_fields_is_copy_constructible= false;
			break;
		}
	}

	auto base_class= class_type.lock_imut().deref().base_class;
	if( !base_class.empty() && !base_class.try_lock_imut().deref().is_copy_constructible )
	{
		all_fields_is_copy_constructible= false;
	}

	if( !all_fields_is_copy_constructible )
	{
		if( constructor_index != ~0s )
		{
			REPORT_ERROR( MethodBodyGenerationFailed, class_members_ptr, constructors.functions[constructor_index].prototype_syntax_element.try_deref().src_loc )
		}
		return;
	}

	// All ok - set copy constructible flag.
	{
		auto mut class_lock= class_type.lock_mut();
		auto &mut class_= class_lock.deref();

		if( class_.kind != ClassType::Kind::Struct && constructor_index == ~0s )
		{
			// By-default do not generate copy constructors for classes, generate them only for structs.
			class_.is_copy_constructible= false;
			return;
		}

		class_.is_copy_constructible= true;
	}

	if( constructor_index == ~0s )
	{
		// Prepare function type.
		var FunctionType mut function_type
		{
			.return_type( void_type_ ),
			.return_value_type= ValueType::Value,
		};
		{
			var FunctionType::Param mut dst_param
			{
				.t( Type( class_type ) ),
				.value_type= ValueType::ReferenceMut,
			};
			var FunctionType::Param mut src_param
			{
				.t( Type( class_type ) ),
				.value_type= ValueType::ReferenceImut,
			};
			function_type.params.push_back( move(dst_param) );
			function_type.params.push_back( move(src_param) );
		}
		{
			var FunctionType::ReferencePollution mut pollution
			{
				.dst{ .param_index= 0u8, .reference_index= 0u8 },
				.src{ .param_index= 1u8, .reference_index= 0u8 },
			};
			function_type.references_pollution.push_back( move(pollution) );
		}

		FillLLVMFunctionType( function_type );

		// Prepare function variable.
		var FunctionVariable mut function_variable
		{
			.is_this_call= true,
			.is_generated= true,
			.t= function_type,
		};

		unsafe
		{
			function_variable.llvm_function=
				LLVMAddFunction(
					module_,
					mangler_.deref().MangleFunction(
						class_members,
						KeywordToString( Keyword::constructor_ ),
						function_variable.t ).front(),
					function_variable.t.llvm_type );
		}
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 0u, "nonnull" );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 0u, "noalias" );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 1u, "nonnull" );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 1u, "noalias" );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 1u, "readonly" );

		constructor_index= constructors.functions.size();
		constructors.functions.push_back( move(function_variable) );
	}
	var FunctionVariable &mut function_variable= constructors.functions[ constructor_index ];
	function_variable.constexpr_kind= select( class_type.lock_imut().deref().can_be_constexpr ? FunctionVariable::ConstexprKind::ConstexprComplete : FunctionVariable::ConstexprKind::NonConstexpr );

	SetupFunctionParamsAndRetAttributes( function_variable );

	// Build code itself.

	var FunctionContext mut function_context(
		llvm_context_,
		function_variable.llvm_function,
		function_variable.t );
	function_context.variables_frames.push_back( FunctionContext::VariablesFrame() );

	var LLVMValueRef mut dst_llvm_value= zero_init, mut src_llvm_value= zero_init;
	unsafe
	{
		dst_llvm_value= LLVMGetParam( function_variable.llvm_function, 0u );
		src_llvm_value= LLVMGetParam( function_variable.llvm_function, 1u );
	}

	auto src_loc= class_type.lock_imut().deref().syntax_element.try_deref().src_loc;

	if( !base_class.empty() )
	{
		auto dst_member_value= CreateBaseClassFieldGEP( dst_llvm_value, function_context );
		auto src_member_value= CreateBaseClassFieldGEP( src_llvm_value, function_context );

		BuildCopyConstructorPart( class_members_ptr, function_context, dst_member_value, src_member_value, base_class.try_to_non_nullable(), src_loc );
	}

	foreach( &field_pair : class_type.lock_imut().deref().fields_order )
	{
		auto field_lock= field_pair[1].lock_imut();
		var ClassField & class_field= field_lock.deref();

		if( class_field.index == ~0s ){ continue; } // May be in case of error

		auto dst_member_value= CreateFieldGEP( dst_llvm_value, class_field, function_context );
		auto src_member_value= CreateFieldGEP( src_llvm_value, class_field, function_context );

		if( class_field.is_reference )
		{
			unsafe
			{
				LLVMBuildStore(
					function_context.llvm_ir_builder,
					LLVMBuildLoad( function_context.llvm_ir_builder, src_member_value, "\0"[0] ),
					dst_member_value );
			}
		}
		else
		{
			BuildCopyConstructorPart( class_members_ptr, function_context, dst_member_value, src_member_value, class_field.t, src_loc );
		}
	}

	SetupVirtualTablePointers( dst_llvm_value, class_type, function_context );

	// Finish function - add remaining instructions
	unsafe
	{
		LLVMBuildBr( function_context.alloca_ir_builder, function_context.function_basic_block );
		LLVMBuildRetVoid( function_context.llvm_ir_builder );
	}
}

fn CodeBuilder::TryGenerateCopyAssignmentOperator( mut this, ClassTypePtr& class_type )
{
	auto class_members_ptr= class_type.lock_imut().deref().members;
	auto class_members_lock= class_members_ptr.lock_imut();
	auto& class_members= class_members_lock.deref();

	// Assignment operators value should always exists and should always be NamesScopeFunctionsSet.
	auto operators_ptr= class_members.GetThisScopeValue( OverloadedOperatorToString( OverloadedOperator::Assign ) ).try_deref().Get</NamesScopeFunctionsSet/>();
	auto mut operators_lock= operators_ptr.try_lock_mut();
	auto &mut operators= operators_lock.deref().functions_set;

	// Search for copy assignment operator.
	auto mut operator_index= ~0s;
	for( auto mut i= 0s; i < operators.functions.size(); ++i )
	{
		auto& operator= operators.functions[i];
		if( IsCopyAssignmentOperator( operator, class_type ) )
		{
			if( operator.is_generated )
			{
				operator_index= i;
				break;
			}
			else
			{
				auto mut class_lock= class_type.lock_mut();
				class_lock.deref().is_copy_assignable= !operator.is_deleted;
				return;
			}
		}
	}

	// Check if all fields is copy-assignable.
	auto mut all_fields_is_copy_assignable= true;
	foreach( &field_pair : class_type.lock_imut().deref().fields_order )
	{
		auto field_lock= field_pair[1].lock_imut();
		auto& field= field_lock.deref();
		if( field.is_reference || !field.is_mutable || !field.t.IsCopyAssignable() )
		{
			all_fields_is_copy_assignable= false;
			break;
		}
	}

	auto base_class= class_type.lock_imut().deref().base_class;
	if( !base_class.empty() && !base_class.try_lock_imut().deref().is_copy_assignable )
	{
		all_fields_is_copy_assignable= false;
	}

	if( !all_fields_is_copy_assignable )
	{
		if( operator_index != ~0s )
		{
			REPORT_ERROR( MethodBodyGenerationFailed, class_members_ptr, operators.functions[operator_index].prototype_syntax_element.try_deref().src_loc )
		}
		return;
	}

	// All ok - set copy constructible flag.
	{
		auto mut class_lock= class_type.lock_mut();
		auto &mut class_= class_lock.deref();

		if( class_.kind != ClassType::Kind::Struct && operator_index == ~0s )
		{
			// By-default do not generate copy assignment operators for classes, generate them only for structs.
			class_.is_copy_assignable= false;
			return;
		}

		class_.is_copy_assignable= true;
	}

	if( operator_index == ~0s )
	{
		// Prepare function type.
		var FunctionType mut function_type
		{
			.return_type( void_type_ ),
			.return_value_type= ValueType::Value,
		};
		{
			var FunctionType::Param mut dst_param
			{
				.t( Type( class_type ) ),
				.value_type= ValueType::ReferenceMut,
			};
			var FunctionType::Param mut src_param
			{
				.t( Type( class_type ) ),
				.value_type= ValueType::ReferenceImut,
			};
			function_type.params.push_back( move(dst_param) );
			function_type.params.push_back( move(src_param) );
		}
		{
			var FunctionType::ReferencePollution mut pollution
			{
				.dst{ .param_index= 0u8, .reference_index= 0u8 },
				.src{ .param_index= 1u8, .reference_index= 0u8 },
			};
			function_type.references_pollution.push_back( move(pollution) );
		}

		FillLLVMFunctionType( function_type );

		// Prepare function variable.
		var FunctionVariable mut function_variable
		{
			.is_this_call= true,
			.is_generated= true,
			.t= function_type,
		};

		unsafe
		{
			function_variable.llvm_function=
				LLVMAddFunction(
					module_,
					mangler_.deref().MangleFunction(
						class_members,
						OverloadedOperatorToString( OverloadedOperator::Assign ),
						function_variable.t ).front(),
					function_variable.t.llvm_type);
		}
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 0u, "nonnull" );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 0u, "noalias" );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 1u, "nonnull" );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 1u, "noalias" );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 1u, "readonly" );

		operator_index= operators.functions.size();
		operators.functions.push_back( move(function_variable) );
	}
	var FunctionVariable &mut function_variable= operators.functions[operator_index];
	function_variable.constexpr_kind= select( class_type.lock_imut().deref().can_be_constexpr ? FunctionVariable::ConstexprKind::ConstexprComplete : FunctionVariable::ConstexprKind::NonConstexpr );

	SetupFunctionParamsAndRetAttributes( function_variable );

	// Build code itself.

	var FunctionContext mut function_context(
		llvm_context_,
		function_variable.llvm_function,
		function_variable.t );
	function_context.variables_frames.push_back( FunctionContext::VariablesFrame() );

	var LLVMValueRef mut dst_llvm_value= zero_init, mut src_llvm_value= zero_init;
	unsafe
	{
		dst_llvm_value= LLVMGetParam( function_variable.llvm_function, 0u );
		src_llvm_value= LLVMGetParam( function_variable.llvm_function, 1u );
	}

	auto src_loc= class_type.lock_imut().deref().syntax_element.try_deref().src_loc;

	if( !base_class.empty() )
	{		
		auto dst_member_value= CreateBaseClassFieldGEP( dst_llvm_value, function_context );
		auto src_member_value= CreateBaseClassFieldGEP( src_llvm_value, function_context );

		BuildCopyAssignmentOperatorPart( class_members_ptr, function_context, dst_member_value, src_member_value, base_class.try_to_non_nullable(), src_loc );
	}

	foreach( &field_pair : class_type.lock_imut().deref().fields_order )
	{
		auto field_lock= field_pair[1].lock_imut();
		var ClassField & class_field= field_lock.deref();

		if( class_field.index == ~0s ){ continue; } // May be in case of error

		auto dst_member_value= CreateFieldGEP( dst_llvm_value, class_field, function_context );
		auto src_member_value= CreateFieldGEP( src_llvm_value, class_field, function_context );

		BuildCopyAssignmentOperatorPart( class_members_ptr, function_context, dst_member_value, src_member_value, class_field.t, src_loc );
	}

	// Finish function - add remaining instructions.
	unsafe
	{
		LLVMBuildBr( function_context.alloca_ir_builder, function_context.function_basic_block );
		LLVMBuildRetVoid( function_context.llvm_ir_builder );
	}
}

fn CodeBuilder::TryGenerateEqualityCompareOperator( mut this, ClassTypePtr& class_type )
{
	auto class_members_ptr= class_type.lock_imut().deref().members;

	auto mut operator_index= ~0s;
	var bool mut contains_other_equality_compare_operators= false;

	auto op_name= OverloadedOperatorToString( OverloadedOperator::CompareEqual );

	var ust::shared_ptr_nullable_mut</NamesScopeFunctionsSet/> mut operators_ptr;
	if_var( &val : class_members_ptr.lock_imut().deref().GetThisScopeValue( op_name ) )
	{
		operators_ptr= val.Get</NamesScopeFunctionsSet/>();
	}
	if( !operators_ptr.empty() )
	{
		auto mut operators_lock= operators_ptr.try_lock_mut();
		auto &mut operators= operators_lock.deref().functions_set;

		// Search for copy "==" operator.
		for( auto mut i= 0s; i < operators.functions.size(); ++i )
		{
			auto& operator= operators.functions[i];
			if( IsEqualityCompareOperator( operator, class_type ) )
			{
				if( operator.is_generated )
				{
					operator_index= i;
					break;
				}
				else
				{
					auto mut class_lock= class_type.lock_mut();
					class_lock.deref().is_equality_comparable= !operator.is_deleted;
					return;
				}
			}
			else
			{
				contains_other_equality_compare_operators= true;
			}
		}

		if( !operators.function_templates.empty() )
		{
			contains_other_equality_compare_operators= true;
		}
	}

	// Check if all fields are equality-comparable.
	auto mut all_fields_are_equality_comparable= true;
	foreach( &field_pair : class_type.lock_imut().deref().fields_order )
	{
		auto field_lock= field_pair[1].lock_imut();
		auto& field= field_lock.deref();
		if( !( field.t.IsEqualityComparable() && !field.is_reference ) )
		{
			all_fields_are_equality_comparable= false;
			break;
		}
	}

	auto base_class= class_type.lock_imut().deref().base_class;
	if( !base_class.empty() && !base_class.try_lock_imut().deref().is_equality_comparable )
	{
		all_fields_are_equality_comparable= false;
	}

	if( !all_fields_are_equality_comparable )
	{
		if( operator_index != ~0s )
		{
			auto operators_lock= operators_ptr.try_lock_imut();
			auto& operators= operators_lock.deref().functions_set;
			REPORT_ERROR( MethodBodyGenerationFailed, class_members_ptr, operators.functions[operator_index].prototype_syntax_element.try_deref().src_loc )
		}
		return;
	}

	// All ok - set equiality comparable flag.
	{
		auto mut class_lock= class_type.lock_mut();
		auto &mut class_= class_lock.deref();

		if( operator_index == ~0s  )
		{
			if( class_.kind != ClassType::Kind::Struct )
			{
				// By-default do not generate "==" operators for classes, generate them only for structs.
				class_.is_equality_comparable= false;
				return;
			}
			if( contains_other_equality_compare_operators )
			{
				// Do not generate "==" if user specified "==" inside this class for other types. Do this to prevent typos/mistakes.
				class_.is_equality_comparable= false;
				return;
			}
		}

		class_.is_equality_comparable= true;
	}

	if( operators_ptr.empty() )
	{
		auto mut class_members_lock= class_members_ptr.lock_mut();
		auto &mut class_members= class_members_lock.deref();

		var NamesScopeFunctionsSet mut functions_set;
		operators_ptr= class_members.AddName( ust::string8(op_name), NamesScopeValue( move(functions_set) ) ).try_deref().Get</NamesScopeFunctionsSet/>();
	}
	auto mut operators_lock= operators_ptr.try_lock_mut();
	auto &mut operators= operators_lock.deref().functions_set;

	if( operator_index == ~0s )
	{
		// Prepare function type.
		var FunctionType mut function_type
		{
			.return_type( bool_type_ ),
			.return_value_type= ValueType::Value,
		};

		for( auto mut i= 0s; i < 2s; ++i )
		{
			var FunctionType::Param mut param
			{
				.t( Type( class_type ) ),
				.value_type= ValueType::ReferenceImut,
			};
			function_type.params.push_back( move(param) );
		}

		FillLLVMFunctionType( function_type );

		// Prepare function variable.
		var FunctionVariable mut function_variable
		{
			.is_this_call= true,
			.is_generated= true,
			.t= function_type,
		};

		unsafe
		{
			function_variable.llvm_function=
				LLVMAddFunction(
					module_,
					mangler_.deref().MangleFunction(
						class_members_ptr.lock_imut().deref(),
						op_name,
						function_variable.t ).front(),
					function_variable.t.llvm_type);
		}
		// TODO - remove this attributes?
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 0u, "nonnull" );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 0u, "noalias" );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 1u, "nonnull" );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 1u, "noalias" );
		AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex + 1u, "readonly" );

		operator_index= operators.functions.size();
		operators.functions.push_back( move(function_variable) );
	}

	var FunctionVariable &mut function_variable= operators.functions[operator_index];
	function_variable.constexpr_kind= select( class_type.lock_imut().deref().can_be_constexpr ? FunctionVariable::ConstexprKind::ConstexprComplete : FunctionVariable::ConstexprKind::NonConstexpr );

	SetupFunctionParamsAndRetAttributes( function_variable );

	var FunctionContext mut function_context(
		llvm_context_,
		function_variable.llvm_function,
		function_variable.t );
	function_context.variables_frames.push_back( FunctionContext::VariablesFrame() );

	auto src_loc= class_type.lock_imut().deref().syntax_element.try_deref().src_loc;

	unsafe
	{
		var LLVMValueRef l_llvm_value= LLVMGetParam( function_variable.llvm_function, 0u );
		var LLVMValueRef r_llvm_value= LLVMGetParam( function_variable.llvm_function, 1u );
		var LLVMBasicBlockRef false_basic_block= LLVMCreateBasicBlockInContext( llvm_context_, "\0"[0] );

		if( !base_class.empty() )
		{
			var LLVMValueRef l_base= CreateBaseClassFieldGEP( l_llvm_value, function_context );
			var LLVMValueRef r_base= CreateBaseClassFieldGEP( r_llvm_value, function_context );

			BuildEqualityCompareOperatorPart( class_members_ptr, function_context, l_base, r_base, base_class.try_to_non_nullable(), false_basic_block, src_loc );
		}

		foreach( &field_pair : class_type.lock_imut().deref().fields_order )
		{
			auto field_lock= field_pair[1].lock_imut();
			var ClassField & class_field= field_lock.deref();

			if( class_field.index == ~0s ){ continue; } // May be in case of error

			auto l_member= CreateFieldGEP( l_llvm_value, class_field, function_context );
			auto r_member= CreateFieldGEP( r_llvm_value, class_field, function_context );

			BuildEqualityCompareOperatorPart( class_members_ptr, function_context, l_member, r_member, class_field.t, false_basic_block, src_loc );
		}

		var LLVMValueRef false_value= LLVMConstInt( fundamental_llvm_types_.bool_, 0u64, LLVMBool::False );
		var LLVMValueRef true_value = LLVMConstInt( fundamental_llvm_types_.bool_, 1u64, LLVMBool::False );

		// True branch.
		LLVMBuildRet( function_context.llvm_ir_builder, true_value );

		// False branch.
		LLVMAppendExistingBasicBlock( function_context.llvm_function, false_basic_block );
		LLVMPositionBuilderAtEnd( function_context.llvm_ir_builder, false_basic_block );
		LLVMBuildRet( function_context.llvm_ir_builder, false_value );

		// Finish allocations block.
		LLVMBuildBr( function_context.alloca_ir_builder, function_context.function_basic_block );
	}
}

fn CodeBuilder::TryGenerateDestructorPrototype( mut this, ClassTypePtr& class_type )
{
	auto class_members_ptr= class_type.lock_imut().deref().members;
	auto class_members_lock= class_members_ptr.lock_imut();
	auto& class_members= class_members_lock.deref();

	// Destructors value should always exists and should always be NamesScopeFunctionsSet.
	auto destructors_ptr= class_members.GetThisScopeValue( KeywordToString( Keyword::destructor_ ) ).try_deref().Get</NamesScopeFunctionsSet/>();
	auto mut destructors_lock= destructors_ptr.try_lock_mut();
	auto &mut destructors= destructors_lock.deref().functions_set;

	if( !destructors.functions.empty() )
	{
		return; // user already specified destructor.
	}

	// Prepare function type.
	var FunctionType mut function_type
	{
		.return_type( void_type_ ),
		.return_value_type= ValueType::Value,
	};
	{
		var FunctionType::Param mut this_param
		{
			.t( Type( class_type ) ),
			.value_type= ValueType::ReferenceMut,
		};
		function_type.params.push_back( move(this_param) );
	}

	FillLLVMFunctionType( function_type );

	// Prepare function variable.
	var FunctionVariable mut function_variable
	{
		.is_this_call= true,
		.is_generated= true,
		.t= function_type,
	};

	unsafe
	{
		function_variable.llvm_function=
			LLVMAddFunction(
				module_,
				mangler_.deref().MangleFunction(
					class_members,
					KeywordToString( Keyword::destructor_ ),
					function_variable.t ).front(),
				function_variable.t.llvm_type );
	}
	AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex, "nonnull" );
	AddFunctionAttribute( function_variable.llvm_function, LLVMAttributeFirstParamIndex, "noalias" );

	destructors.functions.push_back( move(function_variable) );
}

fn CodeBuilder::TryGenerateDestructor( mut this, ClassTypePtr& class_type )
{
	auto class_members_ptr= class_type.lock_imut().deref().members;
	auto class_members_lock= class_members_ptr.lock_imut();
	auto& class_members= class_members_lock.deref();

	// Destructors value should always exists and should always be NamesScopeFunctionsSet.
	auto destructors_ptr= class_members.GetThisScopeValue( KeywordToString( Keyword::destructor_ ) ).try_deref().Get</NamesScopeFunctionsSet/>();
	auto mut destructors_lock= destructors_ptr.try_lock_mut();
	auto &mut destructors= destructors_lock.deref().functions_set;

	auto mut use_existing_destructor_variable= false;
	if( !destructors.functions.back().is_generated ) // Should be nonempty - contain user-specified destructor of prepared prototype.
	{
		return; // user already specified destructor.
	}

	// Generate body for previously generated prototype.
	var FunctionVariable &mut function_variable= destructors.functions.back();

	SetupFunctionParamsAndRetAttributes( function_variable );

	// Build code itself.

	var FunctionContext mut function_context(
		llvm_context_,
		function_variable.llvm_function,
		function_variable.t );

	auto mut this_llvm_value= LLVMValueRef::Null;
	unsafe{  this_llvm_value= LLVMGetParam( function_variable.llvm_function, 0u );  }

	BuildMembersDestructors( function_context, this_llvm_value, class_type );

	// Finish function - add remaining instructions.
	unsafe
	{
		LLVMBuildBr( function_context.alloca_ir_builder, function_context.function_basic_block );
		LLVMBuildRetVoid( function_context.llvm_ir_builder );
	}
}

fn CodeBuilder::BuildCopyConstructorPart( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, LLVMValueRef dst, LLVMValueRef src, Type& t, SrcLoc& src_loc )
{
	if(
		!t.GetFundamentalType().empty() ||
		!t.GetEnumType().empty() ||
		!t.GetRawPointerType().empty() ||
		!t.GetFunctionPointerType().empty() )
	{
		unsafe
		{
			if( t == void_type_ ) {}
			else if( LLVMTypeOf( dst ) == LLVMTypeOf( src ) )
			{
				// two pointers - do load-store
				auto mut value= LLVMBuildLoad( function_context.llvm_ir_builder, src, "\0"[0] );
				LLVMBuildStore( function_context.llvm_ir_builder, value, dst );
			}
			else if( LLVMTypeOf( dst ) == LLVMPointerType( LLVMTypeOf( src ), 0u ) )
			{
				// pointer and value in llvm register - do simple store
				LLVMBuildStore( function_context.llvm_ir_builder, src, dst );
			}
			else{ halt; }
		}
		return;
	}
	if_var( &array_type : t.GetArrayType() )
	{
		CB_GENERATE_LOOP(
			function_context,
			array_type.element_count,
			{
				var LLVMValueRef mut dst_element_value= zero_init, mut src_element_value= zero_init;

				unsafe
				{
					var [ LLVMValueRef, 2 ] mut indexes[ GetZeroGEPIndex(), counter_value ];
					dst_element_value= LLVMBuildGEP( function_context.llvm_ir_builder, dst, $<(indexes[0]), 2u, "[]\0"[0] );
					src_element_value= LLVMBuildGEP( function_context.llvm_ir_builder, src, $<(indexes[0]), 2u, "[]\0"[0] );
				}

				BuildCopyConstructorPart( names_scope, function_context, dst_element_value, src_element_value, array_type.element_type, src_loc );
			}
		)
		return;
	}
	if_var( &tuple_type : t.GetTupleType() )
	{
		for( auto mut i= 0s; i < tuple_type.element_types.size(); ++i )
		{
			auto dst_element_value= CreateTupleElementGEP( dst, i, function_context );
			auto src_element_value= CreateTupleElementGEP( src, i, function_context );
			BuildCopyConstructorPart( names_scope, function_context, dst_element_value, src_element_value, tuple_type.element_types[i], src_loc );
		}

		return;
	}
	if_var( &class_type : t.GetClassType() )
	{
		if( !class_type.lock_imut().deref().is_copy_constructible )
		{
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope, src_loc, Type(class_type) )
			return;
		}

		// Constructors value should always exists and should always be NamesScopeFunctionsSet.
		auto constructors_ptr= class_type.lock_imut().deref().members.lock_imut().deref().GetThisScopeValue( KeywordToString( Keyword::constructor_ ) ).try_deref().Get</NamesScopeFunctionsSet/>();

		// Search for copy constructor.
		foreach( &constructor_ : constructors_ptr.try_lock_imut().deref().functions_set.functions )
		{
			if( IsCopyConstructor( constructor_, class_type ) )
			{
				// SPRACHE_TODO - maybe disallow unsafe copy constructors?
				if( constructor_.t.is_unsafe && !function_context.is_in_unsafe_block )
				{
					REPORT_ERROR( UnsafeFunctionCallOutsideUnsafeBlock, names_scope, src_loc )
				}

				// Call it.
				unsafe
				{
					var[ LLVMValueRef, 2 ] mut llvm_args[ dst, src ];
					LLVMBuildCall( function_context.llvm_ir_builder, constructor_.llvm_function, $<(llvm_args[0]), 2u, "\0"[0] );
				}
				break;
			}
		}
		return;
	}

	halt; // Unhandled type kind
}

fn CodeBuilder::BuildCopyAssignmentOperatorPart( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, LLVMValueRef dst, LLVMValueRef src, Type& t, SrcLoc& src_loc )
{
	if(
		!t.GetFundamentalType().empty() ||
		!t.GetEnumType().empty() ||
		!t.GetRawPointerType().empty() ||
		!t.GetFunctionPointerType().empty() )
	{
		unsafe
		{
			if( t == void_type_ ) {}
			else if( LLVMTypeOf( dst ) == LLVMTypeOf( src ) )
			{
				// two pointers - do load-store
				auto mut value= LLVMBuildLoad( function_context.llvm_ir_builder, src, "\0"[0] );
				LLVMBuildStore( function_context.llvm_ir_builder, value, dst );
			}
			else if( LLVMTypeOf( dst ) == LLVMPointerType( LLVMTypeOf( src ), 0u ) )
			{
				// pointer and value in llvm register - do simple store
				LLVMBuildStore( function_context.llvm_ir_builder, src, dst );
			}
			else{ halt; }
		}
		return;
	}
	if_var( &array_type : t.GetArrayType() )
	{
		CB_GENERATE_LOOP(
			function_context,
			array_type.element_count,
			{
				var LLVMValueRef mut dst_element_value= zero_init, mut src_element_value= zero_init;

				unsafe
				{
					var [ LLVMValueRef, 2 ] mut indexes[ GetZeroGEPIndex(), counter_value ];
					dst_element_value= LLVMBuildGEP( function_context.llvm_ir_builder, dst, $<(indexes[0]), 2u, "[]\0"[0] );
					src_element_value= LLVMBuildGEP( function_context.llvm_ir_builder, src, $<(indexes[0]), 2u, "[]\0"[0] );
				}

				BuildCopyAssignmentOperatorPart( names_scope, function_context, dst_element_value, src_element_value, array_type.element_type, src_loc );
			}
		)
		return;
	}
	if_var( &tuple_type : t.GetTupleType() )
	{
		for( auto mut i= 0s; i < tuple_type.element_types.size(); ++i )
		{
			auto dst_element_value= CreateTupleElementGEP( dst, i, function_context );
			auto src_element_value= CreateTupleElementGEP( src, i, function_context );
			BuildCopyAssignmentOperatorPart( names_scope, function_context, dst_element_value, src_element_value, tuple_type.element_types[i], src_loc );
		}

		return;
	}
	if_var( &class_type : t.GetClassType() )
	{
		if( !class_type.lock_imut().deref().is_copy_assignable )
		{
			// TODO - maybe generate error here?
			return;
		}

		// Assignment operators value should always exists and should always be NamesScopeFunctionsSet.
		auto operators_ptr= class_type.lock_imut().deref().members.lock_imut().deref().GetThisScopeValue( OverloadedOperatorToString( OverloadedOperator::Assign ) ).try_deref().Get</NamesScopeFunctionsSet/>();

		// Search for copy assignment operator.
		foreach( &operator_ : operators_ptr.try_lock_imut().deref().functions_set.functions )
		{
			if( IsCopyAssignmentOperator( operator_, class_type ) )
			{
				// SPRACHE_TODO - maybe disallow unsafe copy assignment operators?
				if( operator_.t.is_unsafe && !function_context.is_in_unsafe_block )
				{
					REPORT_ERROR( UnsafeFunctionCallOutsideUnsafeBlock, names_scope, src_loc )
				}

				// Call it.
				unsafe
				{
					var[ LLVMValueRef, 2 ] mut llvm_args[ dst, src ];
					LLVMBuildCall( function_context.llvm_ir_builder, operator_.llvm_function, $<(llvm_args[0]), 2u, "\0"[0] );
				}
				break;
			}
		}
		return;
	}

	halt; // Unhandled type kind
}

fn CodeBuilder::BuildEqualityCompareOperatorPart( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, LLVMValueRef l_address, LLVMValueRef r_address, Type& t, LLVMBasicBlockRef false_basic_block, SrcLoc& src_loc )
{
	if(
		!t.GetFundamentalType().empty() ||
		!t.GetEnumType().empty() ||
		!t.GetRawPointerType().empty() ||
		!t.GetFunctionPointerType().empty() )
	{
		unsafe
		{
			if( t == void_type_ ) {}
			else
			{
				var LLVMValueRef l= LLVMBuildLoad( function_context.llvm_ir_builder, l_address, "\0"[0] );
				var LLVMValueRef r= LLVMBuildLoad( function_context.llvm_ir_builder, r_address, "\0"[0] );

				var LLVMTypeKind type_kind= LLVMGetTypeKind( t.GetLLVMType() );
				var bool is_float=
					type_kind == LLVMTypeKind::Half ||
					type_kind == LLVMTypeKind::Float ||
					type_kind == LLVMTypeKind::Double ||
					type_kind == LLVMTypeKind::X86_FP80 ||
					type_kind == LLVMTypeKind::P128 ||
					type_kind == LLVMTypeKind::PPC_FP128;

				var LLVMValueRef eq=
					select( is_float
						? LLVMBuildFCmp( function_context.llvm_ir_builder, LLVMRealPredicate::OEQ, l, r, "\0"[0] )
						: LLVMBuildICmp( function_context.llvm_ir_builder, LLVMIntPredicate::EQ, l, r, "\0"[0] ) );

				var LLVMBasicBlockRef next_bb= LLVMCreateBasicBlockInContext( llvm_context_, "\0"[0] );

				LLVMBuildCondBr( function_context.llvm_ir_builder, eq, next_bb, false_basic_block );

				LLVMAppendExistingBasicBlock( function_context.llvm_function, next_bb );
				LLVMPositionBuilderAtEnd( function_context.llvm_ir_builder, next_bb );
			}
		}
		return;
	}
	if_var( &array_type : t.GetArrayType() )
	{
		CB_GENERATE_LOOP(
			function_context,
			array_type.element_count,
			{
				var LLVMValueRef mut l= zero_init, mut r= zero_init;
				var [ LLVMValueRef, 2 ] mut indexes[ GetZeroGEPIndex(), counter_value ];

				unsafe
				{
					l= LLVMBuildGEP( function_context.llvm_ir_builder, l_address, $<(indexes[0]), 2u, "[]\0"[0] );
					r= LLVMBuildGEP( function_context.llvm_ir_builder, r_address, $<(indexes[0]), 2u, "[]\0"[0] );
				}

				BuildEqualityCompareOperatorPart( names_scope, function_context, l, r, array_type.element_type, false_basic_block, src_loc );
			}
		)
		return;
	}
	if_var( &tuple_type : t.GetTupleType() )
	{
		for( auto mut i= 0s; i < tuple_type.element_types.size(); ++i )
		{
			var LLVMValueRef l= CreateTupleElementGEP( l_address, i, function_context );
			var LLVMValueRef r= CreateTupleElementGEP( r_address, i, function_context );
			BuildEqualityCompareOperatorPart( names_scope, function_context, l, r, tuple_type.element_types[i], false_basic_block, src_loc );
		}

		return;
	}
	if_var( &class_type : t.GetClassType() )
	{
		if( !class_type.lock_imut().deref().is_equality_comparable )
		{
			REPORT_ERROR( OperationNotSupportedForThisType, names_scope, src_loc, Type(class_type) )
			return;
		}

		if_var( &operators_value : class_type.lock_imut().deref().members.lock_imut().deref().GetThisScopeValue( OverloadedOperatorToString( OverloadedOperator::CompareEqual ) ) )
		{
			auto operators_ptr= operators_value.Get</NamesScopeFunctionsSet/>();
			if( !operators_ptr.empty() )
			{
				// Search for "==" operator.
				foreach( &op_ : operators_ptr.try_lock_imut().deref().functions_set.functions )
				{
					if( IsEqualityCompareOperator( op_, class_type ) )
					{
						// SPRACHE_TODO - maybe disallow unsafe "=="?
						if( op_.t.is_unsafe && !function_context.is_in_unsafe_block )
						{
							REPORT_ERROR( UnsafeFunctionCallOutsideUnsafeBlock, names_scope, src_loc )
						}

						// Call it.
						unsafe
						{
							var[ LLVMValueRef, 2 ] mut llvm_args[ l_address, r_address ];
							var LLVMValueRef eq= LLVMBuildCall( function_context.llvm_ir_builder, op_.llvm_function, $<(llvm_args[0]), 2u, "\0"[0] );

							var LLVMBasicBlockRef next_bb= LLVMCreateBasicBlockInContext( llvm_context_, "\0"[0] );

							LLVMBuildCondBr( function_context.llvm_ir_builder, eq, next_bb, false_basic_block );

							LLVMAppendExistingBasicBlock( function_context.llvm_function, next_bb );
							LLVMPositionBuilderAtEnd( function_context.llvm_ir_builder, next_bb );
						}
						return;
					}
				}
			}
		}

		halt; // Operator not found - wtf?
	}

	halt; // Unhandled type kind
}

fn CodeBuilder::BuildDestructorPart( this, NamesScopePtr& names_scope, FunctionContext &mut function_context, LLVMValueRef value, Type& t, SrcLoc& src_loc )
{
	if_var( &array_type : t.GetArrayType() )
	{
		CB_GENERATE_LOOP(
			function_context,
			array_type.element_count,
			{
				auto mut element_value= LLVMValueRef::Null;

				unsafe
				{
					var [ LLVMValueRef, 2 ] mut indexes[ GetZeroGEPIndex(), counter_value ];
					element_value= LLVMBuildGEP( function_context.llvm_ir_builder, value, $<(indexes[0]), 2u, "[]\0"[0] );
				}

				BuildDestructorPart( names_scope, function_context, element_value, array_type.element_type, src_loc );
			}
		)
	}
	if_var( &tuple_type : t.GetTupleType() )
	{
		for( auto mut i= 0s; i < tuple_type.element_types.size(); ++i )
		{
			var LLVMValueRef element_value= CreateTupleElementGEP( value, i, function_context );
			BuildDestructorPart( names_scope, function_context, element_value, tuple_type.element_types[i], src_loc );
		}
	}
	if_var( &class_type : t.GetClassType() )
	{
		// Destructors value should always exists and should always be NamesScopeFunctionsSet.
		auto destructors_ptr= class_type.lock_imut().deref().members.lock_imut().deref().GetThisScopeValue( KeywordToString( Keyword::destructor_ ) ).try_deref().Get</NamesScopeFunctionsSet/>();

		// Destructors set should contain exactly one function.
		auto destructors_lock= destructors_ptr.try_lock_imut();
		auto& destructor_= destructors_lock.deref().functions_set.functions.front();

		// SPRACHE_TODO - maybe disallow unsafe destructors?
		if( destructor_.t.is_unsafe && !function_context.is_in_unsafe_block )
		{
			REPORT_ERROR( UnsafeFunctionCallOutsideUnsafeBlock, names_scope, src_loc )
		}

		// Call it.
		unsafe
		{
			auto mut v= value;
			LLVMBuildCall( function_context.llvm_ir_builder, destructor_.llvm_function, $<(v), 1u, "\0"[0] );
		}
	}
}

fn CodeBuilder::BuildMembersDestructors( this, FunctionContext &mut function_context, LLVMValueRef value, ClassTypePtr& class_type )
{
	auto class_members_ptr= class_type.lock_imut().deref().members;
	auto class_members_lock= class_members_ptr.lock_imut();
	auto& class_members= class_members_lock.deref();

	var SrcLoc mut src_loc;
	if_var( &syntax_element : class_type.lock_imut().deref().syntax_element )
	{
		src_loc= syntax_element.src_loc;
	}

	foreach( &parent : class_type.lock_imut().deref().parents )
	{
		auto parent_llvm_value= CreateParentFieldGEP( value, parent, function_context );
		BuildDestructorPart( class_members_ptr, function_context, parent_llvm_value, parent.class_, src_loc );
	}

	foreach( &field_pair : class_type.lock_imut().deref().fields_order )
	{
		auto field_lock= field_pair[1].lock_imut();
		var ClassField& class_field= field_lock.deref();

		if( class_field.index == ~0s ){ continue; } // May be in case of error
		if( class_field.is_reference ) { continue; }

		auto field_llvm_value= CreateFieldGEP( value, class_field, function_context );

		BuildDestructorPart( class_members_ptr, function_context, field_llvm_value, class_field.t, src_loc ); // TODO - maybe use field src_loc instead?
	}
}

} // namespace U1
