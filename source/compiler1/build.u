import "/enum_string_conversions.u"
import "/file_helpers.u"
import "/path_utils.u"
import "/build_system.uh"

fn GetPackageInfo( BK::BuildSystemInterface &mut build_system_interface ) : ust::optional</BK::PackageInfo/>
{
	var ust::filesystem_path source_dir= build_system_interface.GetCurrentPackageSourceDirectory();

	auto mut keywords_list_res = ust::read_file_to_string( ust::path::join( source_dir, "..", "keywords_list.txt" ) );
	if( keywords_list_res.is_error() )
	{
		build_system_interface.LogError( ust::concat( "Failed to load keywords list file: ", ust::enum_to_string( keywords_list_res.try_deref_error() ) ) );
		return ust::null_optional;
	}

	auto mut errors_list_res = ust::read_file_to_string( ust::path::join( source_dir, "..", "errors_list.hpp" ) );
	if( errors_list_res.is_error() )
	{
		build_system_interface.LogError( ust::concat( "Failed to load errors list file: ", ust::enum_to_string( errors_list_res.try_deref_error() ) ) );
		return ust::null_optional;
	}

	var ust::string8 keywords_list_file_contents= move(keywords_list_res).try_take();
	var ust::string8 errors_list_file_contents= move(errors_list_res).try_take();

	auto& lib_name= "CodeBuilderLib";
	var ust::filesystem_path generated_sources_directory= build_system_interface.GetCurrentPackageBuildTargetGeneratedSourcesDirectory( lib_name );

	auto& keywords_file= "keywords.uh";
	var ust::filesystem_path mut keywords_generated_file= ust::concat( generated_sources_directory, "/", keywords_file );

	var BK::CustomBuildStep mut keywords_step
	{
		.output_files= ust::make_array( keywords_generated_file ),
		.command= BK::CustomBuildStep::GenerateFileCommand
		{
			.destination_path= move(keywords_generated_file),
			.contents= CreateKeywordsHeaderFileContents( keywords_list_file_contents )
		},
		.comment= keywords_file,
	};

	auto& code_builder_error_code_file= "code_builder_error_code.uh";
	var ust::filesystem_path mut code_builder_error_code_generated_file=
		ust::path::join( generated_sources_directory, code_builder_error_code_file );

	var BK::CustomBuildStep mut code_builder_error_code_step
	{
		.output_files= ust::make_array( code_builder_error_code_generated_file ),
		.command= BK::CustomBuildStep::GenerateFileCommand
		{
			.destination_path= move(code_builder_error_code_generated_file),
			.contents= CreateCodeBuilderErrorCodeFileContents( errors_list_file_contents )
		},
		.comment= code_builder_error_code_file,
	};

	var BK::BuildTarget mut code_builder_lib_build_target
	{
		.target_type = BK::BuildTargetType::ObjectFile,
		.name= lib_name,
		.public_include_directories= ust::make_array</ust::filesystem_path/>( "imports" ),
		.generated_private_header_files= ust::make_array</ust::filesystem_path/>( keywords_file, code_builder_error_code_file ),
	};

	var [ ust::filesystem_path_view, 40 ] source_files
	[
		"code_builder_lib/cb_block_elements.u",
		"code_builder_lib/cb_coroutines.u",
		"code_builder_lib/cb_expressions.u",
		"code_builder_lib/cb_global_things_build.u",
		"code_builder_lib/cb_initializers.u",
		"code_builder_lib/cb_lambdas.u",
		"code_builder_lib/cb_method_gen.u",
		"code_builder_lib/cb_mixins.u",
		"code_builder_lib/cb_names_scope_build.u",
		"code_builder_lib/cb_names_scope_fill.u",
		"code_builder_lib/cb_names_scope_merge.u",
		"code_builder_lib/cb_non_sync.u",
		"code_builder_lib/cb_overloading_resolution.u",
		"code_builder_lib/cb_reference_checking.u",
		"code_builder_lib/cb_reference_notation.u",
		"code_builder_lib/cb_resolve.u",
		"code_builder_lib/cb_templates.u",
		"code_builder_lib/cb_typeinfo.u",
		"code_builder_lib/cb_types.u",
		"code_builder_lib/cb_virtual.u",
		"code_builder_lib/code_builder.u",
		"code_builder_lib/constexpr_function_evaluator.u",
		"code_builder_lib/debug_info_builder.u",
		"code_builder_lib/error_reporting.u",
		"code_builder_lib/function_context.u",
		"code_builder_lib/lang_types.u",
		"code_builder_lib/long_stable_hash_wrapper.u",
		"code_builder_lib/mangling_itanium_abi.u",
		"code_builder_lib/mangling_msvc.u",
		"code_builder_lib/references_graph.u",
		"code_builder_lib/structs_combined.u",
		"code_builder_lib/tbaa_metadata_builder.u",
		"launchers_common/funcs_u.u",
		"lex_synt_lib/keywords.u",
		"lex_synt_lib/lexical_analyzer.u",
		"lex_synt_lib/operators.u",
		"lex_synt_lib/source_graph.u",
		"lex_synt_lib/src_loc.u",
		"lex_synt_lib/syntax_analyzer.u",
		"lex_synt_lib/syntax_elements.u",
	];

	foreach( &f : source_files )
	{
		code_builder_lib_build_target.source_files.push_back( ust::path::join( "src", f ) );
	}

	return BK::PackageInfo
	{
		.build_targets= ust::make_array( move(code_builder_lib_build_target) ),
		.custom_build_steps= ust::make_array( move(keywords_step), move(code_builder_error_code_step) ),
	};
}

fn CreateKeywordsHeaderFileContents( ust::string_view8 keywords_list_file_contents ) : ust::string8
{
	var ust::string8 mut contents;
	contents+= "import \"/string.u\"\n\n";
	contents+= "namespace U1\n{\n\n";

	contents+= "enum Keyword\n{\n";

	foreach( &keyword : GetKeywordsList( keywords_list_file_contents ) )
	{
		contents+= "\t";
		contents+= keyword;
		contents+= "_";
		contents+= ",\n";
	}

	contents+= "}\n\n";

	contents+= "fn IsKeyword( ust::string_view8& str ) : bool;\n";
	contents+= "fn KeywordToString( Keyword k ) : ust::string_view8;\n\n";

	contents+= "} // namespace U1\n";

	return contents;
}

fn GetKeywordsList( ust::string_view8 keywords_list ) : ust::vector</ust::string8/>
{
	var ust::vector</ust::string8/> mut out_keywords;

	var size_type mut word_start= 0s;
	for( auto mut i= 0s; i < keywords_list.size(); ++i )
	{
		var char8 c= keywords_list[i];
		if( c == '\n' || c == '\r' )
		{
			if( i - word_start > 1s )
			{
				out_keywords.push_back( keywords_list.subrange( word_start, i ) );
			}
			word_start= i + 1s;
		}
	}
	if( keywords_list.size() - word_start > 1s )
	{
		out_keywords.push_back( keywords_list.subrange_start( word_start ) );
	}

	return out_keywords;
}

fn CreateCodeBuilderErrorCodeFileContents( ust::string_view8 errors_list_file_contents ) : ust::string8
{
	auto errors_list= GetCodeBuilderErrors( errors_list_file_contents );

	var ust::string8 mut contents;
	contents+= "import \"/string.u\"\n";
	contents+= "\n";
	contents+= "namespace U1\n{\n\n";
	contents+= "enum CodeBuilderErrorCode\n{\n";

	foreach( &error : errors_list )
	{
		contents+= "\t";
		contents+= error.code;
		contents+= ",\n";
	}

	contents+= "}\n\n";

	contents+= "fn GetErrorMessagePattern( CodeBuilderErrorCode e ) : ust::string_view8\n";
	contents+= "{\n";
	contents+= "\tswitch( e )\n";
	contents+= "\t{\n";

	foreach( &error : errors_list )
	{
		contents+= "\tCodeBuilderErrorCode::";
		contents+= error.code;
		contents+= " -> { return ";
		contents+= MakeStringLiteral( error.message );
		contents+= "; },\n";
	}

	contents+= "\t}\n";
	contents+= "}\n\n";

	contents+= "} // namespace U1\n";

	return contents;
}

struct CodeBuilderError
{
	ust::string8 code;
	ust::string8 message;
}

fn GetCodeBuilderErrors( ust::string_view8 mut file_contents ) : ust::vector</CodeBuilderError/>
{
	var ust::vector</CodeBuilderError/> mut out_errors;

	loop
	{
		auto mut e= ParseNextCodeBuilderError( file_contents );
		if( e.empty() )
		{
			break;
		}
		out_errors.push_back( e.try_take() );
	}

	return out_errors;
}

fn ParseNextCodeBuilderError( ust::string_view8 &mut s ) : ust::optional</CodeBuilderError/>
{
	SkipWhitespaceAndCPPComments( s );

	var ust::string_view8 start_token= "PROCESS_ERROR";
	while( !s.empty() )
	{
		if( s.starts_with( start_token ) )
		{
			s= s.subrange_start( start_token.size() );
			break;
		}
		s.drop_front();
	}

	SkipWhitespaceAndCPPComments( s );

	if( s.empty() || s.front() != '(' )
	{
		return ust::null_optional;
	}
	s.drop_front();

	SkipWhitespaceAndCPPComments( s );

	auto mut code= ParseCPPIdentifier( s );
	if( code == ust::null_optional )
	{
		return ust::null_optional;
	}

	SkipWhitespaceAndCPPComments( s );

	if( s.empty() || s.front() != ',' )
	{
		return ust::null_optional;
	}
	s.drop_front();

	SkipWhitespaceAndCPPComments( s );

	auto mut message= ParseCPPString( s );
	if( message.empty() )
	{
		return ust::null_optional;
	}

	return CodeBuilderError{ .code= code.try_take(), .message= message.try_take() };
}

// Parse C++-like identifier.
fn ParseCPPIdentifier( ust::string_view8 &mut s ) : ust::optional</ust::string8/>
{
	var ust::string8 mut res;

	if( s.empty() || !IsCPPIdentifierStartChar( s.front() ) )
	{
		return ust::null_optional;
	}
	res.push_back( s.drop_and_get_front() );

	while( !s.empty() )
	{
		var char8 c= s.front();
		if( IsCPPIdentifierChar( c ) )
		{
			res.push_back(c);
			s.drop_front();
		}
		else
		{
			break;
		}
	}

	return res;
}

fn IsCPPIdentifierStartChar( char8 c ) : bool
{
	return ( c >= 'a' && c <= 'z' ) || ( c >= 'A' && c <= 'Z' );
}

fn IsCPPIdentifierChar( char8 c ) : bool
{
	return IsCPPIdentifierStartChar( c ) || ( c >= '0' && c <= '9' );
}

// Parse C++-like string syntax.
fn ParseCPPString( ust::string_view8 &mut s ) : ust::optional</ust::string8/>
{
	if( s.empty() || s.front() != '"' )
	{
		return ust::null_optional;
	}
	s.drop_front();

	var ust::string8 mut res;
	while( !s.empty() )
	{
		var char8 c= s.front();
		if( c == '"' )
		{
			s.drop_front();
			break;
		}
		else if( c == '\\' )
		{
			s.drop_front();
			if( s.empty() )
			{
				break;
			}
			var char8 c2= s.drop_and_get_front();
			switch( c2 )
			{
				'"' -> { res.push_back( '"' ); },
				'\\' -> { res.push_back( '\\' ); },
				't' -> { res.push_back( '\t' ); },
				'n' -> { res.push_back( '\n' ); },
				'r' -> { res.push_back( '\r' ); },
				'f' -> { res.push_back( '\f' ); },
				'b' -> { res.push_back( '\b' ); },
				default -> { res.push_back( c2 ); },
			}
		}
		else
		{
			res.push_back( c );
			s.drop_front();
		}
	}

	return res;
}

fn SkipWhitespaceAndCPPComments( ust::string_view8 &mut s )
{
	loop
	{
		SkipWhitespace( s );

		if( s.size() >= 2s )
		{
			if( s[0s] == '/' && s[1s] == '/' )
			{
				s.drop_front();
				s.drop_front();
				while( !s.empty() && s.front() != '\n' )
				{
					s.drop_front();
				}
			}
			else
			{
				break;
			}
		}
		else
		{
			break;
		}
	}
}

fn SkipWhitespace( ust::string_view8 &mut s )
{
	while( !s.empty() )
	{
		var char8 c= s.front();
		if( c == ' ' || c == '\t' || c == '\n' || c == '\r' )
		{
			s.drop_front();
		}
		else
		{
			break;
		}
	}
}

// Makes Ü string literal from given sting - adds "", escapes symbols if necessary.
fn MakeStringLiteral( ust::string_view8 s ) : ust::string8
{
	var ust::string8 mut res;
	res.push_back( '"' );

	foreach( c : s )
	{
		switch( c )
		{
			'"' -> { res+= "\\\""; },
			'\\' -> { res+= "\\\\"; },
			'\n' -> { res+= "\\n"; },
			'\r' -> { res+= "\\r"; },
			'\t' -> { res+= "\\t"; },
			'\f' -> { res+= "\\f"; },
			'\b' -> { res+= "\\b"; },
			'\0' -> { res+= "\\0"; },
			default -> { res.push_back(c); },
		}
	}

	res.push_back( '"' );

	return res;
}
