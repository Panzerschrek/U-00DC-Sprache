if( ${CMAKE_BUILD_TYPE} STREQUAL Debug )
	set( SPRACHE_COMPILER_OPT_OPTIONS -O0 -g )
else()
	set( SPRACHE_COMPILER_OPT_OPTIONS -O2 )
endif()

# Build rule for "Ãœ" files.
function( CompileUSource u_source_file out_object )
	file( RELATIVE_PATH current_subdir ${CMAKE_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR} )
	file( RELATIVE_PATH u_source_file_relative ${CMAKE_CURRENT_SOURCE_DIR} ${u_source_file} )
	add_custom_command(
		OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${u_source_file_relative}.bc
		DEPENDS ${u_source_file} Compiler${CURRENT_COMPILER_GENERATION}
		COMMAND
			Compiler${CURRENT_COMPILER_GENERATION}
			${u_source_file}
			-filetype=bc
			-o ${current_subdir}/${u_source_file_relative}.bc
			-MF ${CMAKE_CURRENT_BINARY_DIR}/${u_source_file_relative}.d
			${SPRACHE_COMPILER_OPT_OPTIONS} ${SPRACHE_COMPILER_PIC_OPTIONS}
			--include-dir ${CMAKE_CURRENT_SOURCE_DIR}/../ustlib/
			--include-dir ${CMAKE_CURRENT_SOURCE_DIR}/
			--include-dir ${CMAKE_CURRENT_BINARY_DIR}/
		DEPFILE ${CMAKE_CURRENT_BINARY_DIR}/${u_source_file_relative}.d
		WORKING_DIRECTORY ${CMAKE_BINARY_DIR} # Hack! cmake produces ninja build file with content like "compiler1/lex_syn_lib/file_pos.u.bc:", but launches custom command in current binary directory
		COMMENT "Building ${current_subdir}/${u_source_file_relative}.bc"
		)
	set( ${out_object} ${u_source_file_relative}.bc PARENT_SCOPE )
endfunction()

# Returns list of objects in ${out_objects}
function( CompileUSources u_source_files out_objects )
	foreach( source ${${u_source_files}} )
		CompileUSource( ${source} out_object )
		list( APPEND out_objects_local ${out_object} )
	endforeach()
	set( ${out_objects} ${out_objects_local} PARENT_SCOPE )
endfunction()

#
# CodeBuilderErrors
#
file( READ ../errors_list.hpp ERRORS_LIST_CONTENT )

set( ERRORS_LIST_REGEXP "PROCESS_ERROR\\( ([A-Za-z]+), (\\\"([^\\\"]|(\\\\\")|(\\\\\\n))+\\\") \\)" )

string(
	REGEX REPLACE
	${ERRORS_LIST_REGEXP}
	"	\\1,"
	CODE_BUILDER_ERRORS_LIST
	${ERRORS_LIST_CONTENT} )

string(
	REGEX REPLACE
	${ERRORS_LIST_REGEXP}
	"	if( e == CodeBuilderErrorCode::\\1 ) { return ust::array_view_imut</ char8 />(\\2); }"
	ERROR_CODE_TO_STRING_LIST
	${ERRORS_LIST_CONTENT} )

configure_file( code_builder_lib/code_builder_errors.uh.in ${CMAKE_CURRENT_BINARY_DIR}/code_builder_errors.uh )

#
# CodeBuilderLib
#

# Combine together lexical/syntaxis analyzer lib and code builder to speed up build.
# Add also some files, needed by tests

string(
	REGEX REPLACE
	${KEYWORDS_LIST_REGEXP}
	"	\\0_,"
	KEYWORDS_LIST
	${KEYWORDS_LIST_CONTENT} )

configure_file( lex_synt_lib/keywords.uh.in ${CMAKE_CURRENT_BINARY_DIR}/keywords.uh )

string( LENGTH ${BUILT_IN_MACROS_FILE_CONTENT} BUILT_IN_MACROS_UH_FILE_SIZE )
string( REGEX REPLACE "([a-fA-F0-9])([a-fA-F0-9])" "char8(0x\\1\\2),\n" HEX_LIST ${BUILT_IN_MACROS_FILE_CONTENT} )
set( BUILT_IN_MACROS_UH_FILE_CONTENT "var[ char8, ${BUILT_IN_MACROS_UH_FILE_SIZE} / 2 ] c_built_in_macros[\n${HEX_LIST}]\;" )
file( GENERATE OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/built_in_macros.uh CONTENT ${BUILT_IN_MACROS_UH_FILE_CONTENT} )

file( GLOB LEX_SYNT_LIB_HEADERS "lex_synt_lib/*.uh" )
file( GLOB LEX_SYNT_LIB_SOURCES "lex_synt_lib/*.u" )
set( LEX_SYNT_LIB_SOURCES_GENERATED
	${CMAKE_CURRENT_BINARY_DIR}/keywords.uh
	${CMAKE_CURRENT_BINARY_DIR}/built_in_macros.uh
	)
CompileUSources( LEX_SYNT_LIB_SOURCES LEX_SYNT_LIB_OBJECTS )

file( GLOB CODE_BUILDER_LIB_HEADERS "code_builder_lib/*.uh" )
file( GLOB CODE_BUILDER_LIB_SOURCES "code_builder_lib/*.u" )
file( GLOB CODE_BUILDER_LIB_CPP_SOURCES "code_builder_lib/*.cpp" )
set( CODE_BUILDER_LIB_HEADERS ${CODE_BUILDER_LIB_HEADERS} ${CMAKE_CURRENT_BINARY_DIR}/code_builder_errors.uh )
CompileUSources( CODE_BUILDER_LIB_SOURCES CODE_BUILDER_LIB_OBJECTS )

file( GLOB LAUNCHERS_COMMON_HEADERS "launchers_common/*.uh" )
file( GLOB LAUNCHERS_COMMON_SOURCES "launchers_common/*.u" )
file( GLOB LAUNCHERS_COMMON_CPP_SOURCES "launchers_common/*.cpp" )
file( GLOB LAUNCHERS_COMMON_CPP_HEADERS "launchers_common/*.hpp" )
CompileUSources( LAUNCHERS_COMMON_SOURCES LAUNCHERS_COMMON_OBJECTS )

add_custom_command(
	OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/CodeBuilderLib_u.o
	DEPENDS ${LEX_SYNT_LIB_OBJECTS} ${CODE_BUILDER_LIB_OBJECTS} ${LAUNCHERS_COMMON_OBJECTS}
	COMMAND
		Compiler${CURRENT_COMPILER_GENERATION}
		${LEX_SYNT_LIB_OBJECTS} ${CODE_BUILDER_LIB_OBJECTS} ${LAUNCHERS_COMMON_OBJECTS}
		-filetype=obj
		-o ${CMAKE_CURRENT_BINARY_DIR}/CodeBuilderLib_u.o
		${SPRACHE_COMPILER_OPT_OPTIONS} ${SPRACHE_COMPILER_PIC_OPTIONS}
	WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
	)

add_library(
	CodeBuilderLib${NEXT_COMPILER_GENERATION}
		${LEX_SYNT_LIB_HEADERS}
		${LEX_SYNT_LIB_SOURCES}
		${LEX_SYNT_LIB_SOURCES_GENERATED}
		${CODE_BUILDER_LIB_CPP_SOURCES}
		${CODE_BUILDER_LIB_HEADERS}
		${CODE_BUILDER_LIB_SOURCES}
		${LAUNCHERS_COMMON_CPP_SOURCES}
		${LAUNCHERS_COMMON_CPP_HEADERS}
		${LAUNCHERS_COMMON_SOURCES}
		${LAUNCHERS_COMMON_HEADERS}
		${CMAKE_CURRENT_BINARY_DIR}/CodeBuilderLib_u.o
	)
target_link_libraries( CodeBuilderLib${NEXT_COMPILER_GENERATION} LexSyntLibCommon CodeBuilderLibCommon )

#
# Compiler
#
if( U_BUILD_COMPILER )
	file( GLOB COMPILER_SOURCES "compiler/*" )

	add_executable( Compiler${NEXT_COMPILER_GENERATION} ${COMPILER_SOURCES} )
	target_link_libraries( Compiler${NEXT_COMPILER_GENERATION} CompilersCommonLib SpracheVersion CodeBuilderLib${NEXT_COMPILER_GENERATION} )

	target_compile_definitions( Compiler${NEXT_COMPILER_GENERATION} PRIVATE "-DU_COMPILER_GENERATION=${NEXT_COMPILER_GENERATION}" )
endif()

#
# Tests
#
if( U_BUILD_TESTS )

	add_executable( Tests${NEXT_COMPILER_GENERATION} tests/cpp_tests_launcher.cpp )

	target_link_libraries(
		Tests${NEXT_COMPILER_GENERATION}
		PRIVATE
			CodeBuilderLib${NEXT_COMPILER_GENERATION}
			${TESTS_LIB_WRAPPED}
		)

	if( MSVC )
		set_target_properties( Tests${NEXT_COMPILER_GENERATION} PROPERTIES LINK_FLAGS /WHOLEARCHIVE:TestsLib )
	endif()

	add_custom_command( TARGET Tests${NEXT_COMPILER_GENERATION} POST_BUILD COMMAND Tests${NEXT_COMPILER_GENERATION} )

endif()

#
# PyTests
#
if( U_BUILD_PY_TESTS )
	add_library( PyTestsLib${NEXT_COMPILER_GENERATION} SHARED py_tests_lib/py_tests_lib.cpp )
	target_link_libraries(
		PyTestsLib${NEXT_COMPILER_GENERATION}
			PRIVATE
				CodeBuilderLib${NEXT_COMPILER_GENERATION}
				CodeBuilderLibCommon
				${LLVM_LIBS_FOR_TESTS}
				${PYTHON_LIBRARIES}
			)

	target_include_directories( PyTestsLib${NEXT_COMPILER_GENERATION} PRIVATE ${PYTHON_INCLUDE_DIRS} )

	# Set proper name for result dynamic library.
	if( WIN32 )
		set_target_properties( PyTestsLib${NEXT_COMPILER_GENERATION}
			PROPERTIES OUTPUT_NAME sprache_compiler_tests_py_lib.pyd PREFIX "" SUFFIX "" )
	else()
		set_target_properties( PyTestsLib${NEXT_COMPILER_GENERATION}
			PROPERTIES OUTPUT_NAME sprache_compiler_tests_py_lib.so PREFIX "" SUFFIX "" )
	endif()

	file( GLOB PY_TESTS_SOURCES "../tests/py_tests/*.py" ) # Add all python files to sources list of target.

	# Run result test.
	add_custom_target(
		PyTestsRun${NEXT_COMPILER_GENERATION} ALL
		COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CMAKE_CURRENT_BINARY_DIR} ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/../tests/py_tests/py_tests.py
		DEPENDS PyTestsLib${NEXT_COMPILER_GENERATION}
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		SOURCES ${PY_TESTS_SOURCES} )

endif()
