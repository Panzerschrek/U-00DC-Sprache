import "/string.u"

namespace U
{

// WARNING! If this changed, "keywords_list.hpp" must be changed too!
// Use "_" postfix to prevent usage of keyword as name
enum Keyword : u8
{
	// Common keywords.
	fn_,
	op_,
	var_,
	auto_,
	lock_temps_,
	return_,
	while_,
	break_,
	continue_,
	if_,
	static_if_,
	enable_if_,
	else_,
	move_,
	take_,
	select_,

	tup_,
	struct_,
	class_,
	final_,
	polymorph_,
	interface_,
	abstract_,
	shared_,
	ordered_,

	nomangle_,
	virtual_,
	override_,
	pure_,

	namespace_,

	public_,
	private_,
	protected_,

	// Fundamental types names.
	void_,
	bool_,
	i8_,
	u8_,
	i16_,
	u16_,
	i32_,
	u32_,
	i64_,
	u64_,
	i128_,
	u128_,
	f32_,
	f64_,
	char8_,
	char16_,
	char32_,
	size_type_,

	// Boolean constants.
	true_,
	false_,

	// Mutability modifiers.
	mut_,
	imut_,
	constexpr_,

	zero_init_,
	uninitialized_,

	this_,
	base_,
	constructor_,
	destructor_,
	conversion_constructor_,

	static_assert_,
	halt_,
	safe_,
	unsafe_,

	type_,
	typeinfo_,
	typeof_,
	template_,
	enum_,

	cast_ref_,
	cast_ref_unsafe_,
	cast_imut_,
	cast_mut_,

	import_,

	default_,
	delete_,

	// Reserved keywords for future usage.
	for_,
	do_,
	switch_,
	case_,
	typename_,
	const_,
	lambda_,
	static_,
	package_,
	module_,
	export_,

	i256_,
	u256_,
	i512_,
	u512_,
	i1024_,
	u1024_,
	i2048_,
	u2048_,
	i4096_,
	u4096_,
}

fn IsKeyword( ust::string8& str ) : bool;
fn KeywordToString( Keyword k ) : ust::array_view_imut</ char8 />;

} // namespace U
