import "syntax_elements.uh"

namespace U1
{

namespace Synt
{

fn GetSrcLoc( Initializer& initializer ) : SrcLoc
{
	variant_visit( &el : initializer )
	{
		static_if( ust::is_same_type</ typeof(el), EmptyVariant />() )
		{
			return SrcLoc();
		}
		else if( ust::is_same_type</ typeof(el), Expression />() )
		{
			return GetSrcLoc(el);
		}
		else
		{
			return el.src_loc;
		}
	}
	halt;
}

fn GetSrcLoc( Expression& expression ) : SrcLoc
{
	variant_visit( &el : expression )
	{
		static_if( ust::is_same_type</ typeof(el), EmptyVariant />() )
		{
			return SrcLoc();
		}
		else if( ust::is_same_type</ typeof(el), ust::box</ArrayType/> />() )
		{
			return el.deref().src_loc;
		}
		else if( ust::is_same_type</ typeof(el), ust::box</FunctionType/> />() )
		{
			return el.deref().src_loc;
		}
		else if( ust::is_same_type</ typeof(el), ust::box</TupleType/> />() )
		{
			return el.deref().src_loc;
		}
		else if( ust::is_same_type</ typeof(el), ust::box</RawPointerType/> />() )
		{
			return el.deref().src_loc;
		}
		else
		{
			return el.src_loc;
		}
	}
	halt;
}

fn GetSrcLoc( BlockElement& block_element ) : SrcLoc
{
	variant_visit( &el : block_element )
	{
		static_if( ust::is_same_type</ typeof(el), Expression />() )
		{
			return GetSrcLoc(el);
		}
		else if( ust::is_same_type</ typeof(el), ust::box</Block/> />() )
		{
			return el.deref().src_loc;
		}
		else
		{
			return el.src_loc;
		}
	}
	halt;
}

} // namespace Synt

} // namespace U1
