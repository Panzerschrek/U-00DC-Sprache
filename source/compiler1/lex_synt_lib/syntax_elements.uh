import "/box.u"
import "/box_nullable.u"
import "/optional.u"
import "/shared/shared_ptr_final.u"
import "/string.u"
import "/variant.u"
import "/vector.u"
import "lexical_analyzer.uh"
import "operators.uh"


namespace U
{

namespace Synt
{

enum MutabilityModifier : u8
{
	None,
	Mutable,
	Immutable,
	Constexpr,
}

enum ReferenceModifier : u8
{
	None,
	Reference,
}

struct EmptyVariant{} // used as stub

struct ComplexName
{
	FilePos file_pos;
	// TODO - make really comples
	ust::string8 name;
}

struct NumericConstant
{
	FilePos file_pos;
	NumberLexemData num= zero_init;
}

struct BooleanConstant
{
	FilePos file_pos;
	bool value;
}

struct BinaryOperator
{
	ust::box</Expression/> l;
	ust::box</Expression/> r;
	BinaryOperatorType operator;
}

struct BracketExpression
{
	ust::box</Expression/> expr;
}

type Expression= ust::variant</ tup[
	EmptyVariant,
	NumericConstant,
	BooleanConstant,
	ComplexName,
	BinaryOperator,
	BracketExpression
	] />;

struct FunctionType
{
	struct Arg
	{
		FilePos file_pos;
		TypeName arg_type;
		ReferenceModifier reference_modifier= ReferenceModifier::None;
		MutabilityModifier mutability_modifier= MutabilityModifier::None;
		ust::string8 name;
	}
	ust::vector</Arg/> args;
	ust::optional</TypeName/> return_type; // Empty means "void"
}

type TypeName= ust::variant</ tup[
	ComplexName,
	ust::box</FunctionType/>
	] />;

type Initializer= ust::variant</ tup [
	EmptyVariant,
	Expression
	] />;

struct Block
{
	FilePos file_pos;
	FilePos end_file_pos;
	ust::vector</BlockElement/> elements;
}

struct VariablesDeclaration
{
	struct VariableEntry
	{
		FilePos file_pos;
		ReferenceModifier reference_modifier= ReferenceModifier::None;
		MutabilityModifier mutability_modifier= MutabilityModifier::None;
		ust::string8 name;
		Initializer initializer;
	}

	FilePos file_pos;
	TypeName t;
	ust::vector</VariableEntry/> variables;
}

struct AutoVariableDeclaration
{
	FilePos file_pos;
	ReferenceModifier reference_modifier= ReferenceModifier::None;
	MutabilityModifier mutability_modifier= MutabilityModifier::None;
	ust::string8 name;
	Expression initializer_expression;
}

struct ReturnOperator
{
	Expression expr;
}

struct AssignmentOperator
{
	FilePos file_pos;
	Expression l;
	Expression r;
}

struct IfOperator
{
	struct Branch
	{
		FilePos file_pos;
		// Condition - EmptyVariant for last if.
		Expression condition;
		ust::box</Block/> block;
	}

	FilePos file_pos;
	FilePos end_file_pos;
	ust::vector</Branch/> branches;
}

struct WhileOperator
{
	FilePos file_pos;
	Expression condition;
	ust::box</Block/> block;
}

struct BreakOperator
{
	FilePos file_pos;
}

struct ContinueOperator
{
	FilePos file_pos;
}

type BlockElement = ust::variant</ tup[
	ust::box</Block/>,
	VariablesDeclaration,
	AutoVariableDeclaration,
	ReturnOperator,
	AssignmentOperator,
	Expression,
	IfOperator,
	WhileOperator,
	BreakOperator,
	ContinueOperator
	] />;

struct Function
{
	FilePos file_pos;
	ust::string8 name;
	FunctionType function_type;
	ust::box_nullable</Block/> block; // null for prototype
}

type ProgramElement= ust::variant</ tup[
	ust::shared_ptr_final</Function/>
	] />;

type ProgramElements= ust::vector</ProgramElement/>;

} // namespace Synt

} // namespace U
