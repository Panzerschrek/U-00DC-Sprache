import "/box.u"
import "/box_nullable.u"
import "/optional.u"
import "/shared/shared_ptr_final.u"
import "/string.u"
import "/variant.u"
import "/vector.u"
import "lexical_analyzer.uh"
import "operators.uh"


namespace U1
{

namespace Synt
{

enum MutabilityModifier : u8
{
	None,
	Mutable,
	Immutable,
	Constexpr,
}

enum ReferenceModifier : u8
{
	None,
	Reference,
}

struct EmptyVariant{} // used as stub

type TemplateArgs= ust::vector</Expression/>;

struct Typeof
{
	ust::box</Expression/> expr;
}

struct ComplexName
{
	SrcLoc file_pos;

	ust::variant</ tup[
		EmptyVariant, // for name, started with ::
		ust::string8, // for regular name
		Typeof
		] /> start;

	type TailComponent= ust::variant</ tup[ ust::string8, ust::box</TemplateArgs/> ] />;
	ust::vector</ TailComponent /> tail;
}

struct NumericConstant
{
	SrcLoc file_pos;
	NumberLexemData num= zero_init;
}

struct BooleanConstant
{
	SrcLoc file_pos;
	bool value;
}

struct StringLiteral
{
	SrcLoc file_pos;
	ust::string8 value;
	ust::string8 type_suffix;
}

struct Typeinfo
{
	SrcLoc file_pos;
	TypeName type_name;
}

struct CastRef
{
	SrcLoc file_pos;
	TypeName t;
	ust::shared_ptr_final</Expression/> expression;
}

struct CastRefUnsafe
{
	SrcLoc file_pos;
	TypeName t;
	ust::shared_ptr_final</Expression/> expression;
}

struct CastImut
{
	SrcLoc file_pos;
	ust::shared_ptr_final</Expression/> expression;
}

struct CastMut
{
	SrcLoc file_pos;
	ust::shared_ptr_final</Expression/> expression;
}

struct MoveOperator
{
	SrcLoc file_pos;
	ust::string8 variable_name;
}

struct TakeOperator
{
	SrcLoc file_pos;
	ust::shared_ptr_final</Expression/> expression;
}

struct TernaryOperator
{
	SrcLoc file_pos;
	ust::shared_ptr_final</Expression/> condition;
	[ ust::shared_ptr_final</Expression/>, 2 ] branches;
}

struct BinaryOperator
{
	SrcLoc file_pos;
	ust::shared_ptr_final</Expression/> l;
	ust::shared_ptr_final</Expression/> r;
	BinaryOperatorType operator;
}

struct BracketExpression
{
	SrcLoc file_pos;
	ust::box</Expression/> expr;
}

struct IndexationOperator
{
	SrcLoc file_pos;
	ust::shared_ptr_final</Expression/> value;
	ust::shared_ptr_final</Expression/> index;
}

struct CallOperator
{
	SrcLoc file_pos;
	ust::box</Expression/> value;
	ust::vector</ ust::shared_ptr_final</Expression/> /> args;
}

struct MemberAccessOperator
{
	SrcLoc file_pos;
	ust::box</Expression/> value;
	ust::string8 member_name;
	ust::box_nullable</TemplateArgs/> template_args;
}

struct UnaryPlus
{
	SrcLoc file_pos;
	ust::box</Expression/> expr;
}

struct UnaryMinus
{
	SrcLoc file_pos;
	ust::box</Expression/> expr;
}

struct LogicalNot
{
	SrcLoc file_pos;
	ust::box</Expression/> expr;
}

struct BitwiseNot
{
	SrcLoc file_pos;
	ust::box</Expression/> expr;
}

type Expression= ust::variant</ tup[
	EmptyVariant,
	NumericConstant,
	BooleanConstant,
	StringLiteral,
	ComplexName,
	Typeinfo,
	CastRef,
	CastRefUnsafe,
	CastImut,
	CastMut,
	MoveOperator,
	TakeOperator,
	TernaryOperator,
	BinaryOperator,
	BracketExpression,
	IndexationOperator,
	CallOperator,
	MemberAccessOperator,
	UnaryPlus,
	UnaryMinus,
	LogicalNot,
	BitwiseNot,
	ust::box</ArrayType/>,
	ust::box</TupleType/>,
	ust::box</FunctionType/>
	] />;

struct ArrayType
{
	SrcLoc file_pos;
	TypeName element_type;
	Expression element_count;
}

struct TupleType
{
	SrcLoc file_pos;
	ust::vector</ TypeName /> elements;
}

struct FunctionType
{
	SrcLoc file_pos;

	struct Param
	{
		SrcLoc file_pos;
		TypeName t;
		ReferenceModifier reference_modifier= ReferenceModifier::None;
		MutabilityModifier mutability_modifier= MutabilityModifier::None;
		ust::string8 reference_tag;
		ust::string8 inner_reference_tag;
		ust::string8 name;
	}
	ust::vector</Param/> params;

	struct ReferencePollution
	{
		ust::string8 dst;
		ust::string8 src;
	}
	ust::vector</ReferencePollution/> references_pollution;

	ust::optional</TypeName/> return_type; // Empty means "void"
	MutabilityModifier return_value_mutability_modifier= MutabilityModifier::None;
	ReferenceModifier return_value_reference_modifier= ReferenceModifier::None;
	ust::string8 return_value_reference_tag; // Tag of returning reference or inner tag of returning value
	bool is_unsafe= false;
}

type TypeName= ust::variant</ tup[
	ComplexName,
	ust::box</ArrayType/>,
	ust::box</TupleType/>,
	ust::box</FunctionType/>
	] />;

struct SequenceInitializer
{
	SrcLoc file_pos;
	ust::vector</ ust::box</ Initializer /> /> elements_initializers;
}

struct StructNamedInitializer
{
	SrcLoc file_pos;

	struct Member
	{
		SrcLoc file_pos;
		ust::string8 name;
		ust::box</ Initializer /> initializer;
	}

	ust::vector</ Member /> members_initializers;
}

struct ConstructorInitializer
{
	SrcLoc file_pos;
	ust::vector</ ust::shared_ptr_final</Expression/> /> args;
}

struct ZeroInitializer
{
	SrcLoc file_pos;
}

struct UninitializedInitializer
{
	SrcLoc file_pos;
}

type Initializer= ust::variant</ tup [
	EmptyVariant,
	Expression,
	SequenceInitializer,
	StructNamedInitializer,
	ConstructorInitializer,
	ZeroInitializer,
	UninitializedInitializer
	] />;

struct Block
{
	enum Safety : u8 { None, Safe, Unsafe }

	Safety safety= Safety::None;

	SrcLoc file_pos;
	SrcLoc end_file_pos;
	BlockElements elements;
}

struct VariablesDeclaration
{
	struct VariableEntry
	{
		SrcLoc file_pos;
		ReferenceModifier reference_modifier= ReferenceModifier::None;
		MutabilityModifier mutability_modifier= MutabilityModifier::None;
		ust::string8 name;
		Initializer initializer;
	}

	SrcLoc file_pos;
	TypeName t;
	ust::vector</VariableEntry/> variables;
}

struct AutoVariableDeclaration
{
	SrcLoc file_pos;
	ReferenceModifier reference_modifier= ReferenceModifier::None;
	MutabilityModifier mutability_modifier= MutabilityModifier::None;
	ust::string8 name;
	Expression initializer_expression;
}

struct ReturnOperator
{
	SrcLoc file_pos;
	Expression expr;
}

struct AssignmentOperator
{
	SrcLoc file_pos;
	ust::shared_ptr_final</Expression/> l;
	ust::shared_ptr_final</Expression/> r;
}

struct AdditiveAssignmentOperator
{
	SrcLoc file_pos;
	BinaryOperatorType operator;
	ust::shared_ptr_final</Expression/> l;
	ust::shared_ptr_final</Expression/> r;
}

struct IncrementOperator
{
	SrcLoc file_pos;
	Expression expression;
}

struct DecrementOperator
{
	SrcLoc file_pos;
	Expression expression;
}

struct IfOperator
{
	struct Branch
	{
		SrcLoc file_pos;
		// Condition - EmptyVariant for last if.
		Expression condition;
		ust::box</Block/> block;
	}

	SrcLoc file_pos;
	SrcLoc end_file_pos;
	ust::vector</Branch/> branches;
}

struct StaticIfOperator
{
	SrcLoc file_pos;
	IfOperator if_operator;
}

struct WhileOperator
{
	SrcLoc file_pos;
	Expression condition;
	ust::box</Block/> block;
}

struct RangeForOperator
{
	SrcLoc file_pos;
	ReferenceModifier reference_modifier= ReferenceModifier::None;
	MutabilityModifier mutability_modifier= MutabilityModifier::None;
	ust::string8 loop_variable_name;
	Expression sequence;
	ust::box</Block/> block;
}

struct CStyleForOperator
{
	SrcLoc file_pos;

	ust::variant</ tup[
		EmptyVariant,
		VariablesDeclaration,
		AutoVariableDeclaration
		] />
	variable_declaration_part;

	Expression loop_condition; // May be "EmptyVariant"

	ust::vector</
		ust::variant</ tup[
			Expression,
			AssignmentOperator,
			AdditiveAssignmentOperator,
			IncrementOperator,
			DecrementOperator
		] /> />
	iteration_part_elements;

	ust::box</Block/> block;
}

struct BreakOperator
{
	SrcLoc file_pos;
}

struct ContinueOperator
{
	SrcLoc file_pos;
}

struct WithOperator
{
	SrcLoc file_pos;
	ReferenceModifier reference_modifier= ReferenceModifier::None;
	MutabilityModifier mutability_modifier= MutabilityModifier::None;
	ust::string8 variable_name;
	Expression expression;
	ust::box</Block/> block;
}

struct StaticAssert
{
	SrcLoc file_pos;
	Expression expression;
}

struct Halt
{
	SrcLoc file_pos;
}

struct HaltIf
{
	SrcLoc file_pos;
	Expression condition;
}

type BlockElement = ust::variant</ tup[
	ust::box</Block/>,
	VariablesDeclaration,
	AutoVariableDeclaration,
	ReturnOperator,
	AssignmentOperator,
	AdditiveAssignmentOperator,
	IncrementOperator,
	DecrementOperator,
	Expression,
	IfOperator,
	StaticIfOperator,
	WhileOperator,
	RangeForOperator,
	CStyleForOperator,
	BreakOperator,
	ContinueOperator,
	WithOperator,
	StaticAssert,
	Halt,
	HaltIf
	] />;

type BlockElements= ust::vector</BlockElement/>;

struct Function
{
	SrcLoc file_pos;
	ust::vector</ ust::string8 /> name; // A, A::B, A::B::C::D, ::A, ::A::B
	OverloadedOperator operator= OverloadedOperator::None;

	enum VirtualKind : u8
	{
		None, // Regular, non-virtual
		DeclareVirtual,
		VirtualOverride,
		VirtualFinal,
		VirtualPure,
	}
	VirtualKind virtual_kind= VirtualKind::None;

	enum BodyKind : u8
	{
		Regular,
		BodyGenerationRequired,
		BodyGenerationDisabled,
	}
	BodyKind body_kind= BodyKind::Regular;

	bool no_mangle= false;
	bool constexpr_= false;
	bool is_conversion_constructor= false;

	ust::box_nullable</Expression/> condition; // enable_if

	FunctionType function_type;
	ust::box_nullable</Block/> block; // null for prototype
	ust::box_nullable</StructNamedInitializer/> constructor_initializer_list;
}

struct TypeAlias
{
	SrcLoc file_pos;
	ust::string8 name;
	TypeName type_name;
}

struct ClassField
{
	SrcLoc file_pos;
	ust::string8 name;
	TypeName t;
	MutabilityModifier mutability_modifier= MutabilityModifier::None;
	ReferenceModifier reference_modifier= ReferenceModifier::None;
	Initializer initializer;
}

enum ClassVisibility : u8
{
	// Must be ordered from less access to more access.
	Public,
	Protected,
	Private,
}

struct ClassVisibilityLabel
{
	SrcLoc file_pos;
	ClassVisibility visibility;
}

type ClassElement= ust::variant</ tup[
	ust::shared_ptr_final</Function/>,
	ust::shared_ptr_final</FunctionTemplate/>,
	ust::shared_ptr_final</Class/>,
	ust::shared_ptr_final</Enum/>,
	ust::shared_ptr_final</TypeAlias/>,
	ust::shared_ptr_final</TypeTemplate/>,
	ust::shared_ptr_final</ClassField/>,
	ClassVisibilityLabel,
	ust::shared_ptr_final</VariablesDeclaration/>,
	ust::shared_ptr_final</AutoVariableDeclaration/>,
	ust::shared_ptr_final</StaticAssert/>
	] />;

type ClassElements= ust::vector</ClassElement/>;

struct Class
{
	enum KindAttribute : u8
	{
		Struct,
		Class,
		Final,
		Polymorph,
		Interface,
		Abstract,
	}

	SrcLoc file_pos;
	ust::string8 name;
	KindAttribute kind_attribute= KindAttribute::Struct;
	ust::vector</ComplexName/> parents;
	ClassElements class_elements;
	bool is_forward_declaration= false;
	bool have_shared_state= false;
	bool keep_fields_order= false;
}

struct Enum
{
	SrcLoc file_pos;
	ust::string8 name;
	ComplexName underlaying_type;

	struct Element
	{
		SrcLoc file_pos;
		ust::string8 name;
	}

	ust::vector</Element/> elements;
}

struct TemplateParam
{
	SrcLoc file_pos;
	Expression t; // Actually, only ComplexName. Empty if type parameter.
	ust::string8 name;
}

struct TypeTemplate
{
	SrcLoc file_pos;
	ust::string8 name;

	ust::vector</TemplateParam/> params;

	struct SignatureParam
	{
		SrcLoc file_pos;
		Expression name;
		Expression default_value;
	}
	ust::vector</SignatureParam/> signature_params;

	// Short form means that template argumenst are also signature arguments.
	bool is_short_form;

	ust::variant</ tup[
		ust::shared_ptr_final</Class/>,
		ust::shared_ptr_final</TypeAlias/>
	] /> something;
}

struct FunctionTemplate
{
	SrcLoc file_pos;
	ust::string8 name;

	ust::vector</TemplateParam/> params;

	ust::shared_ptr_final</Function/> function;
}

struct Namespace
{
	SrcLoc file_pos;
	ust::string8 name;
	NamespaceElements elements;
}

type NamespaceElement= ust::variant</ tup[
	ust::shared_ptr_final</Function/>,
	ust::shared_ptr_final</FunctionTemplate/>,
	ust::shared_ptr_final</Class/>,
	ust::shared_ptr_final</Enum/>,
	ust::shared_ptr_final</TypeAlias/>,
	ust::shared_ptr_final</TypeTemplate/>,
	ust::shared_ptr_final</Namespace/>, // TODO do we really need shared_ptr here?
	ust::shared_ptr_final</VariablesDeclaration/>,
	ust::shared_ptr_final</AutoVariableDeclaration/>,
	ust::shared_ptr_final</StaticAssert/>
	] />;

type NamespaceElements= ust::vector</NamespaceElement/>;

type ProgramElement= NamespaceElement;
type ProgramElements= ust::vector</ProgramElement/>;

fn GetSrcLoc( Initializer& initializer ) : SrcLoc;
fn GetSrcLoc( Expression& expression ) : SrcLoc;
fn GetSrcLoc( BlockElement& block_element ) : SrcLoc;

} // namespace Synt

} // namespace U1
