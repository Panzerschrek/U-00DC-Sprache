import "/string.u"
import "/vector.u"
import "lex_synt_error.uh"

namespace U1
{

struct NumberLexemData
{
	f64 value_double= 0.0;
	u64 value_int(0);
	bool has_fractional_point= false;
	[ char8, 7 ] type_suffix= zero_init;
}

struct Lexem
{
	enum Type
	{
		None,

		Comment,

		Identifier,
		MacroIdentifier,
		MacroUniqueIdentifier,
		String,
		Number,

		LiteralSuffix, // For strings, numbers

		BracketLeft, // (
		BracketRight, // )

		SquareBracketLeft, // [
		SquareBracketRight, // ]

		BraceLeft, // {
		BraceRight, // }

		TemplateBracketLeft , // </
		TemplateBracketRight, // />

		MacroBracketLeft,  // <?
		MacroBracketRight, // ?>

		Scope, // ::

		Comma, // ,
		Dot, // .
		Colon, // :
		Semicolon, // ;
		Question, // ?

		Assignment, // =
		Plus, // +
		Minus, // -
		Star, // *
		Slash, // /
		Percent, // %

		And, // &
		Or, // |
		Xor, // ^
		Tilda, // ~
		Not, // !

		Apostrophe, // '
		At, // @

		Increment, // ++
		Decrement, // --

		CompareLess, // <
		CompareGreater, // >
		CompareEqual, // ==
		CompareNotEqual, // !=
		CompareLessOrEqual, // <=
		CompareGreaterOrEqual, // >=
		CompareOrder, // <=>

		Conjunction, // &&
		Disjunction, // ||

		AssignAdd, // +=
		AssignSub, // -=
		AssignMul, // *=
		AssignDiv, // /=
		AssignRem, // %=
		AssignAnd, // &=
		AssignOr,  // |=
		AssignXor, // ^=

		ShiftLeft , // <<
		ShiftRight, // >>

		AssignShiftLeft , // <<=
		AssignShiftRight, // >>=

		RightArrow, // ->

		PointerTypeMark, // $
		ReferenceToPointer, // $<
		PointerToReference, // $>

		Ellipsis, // ...

		// TODO - add other lexems.

		EndOfFile,
	}

	// Contains text for non-fixed lexems (identifiers, strings, etc.).
	// For numbers contains data of "struct NumberLexemData".
	ust::string8 text;

	SrcLoc src_loc;
	Type lexem_type= Type::None;

	fn ToString(this) : ust::string8;
}

type Lexems= ust::vector</Lexem/>;

struct LexicalAnalysisResult
{
	Lexems lexems;
	LexSyntErrors errors;
}

fn LexicalAnalysis( ust::string_view8 program_text ) : LexicalAnalysisResult;

} // namespace U1
