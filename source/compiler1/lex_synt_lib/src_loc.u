import "src_loc.uh"

namespace U1
{

fn SrcLoc::constructor( u32 file_index, u32 line, u32 column )
	( file_index_( u16(file_index) )
	, macro_expansion_index_( u16(c_max_macro_expanison_index) )
	, line_( u16(line) )
	, column_( u16(column) ) )
{
	halt if( file_index > c_max_file_index );
	halt if( line > c_max_line );
	halt if( column > c_max_column );
}

fn SrcLoc::GetFileIndex(this) : u32
{
	return u32(file_index_);
}

fn SrcLoc::GetMacroExpansionIndex(this) : u32
{
	return u32(macro_expansion_index_);
}

fn SrcLoc::GetLine(this) : u32
{
	return u32(line_);
}

fn SrcLoc::GetColumn(this) : u32
{
	return u32(column_);
}

fn SrcLoc::SetFileIndex( mut this, u32 file_index )
{
	halt if( file_index > c_max_file_index );
	file_index_= u16(file_index);
}

fn SrcLoc::SetMacroExpansionIndex( mut this, u32 macro_expansion_index )
{
	halt if( macro_expansion_index > c_max_macro_expanison_index );
	macro_expansion_index_= u16(macro_expansion_index);
}

op SrcLoc::==( SrcLoc& l, SrcLoc& r ) : bool
{
	return
		l.file_index_ == r.file_index_ &&
		l.macro_expansion_index_ == r.macro_expansion_index_ &&
		l.line_ == r.line_ &&
		l.column_ == r.column_;
}

op SrcLoc::!=( SrcLoc& l, SrcLoc& r ) : bool
{
	return !( l == r );
}

op SrcLoc::< ( SrcLoc& l, SrcLoc& r ) : bool
{
	if( l.file_index_ != r.file_index_ )
	{
		return l.file_index_ < r.file_index_;
	}
	if( l.macro_expansion_index_ != r.macro_expansion_index_ )
	{
		return l.macro_expansion_index_ < r.macro_expansion_index_;
	}
	if( l.line_ != r.line_ )
	{
		return l.line_ < r.line_;
	}
	return l.column_ < r.column_;
}

op SrcLoc::<=( SrcLoc& l, SrcLoc& r ) : bool
{
	return l < r || l == r;
}

} // namespace U1
