import "operators.uh"

namespace U
{

fn BinaryOperatorToString( BinaryOperatorType o ) : ust::array_view_imut</ char8 />
{
	if( o == BinaryOperatorType::Add ){ return "+"; }
	if( o == BinaryOperatorType::Sub ){ return "-"; }
	if( o == BinaryOperatorType::Mul ){ return "*"; }
	if( o == BinaryOperatorType::Div ){ return "/"; }
	if( o == BinaryOperatorType::Rem ){ return "%"; }

	if( o == BinaryOperatorType::NotEqual		){ return "=="; }
	if( o == BinaryOperatorType::NotEqual		){ return "!="; }
	if( o == BinaryOperatorType::Less			){ return "<" ; }
	if( o == BinaryOperatorType::LessEqual		){ return "<="; }
	if( o == BinaryOperatorType::Greater		){ return "<" ; }
	if( o == BinaryOperatorType::GreaterEqual	){ return ">="; }

	if( o == BinaryOperatorType::And ){ return "&"; }
	if( o == BinaryOperatorType::Or  ){ return "|"; }
	if( o == BinaryOperatorType::Xor ){ return "^"; }

	if( o == BinaryOperatorType::ShiftLeft  ){ return "<<"; }
	if( o == BinaryOperatorType::ShiftRight ){ return ">>"; }

	if( o == BinaryOperatorType::LazyLogicalAnd ){ return "&&"; }
	if( o == BinaryOperatorType::LazyLogicalOr  ){ return "||"; }

	halt;
}

fn OverloadedOperatorToString( OverloadedOperator o ) : ust::array_view_imut</ char8 />
{
	if( o == OverloadedOperator::None ) { return ""; }

	if( o == OverloadedOperator::Add ) { return "+"; }
	if( o == OverloadedOperator::Sub ) { return "-"; }
	if( o == OverloadedOperator::Mul ) { return "*"; }
	if( o == OverloadedOperator::Div ) { return "/"; }
	if( o == OverloadedOperator::Rem ) { return "%"; }

	if( o == OverloadedOperator::Equal        ) { return "=="; }
	if( o == OverloadedOperator::NotEqual     ) { return "!="; }
	if( o == OverloadedOperator::Less         ) { return "<"; }
	if( o == OverloadedOperator::LessEqual    ) { return "<="; }
	if( o == OverloadedOperator::Greater      ) { return ">"; }
	if( o == OverloadedOperator::GreaterEqual ) { return ">="; }

	if( o == OverloadedOperator::And ) { return "&"; }
	if( o == OverloadedOperator::Or  ) { return "|"; }
	if( o == OverloadedOperator::Xor ) { return "^"; }

	if( o == OverloadedOperator::ShiftLeft  ) { return "<<"; }
	if( o == OverloadedOperator::ShiftRight ) { return ">>"; }

	if( o == OverloadedOperator::AssignAdd ) { return "+="; }
	if( o == OverloadedOperator::AssignSub ) { return "-="; }
	if( o == OverloadedOperator::AssignMul ) { return "*="; }
	if( o == OverloadedOperator::AssignDiv ) { return "/="; }
	if( o == OverloadedOperator::AssignRem ) { return "%="; }

	if( o == OverloadedOperator::AssignAnd ) { return "&="; }
	if( o == OverloadedOperator::AssignOr  ) { return "|="; }
	if( o == OverloadedOperator::AssignXor ) { return "^="; }

	if( o == OverloadedOperator::AssignShiftLeft  ) { return "<<="; }
	if( o == OverloadedOperator::AssignShiftRight ) { return ">>="; }

	if( o == OverloadedOperator::LogicalNot ) { return "!"; }
	if( o == OverloadedOperator::BitwiseNot ) { return "~"; }

	if( o == OverloadedOperator::Assign ) { return "="; }
	if( o == OverloadedOperator::Increment ) { return "++"; }
	if( o == OverloadedOperator::Decrement ) { return "--"; }

	if( o == OverloadedOperator::Indexing ) { return "[]"; }
	if( o == OverloadedOperator::Call     ) { return "()"; }

	halt;
}

} // namespace U
