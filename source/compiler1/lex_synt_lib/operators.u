import "operators.uh"

namespace U1
{

fn GetOverloadedOperatorForAdditiveAssignmentOperator( BinaryOperatorType o ) : OverloadedOperator
{
	if( o == BinaryOperatorType::Add ) { return OverloadedOperator::AssignAdd; }
	if( o == BinaryOperatorType::Sub ) { return OverloadedOperator::AssignSub; }
	if( o == BinaryOperatorType::Mul ) { return OverloadedOperator::AssignMul; }
	if( o == BinaryOperatorType::Div ) { return OverloadedOperator::AssignDiv; }
	if( o == BinaryOperatorType::Rem ) { return OverloadedOperator::AssignRem; }
	if( o == BinaryOperatorType::And ) { return OverloadedOperator::AssignAnd; }
	if( o == BinaryOperatorType::Or  ) { return OverloadedOperator::AssignOr ; }
	if( o == BinaryOperatorType::Xor ) { return OverloadedOperator::AssignXor; }
	if( o == BinaryOperatorType::ShiftLeft  ) { return OverloadedOperator::AssignShiftLeft ; }
	if( o == BinaryOperatorType::ShiftRight ) { return OverloadedOperator::AssignShiftRight; }

	halt;
}

fn GetOverloadedOperatorForBinaryOperator( BinaryOperatorType o ) : OverloadedOperator
{
	if( o == BinaryOperatorType::Add ) { return OverloadedOperator::Add; }
	if( o == BinaryOperatorType::Sub ) { return OverloadedOperator::Sub; }
	if( o == BinaryOperatorType::Mul ) { return OverloadedOperator::Mul; }
	if( o == BinaryOperatorType::Div ) { return OverloadedOperator::Div; }
	if( o == BinaryOperatorType::Rem ) { return OverloadedOperator::Rem; }
	if( o == BinaryOperatorType::And ) { return OverloadedOperator::And; }
	if( o == BinaryOperatorType::Or  ) { return OverloadedOperator::Or ; }
	if( o == BinaryOperatorType::Xor ) { return OverloadedOperator::Xor; }
	if( o == BinaryOperatorType::Equal        ) { return OverloadedOperator::CompareEqual; }
	if( o == BinaryOperatorType::NotEqual     ) { return OverloadedOperator::CompareEqual; }
	if( o == BinaryOperatorType::Less         ) { return OverloadedOperator::CompareOrder; }
	if( o == BinaryOperatorType::LessEqual    ) { return OverloadedOperator::CompareOrder; }
	if( o == BinaryOperatorType::Greater      ) { return OverloadedOperator::CompareOrder; }
	if( o == BinaryOperatorType::GreaterEqual ) { return OverloadedOperator::CompareOrder; }
	if( o == BinaryOperatorType::CompareOrder ) { return OverloadedOperator::CompareOrder; }
	if( o == BinaryOperatorType::ShiftLeft  ) { return OverloadedOperator::ShiftLeft ; }
	if( o == BinaryOperatorType::ShiftRight ) { return OverloadedOperator::ShiftRight; }

	halt;
}

fn BinaryOperatorToString( BinaryOperatorType o ) : ust::array_view_imut</ char8 />
{
	if( o == BinaryOperatorType::Add ){ return "+"; }
	if( o == BinaryOperatorType::Sub ){ return "-"; }
	if( o == BinaryOperatorType::Mul ){ return "*"; }
	if( o == BinaryOperatorType::Div ){ return "/"; }
	if( o == BinaryOperatorType::Rem ){ return "%"; }

	if( o == BinaryOperatorType::Equal			){ return "=="; }
	if( o == BinaryOperatorType::NotEqual		){ return "!="; }
	if( o == BinaryOperatorType::Less			){ return "<" ; }
	if( o == BinaryOperatorType::LessEqual		){ return "<="; }
	if( o == BinaryOperatorType::Greater		){ return "<" ; }
	if( o == BinaryOperatorType::GreaterEqual	){ return ">="; }
	if( o == BinaryOperatorType::CompareOrder	){ return "<=>"; }

	if( o == BinaryOperatorType::And ){ return "&"; }
	if( o == BinaryOperatorType::Or  ){ return "|"; }
	if( o == BinaryOperatorType::Xor ){ return "^"; }

	if( o == BinaryOperatorType::ShiftLeft  ){ return "<<"; }
	if( o == BinaryOperatorType::ShiftRight ){ return ">>"; }

	if( o == BinaryOperatorType::LazyLogicalAnd ){ return "&&"; }
	if( o == BinaryOperatorType::LazyLogicalOr  ){ return "||"; }

	halt;
}

fn OverloadedOperatorToString( OverloadedOperator o ) : ust::array_view_imut</ char8 />
{
	if( o == OverloadedOperator::None ) { return ""; }

	if( o == OverloadedOperator::Add ) { return "+"; }
	if( o == OverloadedOperator::Sub ) { return "-"; }
	if( o == OverloadedOperator::Mul ) { return "*"; }
	if( o == OverloadedOperator::Div ) { return "/"; }
	if( o == OverloadedOperator::Rem ) { return "%"; }

	if( o == OverloadedOperator::CompareEqual ) { return "=="; }
	if( o == OverloadedOperator::CompareOrder ) { return "<=>"; }

	if( o == OverloadedOperator::And ) { return "&"; }
	if( o == OverloadedOperator::Or  ) { return "|"; }
	if( o == OverloadedOperator::Xor ) { return "^"; }

	if( o == OverloadedOperator::ShiftLeft  ) { return "<<"; }
	if( o == OverloadedOperator::ShiftRight ) { return ">>"; }

	if( o == OverloadedOperator::AssignAdd ) { return "+="; }
	if( o == OverloadedOperator::AssignSub ) { return "-="; }
	if( o == OverloadedOperator::AssignMul ) { return "*="; }
	if( o == OverloadedOperator::AssignDiv ) { return "/="; }
	if( o == OverloadedOperator::AssignRem ) { return "%="; }

	if( o == OverloadedOperator::AssignAnd ) { return "&="; }
	if( o == OverloadedOperator::AssignOr  ) { return "|="; }
	if( o == OverloadedOperator::AssignXor ) { return "^="; }

	if( o == OverloadedOperator::AssignShiftLeft  ) { return "<<="; }
	if( o == OverloadedOperator::AssignShiftRight ) { return ">>="; }

	if( o == OverloadedOperator::LogicalNot ) { return "!"; }
	if( o == OverloadedOperator::BitwiseNot ) { return "~"; }

	if( o == OverloadedOperator::Assign ) { return "="; }
	if( o == OverloadedOperator::Increment ) { return "++"; }
	if( o == OverloadedOperator::Decrement ) { return "--"; }

	if( o == OverloadedOperator::Indexing ) { return "[]"; }
	if( o == OverloadedOperator::Call     ) { return "()"; }

	halt;
}

} // namespace U1
