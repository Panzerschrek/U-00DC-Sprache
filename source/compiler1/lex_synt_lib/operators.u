import "operators.uh"

namespace U1
{

fn GetOverloadedOperatorForAdditiveAssignmentOperator( BinaryOperatorType o ) : OverloadedOperator
{
	switch(o)
	{
		BinaryOperatorType::Add -> { return OverloadedOperator::AssignAdd; },
		BinaryOperatorType::Sub -> { return OverloadedOperator::AssignSub; },
		BinaryOperatorType::Mul -> { return OverloadedOperator::AssignMul; },
		BinaryOperatorType::Div -> { return OverloadedOperator::AssignDiv; },
		BinaryOperatorType::Rem -> { return OverloadedOperator::AssignRem; },
		BinaryOperatorType::And -> { return OverloadedOperator::AssignAnd; },
		BinaryOperatorType::Or  -> { return OverloadedOperator::AssignOr ; },
		BinaryOperatorType::Xor -> { return OverloadedOperator::AssignXor; },
		BinaryOperatorType::ShiftLeft  -> { return OverloadedOperator::AssignShiftLeft ; },
		BinaryOperatorType::ShiftRight -> { return OverloadedOperator::AssignShiftRight; },
		default -> { halt; },
	}
}

fn GetOverloadedOperatorForBinaryOperator( BinaryOperatorType o ) : OverloadedOperator
{
	switch(o)
	{
		BinaryOperatorType::Add -> { return OverloadedOperator::Add; },
		BinaryOperatorType::Sub -> { return OverloadedOperator::Sub; },
		BinaryOperatorType::Mul -> { return OverloadedOperator::Mul; },
		BinaryOperatorType::Div -> { return OverloadedOperator::Div; },
		BinaryOperatorType::Rem -> { return OverloadedOperator::Rem; },
		BinaryOperatorType::And -> { return OverloadedOperator::And; },
		BinaryOperatorType::Or  -> { return OverloadedOperator::Or ; },
		BinaryOperatorType::Xor -> { return OverloadedOperator::Xor; },
		BinaryOperatorType::Equal, BinaryOperatorType::NotEqual -> { return OverloadedOperator::CompareEqual; },
		BinaryOperatorType::Less,
		BinaryOperatorType::LessEqual,
		BinaryOperatorType::Greater,
		BinaryOperatorType::GreaterEqual ,
		BinaryOperatorType::CompareOrder -> { return OverloadedOperator::CompareOrder; },
		BinaryOperatorType::ShiftLeft  -> { return OverloadedOperator::ShiftLeft ; },
		BinaryOperatorType::ShiftRight -> { return OverloadedOperator::ShiftRight; },
		BinaryOperatorType::LazyLogicalAnd, BinaryOperatorType::LazyLogicalOr -> { halt; },
	}
}

fn BinaryOperatorToString( BinaryOperatorType o ) : ust::string_view8
{
	switch(o)
	{
		BinaryOperatorType::Add -> { return "+"; },
		BinaryOperatorType::Sub -> { return "-"; },
		BinaryOperatorType::Mul -> { return "*"; },
		BinaryOperatorType::Div -> { return "/"; },
		BinaryOperatorType::Rem -> { return "%"; },
		BinaryOperatorType::Equal			-> { return "=="; },
		BinaryOperatorType::NotEqual		-> { return "!="; },
		BinaryOperatorType::Less			-> { return "<" ; },
		BinaryOperatorType::LessEqual		-> { return "<="; },
		BinaryOperatorType::Greater			-> { return ">" ; },
		BinaryOperatorType::GreaterEqual	-> { return ">="; },
		BinaryOperatorType::CompareOrder	-> { return "<=>"; },
		BinaryOperatorType::And -> { return "&"; },
		BinaryOperatorType::Or  -> { return "|"; },
		BinaryOperatorType::Xor -> { return "^"; },
		BinaryOperatorType::ShiftLeft  -> { return "<<"; },
		BinaryOperatorType::ShiftRight -> { return ">>"; },
		BinaryOperatorType::LazyLogicalAnd -> { return "&&"; },
		BinaryOperatorType::LazyLogicalOr  -> { return "||"; },
	}
}

fn OverloadedOperatorToString( OverloadedOperator o ) : ust::string_view8
{
	switch(o)
	{
		OverloadedOperator::None -> { return ""; },
		OverloadedOperator::Add -> { return "+"; },
		OverloadedOperator::Sub -> { return "-"; },
		OverloadedOperator::Mul -> { return "*"; },
		OverloadedOperator::Div -> { return "/"; },
		OverloadedOperator::Rem -> { return "%"; },
		OverloadedOperator::CompareEqual -> { return "=="; },
		OverloadedOperator::CompareOrder -> { return "<=>"; },
		OverloadedOperator::And -> { return "&"; },
		OverloadedOperator::Or  -> { return "|"; },
		OverloadedOperator::Xor -> { return "^"; },
		OverloadedOperator::ShiftLeft  -> { return "<<"; },
		OverloadedOperator::ShiftRight -> { return ">>"; },
		OverloadedOperator::AssignAdd -> { return "+="; },
		OverloadedOperator::AssignSub -> { return "-="; },
		OverloadedOperator::AssignMul -> { return "*="; },
		OverloadedOperator::AssignDiv -> { return "/="; },
		OverloadedOperator::AssignRem -> { return "%="; },
		OverloadedOperator::AssignAnd -> { return "&="; },
		OverloadedOperator::AssignOr  -> { return "|="; },
		OverloadedOperator::AssignXor -> { return "^="; },
		OverloadedOperator::AssignShiftLeft  -> { return "<<="; },
		OverloadedOperator::AssignShiftRight -> { return ">>="; },
		OverloadedOperator::LogicalNot -> { return "!"; },
		OverloadedOperator::BitwiseNot -> { return "~"; },
		OverloadedOperator::Assign -> { return "="; },
		OverloadedOperator::Increment -> { return "++"; },
		OverloadedOperator::Decrement -> { return "--"; },
		OverloadedOperator::Indexing -> { return "[]"; },
		OverloadedOperator::Call     -> { return "()"; },
	}
}

} // namespace U1
