import "/shared_ptr.u"
import "/string_conversions.u"
import "/unordered_set.u"
import "/keywords.uh"
import "syntax_analyzer.uh"

namespace U1
{

namespace Synt
{

fn IsKeyword( Lexem& l, Keyword k ) : bool
{
	return l.lexem_type == Lexem::Type::Identifier && l.text == KeywordToString(k);
}

fn GetBinaryOperatorPriority( BinaryOperatorType binary_operator ) : i32
{
	// If this changed, same code in "syntax_analyzer.cpp" must be changed too!
	if( binary_operator == BinaryOperatorType::Div ||
		binary_operator == BinaryOperatorType::Mul ||
		binary_operator == BinaryOperatorType::Rem )
	{
		return 10;
	}
	if( binary_operator == BinaryOperatorType::Add ||
		binary_operator == BinaryOperatorType::Sub )
	{
		return 9;
	}
	if( binary_operator == BinaryOperatorType::ShiftLeft ||
		binary_operator == BinaryOperatorType::ShiftRight )
	{
		return 8;
	}
	if( binary_operator == BinaryOperatorType::CompareOrder )
	{
		return 7;
	}
	if( binary_operator == BinaryOperatorType::Equal ||
		binary_operator == BinaryOperatorType::NotEqual ||
		binary_operator == BinaryOperatorType::Less ||
		binary_operator == BinaryOperatorType::LessEqual ||
		binary_operator == BinaryOperatorType::Greater ||
		binary_operator == BinaryOperatorType::GreaterEqual )
	{
		return 6;
	}
	if( binary_operator == BinaryOperatorType::And )
	{
		return 5;
	}
	if( binary_operator == BinaryOperatorType::Or )
	{
		return 4;
	}
	if( binary_operator == BinaryOperatorType::Xor )
	{
		return 3;
	}
	if( binary_operator == BinaryOperatorType::LazyLogicalAnd )
	{
		return 2;
	}
	if( binary_operator == BinaryOperatorType::LazyLogicalOr )
	{
		return 1;
	}

	halt;
}

fn LexemToBinaryOperator( Lexem& lexem ) : ust::optional</BinaryOperatorType/>
{
	if( lexem.lexem_type == Lexem::Type::Plus	){ return BinaryOperatorType::Add; }
	if( lexem.lexem_type == Lexem::Type::Minus	){ return BinaryOperatorType::Sub; }
	if( lexem.lexem_type == Lexem::Type::Star	){ return BinaryOperatorType::Mul; }
	if( lexem.lexem_type == Lexem::Type::Slash	){ return BinaryOperatorType::Div; }
	if( lexem.lexem_type == Lexem::Type::Percent){ return BinaryOperatorType::Rem; }

	if( lexem.lexem_type == Lexem::Type::CompareEqual			){ return BinaryOperatorType::Equal			; }
	if( lexem.lexem_type == Lexem::Type::CompareNotEqual		){ return BinaryOperatorType::NotEqual		; }
	if( lexem.lexem_type == Lexem::Type::CompareLess			){ return BinaryOperatorType::Less			; }
	if( lexem.lexem_type == Lexem::Type::CompareLessOrEqual		){ return BinaryOperatorType::LessEqual		; }
	if( lexem.lexem_type == Lexem::Type::CompareGreater			){ return BinaryOperatorType::Greater		; }
	if( lexem.lexem_type == Lexem::Type::CompareGreaterOrEqual	){ return BinaryOperatorType::GreaterEqual	; }
	if( lexem.lexem_type == Lexem::Type::CompareOrder ){ return BinaryOperatorType::CompareOrder; }

	if( lexem.lexem_type == Lexem::Type::And ){ return BinaryOperatorType::And; }
	if( lexem.lexem_type == Lexem::Type::Or  ){ return BinaryOperatorType::Or ; }
	if( lexem.lexem_type == Lexem::Type::Xor ){ return BinaryOperatorType::Xor; }

	if( lexem.lexem_type == Lexem::Type::ShiftLeft  ){ return BinaryOperatorType::ShiftLeft ; }
	if( lexem.lexem_type == Lexem::Type::ShiftRight ){ return BinaryOperatorType::ShiftRight; }

	if( lexem.lexem_type == Lexem::Type::Conjunction ){ return BinaryOperatorType::LazyLogicalAnd; }
	if( lexem.lexem_type == Lexem::Type::Disjunction ){ return BinaryOperatorType::LazyLogicalOr ; }

	return ust::null_optional;
}

fn GetAdditiveAssignmentOperator( Lexem& lexem ) : ust::optional</BinaryOperatorType/>
{
	auto t= lexem.lexem_type;

	if( t == Lexem::Type::AssignAdd ){ return BinaryOperatorType::Add; }
	if( t == Lexem::Type::AssignSub ){ return BinaryOperatorType::Sub; }
	if( t == Lexem::Type::AssignMul ){ return BinaryOperatorType::Mul; }
	if( t == Lexem::Type::AssignDiv ){ return BinaryOperatorType::Div; }
	if( t == Lexem::Type::AssignAnd ){ return BinaryOperatorType::And; }
	if( t == Lexem::Type::AssignRem ){ return BinaryOperatorType::Rem; }
	if( t == Lexem::Type::AssignOr  ){ return BinaryOperatorType::Or ; }
	if( t == Lexem::Type::AssignXor ){ return BinaryOperatorType::Xor; }
	if( t == Lexem::Type::AssignShiftLeft  ){ return BinaryOperatorType::ShiftLeft ; }
	if( t == Lexem::Type::AssignShiftRight ){ return BinaryOperatorType::ShiftRight; }

	return ust::null_optional;
}

struct BinaryOperatorsChainComponent
{
	Expression expression;
	BinaryOperatorType operator= zero_init; // Value of last component is ignored
	SrcLoc src_loc;
}

type BinaryOperatorsChain= ust::vector</BinaryOperatorsChainComponent/>;

fn FoldBinaryOperatorsChain( ust::array_view_mut</BinaryOperatorsChainComponent/> chain ) : Expression
{
	// Should be non-empty.

	auto s= chain.size();
	if( s == 1s )
	{
		return take(chain.front().expression);
	}

	// Split binary operators chain using most-right operator with minimal priority. Than recursively process parts.

	auto mut split_op_pos= ~0s;
	auto mut min_priority= 9999;
	for( auto mut i= 0s; i < chain.size() - 1s; ++i )
	{
		auto cur_priority= GetBinaryOperatorPriority( chain[i].operator );
		if( cur_priority <= min_priority )
		{
			min_priority= cur_priority;
			split_op_pos= i;
		}
	}

	var BinaryOperator mut binary_operator
	{
		.l( FoldBinaryOperatorsChain( chain.subrange( 0s, split_op_pos + 1s ) ) ),
		.r( FoldBinaryOperatorsChain( chain.subrange( split_op_pos + 1s,  s ) ) ),
		.operator= chain[ split_op_pos ].operator,
		.src_loc= chain[ split_op_pos ].src_loc,
	};

	return move(binary_operator);
}

template</type T/>
fn VectorAppend( ust::vector</T/> &mut dst, ust::vector</T/> mut src )
{
	// HACK! We can not move from beginning of the vector. So, inverse vector and move elements from back.
	for( auto mut i= 0s; i < src.size() / 2s; ++i )
	{
		auto j= src.size() - i - 1s;
		src.swap( i, j );
	}
	while( !src.empty() )
	{
		dst.push_back( src.pop_back() );
	}
}

class SyntaxAnalyzer
{
public:
	fn constructor(
		this'a',
		Lexems&'b lexems,
		MacrosPtr mut macros,
		MacroExpansionContextsPtr mut macro_expansion_contexts,
		ust::string8 macro_unique_identifiers_base_name ) ' a <- b ';

	fn DoAnalyzis( mut this ) : SyntaxAnalysisResult;
	fn ParseImports( mut this ) : ImportsList;

private:
	fn ParseNamespaceBody( mut this, Lexem::Type end_lexem ) : NamespaceElements;
	fn ParseNamespace( mut this ) : Namespace;

	fn ParseTemplateArgs( mut this ) : TemplateArgs;
	fn ParseComplexName( mut this ) : ComplexName;

	fn ParseExpression( mut this ) : Expression;
	fn ParseExpressionInBrackets( mut this ) : Expression;
	fn ParseExpressionComponent( mut this ) : Expression;
	fn TryParseExpressionComponentPostfixOperator( mut this, Expression mut expr ) : Expression;
	fn ParseExpressionComponentHelper( mut this ) : Expression;

	fn ParseTypeNameInTemplateBrackets( mut this ) : TypeName;

	fn ParseTypeName( mut this ) : TypeName;
	fn ParseArrayType( mut this ) : ArrayType;
	fn ParseTupleType( mut this ) : TupleType;
	fn ParseRawPointerType( mut this ) : RawPointerType;
	fn ParseFunctionType( mut this ) : FunctionType;
	fn ParseGeneratorType( mut this ) : GeneratorType;
	fn ParseFunctionParam( mut this ) : FunctionType::Param;
	fn ParseFunctionTypeEnding( mut this, FunctionType &mut function_type );
	fn ParseInnerReferenceTag( mut this ) : ust::string8;

	fn ParseFunction( mut this ) : Function;

	fn ParseCall( mut this ) : ust::vector</ ust::shared_ptr_final</Expression/> /> ;

	fn ParseInitializer( mut this, bool parse_expression_initializer  ) : Initializer;
	fn ParseVariableInitializer( mut this ) : Initializer;

	fn ParseBlock( mut this ) : Block;
	fn ParseBlockElements( mut this ) : BlockElements;
	fn TryParseIfAlternative( mut this ) : IfAlternativeNullablePtr;
	fn ParseIfAlternative( mut this ) : IfAlternativeNullablePtr;
	fn ParseVariablesDeclaration( mut this ) : VariablesDeclaration;
	fn ParseAutoVariableDeclaration( mut this ) : AutoVariableDeclaration;
	fn ParseReturnOperator( mut this ) : ReturnOperator;
	fn ParseYieldOperator( mut this ) : YieldOperator;
	fn ParseIfOperator( mut this ) : IfOperator;
	fn ParseStaticIfOperator( mut this ) : StaticIfOperator;
	fn ParseIfCoroAdvanceOperator( mut this ) : IfCoroAdvanceOperator;
	fn TryParseLabel( mut this ) : ust::optional</Label/>;
	fn ParseWhileOperator( mut this ) : WhileOperator;
	fn ParseForOperator( mut this ) : BlockElement;
	fn ParseRangeForOperator( mut this ) : RangeForOperator;
	fn ParseCStyleForOperator( mut this ) : CStyleForOperator;
	fn ParseBreakOperator( mut this ) : BreakOperator;
	fn ParseContinueOperator( mut this ) : ContinueOperator;
	fn ParseWithOperator( mut this ) : WithOperator;
	fn ParseStaticAssert( mut this ) : StaticAssert;
	fn ParseHalt( mut this ) : BlockElement;

	fn ParseClass( mut this ) : Class;
	fn ParseClassKindAttribute( mut this ) : Class::KindAttribute;
	fn ParseClassParentsList( mut this ) : ust::vector</ComplexName/>;
	fn TryParseNonSyncTag( mut this ) : NonSyncTag;
	fn ParseClassOrderedFlag( mut this ) : bool;
	fn ParseClassBody( mut this ) : ClassElements;
	fn ParseClassBodyElements( mut this ) : ClassElements;
	fn ParseEnum( mut this ) : Enum;
	fn ParseTypeAlias( mut this ) : TypeAlias;

	type SomeTemplate= ust::variant</ tup[ ust::shared_ptr_final</ TypeTemplate />, ust::shared_ptr_final</ FunctionTemplate /> ] />;

	fn ParseTemplate( mut this ) : SomeTemplate;
	fn ParseTemplateSignatureParams( mut this ) : ust::vector</TypeTemplate::SignatureParam/>;

	// Macro related stuff.

	fn ParseMacro( mut this );
	fn ParseMacroMatchBlock( mut this ) : Macro::MatchElements;
	fn ParseMacroResultBlock( mut this ) : Macro::ResultElements;

	struct ParsedMacroElement
	{
		Lexems lexems;
		Macro::MatchElementKind kind= Macro::MatchElementKind::Lexem;
		ust::vector</ ust::shared_ptr_final</ MacroVariablesMap /> /> sub_elements; // 0 for simple macro variables, 0 or 1 for optionals, 0-many for sequences
	}

	type MacroVariablesMap= ust::unordered_map</ ust::string8, ParsedMacroElement />;
	type MacroVariablesMapsStack= ust::vector</ ust::shared_ptr_final</MacroVariablesMap/> />;

	fn FetchMacro( this, ust::string8& name, Macro::Context context ) : ust::shared_ptr_final_nullable</Macro/>;

	template</type T/>
	fn ExpandMacro( mut this, Macro& macro ) : T
	{
		var SrcLoc expansion_src_loc= it_.front().src_loc;

		// Append expansion point line/column in order to make macro unique identifiers unique in different macto expansions.
		// Use only line/column and not use file index/macro expansion index, bacause we need to produce same result for file imported in different files.
		var ust::string8 mut macro_unique_identifiers_base_name= macro_unique_identifiers_base_name_;
		macro_unique_identifiers_base_name+= "_l";
		macro_unique_identifiers_base_name+= ust::to_string8( expansion_src_loc.GetLine() );
		macro_unique_identifiers_base_name+= "_c";
		macro_unique_identifiers_base_name+= ust::to_string8( expansion_src_loc.GetColumn() );

		var Lexems lexems_expanded= ExpandMacroImpl( macro, macro_unique_identifiers_base_name );

		var SyntaxAnalyzer mut syntax_analyzer(
			lexems_expanded,
			macros_,
			macro_expansion_contexts_,
			move(macro_unique_identifiers_base_name) );

		var T mut result;
		static_if( ust::is_same_type</T, Expression/>() )
		{
			result = syntax_analyzer.ParseExpression();
		}
		else static_if( ust::is_same_type</T, BlockElements/>() )
		{
			result = syntax_analyzer.ParseBlockElements();
		}
		else static_if( ust::is_same_type</T, ClassElements/>() )
		{
			result = syntax_analyzer.ParseClassBodyElements();
		}
		else static_if( ust::is_same_type</T, NamespaceElements/>() )
		{
			result = syntax_analyzer.ParseNamespaceBody( Lexem::Type::EndOfFile );
		}
		else{ static_assert(false); }

		VectorAppend( errors_, take(syntax_analyzer.errors_) );
		return move(result);
	}

	fn ExpandMacroImpl( mut this, Macro& macro, ust::string8& macro_unique_identifiers_base_name ) : Lexems;
	fn MatchMacroBlock( mut this, Macro::MatchElements& match_elements ) : ust::shared_ptr_final_nullable</MacroVariablesMap/>;

	type UniqueMacroIdentifiersMap= ust::unordered_map</ ust::string8, ust::string8 />;

	fn ExpandMacroBlock(
		mut this,
		Macro::ResultElements& result_elements,
		MacroVariablesMapsStack &mut macro_variables_maps_stack,
		UniqueMacroIdentifiersMap &mut unique_macro_indentifiers_map,
		ust::string8& macro_unique_identifiers_base_name,
		SrcLoc& expansion_src_loc ) : Lexems;

	fn FetchMacroVariable( MacroVariablesMapsStack& macro_variables_maps_stack, ust::string8& variable_name ) : ust::optional</ParsedMacroElement/>;

	// Utilities.
	fn ExpectSemicolon( mut this );
	fn ExpectLexem( mut this, Lexem::Type t );
	fn GetPrevSrcLoc( this ) : SrcLoc;
	fn NotEndOfFile( this ) : bool;
	fn NextLexem( mut this );
	fn PushErrorMessage( mut this );
	fn PushMacroErrorMessage( mut this, SrcLoc& src_loc, ust::string8 mut text );

private:
	ust::array_view_imut</Lexem/> it_initial_;
	ust::array_view_imut</Lexem/> it_;
	ust::array_view_imut</Lexem/> last_error_it_;
	size_type last_error_repeats_= 0s;
	LexSyntErrors errors_;

	MacrosPtr imut macros_;
	MacroExpansionContextsPtr imut macro_expansion_contexts_;
	ust::string8 imut macro_unique_identifiers_base_name_;
}

fn SyntaxAnalyzer::constructor(
	this'a',
	Lexems&'b lexems,
	MacrosPtr mut macros,
	MacroExpansionContextsPtr mut macro_expansion_contexts,
	ust::string8 mut macro_unique_identifiers_base_name ) ' a <- b '
	(
		it_initial_= lexems.range(),
		it_= lexems.range(),
		last_error_it_= it_,
		macros_(move(macros)),
		macro_expansion_contexts_(move(macro_expansion_contexts)),
		macro_unique_identifiers_base_name_(move(macro_unique_identifiers_base_name))
	)
{
}

fn SyntaxAnalyzer::DoAnalyzis( mut this ) : SyntaxAnalysisResult
{
	var SyntaxAnalysisResult mut res;

	res.imports_list= ParseImports();

	while( NotEndOfFile() && it_.front().lexem_type == Lexem::Type::MacroIdentifier && it_.front().text == "macro" )
	{
		ParseMacro();
	}

	res.program_elements= ParseNamespaceBody( Lexem::Type::EndOfFile );
	res.errors= take(errors_);

	{
		auto mut lock= macros_.lock_mut();
		res.macros= take(lock.deref());
	}

	return move(res);
}

fn SyntaxAnalyzer::ParseImports( mut this ) : ImportsList
{
	var ImportsList mut imports_list;
	while( NotEndOfFile() )
	{
		if( !IsKeyword( it_.front(), Keyword::import_ ) )
		{
			break;
		}
		NextLexem();

		if( it_.front().lexem_type != Lexem::Type::String )
		{
			PushErrorMessage();
		}

		var Import mut import_ { .name= it_.front().text, .src_loc= it_.front().src_loc };
		imports_list.push_back( move(import_) );
		NextLexem();
	}

	return move(imports_list);
}

fn SyntaxAnalyzer::ParseNamespaceBody( mut this, Lexem::Type end_lexem ) : NamespaceElements
{
	var NamespaceElements mut namespace_elements;
	while( NotEndOfFile() && it_.front().lexem_type != end_lexem  )
	{
		if( IsKeyword( it_.front(), Keyword::fn_ ) || IsKeyword( it_.front(), Keyword::op_ ) )
		{
			namespace_elements.push_back( ust::make_shared_ptr_final( ParseFunction() ) );
		}
		else if( IsKeyword( it_.front(), Keyword::struct_ ) || IsKeyword( it_.front(), Keyword::class_ ) )
		{
			namespace_elements.push_back( ust::make_shared_ptr_final( ParseClass() ) );
		}
		else if( IsKeyword( it_.front(), Keyword::enum_ ) )
		{
			namespace_elements.push_back( ust::make_shared_ptr_final( ParseEnum() ) );
		}
		else if( IsKeyword( it_.front(), Keyword::type_ ) )
		{
			namespace_elements.push_back( ust::make_shared_ptr_final( ParseTypeAlias() ) );
		}
		else if( IsKeyword( it_.front(), Keyword::template_ ) )
		{
			auto t= ParseTemplate();
			variant_visit( &v : t )
			{
				namespace_elements.push_back( v );
			}
		}
		else if( IsKeyword( it_.front(), Keyword::namespace_ ) )
		{
			namespace_elements.push_back( ust::make_shared_ptr_final( ParseNamespace() ) );
		}
		else if( IsKeyword( it_.front(), Keyword::var_ ) )
		{
			namespace_elements.push_back( ust::make_shared_ptr_final( ParseVariablesDeclaration() ) );
		}
		else if( IsKeyword( it_.front(), Keyword::auto_ ) )
		{
			namespace_elements.push_back( ust::make_shared_ptr_final( ParseAutoVariableDeclaration() ) );
		}
		else if( IsKeyword( it_.front(), Keyword::static_assert_ ) )
		{
			namespace_elements.push_back( ust::make_shared_ptr_final( ParseStaticAssert() ) );
		}
		else
		{
			if( it_.front().lexem_type == Lexem::Type::Identifier )
			{
				if_var( &macro : FetchMacro( it_.front().text, Macro::Context::Namespace ) )
				{
					var NamespaceElements mut expanded_namespace_elements= ExpandMacro</NamespaceElements/>( macro );
					VectorAppend( namespace_elements, move(expanded_namespace_elements) );
					continue;
				}
			}

			PushErrorMessage();
			break;
		}
	}

	return move(namespace_elements);
}

fn SyntaxAnalyzer::ParseNamespace( mut this ) : Namespace
{
	if( !IsKeyword( it_.front(), Keyword::namespace_ ) )
	{
		PushErrorMessage();
	}
	NextLexem();

	if( it_.front().lexem_type != Lexem::Type::Identifier )
	{
		PushErrorMessage();
	}
	var Namespace mut namespace_
	{
		.src_loc= it_.front().src_loc,
		.name= it_.front().text,
	};
	NextLexem();

	ExpectLexem( Lexem::Type::BraceLeft );

	namespace_.elements= ParseNamespaceBody( Lexem::Type::BraceRight );

	ExpectLexem( Lexem::Type::BraceRight );

	return namespace_;
}

fn SyntaxAnalyzer::ParseTemplateArgs( mut this ) : TemplateArgs
{
	var TemplateArgs mut template_args;

	ExpectLexem( Lexem::Type::TemplateBracketLeft );

	while( NotEndOfFile() )
	{
		if( it_.front().lexem_type == Lexem::Type::TemplateBracketRight )
		{
			NextLexem();
			break;
		}

		template_args.push_back( ParseExpression() );

		if( it_.front().lexem_type == Lexem::Type::TemplateBracketRight )
		{}
		else if( it_.front().lexem_type == Lexem::Type::Comma )
		{
			NextLexem();
			if( it_.front().lexem_type == Lexem::Type::TemplateBracketRight )
			{
				PushErrorMessage();
			}
		}
	}

	return move(template_args);
}

fn SyntaxAnalyzer::ParseComplexName( mut this ) : ComplexName
{
	var ComplexName mut complex_name{ .src_loc= it_.front().src_loc };
	if( IsKeyword( it_.front(), Keyword::typeof_ ) )
	{
		NextLexem();

		ExpectLexem(  Lexem::Type::BracketLeft );

		var Typeof mut typeof_{ .expr( ParseExpression() ) };
		complex_name.start= move(typeof_);

		ExpectLexem( Lexem::Type::BracketRight );
	}
	else if( it_.front().lexem_type == Lexem::Type::Identifier )
	{
		complex_name.start= it_.front().text;
		NextLexem();

		if( it_.front().lexem_type == Lexem::Type::TemplateBracketLeft )
		{
			complex_name.tail.push_back( ust::make_box( ParseTemplateArgs() ) );
		}
	}
	else if( it_.front().lexem_type == Lexem::Type::Scope )
	{
		complex_name.start= EmptyVariant();
	}
	else
	{
		PushErrorMessage();
	}

	while( NotEndOfFile() && it_.front().lexem_type == Lexem::Type::Scope )
	{
		NextLexem();

		if( it_.front().lexem_type != Lexem::Type::Identifier )
		{
			PushErrorMessage();
		}
		complex_name.tail.push_back( it_.front().text );
		NextLexem();

		if( it_.front().lexem_type == Lexem::Type::TemplateBracketLeft )
		{
			complex_name.tail.push_back( ust::make_box( ParseTemplateArgs() ) );
		}
	}

	return move(complex_name);
}

fn SyntaxAnalyzer::ParseExpression( mut this ) : Expression
{
	var BinaryOperatorsChain mut binary_operators_chain;

	while( NotEndOfFile() )
	{
		var BinaryOperatorsChainComponent mut comp{ .expression= ParseExpressionComponent() };
		binary_operators_chain.push_back( move(comp) );

		if_var( binary_operator : LexemToBinaryOperator( it_.front() ) )
		{
			binary_operators_chain.back().operator= binary_operator;
			binary_operators_chain.back().src_loc= it_.front().src_loc;
			NextLexem();
			continue;
		}
		break;
	}

	return FoldBinaryOperatorsChain( binary_operators_chain.range() );
}

fn SyntaxAnalyzer::ParseExpressionInBrackets( mut this ) : Expression
{
	ExpectLexem( Lexem::Type::BracketLeft );

	var Expression mut e= ParseExpression();

	ExpectLexem( Lexem::Type::BracketRight );

	return move(e);
}

fn SyntaxAnalyzer::ParseExpressionComponent( mut this ) : Expression
{
	auto mut expr= ParseExpressionComponentHelper();
	return TryParseExpressionComponentPostfixOperator(move(expr));
}

fn SyntaxAnalyzer::TryParseExpressionComponentPostfixOperator( mut this, Expression mut expr ) : Expression
{
	if( it_.front().lexem_type == Lexem::Type::SquareBracketLeft )
	{
		auto src_loc= it_.front().src_loc;
		NextLexem();

		auto mut index= ParseExpression();

		ExpectLexem( Lexem::Type::SquareBracketRight );

		var IndexationOperator mut indexation_operator
		{
			.src_loc= src_loc,
			.value(move(expr)),
			.index(move(index))
		};

		return TryParseExpressionComponentPostfixOperator(move(indexation_operator));
	}
	else if( it_.front().lexem_type == Lexem::Type::BracketLeft )
	{
		var CallOperator mut call_operator
		{
			.src_loc= it_.front().src_loc,
			.value(move(expr)),
			.args(ParseCall())
		};

		return TryParseExpressionComponentPostfixOperator(move(call_operator));
	}
	else if( it_.front().lexem_type == Lexem::Type::Dot )
	{
		var MemberAccessOperator mut member_access_operator
		{
			.src_loc =it_.front().src_loc,
			.value(move(expr))
		};
		NextLexem();

		if( it_.front().lexem_type != Lexem::Type::Identifier )
		{
			PushErrorMessage();
		}
		member_access_operator.member_name= it_.front().text;
		NextLexem();

		if( it_.front().lexem_type == Lexem::Type::TemplateBracketLeft )
		{
			member_access_operator.template_args.reset( ParseTemplateArgs() );
		}

		return TryParseExpressionComponentPostfixOperator(move(member_access_operator));
	}
	else
	{
		return move(expr);
	}
}

fn SyntaxAnalyzer::ParseExpressionComponentHelper( mut this ) : Expression
{
	if( it_.front().lexem_type == Lexem::Type::Plus )
	{
		var UnaryPlus mut unary_plus{ .src_loc= it_.front().src_loc, .expr(Expression()) };
		NextLexem();
		unary_plus.expr.deref()= ParseExpressionComponent();
		return move(unary_plus);
	}
	else if( it_.front().lexem_type == Lexem::Type::Minus )
	{
		var UnaryMinus mut unary_minus{ .src_loc= it_.front().src_loc, .expr(Expression()) };
		NextLexem();
		unary_minus.expr.deref()= ParseExpressionComponent();
		return move(unary_minus);
	}
	else if( it_.front().lexem_type == Lexem::Type::Not )
	{
		var LogicalNot mut logical_not{ .src_loc= it_.front().src_loc, .expr(Expression()) };
		NextLexem();
		logical_not.expr.deref()= ParseExpressionComponent();
		return move(logical_not);
	}
	else if( it_.front().lexem_type == Lexem::Type::Tilda )
	{
		var BitwiseNot mut bitwise_not{ .src_loc= it_.front().src_loc, .expr(Expression()) };
		NextLexem();
		bitwise_not.expr.deref()= ParseExpressionComponent();
		return move(bitwise_not);
	}
	else if( it_.front().lexem_type == Lexem::Type::Number )
	{
		var NumericConstant mut numeric_constant{ .src_loc= it_.front().src_loc };
		halt if( it_.front().text.size() < typeinfo</NumberLexemData/>.size_of );

		unsafe( ust::memory_copy( cast_ref_unsafe</byte8/>( numeric_constant.num ), cast_ref_unsafe</byte8/>( it_.front().text.front() ), typeinfo</NumberLexemData/>.size_of ) );

		NextLexem();

		return  move(numeric_constant);
	}
	else if( it_.front().lexem_type == Lexem::Type::String )
	{
		var StringLiteral mut string_literal
		{
			.src_loc= it_.front().src_loc,
			.value= it_.front().text,
		};
		NextLexem();

		if( it_.front().lexem_type == Lexem::Type::LiteralSuffix )
		{
			string_literal.type_suffix= it_.front().text;
			NextLexem();
		}

		return  move(string_literal);
	}
	else if( it_.front().lexem_type == Lexem::Type::SquareBracketLeft )
	{
		return ust::make_box( ParseArrayType() );
	}
	else if( IsKeyword( it_.front(), Keyword::tup_ ) )
	{
		return ust::make_box( ParseTupleType() );
	}
	else if( IsKeyword( it_.front(), Keyword::false_ ) )
	{
		var BooleanConstant mut boolean_constant{ .src_loc= it_.front().src_loc, .value= false };
		NextLexem();
		return move(boolean_constant);
	}
	else if( IsKeyword( it_.front(), Keyword::true_  ) )
	{
		var BooleanConstant mut boolean_constant{ .src_loc= it_.front().src_loc, .value= true  };
		NextLexem();
		return move(boolean_constant);
	}
	else if( IsKeyword( it_.front(), Keyword::fn_ ) )
	{
		return ust::make_box( ParseFunctionType() );
	}
	else if( IsKeyword( it_.front(), Keyword::generator_ ) )
	{
		return ust::make_box( ParseGeneratorType() );
	}
	else if( IsKeyword( it_.front(), Keyword::typeinfo_ ) )
	{
		auto src_loc= it_.front().src_loc;
		NextLexem();
		var Typeinfo mut typeinfo_{ .src_loc= src_loc, .type_name= ParseTypeNameInTemplateBrackets()};
		return move(typeinfo_);
	}
	else if( IsKeyword( it_.front(), Keyword::non_sync_ ) )
	{
		auto src_loc= it_.front().src_loc;
		NextLexem();
		var NonSyncExpression mut non_sync_expression{ .src_loc= src_loc, .type_name= ParseTypeNameInTemplateBrackets() };
		return move(non_sync_expression);
	}
	else if( IsKeyword( it_.front(), Keyword::cast_ref_ ) )
	{
		auto src_loc= it_.front().src_loc;
		NextLexem();
		var CastRef mut cast{ .src_loc= src_loc, .t(ParseTypeNameInTemplateBrackets()), .expression(ParseExpressionInBrackets()) };
		return move(cast);
	}
	else if( IsKeyword( it_.front(), Keyword::cast_ref_unsafe_ ) )
	{
		auto src_loc= it_.front().src_loc;
		NextLexem();
		var CastRefUnsafe mut cast{ .src_loc= src_loc, .t(ParseTypeNameInTemplateBrackets()), .expression(ParseExpressionInBrackets()) };
		return move(cast);
	}
	else if( IsKeyword( it_.front(), Keyword::cast_imut_ ) )
	{
		auto src_loc= it_.front().src_loc;
		NextLexem();
		var CastImut mut cast{ .src_loc= src_loc, .expression(ParseExpressionInBrackets()) };
		return move(cast);
	}
	else if( IsKeyword( it_.front(), Keyword::cast_mut_ ) )
	{
		auto src_loc= it_.front().src_loc;
		NextLexem();
		var CastMut mut cast{ .src_loc= src_loc, .expression(ParseExpressionInBrackets()) };
		return move(cast);
	}
	else if( IsKeyword( it_.front(), Keyword::safe_ ) )
	{
		auto src_loc= it_.front().src_loc;
		NextLexem();
		var SafeExpression mut e{ .src_loc= src_loc, .expression(ParseExpressionInBrackets()) };
		return move(e);
	}
	else if( IsKeyword( it_.front(), Keyword::unsafe_ ) )
	{
		auto src_loc= it_.front().src_loc;
		NextLexem();
		var UnsafeExpression mut e{ .src_loc= src_loc, .expression(ParseExpressionInBrackets()) };
		return move(e);
	}
	else if( IsKeyword( it_.front(), Keyword::move_ ) )
	{
		var MoveOperator mut move_operator{ .src_loc= it_.front().src_loc };

		NextLexem();

		ExpectLexem( Lexem::Type::BracketLeft );

		if( it_.front().lexem_type != Lexem::Type::Identifier )
		{
			PushErrorMessage();
		}
		move_operator.variable_name= it_.front().text;
		NextLexem();

		ExpectLexem( Lexem::Type::BracketRight );

		return move(move_operator);
	}
	else if( IsKeyword( it_.front(), Keyword::take_ ) )
	{
		auto src_loc= it_.front().src_loc;
		NextLexem();

		var TakeOperator mut take_operator{ .src_loc= src_loc, .expression(ParseExpressionInBrackets()) };
		return move(take_operator);
	}
	else if( IsKeyword( it_.front(), Keyword::select_ ) )
	{
		auto src_loc= it_.front().src_loc;
		NextLexem();

		ExpectLexem( Lexem::Type::BracketLeft );
		var Expression mut condition= ParseExpression();

		ExpectLexem( Lexem::Type::Question );
		var Expression mut true_branch= ParseExpression();

		ExpectLexem( Lexem::Type::Colon );
		var Expression mut false_branch= ParseExpression();

		ExpectLexem( Lexem::Type::BracketRight );

		var TernaryOperator mut ternary_operator
		{
			.src_loc= src_loc,
			.condition( move(condition) ),
			.branches[ ( move(true_branch) ), ( move(false_branch) ) ],
		};
		return move(ternary_operator);
	}
	else if( it_.front().lexem_type == Lexem::Type::PointerTypeMark )
	{
		return ust::make_box( ParseRawPointerType() );
	}
	else if( it_.front().lexem_type == Lexem::Type::ReferenceToPointer )
	{
		auto src_loc= it_.front().src_loc;
		NextLexem();
		var ReferenceToRawPointerOperator mut o{ .src_loc= src_loc, .expression(ParseExpressionInBrackets()) };
		return move(o);
	}
	else if( it_.front().lexem_type == Lexem::Type::PointerToReference )
	{
		auto src_loc= it_.front().src_loc;
		NextLexem();

		var Expression mut e= ParseExpressionInBrackets();

		var RawPointerToReferenceOperator mut o{ .src_loc= src_loc, .expression(move(e)) };

		return move(o);
	}
	else if( it_.front().lexem_type == Lexem::Type::Identifier )
	{
		if_var( &macro : FetchMacro( it_.front().text, Macro::Context::Expression ) )
		{
			return ExpandMacro</Expression/>( macro);
		}

		return ParseComplexName();
	}
	else if( it_.front().lexem_type == Lexem::Type::Scope )
	{
		return ParseComplexName();
	}
	else if( it_.front().lexem_type == Lexem::Type::BracketLeft )
	{
		return ParseExpressionInBrackets();
	}
	else
	{
		PushErrorMessage();
		return Expression();
	}
}

fn SyntaxAnalyzer::ParseTypeNameInTemplateBrackets( mut this ) : TypeName
{
	ExpectLexem( Lexem::Type::TemplateBracketLeft );
	auto mut result= ParseTypeName();
	ExpectLexem( Lexem::Type::TemplateBracketRight );

	return move(result);
}

fn SyntaxAnalyzer::ParseTypeName( mut this ) : TypeName
{
	if( IsKeyword( it_.front(), Keyword::fn_ ) )
	{
		return ust::make_box( ParseFunctionType() );
	}
	else if( IsKeyword( it_.front(), Keyword::generator_ ) )
	{
		return ust::make_box( ParseGeneratorType() );
	}
	else if( IsKeyword( it_.front(), Keyword::tup_ ) )
	{
		return ust::make_box( ParseTupleType() );
	}
	else if( it_.front().lexem_type == Lexem::Type::PointerTypeMark )
	{
		return ust::make_box( ParseRawPointerType() );
	}
	else if( it_.front().lexem_type == Lexem::Type::Identifier || it_.front().lexem_type == Lexem::Type::Scope )
	{
		return ParseComplexName();
	}
	else if( it_.front().lexem_type == Lexem::Type::SquareBracketLeft )
	{
		return ust::make_box( ParseArrayType() );
	}
	else if( it_.front().lexem_type == Lexem::Type::BracketLeft )
	{
		// Type name inside (). We needs this for better parsing of function pointer types, for example.
		NextLexem();

		auto mut type_name= ParseTypeName();

		ExpectLexem( Lexem::Type::BracketRight );

		return move(type_name);
	}
	else
	{
		PushErrorMessage();
		return TypeName();
	}
}

fn SyntaxAnalyzer::ParseArrayType( mut this ) : ArrayType
{
	if( it_.front().lexem_type != Lexem::Type::SquareBracketLeft )
	{
		PushErrorMessage();
	}
	var ArrayType mut array_type{ .src_loc= it_.front().src_loc };
	NextLexem();

	array_type.element_type= ParseTypeName();

	ExpectLexem( Lexem::Type::Comma );

	array_type.element_count= ParseExpression();

	ExpectLexem( Lexem::Type::SquareBracketRight );

	return move(array_type);
}

fn SyntaxAnalyzer::ParseTupleType( mut this ) : TupleType
{
	var TupleType mut tuple_type{ .src_loc= it_.front().src_loc };

	halt if( !IsKeyword( it_.front(), Keyword::tup_ ) );
	NextLexem();

	ExpectLexem( Lexem::Type::SquareBracketLeft );

	if( it_.front().lexem_type != Lexem::Type::SquareBracketRight )
	{
		while(NotEndOfFile())
		{
			tuple_type.elements.push_back( ParseTypeName() );
			if( it_.front().lexem_type != Lexem::Type::Comma )
			{
				break;
			}
			NextLexem();
		}
	}

	ExpectLexem( Lexem::Type::SquareBracketRight );

	return move(tuple_type);
}

fn SyntaxAnalyzer::ParseRawPointerType( mut this ) : RawPointerType
{
	halt if( it_.front().lexem_type != Lexem::Type::PointerTypeMark );

	var RawPointerType mut raw_pointer_type{ .src_loc= it_.front().src_loc };

	NextLexem();

	ExpectLexem( Lexem::Type::BracketLeft );
	raw_pointer_type.element_type= ParseTypeName();

	ExpectLexem( Lexem::Type::BracketRight );

	return move(raw_pointer_type);
}

fn SyntaxAnalyzer::ParseFunctionType( mut this ) : FunctionType
{
	var FunctionType mut function_type{ .src_loc= it_.front().src_loc };

	if( !IsKeyword( it_.front(), Keyword::fn_ ) )
	{
		PushErrorMessage();
	}
	NextLexem();

	ExpectLexem( Lexem::Type::BracketLeft );

	while( NotEndOfFile() )
	{
		if( it_.front().lexem_type == Lexem::Type::BracketRight )
		{
			NextLexem();
			break;
		}

		function_type.params.push_back( ParseFunctionParam() );

		if( it_.front().lexem_type == Lexem::Type::BracketRight )
		{
			NextLexem();
			break;
		}
		if( it_.front().lexem_type == Lexem::Type::Comma )
		{
			NextLexem();

			if( it_.front().lexem_type == Lexem::Type::BracketRight ) // Prevent ')' after ','
			{
				PushErrorMessage();
				break;
			}
		}
	}

	ParseFunctionTypeEnding( function_type );

	return move(function_type);
}

fn SyntaxAnalyzer::ParseGeneratorType( mut this ) : GeneratorType
{
	var GeneratorType mut generator_type{ .src_loc= it_.front().src_loc };

	if( !IsKeyword( it_.front(), Keyword::generator_ ) )
	{
		PushErrorMessage();
	}
	NextLexem();

	if( it_.front().lexem_type == Lexem::Type::Apostrophe )
	{
		NextLexem();

		var GeneratorType::InnerReferenceTag mut inner_reference_tag;

		if( IsKeyword( it_.front(), Keyword::mut_ ) )
		{
			NextLexem();
			inner_reference_tag.mutability_modifier= MutabilityModifier::Mutable;
		}
		else if( IsKeyword( it_.front(), Keyword::imut_ ) )
		{
			NextLexem();
			inner_reference_tag.mutability_modifier= MutabilityModifier::Immutable;
		}

		if( it_.front().lexem_type != Lexem::Type::Identifier )
		{
			PushErrorMessage();
		}
		inner_reference_tag.name= it_.front().text;
		NextLexem();

		ExpectLexem( Lexem::Type::Apostrophe );

		generator_type.inner_reference_tag.reset( move(inner_reference_tag) );
	}

	generator_type.non_sync_tag= TryParseNonSyncTag();

	ExpectLexem( Lexem::Type::Colon );

	generator_type.return_type= ParseTypeName();

	if( it_.front().lexem_type == Lexem::Type::And )
	{
		NextLexem();
		generator_type.return_value_reference_modifier= ReferenceModifier::Reference;

		if( it_.front().lexem_type == Lexem::Type::Apostrophe )
		{
			NextLexem();

			if( it_.front().lexem_type == Lexem::Type::Identifier )
			{
				generator_type.return_value_reference_tag= it_.front().text;
				NextLexem();
			}
			else
			{
				PushErrorMessage();
			}
		}

		if( IsKeyword( it_.front(), Keyword::mut_ ) )
		{
			generator_type.return_value_mutability_modifier= MutabilityModifier::Mutable;
			NextLexem();
		}
		else if( IsKeyword( it_.front(), Keyword::imut_ ) )
		{
			generator_type.return_value_mutability_modifier= MutabilityModifier::Immutable;
			NextLexem();
		}
	}
	else if( it_.front().lexem_type == Lexem::Type::Apostrophe )
	{
		generator_type.return_value_reference_tag= ParseInnerReferenceTag();
	}

	return move(generator_type);
}

fn SyntaxAnalyzer::ParseFunctionParam( mut this ) : FunctionType::Param
{
	var FunctionType::Param mut param{ .src_loc= it_.front().src_loc, .t= ParseTypeName() };

	if( it_.front().lexem_type == Lexem::Type::And )
	{
		param.reference_modifier= ReferenceModifier::Reference;
		NextLexem();

		if( it_.front().lexem_type == Lexem::Type::Apostrophe )
		{
			NextLexem();

			if( it_.front().lexem_type != Lexem::Type::Identifier )
			{
				PushErrorMessage();
			}
			param.reference_tag= it_.front().text;
			NextLexem();
		}
	}

	if( IsKeyword( it_.front(), Keyword::mut_ ) )
	{
		param.mutability_modifier= MutabilityModifier::Mutable;
		NextLexem();
	}
	else if( IsKeyword( it_.front(), Keyword::imut_ ) )
	{
		param.mutability_modifier= MutabilityModifier::Immutable;
		NextLexem();
	}

	if( it_.front().lexem_type != Lexem::Type::Identifier )
	{
		PushErrorMessage();
	}
	param.name= it_.front().text;
	NextLexem();

	if( it_.front().lexem_type == Lexem::Type::Apostrophe )
	{
		param.inner_reference_tag= ParseInnerReferenceTag();
	}

	return move(param);
}

fn SyntaxAnalyzer::ParseFunctionTypeEnding( mut this, FunctionType &mut function_type )
{
	if( it_.front().lexem_type == Lexem::Type::Apostrophe )
	{
		NextLexem();

		if( it_.front().lexem_type == Lexem::Type::Apostrophe )
		{
			// Empty list.
			NextLexem();
		}
		else
		{
			while( NotEndOfFile() )
			{
				var FunctionType::ReferencePollution mut reference_pollution;

				if( it_.front().lexem_type != Lexem::Type::Identifier )
				{
					PushErrorMessage();
				}
				reference_pollution.dst= it_.front().text;
				NextLexem();

				ExpectLexem( Lexem::Type::LeftArrow );

				if( it_.front().lexem_type != Lexem::Type::Identifier )
				{
					PushErrorMessage();
				}
				reference_pollution.src= it_.front().text;
				NextLexem();

				function_type.references_pollution.push_back( move(reference_pollution) );

				if( it_.front().lexem_type == Lexem::Type::Apostrophe )
				{
					NextLexem();
					break;
				}
				else if( it_.front().lexem_type == Lexem::Type::Comma )
				{
					NextLexem();
					continue;
				}
				else
				{
					PushErrorMessage();
					break;
				}
			}
		}
	}

	if( IsKeyword( it_.front(), Keyword::unsafe_ ) )
	{
		NextLexem();
		function_type.is_unsafe= true;
	}

	if( IsKeyword( it_.front(), Keyword::call_conv_ ) )
	{
		NextLexem();
		ExpectLexem( Lexem::Type::BracketLeft );

		if( it_.front().lexem_type != Lexem::Type::String )
		{
			PushErrorMessage();
		}

		function_type.calling_convention= it_.front().text;
		NextLexem();

		ExpectLexem( Lexem::Type::BracketRight );
	}

	if( it_.front().lexem_type != Lexem::Type::Colon )
	{
		return;
	}
	NextLexem();

	function_type.return_type= ParseTypeName();

	if( it_.front().lexem_type == Lexem::Type::And )
	{
		NextLexem();
		function_type.return_value_reference_modifier= ReferenceModifier::Reference;

		if( it_.front().lexem_type == Lexem::Type::Apostrophe )
		{
			NextLexem();

			if( it_.front().lexem_type != Lexem::Type::Identifier )
			{
				PushErrorMessage();
			}
			function_type.return_value_reference_tag= it_.front().text;
			NextLexem();
		}

		if( IsKeyword( it_.front(), Keyword::mut_ ) )
		{
			function_type.return_value_mutability_modifier= MutabilityModifier::Mutable;
			NextLexem();
		}
		else if( IsKeyword( it_.front(), Keyword::imut_ ) )
		{
			function_type.return_value_mutability_modifier= MutabilityModifier::Immutable;
			NextLexem();
		}
	}
	else if( it_.front().lexem_type == Lexem::Type::Apostrophe )
	{
		function_type.return_value_reference_tag= ParseInnerReferenceTag();
	}
}

fn SyntaxAnalyzer::ParseInnerReferenceTag( mut this ) : ust::string8
{
	ExpectLexem( Lexem::Type::Apostrophe );

	if( it_.front().lexem_type != Lexem::Type::Identifier )
	{
		PushErrorMessage();
	}
	var ust::string8 mut tag= it_.front().text;
	NextLexem();

	ExpectLexem( Lexem::Type::Apostrophe );

	return move(tag);
}

fn SyntaxAnalyzer::ParseFunction( mut this ) : Function
{
	auto is_operator= IsKeyword( it_.front(), Keyword::op_ );

	if( !( IsKeyword( it_.front(), Keyword::fn_ ) || IsKeyword( it_.front(), Keyword::op_ ) ) )
	{
		PushErrorMessage();
	}

	var Function mut res{ .src_loc= it_.front().src_loc };
	NextLexem();

	if( IsKeyword( it_.front(), Keyword::virtual_ ) )
	{
		NextLexem();
		res.virtual_kind= Function::VirtualKind::DeclareVirtual;
		if( IsKeyword( it_.front(), Keyword::override_ ) )
		{
			res.virtual_kind= Function::VirtualKind::VirtualOverride;
			NextLexem();
		}
		else if( IsKeyword( it_.front(), Keyword::final_ ) )
		{
			res.virtual_kind= Function::VirtualKind::VirtualFinal;
			NextLexem();
		}
		else if( IsKeyword( it_.front(), Keyword::pure_ ) )
		{
			res.virtual_kind= Function::VirtualKind::VirtualPure;
			NextLexem();
		}
	}
	if( IsKeyword( it_.front(), Keyword::generator_ ) )
	{
		NextLexem();
		res.kind= Function::Kind::Generator;
		res.coroutine_non_sync_tag= TryParseNonSyncTag();
	}
	if( IsKeyword( it_.front(), Keyword::constexpr_ ) )
	{
		res.constexpr_= true;
		NextLexem();
	}
	if( IsKeyword( it_.front(), Keyword::nomangle_ ) )
	{
		res.no_mangle= true;
		NextLexem();
	}
	if( IsKeyword( it_.front(), Keyword::enable_if_ ) )
	{
		NextLexem();

		res.condition.reset( ParseExpressionInBrackets() );
	}

	if( is_operator )
	{
		if( it_.front().lexem_type == Lexem::Type::Scope )
		{
			res.name.push_back( "" );
			NextLexem();

			if( it_.front().lexem_type != Lexem::Type::Identifier )
			{
				PushErrorMessage();
			}
		}

		while( NotEndOfFile() )
		{
			if( it_.front().lexem_type != Lexem::Type::Identifier )
			{
				break;
			}
			res.name.push_back( it_.front().text );
			NextLexem();

			if( it_.front().lexem_type != Lexem::Type::Scope )
			{
				PushErrorMessage();
			}
			NextLexem();
		}

		auto l= it_.front().lexem_type;
		auto mut o= OverloadedOperator::None;
			 if( l == Lexem::Type::Plus    ){ o= OverloadedOperator::Add; }
		else if( l == Lexem::Type::Minus   ){ o= OverloadedOperator::Sub; }
		else if( l == Lexem::Type::Star    ){ o= OverloadedOperator::Mul; }
		else if( l == Lexem::Type::Slash   ){ o= OverloadedOperator::Div; }
		else if( l == Lexem::Type::Percent ){ o= OverloadedOperator::Rem; }
		else if( l == Lexem::Type::CompareEqual ){ o= OverloadedOperator::CompareEqual; }
		else if( l == Lexem::Type::CompareOrder ){ o= OverloadedOperator::CompareOrder; }
		else if( l == Lexem::Type::And ){ o= OverloadedOperator::And; }
		else if( l == Lexem::Type::Or  ){ o= OverloadedOperator::Or ; }
		else if( l == Lexem::Type::Xor ){ o= OverloadedOperator::Xor; }
		else if( l == Lexem::Type::ShiftLeft  ){ o= OverloadedOperator::ShiftLeft ; }
		else if( l == Lexem::Type::ShiftRight ){ o= OverloadedOperator::ShiftRight; }
		else if( l == Lexem::Type::AssignAdd ){ o= OverloadedOperator::AssignAdd; }
		else if( l == Lexem::Type::AssignSub ){ o= OverloadedOperator::AssignSub; }
		else if( l == Lexem::Type::AssignMul ){ o= OverloadedOperator::AssignMul; }
		else if( l == Lexem::Type::AssignDiv ){ o= OverloadedOperator::AssignDiv; }
		else if( l == Lexem::Type::AssignRem ){ o= OverloadedOperator::AssignRem; }
		else if( l == Lexem::Type::AssignAnd ){ o= OverloadedOperator::AssignAnd; }
		else if( l == Lexem::Type::AssignOr  ){ o= OverloadedOperator::AssignOr ; }
		else if( l == Lexem::Type::AssignXor ){ o= OverloadedOperator::AssignXor; }
		else if( l == Lexem::Type::AssignShiftLeft  ){ o= OverloadedOperator::AssignShiftLeft ; }
		else if( l == Lexem::Type::AssignShiftRight ){ o= OverloadedOperator::AssignShiftRight; }
		else if( l == Lexem::Type::Not   ){ o= OverloadedOperator::LogicalNot; }
		else if( l == Lexem::Type::Tilda ){ o= OverloadedOperator::BitwiseNot; }
		else if( l == Lexem::Type::Assignment ){ o= OverloadedOperator::Assign; }
		else if( l == Lexem::Type::Increment ){ o= OverloadedOperator::Increment; }
		else if( l == Lexem::Type::Decrement ){ o= OverloadedOperator::Decrement; }
		else if( l == Lexem::Type::SquareBracketLeft )
		{
			o= OverloadedOperator::Indexing;

			NextLexem();
			if( it_.front().lexem_type != Lexem::Type::SquareBracketRight )
			{
				PushErrorMessage();
			}
		}
		else if( l == Lexem::Type::BracketLeft )
		{
			o= OverloadedOperator::Call;

			NextLexem();
			if( it_.front().lexem_type != Lexem::Type::BracketRight )
			{
				PushErrorMessage();
			}
		}
		else
		{
			PushErrorMessage();
		}
		NextLexem();

		res.operator= o;
		res.name.push_back( OverloadedOperatorToString(o) );
	}
	else
	{
		while( NotEndOfFile() )
		{
			if( it_.front().lexem_type != Lexem::Type::Identifier )
			{
				PushErrorMessage();
				return Function();
			}
			res.name.push_back( it_.front().text );
			NextLexem();

			if( it_.front().lexem_type != Lexem::Type::Scope )
			{
				break;
			}
			NextLexem();
		}
	}

	if( res.name.back() == KeywordToString( Keyword::conversion_constructor_ ) )
	{
		// Set internal name of conversion constructor to "constructor" and use special flag for indication of conversion constructor.
		res.name.back()= KeywordToString( Keyword::constructor_ );
		res.is_conversion_constructor= true;
	}

	res.function_type.src_loc= it_.front().src_loc;
	ExpectLexem( Lexem::Type::BracketLeft );

	auto is_constructor_or_destructor=
		res.name.back() == KeywordToString( Keyword::constructor_ ) || res.name.back() == KeywordToString( Keyword::destructor_ );

	if( IsKeyword( it_.front(), Keyword::this_ ) || IsKeyword( it_.front(), Keyword::mut_ ) || IsKeyword( it_.front(), Keyword::imut_ ) )
	{
		var FunctionType::Param mut this_param
		{
			.name= KeywordToString( Keyword::this_ ),
			.reference_tag= KeywordToString( Keyword::this_ ), // Implicit set name for tag of "this" to "this".
		};

		if( IsKeyword( it_.front(), Keyword::mut_ ) )
		{
			this_param.mutability_modifier= MutabilityModifier::Mutable;
			NextLexem();
		}
		else if( IsKeyword( it_.front(), Keyword::imut_ ) )
		{
			this_param.mutability_modifier= MutabilityModifier::Immutable;
			NextLexem();
		}

		if( !IsKeyword( it_.front(), Keyword::this_ ) )
		{
			PushErrorMessage();
		}
		this_param.src_loc= it_.front().src_loc;
		NextLexem();

		if( is_constructor_or_destructor ){ this_param.mutability_modifier= MutabilityModifier::Mutable; }

		if( it_.front().lexem_type == Lexem::Type::Apostrophe )
		{
			this_param.inner_reference_tag= ParseInnerReferenceTag();
		}

		res.function_type.params.push_back( move(this_param) );

		if( it_.front().lexem_type == Lexem::Type::Comma )
		{
			NextLexem();
			// Disallov constructions, like "fn f( mut this, ){}"
			if( it_.front().lexem_type == Lexem::Type::BracketRight )
			{
				PushErrorMessage();
			}
		}
	}

	// If method is constructor or destructor and "this" not explicitly specified, add it.
	// It's easier add "this" here, than dealing with implicit "this" in CodeBuilder.
	if( is_constructor_or_destructor && res.function_type.params.empty() )
	{
		var FunctionType::Param mut this_param
		{
			.src_loc= it_.front().src_loc,
			.name= KeywordToString( Keyword::this_ ),
			.mutability_modifier= MutabilityModifier::Mutable,
		};
		res.function_type.params.push_back( move(this_param) );
	}

	while( NotEndOfFile() )
	{
		if( it_.front().lexem_type == Lexem::Type::BracketRight )
		{
			NextLexem();
			break;
		}

		res.function_type.params.push_back( ParseFunctionParam() );

		if( it_.front().lexem_type == Lexem::Type::BracketRight )
		{
			NextLexem();
			break;
		}
		if( it_.front().lexem_type == Lexem::Type::Comma )
		{
			NextLexem();

			if( it_.front().lexem_type == Lexem::Type::BracketRight ) // Prevent ')' after ','
			{
				PushErrorMessage();
				return Function();
			}
		}
	}

	ParseFunctionTypeEnding( res.function_type );

	if( it_.front().lexem_type == Lexem::Type::Semicolon )
	{
		NextLexem();
	}
	else if( it_.front().lexem_type == Lexem::Type::Assignment )
	{
		NextLexem();

		if( IsKeyword( it_.front(), Keyword::default_ ) )
		{
			res.body_kind= Function::BodyKind::BodyGenerationRequired;
		}
		else if( IsKeyword( it_.front(), Keyword::delete_ ) )
		{
			res.body_kind= Function::BodyKind::BodyGenerationDisabled;
		}
		else
		{
			PushErrorMessage();
		}

		NextLexem();

		ExpectSemicolon();
	}
	else
	{
		if( it_.front().lexem_type == Lexem::Type::BracketLeft )
		{
			var StructNamedInitializer mut constructor_initializer_list{ .src_loc= it_.front().src_loc };
			NextLexem();

			while( NotEndOfFile() && it_.front().lexem_type != Lexem::Type::BracketRight )
			{
				if( it_.front().lexem_type != Lexem::Type::Identifier )
				{
					PushErrorMessage();
					break;
				}

				var StructNamedInitializer::Member mut member_initializer
				{
					.src_loc= it_.front().src_loc,
					.name= it_.front().text,
					.initializer( Initializer() ),
				};
				NextLexem();

				member_initializer.initializer.deref()= ParseVariableInitializer();
				if( !member_initializer.initializer.deref().get</EmptyVariant/>().empty() )
				{
					PushErrorMessage();
				}

				constructor_initializer_list.members_initializers.push_back( move(member_initializer) );

				if( it_.front().lexem_type == Lexem::Type::Comma )
				{
					NextLexem();
					if( it_.front().lexem_type == Lexem::Type::BracketRight )
					{
						break;
					}
				}
				else
				{
					break;
				}
			}

			ExpectLexem( Lexem::Type::BracketRight );

			res.constructor_initializer_list.reset( move(constructor_initializer_list) );
		}

		if( it_.front().lexem_type == Lexem::Type::BraceLeft )
		{
			res.block.reset( ParseBlock() );
		}
		else
		{
			PushErrorMessage();
		}
	}
	return move(res);
}

fn SyntaxAnalyzer::ParseCall( mut this ) : ust::vector</ ust::shared_ptr_final</Expression/> />
{
	ExpectLexem( Lexem::Type::BracketLeft );

	var ust::vector</ ust::shared_ptr_final</Expression/> />  mut args;
	while( NotEndOfFile() )
	{
		if( it_.front().lexem_type == Lexem::Type::BracketRight )
		{
			break;
		}

		args.push_back( ust::make_shared_ptr_final( ParseExpression() ) );

		if( it_.front().lexem_type== Lexem::Type::Comma )
		{
			NextLexem();
			if( it_.front().lexem_type== Lexem::Type::BracketRight )
			{
				PushErrorMessage();
			}
		}
		else
		{
			break;
		}
	}

	ExpectLexem( Lexem::Type::BracketRight );

	return move(args);
}

fn SyntaxAnalyzer::ParseInitializer( mut this, bool parse_expression_initializer ) : Initializer
{
	if( it_.front().lexem_type == Lexem::Type::SquareBracketLeft )
	{
		var SequenceInitializer mut sequence_initializer{ .src_loc= it_.front().src_loc };
		NextLexem();

		while( NotEndOfFile() && it_.front().lexem_type != Lexem::Type::SquareBracketRight )
		{
			sequence_initializer.elements_initializers.push_back( ust::make_box( ParseInitializer( true ) ) );
			if( it_.front().lexem_type == Lexem::Type::Comma )
			{
				NextLexem();
			}
			else
			{
				break;
			}
			// TODO - parse continious flag here
		}
		ExpectLexem( Lexem::Type::SquareBracketRight );

		return move(sequence_initializer);
	}
	else if( it_.front().lexem_type == Lexem::Type::BracketLeft )
	{
		/// TODO - fix case, like :    var [ i32, 1] x[ (1 + 2) * 3 ];
		var ConstructorInitializer mut constructor_initializer{ .src_loc= it_.front().src_loc, .args(ParseCall()) };

		return move(constructor_initializer);
	}
	else if( it_.front().lexem_type == Lexem::Type::BraceLeft )
	{
		var StructNamedInitializer mut struct_named_initializer{ .src_loc= it_.front().src_loc };
		NextLexem();

		while( NotEndOfFile() && it_.front().lexem_type != Lexem::Type::BraceRight )
		{
			ExpectLexem( Lexem::Type::Dot );

			if( it_.front().lexem_type != Lexem::Type::Identifier )
			{
				PushErrorMessage();
				break;
			}
			auto& name= it_.front().text;
			auto& src_loc= it_.front().src_loc;
			NextLexem();

			auto mut initializer= ParseVariableInitializer();
			if( !initializer.get</EmptyVariant/>().empty() )
			{
				PushErrorMessage();
			}

			var StructNamedInitializer::Member mut member_initializer
			{
				.src_loc= src_loc,
				.name= name,
				.initializer( move(initializer) ),
			};
			struct_named_initializer.members_initializers.push_back( move(member_initializer) );

			if( it_.front().lexem_type == Lexem::Type::Comma )
			{
				NextLexem();
				if( it_.front().lexem_type == Lexem::Type::BraceRight )
				{
					break;
				}
			}
			else
			{
				break;
			}
		}
		ExpectLexem( Lexem::Type::BraceRight );

		return move(struct_named_initializer);
	}
	else if( IsKeyword( it_.front(), Keyword::zero_init_ ) )
	{
		var ZeroInitializer mut zero_initializer{ .src_loc= it_.front().src_loc };
		NextLexem();
		return move(zero_initializer);
	}
	else if( IsKeyword( it_.front(), Keyword::uninitialized_ ) )
	{
		var UninitializedInitializer mut uninitialized_initializer{ .src_loc= it_.front().src_loc };
		NextLexem();
		return move(uninitialized_initializer);
	}
	else if( parse_expression_initializer )
	{
		// In some cases usage of expression in initializer is forbidden.
		return ParseExpression();
	}
	else
	{
		PushErrorMessage();
		return EmptyVariant();
	}
}

fn SyntaxAnalyzer::ParseVariableInitializer( mut this ) : Initializer
{
	if( it_.front().lexem_type == Lexem::Type::Assignment )
	{
		NextLexem();
		if( IsKeyword( it_.front(), Keyword::zero_init_ ) )
		{
			var ZeroInitializer mut zero_initializer{ .src_loc= it_.front().src_loc };
			NextLexem();
			return Initializer( move(zero_initializer) );
		}
		if( IsKeyword( it_.front(), Keyword::uninitialized_ ) )
		{
			var UninitializedInitializer mut uninitialized_initializer{ .src_loc= it_.front().src_loc };
			NextLexem();
			return move(uninitialized_initializer);
		}
		else
		{
			return ParseExpression();
		}
	}
	else if(
		it_.front().lexem_type == Lexem::Type::BracketLeft ||
		it_.front().lexem_type == Lexem::Type::SquareBracketLeft ||
		it_.front().lexem_type == Lexem::Type::BraceLeft )
	{
		return ParseInitializer( false );
	}

	return Initializer( EmptyVariant() );
}

fn SyntaxAnalyzer::ParseBlock( mut this ) : Block
{
	if( it_.front().lexem_type != Lexem::Type::BraceLeft )
	{
		PushErrorMessage();
	}

	var Block mut block{ .src_loc= it_.front().src_loc };

	NextLexem(); // {

	block.elements= ParseBlockElements();

	block.end_src_loc= it_.front().src_loc;

	if( it_.front().lexem_type == Lexem::Type::BraceRight )
	{
		NextLexem();
	}
	else
	{
		PushErrorMessage();
	}

	return move(block);
}

fn SyntaxAnalyzer::ParseBlockElements( mut this ) : BlockElements
{
	var BlockElements mut block_elements;

	while( NotEndOfFile() && it_.front().lexem_type != Lexem::Type::BraceRight && it_.front().lexem_type != Lexem::Type::EndOfFile )
	{
		if( it_.front().lexem_type == Lexem::Type::BraceLeft )
		{
			var ScopeBlock mut scope_block{ .src_loc= it_.front().src_loc, .block= ParseBlock(), .label_= TryParseLabel() };
			block_elements.push_back( ust::make_box(move(scope_block)) );
		}
		else if( IsKeyword( it_.front(), Keyword::safe_  ) && it_[1s].lexem_type == Lexem::Type::BraceLeft  )
		{
			NextLexem();
			var ScopeBlock mut scope_block{ .src_loc= it_.front().src_loc, .block= ParseBlock(), .safety= ScopeBlock::Safety::Safe, .label_= TryParseLabel() };
			block_elements.push_back( ust::make_box(move(scope_block)) );
		}
		else if( IsKeyword( it_.front(), Keyword::unsafe_ ) && it_[1s].lexem_type == Lexem::Type::BraceLeft )
		{
			NextLexem();
			var ScopeBlock mut scope_block{ .src_loc= it_.front().src_loc, .block= ParseBlock(), .safety= ScopeBlock::Safety::Unsafe, .label_= TryParseLabel() };
			block_elements.push_back( ust::make_box(move(scope_block)) );
		}
		else if( IsKeyword( it_.front(), Keyword::var_ ) )
		{
			block_elements.push_back( ParseVariablesDeclaration() );
		}
		else if( IsKeyword( it_.front(), Keyword::auto_ ) )
		{
			block_elements.push_back( ParseAutoVariableDeclaration() );
		}
		else if( IsKeyword( it_.front(), Keyword::return_ ) )
		{
			block_elements.push_back( ParseReturnOperator() );
		}
		else if( IsKeyword( it_.front(), Keyword::yield_ ) )
		{
			block_elements.push_back( ParseYieldOperator() );
		}
		else if( IsKeyword( it_.front(), Keyword::if_ ) )
		{
			block_elements.push_back( ParseIfOperator() );
		}
		else if( IsKeyword( it_.front(), Keyword::static_if_ ) )
		{
			block_elements.push_back( ParseStaticIfOperator() );
		}
		else if( IsKeyword( it_.front(), Keyword::if_coro_advance_ ) )
		{
			block_elements.push_back( ParseIfCoroAdvanceOperator() );
		}
		else if( IsKeyword( it_.front(), Keyword::while_ ) )
		{
			block_elements.push_back( ParseWhileOperator() );
		}
		else if( IsKeyword( it_.front(), Keyword::for_ ) )
		{
			block_elements.push_back( ParseForOperator() );
		}
		else if( IsKeyword( it_.front(), Keyword::break_ ) )
		{
			block_elements.push_back( ParseBreakOperator() );
		}
		else if( IsKeyword( it_.front(), Keyword::continue_ ) )
		{
			block_elements.push_back( ParseContinueOperator() );
		}
		else if( IsKeyword( it_.front(), Keyword::with_ ) )
		{
			block_elements.push_back( ParseWithOperator() );
		}
		else if( IsKeyword( it_.front(), Keyword::static_assert_ ) )
		{
			block_elements.push_back( ParseStaticAssert() );
		}
		else if( IsKeyword( it_.front(), Keyword::type_ ) )
		{
			block_elements.push_back( ParseTypeAlias() );
		}
		else if( IsKeyword( it_.front(), Keyword::halt_ ) )
		{
			block_elements.push_back( ParseHalt() );
		}
		else if( it_.front().lexem_type == Lexem::Type::Increment )
		{
			var IncrementOperator mut increment_operator{ .src_loc= it_.front().src_loc };
			NextLexem();
			increment_operator.expression= ParseExpression();

			ExpectSemicolon();

			block_elements.push_back( move(increment_operator) );
		}
		else if( it_.front().lexem_type == Lexem::Type::Decrement )
		{
			var DecrementOperator mut decrement_operator{ .src_loc= it_.front().src_loc };
			NextLexem();
			decrement_operator.expression= ParseExpression();

			ExpectSemicolon();

			block_elements.push_back( move(decrement_operator) );
		}
		else
		{
			if( it_.front().lexem_type == Lexem::Type::Identifier )
			{
				if_var( &macro : FetchMacro( it_.front().text, Macro::Context::Block ) )
				{
					var BlockElements mut expanded_block_elements= ExpandMacro</BlockElements/>( macro );
					VectorAppend( block_elements, move(expanded_block_elements) );
					continue;
				}
			}

			auto mut expr= ParseExpression();

			auto additive_assignment_operator_type= GetAdditiveAssignmentOperator( it_.front() );
			if( !additive_assignment_operator_type.empty() )
			{
				auto src_loc= it_.front().src_loc;
				NextLexem();
				var AdditiveAssignmentOperator mut additive_assignment_operator
				{
					.src_loc= src_loc,
					.operator= additive_assignment_operator_type.try_deref(),
					.l(move(expr)),
					.r(ParseExpression()),
				};

				block_elements.push_back( move(additive_assignment_operator) );
			}
			else if( it_.front().lexem_type == Lexem::Type::Assignment )
			{
				auto src_loc= it_.front().src_loc;
				NextLexem();
				var AssignmentOperator mut assignment_operator
				{
					.src_loc= src_loc,
					.l( move(expr) ),
					.r( ParseExpression() ),
				};

				block_elements.push_back( move(assignment_operator) );
			}
			else
			{
				block_elements.push_back( move(expr) );
			}

			ExpectSemicolon();
		}
	}

	return move(block_elements);
}

fn SyntaxAnalyzer::TryParseIfAlternative( mut this ) : IfAlternativeNullablePtr
{
	if( IsKeyword( it_.front(), Keyword::else_ ) )
	{
		NextLexem();
		return ParseIfAlternative();
	}

	return IfAlternativeNullablePtr();
}

fn SyntaxAnalyzer::ParseIfAlternative( mut this ) : IfAlternativeNullablePtr
{
	if( IsKeyword( it_.front(), Keyword::if_ ) )
	{
		return IfAlternativeNullablePtr( ParseIfOperator() );
	}
	if( IsKeyword( it_.front(), Keyword::static_if_ ) )
	{
		return IfAlternativeNullablePtr( ParseStaticIfOperator() );
	}
	if( IsKeyword( it_.front(), Keyword::if_coro_advance_ ) )
	{
		return IfAlternativeNullablePtr( ParseIfCoroAdvanceOperator() );
	}
	if( it_.front().lexem_type == Lexem::Type::BraceLeft )
	{
		return IfAlternativeNullablePtr( ParseBlock() );
	}

	if( it_.front().lexem_type == Lexem::Type::Identifier )
	{
		if_var( &macro : FetchMacro( it_.front().text, Macro::Context::Block ) )
		{
			var BlockElements mut expanded_block_elements= ExpandMacro</BlockElements/>( macro );
			if( expanded_block_elements.size() == 1s )
			{
				var BlockElement mut block_element= expanded_block_elements.pop_back();
				if_var( &mut scope_block_ptr : block_element.get</ust::box</ScopeBlock/>/>() )
				{
					var ScopeBlock &mut scope_block= scope_block_ptr.deref();
					if( scope_block.safety == ScopeBlock::Safety::None && scope_block.label_.empty() )
					{
						return IfAlternativeNullablePtr( take( scope_block.block ) );
					}
					else
					{
						var LexSyntError mut error( it_.front().src_loc, "Syntax error - expected block without safety modifiers and labels for \"if\" alternative." );
						errors_.push_back( move(error) );
						return IfAlternativeNullablePtr();
					}
				}
				if( !block_element.get</IfOperator/>().empty() )
				{
					return IfAlternativeNullablePtr( ust::variant_try_move</IfOperator/>( move(block_element) ) );
				}
				if( !block_element.get</StaticIfOperator/>().empty() )
				{
					return IfAlternativeNullablePtr( ust::variant_try_move</StaticIfOperator/>( move(block_element) ) );
				}
				if( !block_element.get</IfCoroAdvanceOperator/>().empty() )
				{
					return IfAlternativeNullablePtr( ust::variant_try_move</IfCoroAdvanceOperator/>( move(block_element) ) );
				}

				var LexSyntError mut error( it_.front().src_loc, "Syntax error - unexpected element kind for \"if\" alternative." );
				errors_.push_back( move(error) );
				return IfAlternativeNullablePtr();
			}
			else
			{
				var LexSyntError mut error( it_.front().src_loc, "Syntax error - expected exactly one element in expansion of macro for \"if\" alternative." );
				errors_.push_back( move(error) );
				return IfAlternativeNullablePtr();
			}
		}
	}

	PushErrorMessage();
	return IfAlternativeNullablePtr();
}

fn SyntaxAnalyzer::ParseVariablesDeclaration( mut this ) : VariablesDeclaration
{
	var VariablesDeclaration mut variables_declaration{ .src_loc= it_.front().src_loc };

	NextLexem(); // var

	variables_declaration.t= ParseTypeName();

	while( NotEndOfFile() )
	{
		var VariablesDeclaration::VariableEntry mut variable_entry;

		if( it_.front().lexem_type == Lexem::Type::And )
		{
			variable_entry.reference_modifier= ReferenceModifier::Reference;
			NextLexem();
		}

		if( IsKeyword( it_.front(), Keyword::mut_ ) )
		{
			variable_entry.mutability_modifier= MutabilityModifier::Mutable;
			NextLexem();
		}
		else if( IsKeyword( it_.front(), Keyword::imut_ ) )
		{
			variable_entry.mutability_modifier= MutabilityModifier::Immutable;
			NextLexem();
		}
		else if( IsKeyword( it_.front(), Keyword::constexpr_ ) )
		{
			variable_entry.mutability_modifier= MutabilityModifier::Constexpr;
			NextLexem();
		}

		if( it_.front().lexem_type != Lexem::Type::Identifier )
		{
			PushErrorMessage();
			break;
		}
		variable_entry.src_loc= it_.front().src_loc;
		variable_entry.name= it_.front().text;
		NextLexem();

		variable_entry.initializer= ParseVariableInitializer();

		variables_declaration.variables.push_back( move(variable_entry) );

		if( it_.front().lexem_type == Lexem::Type::Comma )
		{
			NextLexem();
			continue;
		}
		if( it_.front().lexem_type == Lexem::Type::Semicolon )
		{
			NextLexem();
			break;
		}
	}

	return move(variables_declaration);
}

fn SyntaxAnalyzer::ParseAutoVariableDeclaration( mut this ) : AutoVariableDeclaration
{
	var AutoVariableDeclaration mut variable_declaration;

	NextLexem(); // auto

	if( it_.front().lexem_type == Lexem::Type::And )
	{
		variable_declaration.reference_modifier= ReferenceModifier::Reference;
		NextLexem();
	}

	if( IsKeyword( it_.front(), Keyword::mut_ ) )
	{
		variable_declaration.mutability_modifier= MutabilityModifier::Mutable;
		NextLexem();
	}
	else if( IsKeyword( it_.front(), Keyword::imut_ ) )
	{
		variable_declaration.mutability_modifier= MutabilityModifier::Immutable;
		NextLexem();
	}
	else if( IsKeyword( it_.front(), Keyword::constexpr_ ) )
	{
		variable_declaration.mutability_modifier= MutabilityModifier::Constexpr;
		NextLexem();
	}

	variable_declaration.name= it_.front().text;
	variable_declaration.src_loc= it_.front().src_loc;
	NextLexem();

	if( it_.front().lexem_type == Lexem::Type::Assignment )
	{
		NextLexem();
	}
	else
	{
		PushErrorMessage();
	}

	variable_declaration.initializer_expression= ParseExpression();

	ExpectSemicolon();

	return move(variable_declaration);
}

fn SyntaxAnalyzer::ParseReturnOperator( mut this ) : ReturnOperator
{
	var ReturnOperator mut res{ .src_loc= it_.front().src_loc };
	NextLexem(); // return

	if( it_.front().lexem_type != Lexem::Type::Semicolon )
	{
		res.expr= ParseExpression();
	}

	ExpectSemicolon();

	return move(res);
}

fn SyntaxAnalyzer::ParseYieldOperator( mut this ) : YieldOperator
{
	var YieldOperator mut res{ .src_loc= it_.front().src_loc };
	NextLexem(); // yield

	if( it_.front().lexem_type != Lexem::Type::Semicolon )
	{
		res.expr= ParseExpression();
	}

	ExpectSemicolon();

	return move(res);
}

fn SyntaxAnalyzer::ParseIfOperator( mut this ) : IfOperator
{
	if( !IsKeyword( it_.front(), Keyword::if_ ) )
	{
		PushErrorMessage();
	}
	auto start_src_loc= it_.front().src_loc;
	NextLexem();

	var IfOperator mut if_operator
	{
		.src_loc= start_src_loc,
		.condition= ParseExpressionInBrackets(),
		.block(ParseBlock()),
		.alternative= TryParseIfAlternative(),
		.end_src_loc= GetPrevSrcLoc(),
	};

	return move(if_operator);
}

fn SyntaxAnalyzer::ParseStaticIfOperator( mut this ) : StaticIfOperator
{
	if( !IsKeyword( it_.front(), Keyword::static_if_ ) )
	{
		PushErrorMessage();
	}
	auto start_src_loc= it_.front().src_loc;
	NextLexem();

	var StaticIfOperator mut static_if_operator
	{
		.src_loc= start_src_loc,
		.condition= ParseExpressionInBrackets(),
		.block(ParseBlock()),
		.alternative= TryParseIfAlternative(),
		.end_src_loc= GetPrevSrcLoc(),
	};

	return move(static_if_operator);
}

fn SyntaxAnalyzer::ParseIfCoroAdvanceOperator( mut this ) : IfCoroAdvanceOperator
{
	var IfCoroAdvanceOperator mut if_coro_advance_operator{ .src_loc= it_.front().src_loc, .block(Block()) };
	NextLexem();

	ExpectLexem( Lexem::Type::BracketLeft );

	if( it_.front().lexem_type == Lexem::Type::And )
	{
		if_coro_advance_operator.reference_modifier= ReferenceModifier::Reference;
		NextLexem();
	}
	if( IsKeyword( it_.front(), Keyword::mut_ ) )
	{
		if_coro_advance_operator.mutability_modifier= MutabilityModifier::Mutable;
		NextLexem();
	}
	else if( IsKeyword( it_.front(), Keyword::imut_ ) )
	{
		if_coro_advance_operator.mutability_modifier= MutabilityModifier::Immutable;
		NextLexem();
	}

	if( it_.front().lexem_type != Lexem::Type::Identifier )
	{
		PushErrorMessage();
	}
	if_coro_advance_operator.variable_name= it_.front().text;
	NextLexem();

	ExpectLexem( Lexem::Type::Colon );

	if_coro_advance_operator.expression= ParseExpression();

	ExpectLexem( Lexem::Type::BracketRight );

	if_coro_advance_operator.block.deref()= ParseBlock();
	if_coro_advance_operator.alternative= TryParseIfAlternative();
	if_coro_advance_operator.end_src_loc= GetPrevSrcLoc();

	return move(if_coro_advance_operator);
}

fn SyntaxAnalyzer::TryParseLabel( mut this ) : ust::optional</Label/>
{
	if( IsKeyword( it_.front(), Keyword::label_ ) )
	{
		var Label mut label_{ .src_loc= it_.front().src_loc };
		NextLexem();

		if( it_.front().lexem_type != Lexem::Type::Identifier )
		{
			PushErrorMessage();
		}
		label_.name= it_.front().text;
		NextLexem();

		return move(label_);
	}

	return ust::null_optional;
}

fn SyntaxAnalyzer::ParseWhileOperator( mut this ) : WhileOperator
{
	auto start_src_loc= it_.front().src_loc;
	NextLexem(); // while

	var WhileOperator mut while_operator
	{
		.src_loc= start_src_loc,
		.condition= ParseExpressionInBrackets(),
		.label_= TryParseLabel(),
		.block( ParseBlock() )
	};
	return move(while_operator);
}

fn SyntaxAnalyzer::ParseForOperator( mut this ) : BlockElement
{
	if( it_.size() >= 3s )
	{
		var Lexem& next_lexem= it_[2s];
		if( IsKeyword( next_lexem, Keyword::var_ ) || IsKeyword( next_lexem, Keyword::auto_ ) || next_lexem.lexem_type == Lexem::Type::Semicolon )
		{
			return ParseCStyleForOperator();
		}
	}

	return ParseRangeForOperator();
}

fn SyntaxAnalyzer::ParseRangeForOperator( mut this ) : RangeForOperator
{
	var RangeForOperator mut for_operator{ .src_loc= it_.front().src_loc, .block(Block()) };
	NextLexem();

	ExpectLexem( Lexem::Type::BracketLeft );

	if( it_.front().lexem_type == Lexem::Type::And )
	{
		for_operator.reference_modifier= ReferenceModifier::Reference;
		NextLexem();
	}
	if( IsKeyword( it_.front(), Keyword::mut_ ) )
	{
		for_operator.mutability_modifier= MutabilityModifier::Mutable;
		NextLexem();
	}
	else if( IsKeyword( it_.front(), Keyword::imut_ ) )
	{
		for_operator.mutability_modifier= MutabilityModifier::Immutable;
		NextLexem();
	}

	if( it_.front().lexem_type != Lexem::Type::Identifier )
	{
		PushErrorMessage();
	}
	for_operator.loop_variable_name= it_.front().text;
	NextLexem();

	ExpectLexem( Lexem::Type::Colon );

	for_operator.sequence= ParseExpression();

	ExpectLexem( Lexem::Type::BracketRight );

	for_operator.label_= TryParseLabel();

	for_operator.block.deref()= ParseBlock();

	return move(for_operator);
}

fn SyntaxAnalyzer::ParseCStyleForOperator( mut this ) : CStyleForOperator
{
	var CStyleForOperator mut for_operator{ .src_loc= it_.front().src_loc, .block(Block()) };
	NextLexem();

	ExpectLexem( Lexem::Type::BracketLeft );

	// Varaibles declaration
	if( IsKeyword( it_.front(), Keyword::var_ ) )
	{
		for_operator.variable_declaration_part= ParseVariablesDeclaration();
	}
	else if( IsKeyword( it_.front(), Keyword::auto_ ) )
	{
		for_operator.variable_declaration_part= ParseAutoVariableDeclaration();
	}
	else
	{
		ExpectSemicolon();
	}

	// Condition.
	if( it_.front().lexem_type != Lexem::Type::Semicolon )
	{
		for_operator.loop_condition= ParseExpression();
	}

	if( it_.front().lexem_type != Lexem::Type::Semicolon )
	{
		PushErrorMessage();
	}
	NextLexem();

	// Iteration part.

	while( NotEndOfFile() && it_.front().lexem_type != Lexem::Type::BracketRight )
	{
		if( it_.front().lexem_type == Lexem::Type::Increment )
		{
			var IncrementOperator mut increment_operator{ .src_loc= it_.front().src_loc };
			NextLexem();
			increment_operator.expression= ParseExpression();

			for_operator.iteration_part_elements.push_back( move(increment_operator) );
		}
		else if( it_.front().lexem_type == Lexem::Type::Decrement )
		{
			var DecrementOperator mut decrement_operator{ .src_loc= it_.front().src_loc };
			NextLexem();
			decrement_operator.expression= ParseExpression();

			for_operator.iteration_part_elements.push_back( move(decrement_operator) );
		}
		else
		{
			var Expression mut expression_l= ParseExpression();

			auto additive_assignment_operator_type= GetAdditiveAssignmentOperator( it_.front() );
			if( !additive_assignment_operator_type.empty() )
			{
				auto src_loc= it_.front().src_loc;
				NextLexem();
				var AdditiveAssignmentOperator mut additive_assignment_operator
				{
					.src_loc= src_loc,
					.operator= additive_assignment_operator_type.try_deref(),
					.l(move(expression_l)),
					.r(ParseExpression()),
				};

				for_operator.iteration_part_elements.push_back( move(additive_assignment_operator) );
			}
			else if( it_.front().lexem_type == Lexem::Type::Assignment )
			{
				auto src_loc= it_.front().src_loc;
				NextLexem();
				var AssignmentOperator mut assignment_operator
				{
					.src_loc= src_loc,
					.l(move(expression_l)),
					.r( ParseExpression() ),
				};

				for_operator.iteration_part_elements.push_back( move(assignment_operator) );
			}
			else
			{
				for_operator.iteration_part_elements.push_back( move(expression_l) );
			}
		}

		if( it_.front().lexem_type != Lexem::Type::Comma )
		{
			break;
		}
		NextLexem();

		if( it_.front().lexem_type == Lexem::Type::BracketRight ) // forbid ) after ,
		{
			PushErrorMessage();
		}
	}

	ExpectLexem( Lexem::Type::BracketRight );

	for_operator.label_= TryParseLabel();

	for_operator.block.deref()= ParseBlock();

	return move(for_operator);
}

fn SyntaxAnalyzer::ParseBreakOperator( mut this ) : BreakOperator
{
	var BreakOperator mut break_operator{ .src_loc= it_.front().src_loc };
	NextLexem();

	break_operator.label_= TryParseLabel();

	ExpectSemicolon();

	return move(break_operator);
}

fn SyntaxAnalyzer::ParseContinueOperator( mut this ) : ContinueOperator
{
	var ContinueOperator mut continue_operator{ .src_loc= it_.front().src_loc };
	NextLexem();

	continue_operator.label_= TryParseLabel();

	ExpectSemicolon();

	return move(continue_operator);
}

fn SyntaxAnalyzer::ParseWithOperator( mut this ) : WithOperator
{
	var WithOperator mut with_operator{ .src_loc= it_.front().src_loc, .block(Block()) };
	NextLexem();

	ExpectLexem( Lexem::Type::BracketLeft );

	if( it_.front().lexem_type == Lexem::Type::And )
	{
		with_operator.reference_modifier= ReferenceModifier::Reference;
		NextLexem();
	}
	if( IsKeyword( it_.front(), Keyword::mut_ ) )
	{
		with_operator.mutability_modifier= MutabilityModifier::Mutable;
		NextLexem();
	}
	else if( IsKeyword( it_.front(), Keyword::imut_ ) )
	{
		with_operator.mutability_modifier= MutabilityModifier::Immutable;
		NextLexem();
	}

	if( it_.front().lexem_type != Lexem::Type::Identifier )
	{
		PushErrorMessage();
	}
	with_operator.variable_name= it_.front().text;
	NextLexem();

	ExpectLexem( Lexem::Type::Colon );

	with_operator.expression= ParseExpression();

	ExpectLexem( Lexem::Type::BracketRight );

	with_operator.block.deref()= ParseBlock();

	return move(with_operator);
}

fn SyntaxAnalyzer::ParseStaticAssert( mut this ) : StaticAssert
{
	if( !IsKeyword( it_.front(), Keyword::static_assert_ ) )
	{
		PushErrorMessage();
	}

	var StaticAssert mut static_assert_{ .src_loc= it_.front().src_loc };
	NextLexem();

	static_assert_.expression= ParseExpressionInBrackets();

	ExpectSemicolon();

	return move(static_assert_);
}

fn SyntaxAnalyzer::ParseHalt( mut this ) : BlockElement
{
	if( !IsKeyword( it_.front(), Keyword::halt_ ) )
	{
		PushErrorMessage();
	}
	auto src_loc= it_.front().src_loc;
	NextLexem();

	if( it_.front().lexem_type == Lexem::Type::Semicolon )
	{
		NextLexem();

		var Halt mut halt_{ .src_loc= src_loc };
		return move(halt_);
	}
	else
	{
		var HaltIf mut halt_if{ .src_loc= src_loc };

		if( !IsKeyword( it_.front(), Keyword::if_ ) )
		{
			PushErrorMessage();
		}
		NextLexem();

		halt_if.condition= ParseExpressionInBrackets();

		ExpectSemicolon();

		return move(halt_if);
	}
}

fn SyntaxAnalyzer::ParseClass( mut this ) : Class
{
	var Class mut class_;

	auto is_struct= IsKeyword( it_.front(), Keyword::struct_ );
	auto is_class= IsKeyword( it_.front(), Keyword::class_ );
	if( !( is_struct || is_class ) )
	{
		PushErrorMessage();
	}
	NextLexem();

	if( it_.front().lexem_type != Lexem::Type::Identifier )
	{
		PushErrorMessage();
	}
	class_.src_loc= it_.front().src_loc;
	class_.name= it_.front().text;
	NextLexem();

	if( is_struct )
	{
		class_.kind_attribute= Class::KindAttribute::Struct;
	}
	else
	{
		class_.kind_attribute= ParseClassKindAttribute();
		class_.parents= ParseClassParentsList();
	}
	class_.non_sync_tag= TryParseNonSyncTag();
	class_.keep_fields_order= ParseClassOrderedFlag();

	class_.class_elements= ParseClassBody();

	return move(class_);
}

fn SyntaxAnalyzer::ParseClassBody( mut this ) : ClassElements
{
	ExpectLexem( Lexem::Type::BraceLeft );

	auto mut class_elements= ParseClassBodyElements();

	ExpectLexem( Lexem::Type::BraceRight );

	return move(class_elements);
}

fn SyntaxAnalyzer::ParseClassBodyElements( mut this ) : ClassElements
{
	var ClassElements mut class_elements;

	while( NotEndOfFile() )
	{
		if( it_.front().lexem_type == Lexem::Type::BraceRight || it_.front().lexem_type == Lexem::Type::EndOfFile )
		{
			break;
		}
		else if( IsKeyword( it_.front(), Keyword::public_ ) )
		{
			var ClassVisibilityLabel mut class_visibility_label{ .src_loc= it_.front().src_loc, .visibility= ClassVisibility::Public };
			NextLexem();

			ExpectLexem( Lexem::Type::Colon );

			class_elements.push_back( move(class_visibility_label) );
		}
		else if( IsKeyword( it_.front(), Keyword::protected_ ) )
		{
			var ClassVisibilityLabel mut class_visibility_label{ .src_loc= it_.front().src_loc, .visibility= ClassVisibility::Protected };
			NextLexem();

			ExpectLexem( Lexem::Type::Colon );

			class_elements.push_back( move(class_visibility_label) );
		}
		else if( IsKeyword( it_.front(), Keyword::private_ ) )
		{
			var ClassVisibilityLabel mut class_visibility_label{ .src_loc= it_.front().src_loc, .visibility= ClassVisibility::Private };
			NextLexem();

			ExpectLexem( Lexem::Type::Colon );

			class_elements.push_back( move(class_visibility_label) );
		}
		else if( IsKeyword( it_.front(), Keyword::fn_ ) || IsKeyword( it_.front(), Keyword::op_ ) )
		{
			class_elements.push_back( ust::make_shared_ptr_final( ParseFunction() ) );
		}
		else if( IsKeyword( it_.front(), Keyword::struct_ ) || IsKeyword( it_.front(), Keyword::class_ ) )
		{
			class_elements.push_back( ust::make_shared_ptr_final( ParseClass() ) );
		}
		else if( IsKeyword( it_.front(), Keyword::enum_ ) )
		{
			class_elements.push_back( ust::make_shared_ptr_final( ParseEnum() ) );
		}
		else if( IsKeyword( it_.front(), Keyword::type_ ) )
		{
			class_elements.push_back( ust::make_shared_ptr_final( ParseTypeAlias() ) );
		}
		else if( IsKeyword( it_.front(), Keyword::template_ ) )
		{
			auto t= ParseTemplate();
			variant_visit( &v : t )
			{
				class_elements.push_back( v );
			}
		}
		else if( IsKeyword( it_.front(), Keyword::var_ ) )
		{
			class_elements.push_back( ust::make_shared_ptr_final( ParseVariablesDeclaration() ) );
		}
		else if( IsKeyword( it_.front(), Keyword::auto_ ) )
		{
			class_elements.push_back( ust::make_shared_ptr_final( ParseAutoVariableDeclaration() ) );
		}
		else if( IsKeyword( it_.front(), Keyword::static_assert_ ) )
		{
			class_elements.push_back( ust::make_shared_ptr_final( ParseStaticAssert() ) );
		}
		else
		{
			if( it_.front().lexem_type == Lexem::Type::Identifier )
			{
				if_var( &macro : FetchMacro( it_.front().text, Macro::Context::Class ) )
				{
					var ClassElements mut expanded_class_elements= ExpandMacro</ClassElements/>( macro );
					VectorAppend( class_elements, move(expanded_class_elements) );
					continue;
				}
			}

			var ClassField mut class_field;
			class_field.t= ParseTypeName();

			if( it_.front().lexem_type == Lexem::Type::And )
			{
				class_field.reference_modifier= ReferenceModifier::Reference;
				NextLexem();
			}

			if( IsKeyword( it_.front(), Keyword::mut_ ) )
			{
				class_field.mutability_modifier= MutabilityModifier::Mutable;
				NextLexem();
			}
			else if( IsKeyword( it_.front(), Keyword::imut_ ) )
			{
				class_field.mutability_modifier= MutabilityModifier::Immutable;
				NextLexem();
			}

			if( it_.front().lexem_type != Lexem::Type::Identifier )
			{
				PushErrorMessage();
			}
			class_field.src_loc= it_.front().src_loc;
			class_field.name= it_.front().text;
			NextLexem();

			class_field.initializer= ParseVariableInitializer();

			ExpectSemicolon();

			class_elements.push_back( ust::make_shared_ptr_final( move(class_field) ) );
		}
	}

	return move(class_elements);
}

fn SyntaxAnalyzer::ParseClassKindAttribute( mut this ) : Class::KindAttribute
{
	if( IsKeyword( it_.front(), Keyword::final_ ) )
	{
		NextLexem();
		return Class::KindAttribute::Final;
	}
	if( IsKeyword( it_.front(), Keyword::polymorph_ ) )
	{
		NextLexem();
		return Class::KindAttribute::Polymorph;
	}
	if( IsKeyword( it_.front(), Keyword::interface_ ) )
	{
		NextLexem();
		return Class::KindAttribute::Interface;
	}
	if( IsKeyword( it_.front(), Keyword::abstract_ ) )
	{
		NextLexem();
		return Class::KindAttribute::Abstract;
	}

	return Class::KindAttribute::Class;
}

fn SyntaxAnalyzer::ParseClassParentsList( mut this ) : ust::vector</ComplexName/>
{
	if( it_.front().lexem_type != Lexem::Type::Colon )
	{
		return ust::vector</ComplexName/>();
	}
	NextLexem();

	var ust::vector</ComplexName/> mut parents_list;

	while( NotEndOfFile() )
	{
		parents_list.push_back( ParseComplexName() );

		if( it_.front().lexem_type == Lexem::Type::Comma )
		{
			NextLexem();
		}
		else
		{
			break;
		}
	}

	return move(parents_list);
}

fn SyntaxAnalyzer::TryParseNonSyncTag( mut this ) : NonSyncTag
{
	if( IsKeyword( it_.front(), Keyword::non_sync_ ) )
	{
		NextLexem();

		if( it_.front().lexem_type == Lexem::Type::BracketLeft )
		{
			return ust::make_shared_ptr_final( ParseExpressionInBrackets() );
		}
		return NonSyncTagTrue();
	}

	return NonSyncTagNone();
}

fn SyntaxAnalyzer::ParseClassOrderedFlag( mut this ) : bool
{
	if( IsKeyword( it_.front(), Keyword::ordered_ ) )
	{
		NextLexem();
		return true;
	}

	return false;
}

fn SyntaxAnalyzer::ParseEnum( mut this ) : Enum
{
	if( !IsKeyword( it_.front(), Keyword::enum_ ) )
	{
		PushErrorMessage();
	}
	NextLexem();

	if( it_.front().lexem_type != Lexem::Type::Identifier )
	{
		PushErrorMessage();
	}

	var Enum mut enum_
	{
		.src_loc= it_.front().src_loc,
		.name= it_.front().text,
	};
	NextLexem();

	if( it_.front().lexem_type == Lexem::Type::Colon )
	{
		NextLexem();
		enum_.underlaying_type= ParseComplexName();
	}

	ExpectLexem( Lexem::Type::BraceLeft );

	while( NotEndOfFile() )
	{
		if( it_.front().lexem_type != Lexem::Type::Identifier )
		{
			PushErrorMessage();
		}
		var Enum::Element mut element
		{
			.src_loc= it_.front().src_loc,
			.name= it_.front().text,
		};
		NextLexem();

		enum_.elements.push_back( move(element) );

		if( it_.front().lexem_type == Lexem::Type::Comma )
		{
			NextLexem();
			if( it_.front().lexem_type == Lexem::Type::BraceRight )
			{
				NextLexem();
				break;
			}
		}
		else if( it_.front().lexem_type == Lexem::Type::BraceRight )
		{
			NextLexem();
			break;
		}
		else
		{
			PushErrorMessage();
			break;
		}
	}

	return move(enum_);
}

fn SyntaxAnalyzer::ParseTypeAlias( mut this ) : TypeAlias
{
	if( !IsKeyword( it_.front(), Keyword::type_ ) )
	{
		PushErrorMessage();
	}
	NextLexem();

	if( it_.front().lexem_type != Lexem::Type::Identifier )
	{
		PushErrorMessage();
	}

	var TypeAlias mut type_alias
	{
		.src_loc= it_.front().src_loc,
		.name= it_.front().text,
	};
	NextLexem();

	ExpectLexem( Lexem::Type::Assignment );

	type_alias.type_name= ParseTypeName();

	ExpectSemicolon();

	return move(type_alias);
}

fn SyntaxAnalyzer::ParseTemplate( mut this ) : SomeTemplate
{
	auto template_src_loc= it_.front().src_loc;

	if( !IsKeyword( it_.front(), Keyword::template_ ) )
	{
		PushErrorMessage();
	}
	NextLexem();

	// Template args.
	ExpectLexem( Lexem::Type::TemplateBracketLeft );

	var ust::vector</TemplateParam/> mut params;
	while( NotEndOfFile() )
	{
		if( it_.front().lexem_type == Lexem::Type::TemplateBracketRight )
		{
			NextLexem();
			break;
		}

		var TemplateParam mut param;
		if( IsKeyword( it_.front(), Keyword::type_ ) )
		{
			NextLexem();
		}
		else
		{
			param.t= ParseComplexName();
		}

		if( it_.front().lexem_type != Lexem::Type::Identifier )
		{
			PushErrorMessage();
		}

		param.name= it_.front().text;
		param.src_loc= it_.front().src_loc;
		NextLexem();

		params.push_back( move(param) );

		if( it_.front().lexem_type == Lexem::Type::TemplateBracketRight )
		{}
		else if( it_.front().lexem_type == Lexem::Type::Comma )
		{
			NextLexem();
			if( it_.front().lexem_type == Lexem::Type::TemplateBracketRight )
			{
				PushErrorMessage();
				break;
			}
		}
		else
		{
			PushErrorMessage();
			break;
		}
	}

	if( IsKeyword( it_.front(), Keyword::type_ ) )
	{
		NextLexem();

		if( it_.front().lexem_type != Lexem::Type::Identifier )
		{
			PushErrorMessage();
		}
		auto template_name= it_.front().text;
		auto type_alias_src_loc= it_.front().src_loc;
		NextLexem();

		auto mut is_short_form= false;
		var ust::vector</TypeTemplate::SignatureParam/> mut signature_params;
		if( it_.front().lexem_type == Lexem::Type::TemplateBracketLeft )
		{
			is_short_form= false;
			signature_params= ParseTemplateSignatureParams();
		}
		else
		{
			is_short_form= true;
		}

		ExpectLexem( Lexem::Type::Assignment );

		auto mut type_name= ParseTypeName();

		ExpectSemicolon();

		var TypeAlias mut type_alias
		{
			.src_loc= type_alias_src_loc,
			.name= "_", // Give special name for all template type aliases.
			.type_name= move(type_name),
		};
		var TypeTemplate mut type_template
		{
			.src_loc= template_src_loc,
			.name= template_name,
			.something( ust::make_shared_ptr_final( move(type_alias) ) ),
			.params= move(params),
			.signature_params= move(signature_params),
			.is_short_form= is_short_form,
		};

		return ust::make_shared_ptr_final(move(type_template));
	}
	else if( IsKeyword( it_.front(), Keyword::struct_ ) || IsKeyword( it_.front(), Keyword::class_ ) )
	{
		auto is_struct= IsKeyword( it_.front(), Keyword::struct_ );
		NextLexem();

		if( it_.front().lexem_type != Lexem::Type::Identifier )
		{
			PushErrorMessage();
		}
		auto template_name= it_.front().text;
		auto class_src_loc= it_.front().src_loc;
		NextLexem();

		auto mut is_short_form= false;
		var ust::vector</TypeTemplate::SignatureParam/> mut signature_params;
		if( it_.front().lexem_type == Lexem::Type::TemplateBracketLeft )
		{
			is_short_form= false;
			signature_params= ParseTemplateSignatureParams();
		}
		else
		{
			is_short_form= true;
		}

		var Class mut class_
		{
			.src_loc= class_src_loc,
			.name= "_", // Give special name for all template classes
		};

		if( is_struct )
		{
			class_.kind_attribute= Class::KindAttribute::Struct;
		}
		else
		{
			class_.kind_attribute= ParseClassKindAttribute();
			class_.parents= ParseClassParentsList();
		}
		class_.non_sync_tag= TryParseNonSyncTag();
		class_.keep_fields_order= ParseClassOrderedFlag();

		class_.class_elements= ParseClassBody();

		var TypeTemplate mut type_template
		{
			.src_loc= template_src_loc,
			.name= template_name,
			.something( ust::make_shared_ptr_final( move(class_) ) ),
			.params= move(params),
			.signature_params= move(signature_params),
			.is_short_form= is_short_form,
		};

		return ust::make_shared_ptr_final(move(type_template));
	}
	else if( IsKeyword( it_.front(), Keyword::fn_ ) || IsKeyword( it_.front(), Keyword::op_ ) )
	{
		var FunctionTemplate mut function_template
		{
			.src_loc= template_src_loc,
			.params= move(params),
			.function( ParseFunction() ),
		};

		auto mut name= function_template.function.deref().name.back();
		function_template.name= move(name);

		return ust::make_shared_ptr_final( move(function_template) );
	}
	else
	{
		PushErrorMessage();

		// Fill dummpy
		var TypeTemplate mut type_template
		{
			.something( ust::make_shared_ptr_final( TypeAlias() ) ),
			.params= move(params),
			.is_short_form= false,
		};

		return ust::make_shared_ptr_final(move(type_template));
	}
}

fn SyntaxAnalyzer::ParseTemplateSignatureParams( mut this ) : ust::vector</TypeTemplate::SignatureParam/>
{
	var ust::vector</TypeTemplate::SignatureParam/> mut signature_params;

	ExpectLexem( Lexem::Type::TemplateBracketLeft );

	while( NotEndOfFile() )
	{
		if( it_.front().lexem_type == Lexem::Type::TemplateBracketRight )
		{
			NextLexem();
			break;
		}

		var TypeTemplate::SignatureParam mut param;
		param.name= ParseExpression();

		if( it_.front().lexem_type == Lexem::Type::Assignment )
		{
			NextLexem();
			param.default_value= ParseExpression();
		}

		signature_params.push_back(move(param));

		if( it_.front().lexem_type == Lexem::Type::TemplateBracketRight )
		{}
		else if( it_.front().lexem_type == Lexem::Type::Comma )
		{
			NextLexem();
			if( it_.front().lexem_type == Lexem::Type::TemplateBracketRight )
			{
				PushErrorMessage();
				break;
			}
		}
		else
		{
			PushErrorMessage();
			break;
		}
	}

	return move(signature_params);
}

fn SyntaxAnalyzer::ParseMacro( mut this )
{
	NextLexem(); // Skip "?macro"
	var Macro mut macro;

	// Macro name and context
	ExpectLexem( Lexem::Type::MacroBracketLeft );

	if( it_.front().lexem_type != Lexem::Type::Identifier )
	{
		PushErrorMessage();
	}
	macro.src_loc= it_.front().src_loc;
	macro.name= it_.front().text;
	NextLexem();

	ExpectLexem( Lexem::Type::Colon );

	if( it_.front().lexem_type != Lexem::Type::Identifier )
	{
		PushErrorMessage();
	}
	var SrcLoc macro_context_src_loc= it_.front().src_loc;
	var ust::string8& macro_context_str= it_.front().text;
	NextLexem();

	var Macro::Context mut macro_context= Macro::Context::Expression;
		 if( macro_context_str == "expr"      ) { macro_context= Macro::Context::Expression; }
	else if( macro_context_str == "block"     ) { macro_context= Macro::Context::Block; }
	else if( macro_context_str == "class"     ) { macro_context= Macro::Context::Class; }
	else if( macro_context_str == "namespace" ) { macro_context= Macro::Context::Namespace; }
	else
	{
		PushMacroErrorMessage( macro_context_src_loc, "\"" + macro_context_str + "\" unknown macro context" );
	}

	// Match block
	macro.match_template_elements= ParseMacroMatchBlock();

	ExpectLexem( Lexem::Type::MacroBracketRight );

	ExpectLexem( Lexem::Type::RightArrow );

	// Result block
	ExpectLexem( Lexem::Type::MacroBracketLeft );

	macro.result_template_elements= ParseMacroResultBlock();

	ExpectLexem( Lexem::Type::MacroBracketRight );

	// Inset result macro.
	auto macros_copy= macros_;
	auto mut macros_lock= macros_copy.lock_mut();
	var MacrosByContextMap &mut macros_by_context= macros_lock.deref();

	if( macros_by_context.find( macro_context ).empty() )
	{
		macros_by_context.insert( macro_context, MacroMap() );
	}
	var MacroMap &mut macro_map= macros_by_context[ macro_context ];

	if( macro_map.find( macro.name ).empty() )
	{
		macro_map.insert( ust::string8(macro.name), ust::make_shared_ptr_final( move(macro) ) );
	}
	else
	{
		PushMacroErrorMessage( cast_imut(macro).src_loc, "\"" + macro.name + "\" macro redefinition." );
		move(macro);
	}
}

fn SyntaxAnalyzer::ParseMacroMatchBlock( mut this ) : Macro::MatchElements
{
	var Macro::MatchElements mut match_elements;

	var ust::unordered_set</ ust::string8 /> mut elements_set;
	while( NotEndOfFile() && it_.front().lexem_type != Lexem::Type::MacroBracketRight )
	{
		if( it_.front().lexem_type == Lexem::Type::MacroBracketLeft ||
			it_.front().lexem_type == Lexem::Type::MacroUniqueIdentifier )
		{
			PushErrorMessage();
			break;
		}
		if( it_.front().lexem_type == Lexem::Type::MacroIdentifier )
		{
			var SrcLoc match_element_src_loc= it_.front().src_loc;
			var Macro::MatchElement mut match_element{ .name= it_.front().text };
			NextLexem();

			ExpectLexem( Lexem::Type::Colon );

			if( it_.front().lexem_type != Lexem::Type::Identifier )
			{
				PushErrorMessage();
			}
			var SrcLoc element_type_src_loc= it_.front().src_loc;
			var ust::string8& element_type= it_.front().text;
			NextLexem();

				 if( element_type == "ident" ) { match_element.kind= Macro::MatchElementKind::Identifier; }
			else if( element_type == "ty"    ) { match_element.kind= Macro::MatchElementKind::Typename; }
			else if( element_type == "expr"  ) { match_element.kind= Macro::MatchElementKind::Expression; }
			else if( element_type == "block" ) { match_element.kind= Macro::MatchElementKind::Block; }
			else if( element_type == "if_alternative" ) { match_element.kind= Macro::MatchElementKind::IfAlternative; }
			else if( element_type == "opt"   )
			{
				ExpectLexem( Lexem::Type::MacroBracketLeft );
				match_element.sub_elements= ust::box_nullable</ Macro::MatchElements />( ParseMacroMatchBlock() );
				ExpectLexem( Lexem::Type::MacroBracketRight );

				match_element.kind= Macro::MatchElementKind::Optional;
			}
			else if( element_type == "rep" )
			{
				ExpectLexem( Lexem::Type::MacroBracketLeft );
				match_element.sub_elements= ust::box_nullable</ Macro::MatchElements />( ParseMacroMatchBlock() );
				ExpectLexem( Lexem::Type::MacroBracketRight );

				// Separator.
				if( it_.front().lexem_type == Lexem::Type::MacroBracketLeft )
				{
					NextLexem();

					if( it_.front().lexem_type == Lexem::Type::MacroBracketLeft ||
						it_.front().lexem_type == Lexem::Type::MacroBracketRight ||
						it_.front().lexem_type == Lexem::Type::MacroIdentifier ||
						it_.front().lexem_type == Lexem::Type::MacroUniqueIdentifier )
					{
						PushErrorMessage();
					}
					match_element.lexem= it_.front();
					NextLexem();

					ExpectLexem( Lexem::Type::MacroBracketRight );
				}
				else
				{
					match_element.lexem.lexem_type= Lexem::Type::EndOfFile;
				}

				match_element.kind= Macro::MatchElementKind::Repeated;
			}
			else
			{
				PushMacroErrorMessage( element_type_src_loc, "\"" + element_type + "\" unknown macro variable type" );
			}

			// Check if name is ok.
			if( U1::IsKeyword( match_element.name ) )
			{
				PushMacroErrorMessage( match_element_src_loc, "Using keyword as macro element name." );
			}
			if( elements_set.exists( match_element.name ) )
			{
				PushMacroErrorMessage( match_element_src_loc, "\"" + match_element.name + "\" macro parameter redefinition." );
			}
			elements_set.insert( match_element.name );

			match_elements.push_back( move(match_element) );
		}
		else
		{
			var Macro::MatchElement mut match_element{ .lexem= it_.front() };
			match_elements.push_back( move(match_element) );
			NextLexem();
		}
	}

	// Determine block check lexem kind, check for errors.
	for( auto mut i= 0s; i < match_elements.size(); ++i )
	{
		var Macro::MatchElementKind element_kind= match_elements[i].kind;
		if( !( element_kind == Macro::MatchElementKind::Optional || element_kind == Macro::MatchElementKind::Repeated ) )
		{
			continue;
		}

		var SrcLoc match_element_src_loc= it_.front().src_loc; // TODO - get REAL value.

		var ust::optional</Lexem/> mut start_lexem, mut end_lexem;

		if( !match_elements[i].sub_elements.try_deref().empty() &&
			 match_elements[i].sub_elements.try_deref().front().kind == Macro::MatchElementKind::Lexem )
		{
			start_lexem= match_elements[i].sub_elements.try_deref().front().lexem;
		}
		if( i + 1s < match_elements.size() && match_elements[i+1s].kind == Macro::MatchElementKind::Lexem )
		{
			end_lexem= match_elements[i+1s].lexem;
		}

		if( !start_lexem.empty() )
		{
			match_elements[i].block_check_lexem_kind= Macro::BlockCheckLexemKind::LexemAtBlockStart;
		}
		else if( !end_lexem.empty() )
		{
			match_elements[i].block_check_lexem_kind= Macro::BlockCheckLexemKind::LexemAfterBlockEnd;
		}
		else
		{
			PushMacroErrorMessage( match_element_src_loc, "Expected lexem at start or after \"" + match_elements[i].name + "\" element." );
		}

		if( element_kind == Macro::MatchElementKind::Optional )
		{
			if( !start_lexem.empty() && !end_lexem.empty() &&
				start_lexem.try_deref().lexem_type == end_lexem.try_deref().lexem_type &&
				start_lexem.try_deref().text == end_lexem.try_deref().text )
			{
				PushMacroErrorMessage( match_element_src_loc, "Start lexem of optional macro block must be different from first lexem after optional block." );
			}
		}
		if( element_kind == Macro::MatchElementKind::Repeated )
		{
			if( match_elements[i].lexem.lexem_type != Lexem::Type::EndOfFile ) // Non-empty separator
			{
				if( !end_lexem.empty() &&
					match_elements[i].lexem.lexem_type == end_lexem.try_deref().lexem_type &&
					match_elements[i].lexem.text == end_lexem.try_deref().text )
				{
					PushMacroErrorMessage( match_element_src_loc, "Separator lexem of repeated macro block must be different from first lexem after repeated block." );
				}
			}
			else // Empty separator
			{
				if( !start_lexem.empty() && !end_lexem.empty() &&
					start_lexem.try_deref().lexem_type == end_lexem.try_deref().lexem_type &&
					start_lexem.try_deref().text == end_lexem.try_deref().text )
				{
					PushMacroErrorMessage( match_element_src_loc, "Start lexem of repeated macro block without separator must be different from first lexem after repeated block." );
				}
			}
		}
	}

	return move(match_elements);
}

fn SyntaxAnalyzer::ParseMacroResultBlock( mut this ) : Macro::ResultElements
{
	var Macro::ResultElements mut result_elements;

	while( NotEndOfFile() && it_.front().lexem_type != Lexem::Type::MacroBracketRight )
	{
		if( it_.front().lexem_type == Lexem::Type::MacroBracketLeft )
		{
			PushErrorMessage();
			break;
		}
		else if( it_.front().lexem_type == Lexem::Type::MacroIdentifier )
		{
			var Macro::ResultElement mut result_element{ .name= it_.front().text };
			NextLexem();

			if( it_.front().lexem_type == Lexem::Type::MacroBracketLeft )
			{
				NextLexem();

				result_element.sub_elements= ust::box_nullable</ Macro::ResultElements />( ParseMacroResultBlock() );

				ExpectLexem( Lexem::Type::MacroBracketRight );

				// Separator.
				if( it_.front().lexem_type == Lexem::Type::MacroBracketLeft )
				{
					NextLexem();

					if( it_.front().lexem_type == Lexem::Type::MacroBracketLeft ||
						it_.front().lexem_type == Lexem::Type::MacroBracketRight ||
						it_.front().lexem_type == Lexem::Type::MacroIdentifier ||
						it_.front().lexem_type == Lexem::Type::MacroUniqueIdentifier )
					{
						PushErrorMessage();
					}
					result_element.lexem= it_.front();
					NextLexem();

					ExpectLexem( Lexem::Type::MacroBracketRight );
				}
				else
				{
					result_element.lexem.lexem_type= Lexem::Type::EndOfFile;
				}

				result_element.kind= Macro::ResultElementKind::VariableElementWithMacroBlock;
			}
			else
			{
				result_element.kind= Macro::ResultElementKind::VariableElement;
			}

			result_elements.push_back( move(result_element) );
		}
		else
		{
			var Macro::ResultElement mut result_element{ .lexem= it_.front() };
			result_elements.push_back( move(result_element) );
			NextLexem();
		}
	}

	return move(result_elements);
}

fn SyntaxAnalyzer::FetchMacro( this, ust::string8& name, Macro::Context context ) : ust::shared_ptr_final_nullable</Macro/>
{
	auto macros_lock= macros_.lock_imut();
	var MacrosByContextMap& macros_by_context= macros_lock.deref();
	if_var( &macro_map : macros_by_context.find( context ) )
	{
		if_var( &macro : macro_map.find( name ) )
		{
			return macro;
		}
	}

	return ust::shared_ptr_final_nullable</Macro/>();
}

fn SyntaxAnalyzer::ExpandMacroImpl( mut this, Macro& macro, ust::string8& macro_unique_identifiers_base_name ) : Lexems
{
	var SrcLoc expansion_src_loc= it_.front().src_loc;
	NextLexem(); // Skip macro name itself.

	auto macro_variables_map_opt= MatchMacroBlock( macro.match_template_elements );
	if( macro_variables_map_opt.empty() )
	{
		return Lexems();
	}

	var MacroVariablesMapsStack mut macro_variables_maps_stack;
	macro_variables_maps_stack.push_back( macro_variables_map_opt.try_to_non_nullable() );

	var UniqueMacroIdentifiersMap mut unique_macro_indentifiers_map;

	auto mut lexems=
		ExpandMacroBlock(
			macro.result_template_elements,
			macro_variables_maps_stack,
			unique_macro_indentifiers_map,
			macro_unique_identifiers_base_name,
			expansion_src_loc );

	var Lexem end_of_file_lexem{ .lexem_type= Lexem::Type::EndOfFile };
	lexems.push_back( end_of_file_lexem );
	lexems.push_back( end_of_file_lexem );

	var u32 mut macro_expansion_index= ~0u;
	{
		var MacroExpansionContext mut macro_expansion_context
		{
			.macro_name= macro.name,
			.macro_declaration_src_loc= macro.src_loc,
			.src_loc= expansion_src_loc,
		};

		auto mut lock= macro_expansion_contexts_.lock_mut();
		var MacroExpansionContexts &mut macro_expansion_contexts= lock.deref();

		macro_expansion_index= u32(macro_expansion_contexts.size());
		macro_expansion_contexts.push_back( move(macro_expansion_context) );
	}

	foreach( &mut lexem : lexems )
	{
		lexem.src_loc.SetMacroExpansionIndex( macro_expansion_index );
	}

	return move(lexems);
}

fn SyntaxAnalyzer::MatchMacroBlock( mut this, Macro::MatchElements& match_elements ) : ust::shared_ptr_final_nullable</MacroVariablesMap/>
{
	auto empty_result= ust::shared_ptr_final_nullable</MacroVariablesMap/>();
	var MacroVariablesMap mut macro_variables_map;

	for( auto mut i= 0s; i < match_elements.size(); ++i )
	{
		auto& match_element= match_elements[i];

		if( match_element.kind == Macro::MatchElementKind::Lexem )
		{
			if( !( it_.front().lexem_type == match_element.lexem.lexem_type && it_.front().text == match_element.lexem.text ) )
			{
				PushErrorMessage();
				return empty_result;
			}
			NextLexem();
			continue;
		}

		var ParsedMacroElement mut element{ .kind= match_element.kind };
		auto range_before= it_;

			 if( match_element.kind == Macro::MatchElementKind::Identifier )
		{
			if( it_.front().lexem_type != Lexem::Type::Identifier )
			{
				PushErrorMessage();
			}
			NextLexem();
		}
		else if( match_element.kind == Macro::MatchElementKind::Typename )
		{
			ParseTypeName();
		}
		else if( match_element.kind == Macro::MatchElementKind::Expression )
		{
			ParseExpression();
		}
		else if( match_element.kind == Macro::MatchElementKind::Block )
		{
			ParseBlock();
		}
		else if( match_element.kind == Macro::MatchElementKind::IfAlternative )
		{
			ParseIfAlternative();
		}
		else if( match_element.kind == Macro::MatchElementKind::Optional )
		{
			var bool mut has_value= true;

			var Macro::MatchElements& sub_elements= match_element.sub_elements.try_deref();
			if( match_element.block_check_lexem_kind == Macro::BlockCheckLexemKind::LexemAfterBlockEnd &&
				i + 1s < match_elements.size() )
			{
				var Lexem& terminator_lexem= match_elements[i+1s].lexem;
				has_value= !( it_.front().lexem_type == terminator_lexem.lexem_type && it_.front().text == terminator_lexem.text );
			}
			else if( match_element.block_check_lexem_kind == Macro::BlockCheckLexemKind::LexemAtBlockStart &&
				!sub_elements.empty() )
			{
				var Lexem& check_lexem= sub_elements.front().lexem;
				has_value= it_.front().lexem_type == check_lexem.lexem_type && it_.front().text == check_lexem.text;
			}
			else{ /* case of previous error*/ }

			if( has_value )
			{
				auto sub_variables_map_opt= MatchMacroBlock( sub_elements );
				if( sub_variables_map_opt.empty() )
				{
					return empty_result;
				}
				element.sub_elements.push_back( sub_variables_map_opt.try_to_non_nullable() );
			}
		}
		else if( match_element.kind == Macro::MatchElementKind::Repeated )
		{
			var Macro::MatchElements& sub_elements= match_element.sub_elements.try_deref();
			if( match_element.block_check_lexem_kind == Macro::BlockCheckLexemKind::LexemAfterBlockEnd &&
				i + 1s < match_elements.size() )
			{
				var Lexem& terminator_lexem= match_elements[i+1s].lexem;
				while( NotEndOfFile() &&
					!( it_.front().lexem_type == terminator_lexem.lexem_type && it_.front().text == terminator_lexem.text ) )
				{
					auto sub_variables_map_opt= MatchMacroBlock( sub_elements );
					if( sub_variables_map_opt.empty() )
					{
						return empty_result;
					}
					element.sub_elements.push_back( sub_variables_map_opt.try_to_non_nullable() );

					// Process separator
					if( match_element.lexem.lexem_type != Lexem::Type::EndOfFile )
					{
						if( it_.front().lexem_type == match_element.lexem.lexem_type && it_.front().text == match_element.lexem.text )
						{
							NextLexem(); // Separator detected
							if( it_.front().lexem_type == terminator_lexem.lexem_type && it_.front().text == terminator_lexem.text )
							{
								// Disable end lexem after separator.
								PushErrorMessage();
								return empty_result;
							}
						}
						else
						{
							break; // no separator - finish sequence
						}
					}
				}
			}
			else if( match_element.block_check_lexem_kind == Macro::BlockCheckLexemKind::LexemAtBlockStart &&
				!sub_elements.empty() )
			{
				var Lexem& check_lexem= sub_elements.front().lexem;
				while( NotEndOfFile() &&
					it_.front().lexem_type == check_lexem.lexem_type && it_.front().text == check_lexem.text )
				{
					auto sub_variables_map_opt= MatchMacroBlock( sub_elements );
					if( sub_variables_map_opt.empty() )
					{
						return empty_result;
					}
					element.sub_elements.push_back( sub_variables_map_opt.try_to_non_nullable() );

					// Process separator
					if( match_element.lexem.lexem_type != Lexem::Type::EndOfFile )
					{
						if( it_.front().lexem_type == match_element.lexem.lexem_type && it_.front().text == match_element.lexem.text )
						{
							NextLexem(); // Separator detected
							// After separator must be start lexem of block.
							if( !( it_.front().lexem_type == check_lexem.lexem_type && it_.front().text == check_lexem.text ) )
							{
								PushErrorMessage();
								return empty_result;
							}
						}
						else
						{
							break; // no separator - finish sequence
						}
					}
				}
			}
			else{ /* case of some previous error */ }
		}
		else{ halt; }

		auto range_after= it_;
		auto range_size= range_before.size() - range_after.size();
		foreach( &lexem : range_before.subrange( 0s, range_size ) )
		{
			element.lexems.push_back( lexem );
		}

		// Redefinition checked before, while parsing macro itself.
		macro_variables_map.insert( match_element.name, move(element) );
	}

	return ust::make_shared_ptr_final( move(macro_variables_map) );
}

fn SyntaxAnalyzer::ExpandMacroBlock(
	mut this,
	Macro::ResultElements& result_elements,
	MacroVariablesMapsStack &mut macro_variables_maps_stack,
	UniqueMacroIdentifiersMap &mut unique_macro_indentifiers_map,
	ust::string8& macro_unique_identifiers_base_name,
	SrcLoc& expansion_src_loc ) : Lexems
{
	var Lexems mut lexems_expanded;
	foreach( &result_element : result_elements )
	{
		if( result_element.kind == Macro::ResultElementKind::Lexem )
		{
			if( result_element.lexem.lexem_type == Lexem::Type::MacroUniqueIdentifier )
			{
				if( unique_macro_indentifiers_map.find( result_element.lexem.text ).empty() )
				{
					var ust::string8 mut name= "_macro_ident_";
					name+= result_element.lexem.text;
					name+= "_";
					name+= macro_unique_identifiers_base_name;
					name+= "_";
					name+= ust::to_string8(unique_macro_indentifiers_map.size());
					unique_macro_indentifiers_map.insert( result_element.lexem.text, move(name) );
				}

				var Lexem mut result_lexem
				{
					.lexem_type= Lexem::Type::Identifier,
					.text= unique_macro_indentifiers_map[ result_element.lexem.text ],
				};
				lexems_expanded.push_back( move(result_lexem) );
			}
			else
			{
				lexems_expanded.push_back( result_element.lexem );
			}
		}
		else if( result_element.kind == Macro::ResultElementKind::VariableElement )
		{
			auto variable_opt= FetchMacroVariable( macro_variables_maps_stack, result_element.name );
			if( variable_opt.empty() )
			{
				PushMacroErrorMessage( expansion_src_loc, "\"" + result_element.name + "\" - not found" );
				continue;
			}

			foreach( &lexem : variable_opt.try_deref().lexems )
			{
				lexems_expanded.push_back( lexem );
			}
		}
		else if( result_element.kind == Macro::ResultElementKind::VariableElementWithMacroBlock )
		{
			auto variable_opt= FetchMacroVariable( macro_variables_maps_stack, result_element.name );
			if( variable_opt.empty() )
			{
				PushMacroErrorMessage( expansion_src_loc, "\"" + result_element.name + "\" - not found" );
				continue;
			}

			var ParsedMacroElement& variable= variable_opt.try_deref();
			if( !( variable.kind == Macro::MatchElementKind::Optional || variable.kind == Macro::MatchElementKind::Repeated ) )
			{
				PushMacroErrorMessage( expansion_src_loc, "Expected optional or repated" );
				continue;
			}

			foreach( &variable_element : variable.sub_elements )
			{
				macro_variables_maps_stack.push_back( variable_element );

				auto mut internal_lexems_expanded=
					ExpandMacroBlock(
						result_element.sub_elements.try_deref(),
						macro_variables_maps_stack,
						unique_macro_indentifiers_map,
						macro_unique_identifiers_base_name,
						expansion_src_loc );

				VectorAppend( lexems_expanded, move(internal_lexems_expanded) );

				macro_variables_maps_stack.drop_back();

				// Separator.
				if( result_element.lexem.lexem_type != Lexem::Type::EndOfFile && ust::ref_cmp_ne( variable_element, variable.sub_elements.back() ) )
				{
					lexems_expanded.push_back( result_element.lexem );
				}
			}
		}
		else { halt; }
	}

	return move(lexems_expanded);
}

fn SyntaxAnalyzer::FetchMacroVariable( MacroVariablesMapsStack& macro_variables_maps_stack, ust::string8& variable_name ) : ust::optional</ParsedMacroElement/>
{
	// Search variable from top to bottom.
	for( auto mut i= 0s; i < macro_variables_maps_stack.size(); ++i )
	{
		auto j= macro_variables_maps_stack.size() - i - 1s;
		var MacroVariablesMap& macro_variables_map= macro_variables_maps_stack[j].deref();
		if_var( &ref : macro_variables_map.find( variable_name ) )
		{
			return ref;
		}
	}

	return ust::null_optional;
}

fn SyntaxAnalyzer::ExpectSemicolon( mut this )
{
	ExpectLexem( Lexem::Type::Semicolon );
}

fn SyntaxAnalyzer::ExpectLexem( mut this, Lexem::Type t )
{
	if( it_.front().lexem_type == t )
	{
		NextLexem();
	}
	else
	{
		PushErrorMessage();
	}
}

fn SyntaxAnalyzer::GetPrevSrcLoc( this ) : SrcLoc
{
	auto index= it_initial_.size() - it_.size();
	return it_initial_[ index - 1s ].src_loc;
}

fn SyntaxAnalyzer::NotEndOfFile( this ) : bool
{
	return it_.size() >= 2s;
}

fn SyntaxAnalyzer::NextLexem( mut this )
{
	if( NotEndOfFile() )
	{
		it_.drop_front();
	}
}

fn SyntaxAnalyzer::PushErrorMessage( mut this )
{
	if( errors_.empty() || SrcLoc(errors_.back().src_loc) != it_.front().src_loc )
	{
		var LexSyntError mut error( it_.front().src_loc, "Syntax error - unexpected lexem: \"" + it_.front().text + "\"" );
		errors_.push_back( move(error) );
	}

	// HACK! Advance current position if we report about error in current position multiple times.
	if( it_.size() == last_error_it_.size() )
	{
		++last_error_repeats_;
		if( last_error_repeats_ > 10s )
		{
			NextLexem();
			last_error_repeats_= 0s;
		}
	}
	else
	{
		last_error_repeats_= 0s;

		auto it_copy= it_;
		last_error_it_= it_copy;
	}
}

fn SyntaxAnalyzer::PushMacroErrorMessage( mut this, SrcLoc& src_loc, ust::string8 mut text )
{
	errors_.push_back( LexSyntError( src_loc, move(text) ) );
}

fn SyntaxAnalysis(
	Lexems& lexems,
	MacrosByContextMap mut macros,
	MacroExpansionContextsPtr mut macro_expansion_contexts /*in-out param*/,
	ust::string8 mut source_file_contents_hash ) : SyntaxAnalysisResult
{
	var SyntaxAnalyzer mut analyzer(
		lexems,
		MacrosPtr( move(macros) ),
		move(macro_expansion_contexts),
		move(source_file_contents_hash) );

	return analyzer.DoAnalyzis();
}

fn ParseImports( Lexems& lexems ) : ImportsList
{
	var SyntaxAnalyzer mut analyzer(
		lexems,
		MacrosPtr( MacrosByContextMap() ),
		MacroExpansionContextsPtr( MacroExpansionContexts() ),
		"" );
	return analyzer.ParseImports();
}

} // namespace Synt

} // namespace U1
