import "/string_conversions.u"
import "../lex_synt_lib/source_graph.uh"
import "../code_builder_lib/code_builder.uh"
import "print.uh"
import "funcs_u.uh"

fn U1_ProcessCodeBuilderErrors(
	ErrorsHandlingCallbacks& errors_handling_callbacks,
	UserHandle data,
	U1::ErrorsContainer& errors )
{
	foreach( & err : errors )
	{
		unsafe
		{
			var U1_StringView text_view{ .data= err.text.front_unchecked(), .size= err.text.size() };

			var UserHandle error_data= errors_handling_callbacks.error_callback( data, err.src_loc.GetFileIndex(), err.src_loc.GetLine(), err.src_loc.GetColumn(), u32(err.code), text_view );
			if( !err.errors_context.empty() )
			{
				auto lock= err.errors_context.lock_imut();
				var U1::TemplateErrorsContext& errors_context= lock.deref();

				var U1_StringView context_name{ .data= errors_context.context_name.front_unchecked(), .size= errors_context.context_name.size() };
				var U1_StringView args_description{ .data= errors_context.args_description.front_unchecked(), .size= errors_context.args_description.size() };

				var UserHandle context_user_handle= errors_handling_callbacks.template_errors_context_callback(
					error_data,
					errors_context.context_declaration_src_loc.GetFileIndex(),
					errors_context.context_declaration_src_loc.GetLine(),
					errors_context.context_declaration_src_loc.GetColumn(),
					context_name,
					args_description );

				U1_ProcessCodeBuilderErrors( errors_handling_callbacks, context_user_handle, errors_context.errors.lock_imut().deref() );
			}
		}
	}
}

fn nomangle U1_BuildProgram(
	U1_StringView& program_text,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout ) unsafe : LLVMModuleRef
{
	unsafe
	{
		auto program_text= U1::StringToArrayView( program_text.data, program_text.size );

		safe
		{
			var U1::TestVfs mut test_vfs( program_text );
			auto source_graph= U1::LoadSourceGraph( test_vfs, "_" );

			U1::PrintLexSyntErrors( source_graph );
			if( !source_graph.errors.empty() || source_graph.nodes.empty() )
			{
				return LLVMModuleRef::Null;
			}

			var U1::CodeBuilder mut code_builder( llvm_context, data_layout, U1::GetCodeBuilderOptionsForTests() );
			auto code_builder_res= code_builder.BuildProgram( source_graph );

			U1::PrintCodeBuilderErrors( source_graph, code_builder_res.errors );
			if( !code_builder_res.errors.empty() )
			{
				unsafe{  LLVMDisposeModule( code_builder_res.llvm_module );  }
				return LLVMModuleRef::Null;
			}

			return code_builder_res.llvm_module;
		}
	}
}

fn nomangle U1_BuildProgramWithErrors(
	U1_StringView& program_text,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	ErrorsHandlingCallbacks& errors_handling_callbacks,
	UserHandle data ) unsafe : bool
{
	unsafe
	{
		auto program_text= U1::StringToArrayView( program_text.data, program_text.size );

		safe
		{
			var U1::TestVfs mut test_vfs( program_text );
			auto source_graph= U1::LoadSourceGraph( test_vfs, "_" );

			U1::PrintLexSyntErrors( source_graph );
			if( !source_graph.errors.empty() || source_graph.nodes.empty() )
			{
				return false;
			}

			var U1::CodeBuilder mut code_builder( llvm_context, data_layout, U1::GetCodeBuilderOptionsForTests() );
			auto code_builder_res= code_builder.BuildProgram( source_graph );

			unsafe{  LLVMDisposeModule( code_builder_res.llvm_module );  }

			U1_ProcessCodeBuilderErrors( errors_handling_callbacks, data, code_builder_res.errors );
		}
	}

	return true;
}

fn nomangle U1_BuildProgramWithSyntaxErrors(
	U1_StringView& program_text,
	ErrorsHandlingCallbacks& errors_handling_callbacks,
	UserHandle data ) unsafe
{
	unsafe
	{
		auto program_text= U1::StringToArrayView( program_text.data, program_text.size );

		var U1::TestVfs mut test_vfs( program_text );
		auto source_graph= U1::LoadSourceGraph( test_vfs, "_");

		foreach( &node : source_graph.nodes )
		{
			foreach( &err : node.synt_result.errors )
			{
				var U1_StringView text_view{ .data= err.text.front(), .size= err.text.size() };
				unsafe
				{
					errors_handling_callbacks.error_callback( data, err.src_loc.GetFileIndex(), err.src_loc.GetLine(), err.src_loc.GetColumn(), u32(U1::CodeBuilderErrorCode::BuildFailed), text_view );
				}
			}
		}
	}
}

fn nomangle U1_BuildProgrammUsingVFS(
	IVfsInterface& vfs_interface,
	U1_StringView& root_file_path,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	bool build_debug_info,
	SourceFilePathCallback result_source_file_path_callback,
	UserHandle result_source_file_path_processing_data,
	LexSyntErrorCallback lex_synt_error_callback,
	UserHandle lex_synt_error_callback_data,
	ErrorsHandlingCallbacks& errors_handling_callbacks,
	UserHandle error_processing_data ) : LLVMModuleRef
{
	var U1::ExternalVfsWrapper mut vfs( vfs_interface );

	unsafe
	{
		auto path= U1::StringToArrayView( root_file_path.data, root_file_path.size );

		auto source_graph= U1::LoadSourceGraph( vfs, path );

		foreach( &node : source_graph.nodes )
		{
			unsafe
			{
				var U1_StringView path_view{ .data= node.file_path_normalized.front_unchecked(), .size= node.file_path_normalized.size() };
				result_source_file_path_callback( result_source_file_path_processing_data, path_view );
			}
		}

		foreach( &err : source_graph.errors )
		{
			unsafe
			{
				var U1_StringView text{ .data= err.text.front_unchecked(), .size= err.text.size() };
				lex_synt_error_callback( lex_synt_error_callback_data, err.src_loc.GetFileIndex(), err.src_loc.GetLine(), err.src_loc.GetColumn(), text );
			}
		}

		if( !source_graph.errors.empty() || source_graph.nodes.empty() )
		{
			return LLVMModuleRef::Null;
		}

		var U1::CodeBuilderOptions options{ .build_debug_info= build_debug_info };
		var U1::CodeBuilder mut code_builder( llvm_context, data_layout, options );
		auto code_builder_res= code_builder.BuildProgram( source_graph );

		U1_ProcessCodeBuilderErrors( errors_handling_callbacks, error_processing_data, code_builder_res.errors );

		if( !code_builder_res.errors.empty() )
		{
			LLVMDisposeModule( code_builder_res.llvm_module );
			return LLVMModuleRef::Null;
		}

		return code_builder_res.llvm_module;
	}
}

fn nomangle U1_BuildMultisourceProgram(
	U1_SourceFile& source_files,
	size_type source_file_count,
	U1_StringView& root_file_path,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout ) unsafe : LLVMModuleRef
{
	var ust::string8 mut root_file_path_str;
	unsafe{ root_file_path_str= U1::StringToArrayView( root_file_path.data, root_file_path.size ); }

	var U1::TestVfs mut test_vfs( U1::TransformSourceFiles( source_files, source_file_count ) );
	auto source_graph= U1::LoadSourceGraph( test_vfs, root_file_path_str );

	if( !source_graph.errors.empty() || source_graph.nodes.empty() )
	{
		return LLVMModuleRef::Null;
	}

	var U1::CodeBuilder mut code_builder( llvm_context, data_layout, U1::GetCodeBuilderOptionsForTests() );
	auto code_builder_res= code_builder.BuildProgram( source_graph );

	U1::PrintCodeBuilderErrors( source_graph, code_builder_res.errors );
	if( !code_builder_res.errors.empty() )
	{
		unsafe{  LLVMDisposeModule( code_builder_res.llvm_module );  }
		return LLVMModuleRef::Null;
	}

	return code_builder_res.llvm_module;
}

fn nomangle U1_BuildMultisourceProgramWithErrors(
	U1_SourceFile& source_files,
	size_type source_file_count,
	U1_StringView& root_file_path,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	ErrorsHandlingCallbacks& errors_handling_callbacks,
	UserHandle data ) unsafe : bool
{
	var ust::string8 mut root_file_path_str;
	unsafe{ root_file_path_str= U1::StringToArrayView( root_file_path.data, root_file_path.size ); }

	var U1::TestVfs mut test_vfs( U1::TransformSourceFiles( source_files, source_file_count ) );
	auto source_graph= U1::LoadSourceGraph( test_vfs, root_file_path_str );

	if( !source_graph.errors.empty() || source_graph.nodes.empty() )
	{
		return false;
	}

	var U1::CodeBuilder mut code_builder( llvm_context, data_layout, U1::GetCodeBuilderOptionsForTests() );
	auto code_builder_res= code_builder.BuildProgram( source_graph );

	unsafe{  LLVMDisposeModule( code_builder_res.llvm_module );  }

	U1_ProcessCodeBuilderErrors( errors_handling_callbacks, data, code_builder_res.errors );

	return true;
}

fn nomangle U1_BuildProgramForLifetimesTest(
	U1_StringView& program_text,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout ) unsafe : LLVMModuleRef
{
	unsafe
	{
		auto program_text= U1::StringToArrayView( program_text.data, program_text.size );

		safe
		{
			var U1::TestVfs mut test_vfs( program_text );
			auto source_graph= U1::LoadSourceGraph( test_vfs, "_" );

			U1::PrintLexSyntErrors( source_graph );
			if( !source_graph.errors.empty() || source_graph.nodes.empty() )
			{
				return LLVMModuleRef::Null;
			}

			var U1::CodeBuilderOptions options{ .build_debug_info= true, .create_lifetimes= true, .generate_lifetime_start_end_debug_calls= true };
			var U1::CodeBuilder mut code_builder( llvm_context, data_layout, options );
			auto code_builder_res= code_builder.BuildProgram( source_graph );

			U1::PrintCodeBuilderErrors( source_graph, code_builder_res.errors );
			if( !code_builder_res.errors.empty() )
			{
				unsafe{  LLVMDisposeModule( code_builder_res.llvm_module );  }
				return LLVMModuleRef::Null;
			}

			return code_builder_res.llvm_module;
		}
	}
}

namespace U1
{

fn GetCodeBuilderOptionsForTests() : CodeBuilderOptions
{
	var CodeBuilderOptions mut options{ .build_debug_info= true };
	return move(options);
}

fn StringToArrayView( char8 &'x string_start, size_type string_size ) unsafe : ust::array_view_imut</ char8 />'x'
{
	unsafe
	{
		return ust::array_view_imut</ char8 />( $<( cast_mut(string_start) ), string_size );
	}
}

fn TransformSourceFiles( U1_SourceFile& source_files, size_type source_file_count ) : TestVfs::SourceEntries
{
	var TestVfs::SourceEntries mut source_entries;
	unsafe
	{
		auto& files_array= cast_ref_unsafe</ [ U1_SourceFile, 1000000 ] />( source_files );
		for( auto mut i= 0s; i < source_file_count; ++i )
		{
			auto &source_file= files_array[i];
			var U1::TestVfs::SourceEntry mut entry
			{
				.file_path= StringToArrayView( source_file.file_path.data, source_file.file_path.size ),
				.file_content= StringToArrayView( source_file.file_content.data, source_file.file_content.size ),
			};
			source_entries.push_back( move(entry) );
		}
	}
	return move(source_entries);
}

fn PrintLexSyntErrors( SourceGraph& source_graph )
{
	foreach( &err : source_graph.errors )
	{
		var ust::string8 mut str;

		auto file_index= size_type(err.src_loc.GetFileIndex());
		if( file_index < source_graph.nodes.size() )
		{
			str+= source_graph.nodes[file_index].file_path_normalized;
		}

		str+= ":";
		str+= ust::to_string8( err.src_loc.GetLine() );
		str+= ":";
		str+= ust::to_string8( err.src_loc.GetColumn() );
		str+= ": error: ";
		str+= err.text;
		str+= "\n\0";
		unsafe{  U1_PrintStr( U1_GetCerr(), str.front() );  }
	}
}

fn PrintCodeBuilderErrors( SourceGraph& source_graph, ErrorsContainer& errors )
{
	foreach( & err : errors )
	{
		var ust::string8 mut str;

		auto file_index= size_type(err.src_loc.GetFileIndex());
		if( file_index < source_graph.nodes.size() )
		{
			str+= source_graph.nodes[file_index].file_path_normalized;
		}

		str+= ":";
		str+= ust::to_string8( err.src_loc.GetLine() );
		str+= ":";
		str+= ust::to_string8( err.src_loc.GetColumn() );
		str+= ": error: ";
		str+= err.text;
		str+= "\n\0";
		unsafe{  U1_PrintStr( U1_GetCerr(), str.front() );  }
	}
}

class TestVfs final : IVfs
{
public:
	struct SourceEntry
	{
		ust::string8 file_path;
		ust::string8 file_content;
	}
	type SourceEntries= ust::vector</SourceEntry/>;

	fn constructor( ust::string8 mut file_content )
	{
		var SourceEntry mut entry
		{
			.file_path= "_",
			.file_content= move(file_content),
		};
		source_entries_.push_back(move(entry));
	}

	fn constructor( SourceEntries mut source_entries )
		( source_entries_(move(source_entries)) )
	{}

public:
	fn virtual override NormalizeFilePath(
		mut this,
		ust::string8& file_path,
		ust::string8& parent_file_path_normalized ) : ust::string8
	{
		return file_path;
	}

	fn virtual override LoadFile( mut this, ust::string8& full_file_path ) : ust::optional</ust::string8/>
	{
		foreach( &entry : source_entries_ )
		{
			if( full_file_path == entry.file_path )
			{
				return entry.file_content;
			}
		}
		return ust::optional</ust::string8/>();
	}

private:
	SourceEntries source_entries_;
}

class ExternalVfsWrapper final : IVfs
{
public:
	fn constructor( IVfsInterface mut vfs_interface )
		( vfs_interface_= move(vfs_interface) )
	{}

public:
	fn virtual override NormalizeFilePath(
		mut this,
		ust::string8& file_path,
		ust::string8& parent_file_path_normalized ) : ust::string8
	{
		unsafe
		{
			var ust::string8 mut result;

			var U1_StringView file_path_view{ .data= file_path.front_unchecked(), .size= file_path.size() };
			var U1_StringView parent_file_path_normalized_view{ .data= parent_file_path_normalized.front_unchecked(), .size= parent_file_path_normalized.size() };

			vfs_interface_.normalize_path_function(
				vfs_interface_.this_,
				file_path_view,
				parent_file_path_normalized_view,
				IVfsInterface::FillStringCallback(FillStringCallback),
				ust::ref_to_int( cast_ref_unsafe</void/>( result ) ) );
			return move(result);
		}
	}

	fn virtual override LoadFile( mut this, ust::string8& full_file_path ) : ust::optional</ust::string8/>
	{
		unsafe
		{
			var ust::string8 mut result;

			var U1_StringView full_file_path_view{ .data= full_file_path.front_unchecked(), .size= full_file_path.size() };

			var bool ok= vfs_interface_.load_file_content_function(
				vfs_interface_.this_,
				full_file_path_view,
				IVfsInterface::FillStringCallback(FillStringCallback),
				ust::ref_to_int( cast_ref_unsafe</void/>( result ) ) );
			if( ok )
			{
				return move(result);
			}
		}
		return ust::optional</ust::string8/>();
	}

private:
	fn FillStringCallback( UserHandle user_data, U1_StringView& result_path_normalized )
	{
		unsafe
		{
			auto &mut str= cast_mut(cast_ref_unsafe</ust::string8/>(ust::int_to_ref(user_data)));
			str= U1::StringToArrayView( result_path_normalized.data, result_path_normalized.size );
		}
	}

private:
	IVfsInterface vfs_interface_;
}

} // namespace U1
