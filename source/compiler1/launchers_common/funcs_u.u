import "/string_conversions.u"
import "../lex_synt_lib/source_graph.uh"
import "../code_builder_lib/code_builder.uh"
import "../code_builder_lib/source_file_contents_hash_wrapper.uh"
import "print.uh"
import "funcs_u.uh"

fn nomangle U1_BuildProgram(
	U1_StringView& program_text,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	bool enable_unsed_name_errors ) unsafe : LLVMModuleRef
{
	var U1::IVfsSharedPtr test_vfs= ust::make_shared_ptr( U1::TestVfs( unsafe( U1::StringToArrayView( program_text ) ) ) );
	auto source_graph= U1::LoadSourceGraph( test_vfs, U1::CalculateSourceFileContentsHash, "_", "" );

	U1::PrintLexSyntErrors( source_graph );
	if( !source_graph.errors.empty() || source_graph.nodes.empty() )
	{
		return LLVMModuleRef::Null;
	}

	var U1::CodeBuilder mut code_builder( llvm_context, data_layout, U1::GetTestsTargetTripleStr(), U1::GetCodeBuilderOptionsForTests(enable_unsed_name_errors), test_vfs );
	auto code_builder_res= code_builder.BuildProgram( source_graph );

	U1::PrintCodeBuilderErrors( source_graph, code_builder_res.errors );
	if( !code_builder_res.errors.empty() )
	{
		unsafe( LLVMDisposeModule( code_builder_res.llvm_module ) );
		return LLVMModuleRef::Null;
	}

	return code_builder_res.llvm_module;
}

fn nomangle U1_BuildProgramWithErrors(
	U1_StringView& program_text,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	bool enable_unsed_name_errors,
	U1_ErrorsHandlingCallbacks& errors_handling_callbacks,
	U1_UserHandle data ) unsafe : bool
{
	var U1::IVfsSharedPtr test_vfs= ust::make_shared_ptr( U1::TestVfs( unsafe( U1::StringToArrayView( program_text ) ) ) );
	auto source_graph= U1::LoadSourceGraph( test_vfs, U1::CalculateSourceFileContentsHash, "_", "" );

	U1::PrintLexSyntErrors( source_graph );
	if( !source_graph.errors.empty() || source_graph.nodes.empty() )
	{
		return false;
	}

	var U1::CodeBuilder mut code_builder( llvm_context, data_layout, U1::GetTestsTargetTripleStr(), U1::GetCodeBuilderOptionsForTests(enable_unsed_name_errors), test_vfs );
	auto code_builder_res= code_builder.BuildProgram( source_graph );

	unsafe( LLVMDisposeModule( code_builder_res.llvm_module ) );

	unsafe( U1::ProcessCodeBuilderErrors( errors_handling_callbacks, data, code_builder_res.errors ) );

	return true;
}

fn nomangle U1_BuildProgramWithSyntaxErrors(
	U1_StringView& program_text,
	U1_ErrorsHandlingCallbacks& errors_handling_callbacks,
	U1_UserHandle data ) unsafe
{
	var U1::IVfsSharedPtr test_vfs= ust::make_shared_ptr( U1::TestVfs( unsafe( U1::StringToArrayView( program_text ) ) ) );
	auto source_graph= U1::LoadSourceGraph( test_vfs, U1::CalculateSourceFileContentsHash, "_", "" );

	foreach( &node : source_graph.nodes )
	{
		foreach( &err : node.synt_result.errors )
		{
			unsafe
			{
				var U1_StringView text_view{ .data= cast_mut(err.text).data(), .size= err.text.size() };
				errors_handling_callbacks.error_callback( data, err.src_loc.GetFileIndex(), err.src_loc.GetLine(), err.src_loc.GetColumn(), u32(U1::CodeBuilderErrorCode::BuildFailed), text_view );
			}
		}
	}
}

fn nomangle U1_BuildProgramUsingVFS(
	U1_IVfsInterface& vfs_interface,
	U1_StringView& root_file_path,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	U1_StringView& target_triple_str,
	bool build_debug_info,
	bool generate_tbaa_metadata,
	bool allow_unused_names,
	U1::ManglingScheme mangling_scheme,
	U1_StringView& prelude_code,
	U1_SourceFilePathCallback result_source_file_path_callback,
	U1_UserHandle result_source_file_path_processing_data,
	U1_LexSyntErrorCallback lex_synt_error_callback,
	U1_UserHandle lex_synt_error_callback_data,
	U1_ErrorsHandlingCallbacks& errors_handling_callbacks,
	U1_UserHandle error_processing_data ) unsafe : LLVMModuleRef
{
	var U1::IVfsSharedPtr vfs= ust::make_shared_ptr( U1::ExternalVfsWrapper( vfs_interface ) );

	auto source_graph=
		U1::LoadSourceGraph(
			vfs,
			U1::CalculateSourceFileContentsHash,
			unsafe( U1::StringToArrayView( root_file_path ) ),
			unsafe( U1::StringToArrayView( prelude_code ) ) );

	foreach( &node : source_graph.nodes )
	{
		unsafe
		{
			var U1_StringView path_view{ .data= cast_mut(node.file_path_normalized).data(), .size= node.file_path_normalized.size() };
			result_source_file_path_callback( result_source_file_path_processing_data, path_view );
		}
	}

	foreach( &err : source_graph.errors )
	{
		unsafe
		{
			var U1_StringView text{ .data= cast_mut(err.text).data(), .size= err.text.size() };
			lex_synt_error_callback( lex_synt_error_callback_data, err.src_loc.GetFileIndex(), err.src_loc.GetLine(), err.src_loc.GetColumn(), text );
		}
	}

	if( !source_graph.errors.empty() || source_graph.nodes.empty() )
	{
		return LLVMModuleRef::Null;
	}

	var ust::string8 mut target_triple= unsafe( U1::StringToArrayView( target_triple_str ) );
	target_triple+= "\0";

	var U1::CodeBuilderOptions options
	{
		.build_debug_info= build_debug_info,
		.mangling_scheme= mangling_scheme,
		.generate_tbaa_metadata= generate_tbaa_metadata,
		.report_about_unused_names= !allow_unused_names,
	};

	var U1::CodeBuilder mut code_builder( llvm_context, data_layout, target_triple, options, vfs );
	auto code_builder_res= code_builder.BuildProgram( source_graph );

	if( !code_builder_res.errors.empty() )
	{
		unsafe( U1::ProcessCodeBuilderErrors( errors_handling_callbacks, error_processing_data, code_builder_res.errors ) );
		unsafe( LLVMDisposeModule( code_builder_res.llvm_module ) );
		return LLVMModuleRef::Null;
	}

	foreach( &embedded_file : code_builder_res.embedded_files )
	{
		unsafe
		{
			var U1_StringView path_view{ .data= cast_mut(embedded_file).data(), .size= embedded_file.size() };
			result_source_file_path_callback( result_source_file_path_processing_data, path_view );
		}
	}

	return code_builder_res.llvm_module;
}

fn nomangle U1_BuildMultisourceProgram(
	$(U1_SourceFile) source_files,
	size_type source_file_count,
	U1_StringView& root_file_path,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	bool enable_unsed_name_errors ) unsafe : LLVMModuleRef
{
	var U1::IVfsSharedPtr test_vfs= ust::make_shared_ptr( U1::TestVfs( unsafe( U1::TransformSourceFiles( source_files, source_file_count ) ) ) );
	auto source_graph=
		U1::LoadSourceGraph(
			test_vfs,
			U1::CalculateSourceFileContentsHash,
			unsafe( U1::StringToArrayView( root_file_path ) ),
			"" );

	if( !source_graph.errors.empty() || source_graph.nodes.empty() )
	{
		return LLVMModuleRef::Null;
	}

	var U1::CodeBuilder mut code_builder( llvm_context, data_layout, U1::GetTestsTargetTripleStr(), U1::GetCodeBuilderOptionsForTests(enable_unsed_name_errors), test_vfs );
	auto code_builder_res= code_builder.BuildProgram( source_graph );

	U1::PrintCodeBuilderErrors( source_graph, code_builder_res.errors );
	if( !code_builder_res.errors.empty() )
	{
		unsafe( LLVMDisposeModule( code_builder_res.llvm_module ) );
		return LLVMModuleRef::Null;
	}

	return code_builder_res.llvm_module;
}

fn nomangle U1_BuildMultisourceProgramWithErrors(
	$(U1_SourceFile) source_files,
	size_type source_file_count,
	U1_StringView& root_file_path,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	U1_ErrorsHandlingCallbacks& errors_handling_callbacks,
	U1_UserHandle data ) unsafe : bool
{
	var U1::IVfsSharedPtr test_vfs= ust::make_shared_ptr( U1::TestVfs( unsafe( U1::TransformSourceFiles( source_files, source_file_count ) ) ) );
	auto source_graph=
		U1::LoadSourceGraph(
			test_vfs,
			U1::CalculateSourceFileContentsHash,
			unsafe( U1::StringToArrayView( root_file_path ) ),
			"" );

	if( !source_graph.errors.empty() || source_graph.nodes.empty() )
	{
		return false;
	}

	var U1::CodeBuilder mut code_builder( llvm_context, data_layout, U1::GetTestsTargetTripleStr(), U1::GetCodeBuilderOptionsForTests(false), test_vfs );
	auto code_builder_res= code_builder.BuildProgram( source_graph );

	unsafe( LLVMDisposeModule( code_builder_res.llvm_module ) );

	unsafe( U1::ProcessCodeBuilderErrors( errors_handling_callbacks, data, code_builder_res.errors ) );

	return true;
}

fn nomangle U1_BuildProgramForLifetimesTest(
	U1_StringView& program_text,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	bool enable_unsed_name_errors ) unsafe : LLVMModuleRef
{
	var U1::IVfsSharedPtr test_vfs= ust::make_shared_ptr( U1::TestVfs( unsafe( U1::StringToArrayView( program_text ) ) ) );
	auto source_graph= U1::LoadSourceGraph( test_vfs, U1::CalculateSourceFileContentsHash, "_", "" );

	U1::PrintLexSyntErrors( source_graph );
	if( !source_graph.errors.empty() || source_graph.nodes.empty() )
	{
		return LLVMModuleRef::Null;
	}

	var U1::CodeBuilderOptions options
	{
		.build_debug_info= true,
		.create_lifetimes= true,
		.generate_lifetime_start_end_debug_calls= true,
		.report_about_unused_names= enable_unsed_name_errors
	};

	var U1::CodeBuilder mut code_builder( llvm_context, data_layout, U1::GetTestsTargetTripleStr(), options, test_vfs );
	auto code_builder_res= code_builder.BuildProgram( source_graph );

	U1::PrintCodeBuilderErrors( source_graph, code_builder_res.errors );
	if( !code_builder_res.errors.empty() )
	{
		unsafe( LLVMDisposeModule( code_builder_res.llvm_module ) );
		return LLVMModuleRef::Null;
	}

	return code_builder_res.llvm_module;
}

fn nomangle U1_BuildProgramForMSVCManglingTest(
	U1_StringView& program_text,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout ) unsafe : LLVMModuleRef
{
	var U1::IVfsSharedPtr test_vfs= ust::make_shared_ptr( U1::TestVfs( unsafe( U1::StringToArrayView( program_text ) ) ) );
	auto source_graph= U1::LoadSourceGraph( test_vfs, U1::CalculateSourceFileContentsHash, "_", "" );

	U1::PrintLexSyntErrors( source_graph );
	if( !source_graph.errors.empty() || source_graph.nodes.empty() )
	{
		return LLVMModuleRef::Null;
	}

	var U1::CodeBuilderOptions options
	{
		.build_debug_info= true,
		.mangling_scheme= U1::ManglingScheme::MSVC64,
		.report_about_unused_names= false
	};

	var U1::CodeBuilder mut code_builder( llvm_context, data_layout, U1::GetTestsTargetTripleStr(), options, test_vfs );
	auto code_builder_res= code_builder.BuildProgram( source_graph );

	U1::PrintCodeBuilderErrors( source_graph, code_builder_res.errors );
	if( !code_builder_res.errors.empty() )
	{
		unsafe(LLVMDisposeModule( code_builder_res.llvm_module ) );
		return LLVMModuleRef::Null;
	}

	return code_builder_res.llvm_module;
}

namespace U1
{


fn GetTestsTargetTripleStr() : ust::string8
{
	return "\0";
}

fn ProcessCodeBuilderErrors(
	U1_ErrorsHandlingCallbacks& errors_handling_callbacks,
	U1_UserHandle data,
	U1::ErrorsContainer& errors ) unsafe
{
	foreach( & err : errors )
	{
		unsafe
		{
			var U1_StringView text_view{ .data= cast_mut(err.text).data(), .size= err.text.size() };

			var U1_UserHandle error_data= errors_handling_callbacks.error_callback( data, err.src_loc.GetFileIndex(), err.src_loc.GetLine(), err.src_loc.GetColumn(), u32(err.code), text_view );
			if( !err.errors_context.empty() )
			{
				auto lock= err.errors_context.try_lock_imut();
				var U1::TemplateErrorsContext& errors_context= lock.deref();

				var U1_StringView context_name{ .data= cast_mut(errors_context.context_name).data(), .size= errors_context.context_name.size() };
				var U1_StringView args_description{ .data= cast_mut(errors_context.args_description).data(), .size= errors_context.args_description.size() };

				var U1_UserHandle context_user_handle= errors_handling_callbacks.template_errors_context_callback(
					error_data,
					errors_context.context_declaration_src_loc.GetFileIndex(),
					errors_context.context_declaration_src_loc.GetLine(),
					errors_context.context_declaration_src_loc.GetColumn(),
					context_name,
					args_description );

				ProcessCodeBuilderErrors( errors_handling_callbacks, context_user_handle, errors_context.errors.lock_imut().deref() );
			}
		}
	}
}

fn GetCodeBuilderOptionsForTests(bool enable_unsed_name_errors) : CodeBuilderOptions
{
	var CodeBuilderOptions options
	{
		.build_debug_info= true,
		.create_lifetimes= true,
		.generate_tbaa_metadata= true,
		.report_about_unused_names= enable_unsed_name_errors,
	};
	return options;
}

fn StringToArrayView( U1_StringView& string_view ) unsafe : ust::string_view8
{
	return unsafe( ust::string_view8( string_view.data, string_view.size ) );
}

fn TransformSourceFiles( $(U1_SourceFile) source_files, size_type source_file_count ) unsafe : TestVfs::SourceEntries
{
	return
		unsafe( ust::array_view_imut</U1_SourceFile/>( source_files, source_file_count ) ).iter().map(
			lambda[]( U1_SourceFile& source_file ) : U1::TestVfs::SourceEntry
			{
				return U1::TestVfs::SourceEntry
				{
					.file_path= unsafe( StringToArrayView( source_file.file_path ) ),
					.file_content= unsafe( StringToArrayView( source_file.file_content ) ),
				};
			} ).collect</TestVfs::SourceEntries/>();
}

fn PrintLexSyntErrors( SourceGraph& source_graph )
{
	foreach( &err : source_graph.errors )
	{
		var ust::string8 mut str;

		auto file_index= size_type(err.src_loc.GetFileIndex());
		if( file_index < source_graph.nodes.size() )
		{
			str+= source_graph.nodes[file_index].file_path_normalized;
		}

		str+= ":";
		str+= ust::to_string8( err.src_loc.GetLine() );
		str+= ":";
		str+= ust::to_string8( err.src_loc.GetColumn() );
		str+= ": error: ";
		str+= err.text;
		str+= "\n\0";
		unsafe( U1_PrintStr( U1_GetCerr(), str.front() ) );
	}
}

fn PrintCodeBuilderErrors( SourceGraph& source_graph, ErrorsContainer& errors )
{
	foreach( & err : errors )
	{
		var ust::string8 mut str;

		auto file_index= size_type(err.src_loc.GetFileIndex());
		if( file_index < source_graph.nodes.size() )
		{
			str+= source_graph.nodes[file_index].file_path_normalized;
		}

		str+= ":";
		str+= ust::to_string8( err.src_loc.GetLine() );
		str+= ":";
		str+= ust::to_string8( err.src_loc.GetColumn() );
		str+= ": error: ";
		str+= err.text;
		str+= "\n\0";
		unsafe( U1_PrintStr( U1_GetCerr(), str.front() ) );
	}
}

class TestVfs final : IVfs
{
public:
	struct SourceEntry
	{
		ust::string8 file_path;
		ust::string8 file_content;
	}
	type SourceEntries= ust::vector</SourceEntry/>;

	fn constructor( ust::string8 mut file_content )
	{
		source_entries_.push_back( SourceEntry{ .file_path= "_", .file_content= move(file_content) } );
	}

	fn constructor( SourceEntries mut source_entries )
		( source_entries_(move(source_entries)) )
	{}

public:
	fn virtual override NormalizeFilePath(
		mut this,
		ust::string8& file_path,
		ust::string8& parent_file_path_normalized ) : ust::string8
	{
		ust::ignore_unused(parent_file_path_normalized);
		return file_path;
	}

	fn virtual override LoadFile( mut this, ust::string8& full_file_path ) : ust::optional</ust::string8/>
	{
		foreach( &entry : source_entries_ )
		{
			if( full_file_path == entry.file_path )
			{
				return entry.file_content;
			}
		}
		return ust::null_optional;
	}

private:
	SourceEntries source_entries_;
}

class ExternalVfsWrapper final : IVfs
{
public:
	fn constructor( U1_IVfsInterface mut vfs_interface )
		( vfs_interface_= move(vfs_interface) )
	{}

public:
	fn virtual override NormalizeFilePath(
		mut this,
		ust::string8& file_path,
		ust::string8& parent_file_path_normalized ) : ust::string8
	{
		unsafe
		{
			var ust::string8 mut result;

			var U1_StringView file_path_view{ .data= cast_mut(file_path).data(), .size= file_path.size() };
			var U1_StringView parent_file_path_normalized_view{ .data= cast_mut(parent_file_path_normalized).data(), .size= parent_file_path_normalized.size() };

			vfs_interface_.normalize_path_function(
				vfs_interface_.this_,
				file_path_view,
				parent_file_path_normalized_view,
				U1_IVfsInterface::FillStringCallback(FillStringCallback),
				ust::ref_to_int( result ) );
			return result;
		}
	}

	fn virtual override LoadFile( mut this, ust::string8& full_file_path ) : ust::optional</ust::string8/>
	{
		unsafe
		{
			var ust::string8 mut result;

			var U1_StringView full_file_path_view{ .data= cast_mut(full_file_path).data(), .size= full_file_path.size() };

			var bool ok= vfs_interface_.load_file_content_function(
				vfs_interface_.this_,
				full_file_path_view,
				U1_IVfsInterface::FillStringCallback(FillStringCallback),
				ust::ref_to_int( result ) );
			if( ok )
			{
				return result;
			}
		}
		return ust::null_optional;
	}

private:
	fn FillStringCallback( U1_UserHandle user_data, U1_StringView& result_path_normalized )
	{
		unsafe
		{
			auto &mut str= cast_mut( ust::int_to_ref</ust::string8/>(user_data) );
			str= U1::StringToArrayView( result_path_normalized );
		}
	}

private:
	U1_IVfsInterface vfs_interface_;
}

} // namespace U1
