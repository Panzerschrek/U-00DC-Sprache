import "../code_builder_lib/llvm.uh"

// If contents of this file changed, funcs_c.hpp must be changed too!

struct U1_StringView ordered
{
	char8& data;
	size_type size;
}

struct U1_SourceFile ordered
{
	U1_StringView file_path;
	U1_StringView file_content;
}

type UserHandle= size_type; // pointer, index, etc - any kind of handle for user data identification.

struct ErrorsHandlingCallbacks ordered
{
	( fn( UserHandle data, u32 line, u32 column, u32 error_code, U1_StringView& error_text ) unsafe : UserHandle ) error_callback;
	( fn( UserHandle data, u32 line, u32 column, U1_StringView& context_name, U1_StringView& args_description ) unsafe : UserHandle ) template_errors_context_callback;
}

fn nomangle U1_BuildProgram(
	U1_StringView& program_text,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout ) unsafe : LLVMModuleRef;

// Returns false in case of lexical/syntax errors.
fn nomangle U1_BuildProgramWithErrors(
	U1_StringView& program_text,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	ErrorsHandlingCallbacks& errors_handling_callbacks,
	UserHandle data ) unsafe : bool;

fn nomangle U1_BuildProgramWithSyntaxErrors(
	U1_StringView& program_text,
	ErrorsHandlingCallbacks& errors_handling_callbacks,
	UserHandle data ) unsafe;

fn nomangle U1_BuildMultisourceProgram(
	U1_SourceFile& source_files,
	size_type source_file_count,
	U1_StringView& root_file_path,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout ) unsafe : LLVMModuleRef;

fn nomangle U1_BuildMultisourceProgramWithErrors(
	U1_SourceFile& source_files,
	size_type source_file_count,
	U1_StringView& root_file_path,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	ErrorsHandlingCallbacks& errors_handling_callbacks,
	UserHandle data ) unsafe : bool;

struct IVfsInterface ordered
{
	type FillStringCallback= fn( UserHandle user_data, U1_StringView& result_path_normalized );

	UserHandle this_;
	( fn( UserHandle this_, U1_StringView& file_path, U1_StringView& parent_file_path_normalized, FillStringCallback result_callback, UserHandle user_data ) ) normalize_path_function;
	( fn( UserHandle this_, U1_StringView& file_path, U1_StringView& parent_file_path_normalized, FillStringCallback result_callback, UserHandle user_data ) : bool ) load_file_content_function;
}

type SourceFilePathCallback= fn( UserHandle data, U1_StringView& file_path_normalized );

fn nomangle U1_BuildProgrammUsingVFS(
	IVfsInterface& vfs_interface,
	U1_StringView& root_file_path,
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	SourceFilePathCallback result_source_file_path_callback,
	UserHandle result_source_file_path_processing_data,
	ErrorsHandlingCallbacks& errors_handling_callbacks,
	UserHandle error_processing_data ) : LLVMModuleRef;

enum CharPtr : size_type { Null }

fn nomangle U1_CodeBuilderCodeToString(
	u32 error_code,
	CharPtr &mut out_text,
	size_type &mut out_text_length );
