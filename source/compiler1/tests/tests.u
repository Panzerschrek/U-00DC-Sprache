import "../lex_synt_lib/lexical_analyzer.uh"
import "../lex_synt_lib/syntax_analyzer.uh"
import "../code_builder_lib/code_builder.uh"

fn nomangle printf( char8& c, size_type i ) unsafe;

namespace U
{

fn PrintInt( i32 i )
{
	unsafe
	{
		printf( "%d\n\0"[0], size_type(i) );
	}
}

fn PrintStr( ust::array_view_imut</ char8 /> str )
{
	var ust::string8 mut s_copy(str);
	s_copy.push_back(0c8);
	unsafe
	{
		printf( "%s\n\0"[0], ust::ref_to_int(s_copy[0s]) );
	}
}

fn FirstTest()
{
	auto& c_program_text = "fn Foo() { return 42; }";

	auto res= LexicalAnalysis(c_program_text);
	foreach( & l : res.lexems )
	{
		PrintInt( i32(l.lexem_type) );
		PrintStr( l.text.range() );
	}

	auto synt_res= Synt::SyntaxAnalysis( res.lexems );

	var LLVMContextRef mut llvm_context= LLVMContextRef::Null;
	unsafe
	{
		llvm_context= LLVMContextCreate();
	}

	var CodeBuilder mut code_builder(llvm_context);
	auto code_builder_res= code_builder.BuildProgram( synt_res );

	unsafe
	{
		LLVMDisposeModule( code_builder_res.llvm_module );
		LLVMContextDispose( llvm_context );
	}
}

fn Main() : i32
{
	FirstTest();
	return 0;
}

} // namespace U

fn nomangle main() : i32
{
	return U::Main();
}
