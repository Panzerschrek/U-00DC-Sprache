import "macro.uh"
import "syntax_elements.uh"
import "lex_synt_error.uh"

namespace U1
{

namespace Synt
{

type ImportsList= ust::vector</Import/>;

struct SyntaxAnalysisResult
{
	ImportsList imports_list;
	ProgramElements program_elements;
	LexSyntErrors errors;
	MacrosPtr macros;
}

struct MacroExpansionContext
{
	ust::string8 macro_name;
	SrcLoc macro_declaration_src_loc;
	SrcLoc src_loc; // Contains also macro expansion context of parent macro.
}

type MacroExpansionContexts= ust::vector</MacroExpansionContext/>;
type MacroExpansionContextsPtr= ust::shared_ptr_mut</MacroExpansionContexts/>;

struct NamespaceParsingResult
{
	ProgramElements namespace_elements;
	LexSyntErrors errors;
}

struct ClassElementsParsingResult
{
	ClassElements class_elements;
	LexSyntErrors errors;
}

struct BlockElementsParsingResult
{
	BlockElements block_elements;
	LexSyntErrors errors;
}

struct TypeNameParsingResult
{
	TypeName type_name;
	LexSyntErrors errors;
}

struct ExpressionParsingResult
{
	Expression expression;
	LexSyntErrors errors;
}

fn SyntaxAnalysis(
	Lexems& lexems,
	MacrosPtr macros,
	MacroExpansionContextsPtr macro_expansion_contexts /*in-out param*/,
	ust::string8 file_path_hash ) : SyntaxAnalysisResult;

fn ParseNamespaceElements(
	Lexems& lexems,
	MacrosPtr macros, // Contents does not changed, because no macros can be parsed.
	MacroExpansionContextsPtr macro_expansion_contexts, /* in-out contexts */
	ust::string8 file_path_hash ) : NamespaceParsingResult;

fn ParseClassElements(
	Lexems& lexems,
	MacrosPtr macros, // Contents does not changed, because no macros can be parsed.
	MacroExpansionContextsPtr macro_expansion_contexts, /* in-out contexts */
	ust::string8 file_path_hash ) : ClassElementsParsingResult;

fn ParseBlockElements(
	Lexems& lexems,
	MacrosPtr macros, // Contents does not changed, because no macros can be parsed.
	MacroExpansionContextsPtr macro_expansion_contexts, /* in-out contexts */
	ust::string8 file_path_hash ) : BlockElementsParsingResult;

fn ParseTypeName(
	Lexems& lexems,
	MacrosPtr macros, // Contents does not changed, because no macros can be parsed.
	MacroExpansionContextsPtr macro_expansion_contexts, /* in-out contexts */
	ust::string8 file_path_hash ) : TypeNameParsingResult;

fn ParseExpression(
	Lexems& lexems,
	MacrosPtr macros, // Contents does not changed, because no macros can be parsed.
	MacroExpansionContextsPtr macro_expansion_contexts, /* in-out contexts */
	ust::string8 file_path_hash ) : ExpressionParsingResult;

fn ParseImports( Lexems& lexems ) : ImportsList;

} // namespace Synt

} // namespace U1
