import "/box.u"
import "/box_nullable.u"
import "/optional.u"
import "/shared_ptr_final.u"
import "/string.u"
import "/variant.u"
import "/vector.u"
import "lexical_analyzer.uh"
import "operators.uh"


namespace U1
{

namespace Synt
{

enum MutabilityModifier
{
	None,
	Mutable,
	Immutable,
	Constexpr,
}

enum ReferenceModifier
{
	None,
	Reference,
}

struct EmptyVariant{} // used as stub

type TemplateArgs= ust::vector</Expression/>;

struct Typeof
{
	SrcLoc src_loc;
	Expression expr;
}

type ComplexName= ust::variant</ tup[
	NameLookup,
	RootNamespaceNameLookup,
	// Non-terminal nodes (that contain ComplexName inside).
	ust::box</NamesScopeNameFetch/>,
	ust::box</TemplateParameterization/>,
	ust::box</Typeof/>
	] />;

struct NameLookup
{
	SrcLoc src_loc;

	ust::string8 name;
}

struct RootNamespaceNameLookup
{
	SrcLoc src_loc;

	ust::string8 name;
}

struct NamesScopeNameFetch
{
	SrcLoc src_loc;

	ComplexName base_;
	ust::string8 name;
}

struct TemplateParameterization
{
	SrcLoc src_loc;

	ComplexName base_;
	TemplateArgs template_args;
}

struct IntegerNumericConstant
{
	SrcLoc src_loc;
	IntegerNumberLexemData num;
}

struct FloatingPointNumericConstant
{
	SrcLoc src_loc;
	FloatingPointNumberLexemData num;
}

struct BooleanConstant
{
	SrcLoc src_loc;
	bool value;
}

struct StringLiteral
{
	SrcLoc src_loc;
	ust::string8 value;
	[ char8, 8 ] type_suffix= zero_init;
}

struct CharLiteral
{
	SrcLoc src_loc;
	char32 code_point;
	[ char8, 8 ] type_suffix= zero_init;
}

struct Typeinfo
{
	SrcLoc src_loc;
	TypeName type_name;
}

struct SameType
{
	SrcLoc src_loc;
	TypeName l;
	TypeName r;
}

struct NonSyncExpression
{
	SrcLoc src_loc;
	TypeName type_name;
}

struct CastRef
{
	SrcLoc src_loc;
	TypeName t;
	Expression expression;
}

struct CastRefUnsafe
{
	SrcLoc src_loc;
	TypeName t;
	Expression expression;
}

struct CastImut
{
	SrcLoc src_loc;
	Expression expression;
}

struct CastMut
{
	SrcLoc src_loc;
	Expression expression;
}

struct Embed
{
	SrcLoc src_loc;
	ust::optional</ComplexName/> element_type;
	Expression expression;
}

struct ExternalFunctionAccess
{
	SrcLoc src_loc;
	TypeName t;
	ust::string8 name;
}

struct ExternalVariableAccess
{
	SrcLoc src_loc;
	TypeName t;
	ust::string8 name;
}

struct SafeExpression
{
	SrcLoc src_loc;
	Expression expression;
}

struct UnsafeExpression
{
	SrcLoc src_loc;
	Expression expression;
}

struct MoveOperator
{
	SrcLoc src_loc;
	ust::string8 variable_name;
}

struct TakeOperator
{
	SrcLoc src_loc;
	Expression expression;
}

struct Lambda
{
	struct CaptureNothing{}
	struct CaptureAllByValue{}
	struct CaptureAllByReference{}

	struct CaptureListElement
	{
		SrcLoc src_loc;
		ust::string8 name;
		ust::box_nullable</Expression/> expression; // If non-empty - contains initializer expression.
		bool by_reference= false;
	}

	type CaptureList= ust::vector</ CaptureListElement />;

	type Capture= ust::variant</ tup[ CaptureNothing, CaptureAllByValue, CaptureAllByReference, CaptureList ] />;

	SrcLoc src_loc;
	Capture capture;
	ust::shared_ptr_final</Function/> function;
}

struct TernaryOperator
{
	SrcLoc src_loc;
	Expression condition;
	[ Expression, 2 ] branches;
}

struct ReferenceToRawPointerOperator
{
	SrcLoc src_loc;
	Expression expression;
}

struct RawPointerToReferenceOperator
{
	SrcLoc src_loc;
	Expression expression;
}

struct BinaryOperator
{
	SrcLoc src_loc;
	ust::shared_ptr_final</Expression/> l;
	ust::shared_ptr_final</Expression/> r;
	BinaryOperatorType operator;
}

struct IndexationOperator
{
	SrcLoc src_loc;
	ust::shared_ptr_final</Expression/> value;
	ust::shared_ptr_final</Expression/> index;
}

struct CallOperator
{
	SrcLoc src_loc;
	ust::box</Expression/> value;
	ust::vector</ ust::shared_ptr_final</Expression/> /> args;
}

struct MemberAccessOperator
{
	SrcLoc src_loc;
	Expression value;
	ust::string8 member_name;
	ust::box_nullable</TemplateArgs/> template_args;
}

struct VariableInitialization
{
	SrcLoc src_loc;
	Expression type_name;
	Initializer initializer;
}

struct AwaitOperator
{
	SrcLoc src_loc;
	Expression value;
}

struct UnaryMinus
{
	SrcLoc src_loc;
	Expression expr;
}

struct LogicalNot
{
	SrcLoc src_loc;
	Expression expr;
}

struct BitwiseNot
{
	SrcLoc src_loc;
	Expression expr;
}

// Use "box" for nodes, which may contain "Expression" inside.
// Make exceptions for nodes, where an expression is stored in "shared_ptr_final" for some reasons.
type Expression= ust::variant</ tup[
	EmptyVariant,
	IntegerNumericConstant,
	FloatingPointNumericConstant,
	BooleanConstant,
	StringLiteral,
	CharLiteral,
	ComplexName,
	ust::box</Typeinfo/>,
	ust::box</SameType/>,
	ust::box</NonSyncExpression/>,
	ust::box</CastRef/>,
	ust::box</CastRefUnsafe/>,
	ust::box</CastImut/>,
	ust::box</CastMut/>,
	ust::box</Embed/>,
	ust::box</ExternalFunctionAccess/>,
	ust::box</ExternalVariableAccess/>,
	ust::box</SafeExpression/>,
	ust::box</UnsafeExpression/>,
	MoveOperator,
	ust::box</TakeOperator/>,
	ust::box</Lambda/>,
	ust::box</TernaryOperator/>,
	ust::box</ReferenceToRawPointerOperator/>,
	ust::box</RawPointerToReferenceOperator/>,
	BinaryOperator,
	IndexationOperator,
	CallOperator,
	ust::box</MemberAccessOperator/>,
	ust::box</VariableInitialization/>,
	ust::box</AwaitOperator/>,
	ust::box</UnaryMinus/>,
	ust::box</LogicalNot/>,
	ust::box</BitwiseNot/>,
	ust::box</ArrayType/>,
	ust::box</TupleType/>,
	ust::box</RawPointerType/>,
	ust::box</FunctionType/>,
	ust::box</CoroutineType/>,
	ust::shared_ptr_final</Mixin/>
	] />;

struct ArrayType
{
	SrcLoc src_loc;
	TypeName element_type;
	Expression element_count;
}

struct TupleType
{
	SrcLoc src_loc;
	ust::vector</ TypeName /> elements;
}

struct RawPointerType
{
	SrcLoc src_loc;
	TypeName element_type;
}

struct CoroutineType
{
	enum Kind
	{
		Generator,
		AsyncFunc,
	}

	SrcLoc src_loc;

	ust::optional</MutabilityModifier/> inner_reference_mutability_modifier;
	NonSyncTag non_sync_tag;
	TypeName return_type;
	ust::vector</MutabilityModifier/> inner_reference_tags;
	ust::box_nullable</Expression/> return_value_reference_expression;
	ust::box_nullable</Expression/> return_value_inner_references_expression;
	Kind kind;
	MutabilityModifier return_value_mutability_modifier= MutabilityModifier::None;
	ReferenceModifier return_value_reference_modifier= ReferenceModifier::None;
}

struct FunctionType
{
	SrcLoc src_loc;

	struct Param
	{
		SrcLoc src_loc;
		TypeName t;
		ReferenceModifier reference_modifier= ReferenceModifier::None;
		MutabilityModifier mutability_modifier= MutabilityModifier::None;
		ust::string8 name;
	}
	ust::vector</Param/> params;

	ust::optional</TypeName/> return_type; // Empty means "void"
	MutabilityModifier return_value_mutability_modifier= MutabilityModifier::None;
	ReferenceModifier return_value_reference_modifier= ReferenceModifier::None;
	ust::box_nullable</Expression/> references_pollution_expression;
	ust::box_nullable</Expression/> return_value_reference_expression;
	ust::box_nullable</Expression/> return_value_inner_references_expression;
	ust::box_nullable</Expression/> calling_convention;
	bool is_unsafe= false;

	fn IsAutoReturn( this ) : bool;
}

type TypeName= ust::variant</ tup[
	ComplexName,
	ust::box</ArrayType/>,
	ust::box</TupleType/>,
	ust::box</RawPointerType/>,
	ust::box</FunctionType/>,
	ust::box</CoroutineType/>,
	ust::shared_ptr_final</Mixin/>
	] />;

struct SequenceInitializer
{
	SrcLoc src_loc;
	ust::vector</ Initializer /> elements_initializers;
}

struct StructNamedInitializer
{
	SrcLoc src_loc;

	struct Member
	{
		SrcLoc src_loc;
		ust::string8 name;
		Initializer initializer;
	}

	ust::vector</ Member /> members_initializers;
}

struct ConstructorInitializer
{
	SrcLoc src_loc;
	ust::vector</ ust::shared_ptr_final</Expression/> /> args;
}

struct ZeroInitializer
{
	SrcLoc src_loc;
}

struct UninitializedInitializer
{
	SrcLoc src_loc;
}

type Initializer= ust::variant</ tup [
	EmptyVariant,
	Expression,
	// Non-terminals.
	ust::box</SequenceInitializer/>,
	ust::box</StructNamedInitializer/>,
	ConstructorInitializer,
	ZeroInitializer,
	UninitializedInitializer
	] />;

struct Block
{
	SrcLoc src_loc;
	SrcLoc end_src_loc;
	BlockElements elements;
}

struct ScopeBlock
{
	SrcLoc src_loc;

	Block block;

	enum Safety { None, Safe, Unsafe }
	Safety safety= Safety::None;

	ust::optional</Label/> label_;
}

struct VariablesDeclaration
{
	struct VariableEntry
	{
		SrcLoc src_loc;
		ReferenceModifier reference_modifier= ReferenceModifier::None;
		MutabilityModifier mutability_modifier= MutabilityModifier::None;
		bool is_thread_local= false; // Parsed only for global variables.
		ust::string8 name;
		Initializer initializer;
	}

	SrcLoc src_loc;
	TypeName t;
	ust::vector</VariableEntry/> variables;
}

struct AutoVariableDeclaration
{
	SrcLoc src_loc;
	ReferenceModifier reference_modifier= ReferenceModifier::None;
	MutabilityModifier mutability_modifier= MutabilityModifier::None;
	ust::string8 name;
	Expression initializer_expression;
}

struct DecomposeDeclaration
{
	SrcLoc src_loc;
	DecomposeDeclarationComponent root_component;
	Expression initializer_expression;
}

type DecomposeDeclarationComponent=
	ust::variant</ tup [
	DecomposeDeclarationNamedComponent,
	ust::box</DecomposeDeclarationSequenceComponent/>,
	ust::box</DecomposeDeclarationStructComponent/>
	] />;

struct DecomposeDeclarationNamedComponent
{
	SrcLoc src_loc;
	ust::string8 name;
	MutabilityModifier mutability_modifier= MutabilityModifier::None;
}

struct DecomposeDeclarationSequenceComponent
{
	SrcLoc src_loc;
	ust::vector</ DecomposeDeclarationComponent /> sub_components;
}

struct DecomposeDeclarationStructComponent
{
	struct Entry
	{
		SrcLoc src_loc;
		ust::string8 name;
		DecomposeDeclarationComponent component;
	}

	SrcLoc src_loc;
	ust::vector</Entry/> entries;
}

struct AllocaDeclaration
{
	SrcLoc src_loc;
	TypeName t;
	ust::string8 name;
	Expression size;
}

struct ReturnOperator
{
	SrcLoc src_loc;
	Expression expr;
}

struct YieldOperator
{
	SrcLoc src_loc;
	Expression expr;
}

struct AssignmentOperator
{
	SrcLoc src_loc;
	ust::shared_ptr_final</Expression/> l;
	ust::shared_ptr_final</Expression/> r;
}

struct CompoundAssignmentOperator
{
	SrcLoc src_loc;
	BinaryOperatorType operator;
	ust::shared_ptr_final</Expression/> l;
	ust::shared_ptr_final</Expression/> r;
}

struct IncrementOperator
{
	SrcLoc src_loc;
	Expression expression;
}

struct DecrementOperator
{
	SrcLoc src_loc;
	Expression expression;
}

struct IfOperator
{
	SrcLoc src_loc;
	Expression condition;
	Block block;
	IfAlternative alternative;
	SrcLoc end_src_loc;
}

struct StaticIfOperator
{
	SrcLoc src_loc;
	Expression condition;
	Block block;
	IfAlternative alternative;
	SrcLoc end_src_loc;
}

struct IfCoroAdvanceOperator
{
	SrcLoc src_loc;
	ReferenceModifier reference_modifier= ReferenceModifier::None;
	MutabilityModifier mutability_modifier= MutabilityModifier::None;
	ust::string8 variable_name;
	Expression expression;
	Block block;
	IfAlternative alternative;
	SrcLoc end_src_loc;
}

struct SwitchOperator
{
	struct DefaultPlaceholder{}
	struct CaseRange
	{
		// EmptyVariant if has no value.
		Expression low;
		Expression high;
	}

	type CaseValue= ust::variant</ tup[ Expression, CaseRange ] />; // Range or single value.

	// List of values/ranges or single "default".
	// There is no reason to combine "default" branch with other values/ranges, since such values are unnecessary (default will handle them all).
	type CaseValues= ust::variant</ tup[ ust::vector</CaseValue/>, DefaultPlaceholder ] />;

	struct Case
	{
		CaseValues values;
		Block block;
	}

	SrcLoc src_loc;
	Expression value;
	ust::vector</Case/> cases;
	SrcLoc end_src_loc;
}

struct Label
{
	SrcLoc src_loc;
	ust::string8 name;
}

struct WhileOperator
{
	SrcLoc src_loc;
	Expression condition;
	ust::optional</Label/> label_;
	Block block;
}

struct LoopOperator
{
	SrcLoc src_loc;
	ust::optional</Label/> label_;
	Block block;
}

struct RangeForOperator
{
	SrcLoc src_loc;
	ReferenceModifier reference_modifier= ReferenceModifier::None;
	MutabilityModifier mutability_modifier= MutabilityModifier::None;
	ust::string8 loop_variable_name;
	Expression sequence;
	ust::optional</Label/> label_;
	Block block;
}

struct CStyleForOperator
{
	SrcLoc src_loc;

	ust::variant</ tup[
		EmptyVariant,
		VariablesDeclaration,
		AutoVariableDeclaration,
		DecomposeDeclaration
		] />
	variable_declaration_part;

	Expression loop_condition; // May be "EmptyVariant"

	ust::vector</
		ust::variant</ tup[
			Expression,
			AssignmentOperator,
			CompoundAssignmentOperator,
			IncrementOperator,
			DecrementOperator
		] /> />
	iteration_part_elements;

	ust::optional</Label/> label_;
	Block block;
}

struct BreakOperator
{
	SrcLoc src_loc;
	ust::optional</Label/> label_;
}

struct ContinueOperator
{
	SrcLoc src_loc;
	ust::optional</Label/> label_;
}

struct WithOperator
{
	SrcLoc src_loc;
	ReferenceModifier reference_modifier= ReferenceModifier::None;
	MutabilityModifier mutability_modifier= MutabilityModifier::None;
	ust::string8 variable_name;
	Expression expression;
	Block block;
}

struct StaticAssert
{
	SrcLoc src_loc;
	Expression expression;
	ust::optional</ust::string8/> message;
}

struct Mixin
{
	SrcLoc src_loc;
	Expression expression;
}

struct Halt
{
	SrcLoc src_loc;
}

struct HaltIf
{
	SrcLoc src_loc;
	Expression condition;
}

type BlockElement = ust::variant</ tup[
	ust::box</ScopeBlock/>,
	VariablesDeclaration,
	AutoVariableDeclaration,
	ust::box</DecomposeDeclaration/>, // Boxed because it's too big.
	ust::box</AllocaDeclaration/>, // Boxed because it's too big.
	ReturnOperator,
	YieldOperator,
	AssignmentOperator,
	CompoundAssignmentOperator,
	IncrementOperator,
	DecrementOperator,
	Expression,
	ust::box</IfOperator/>,
	ust::box</StaticIfOperator/>,
	ust::box</IfCoroAdvanceOperator/>,
	ust::box</SwitchOperator/>,
	ust::box</WhileOperator/>,
	ust::box</LoopOperator/>,
	ust::box</RangeForOperator/>,
	ust::box</CStyleForOperator/>,
	BreakOperator,
	ContinueOperator,
	ust::box</WithOperator/>,
	StaticAssert,
	ust::shared_ptr_final</TypeAlias/>,
	Halt,
	HaltIf,
	ust::shared_ptr_final</Mixin/>
	] />;

type BlockElements= ust::vector</BlockElement/>;

type IfAlternative=
	ust::variant</ tup[
		EmptyVariant,
		Block,
		ust::box</IfOperator/>,
		ust::box</StaticIfOperator/>,
		ust::box</IfCoroAdvanceOperator/>
	] />;

struct Function
{
	enum Kind
	{
		Regular,
		Generator,
		Async,
	}

	enum VirtualKind
	{
		None, // Regular, non-virtual
		DeclareVirtual,
		VirtualOverride,
		VirtualFinal,
		VirtualPure,
	}

	enum BodyKind
	{
		Regular,
		BodyGenerationRequired,
		BodyGenerationDisabled,
	}

	SrcLoc src_loc;
	ust::vector</ ust::string8 /> name; // A, A::B, A::B::C::D, ::A, ::A::B
	OverloadedOperator operator= OverloadedOperator::None;

	Kind kind= Kind::Regular;
	VirtualKind virtual_kind= VirtualKind::None;
	BodyKind body_kind= BodyKind::Regular;

	bool no_mangle= false;
	bool constexpr_= false;
	bool is_conversion_constructor= false;
	bool no_discard= false;

	ust::box_nullable</Expression/> condition; // enable_if

	FunctionType function_type;
	ust::box_nullable</Block/> block; // null for prototype
	ust::box_nullable</StructNamedInitializer/> constructor_initializer_list;
}

struct TypeAlias
{
	SrcLoc src_loc;
	ust::string8 name;
	TypeName type_name;
}

struct ClassField
{
	SrcLoc src_loc;
	ust::string8 name;
	TypeName t;
	MutabilityModifier mutability_modifier= MutabilityModifier::None;
	ReferenceModifier reference_modifier= ReferenceModifier::None;
	Initializer initializer;
	Expression reference_tag_expression; // EmptyVariant if none.
	Expression inner_reference_tags_expression; // EmptyVariant if none.
}

enum ClassVisibility
{
	// Must be ordered from less access to more access.
	Public,
	Protected,
	Private,
}

struct ClassVisibilityLabel
{
	SrcLoc src_loc;
	ClassVisibility visibility;
}

type ClassElement= ust::variant</ tup[
	ust::shared_ptr_final</Function/>,
	ust::shared_ptr_final</FunctionTemplate/>,
	ust::shared_ptr_final</Class/>,
	ust::shared_ptr_final</Enum/>,
	ust::shared_ptr_final</TypeAlias/>,
	ust::shared_ptr_final</TypeTemplate/>,
	ust::shared_ptr_final</ClassField/>,
	ClassVisibilityLabel,
	ust::shared_ptr_final</VariablesDeclaration/>,
	ust::shared_ptr_final</AutoVariableDeclaration/>,
	ust::shared_ptr_final</StaticAssert/>,
	ust::shared_ptr_final</Mixin/>
	] />;

type ClassElements= ust::vector</ClassElement/>;

struct NonSyncTagNone{}
struct NonSyncTagTrue{}
type NonSyncTag= ust::variant</tup[NonSyncTagNone, NonSyncTagTrue, ust::shared_ptr_final</Expression/>]/>;

struct Class
{
	enum KindAttribute
	{
		Struct,
		Class,
		Final,
		Polymorph,
		Interface,
		Abstract,
	}

	SrcLoc src_loc;
	ust::string8 name;
	KindAttribute kind_attribute= KindAttribute::Struct;
	ust::vector</ComplexName/> parents;
	ClassElements class_elements;
	NonSyncTag non_sync_tag;
	bool keep_fields_order= false;
	bool no_discard= false;
}

struct Enum
{
	SrcLoc src_loc;
	ust::string8 name;
	ust::optional</ComplexName/> underlying_type;

	struct Element
	{
		SrcLoc src_loc;
		ust::string8 name;
	}

	ust::vector</Element/> elements;
	bool no_discard= false;
}

struct TemplateParam
{
	struct TypeParamData{}

	struct TypeTemplateParamData{}

	struct VariableParamData
	{
		// Type of variable param.
		TypeName t;
	}

	SrcLoc src_loc;
	ust::variant</ tup[ TypeParamData, TypeTemplateParamData, VariableParamData ] /> kind_data;
	ust::string8 name;
}

struct TypeTemplate
{
	SrcLoc src_loc;
	ust::string8 name;

	ust::vector</TemplateParam/> params;

	struct SignatureParam
	{
		SrcLoc src_loc;
		Expression name;
		Expression default_value;
	}
	// If none - short form template.
	ust::optional</ust::vector</SignatureParam/>/> signature_params;

	ust::variant</ tup[
		ust::shared_ptr_final</Class/>,
		ust::shared_ptr_final</TypeAlias/>
	] /> something;
}

struct FunctionTemplate
{
	SrcLoc src_loc;
	ust::string8 name;

	ust::vector</TemplateParam/> params;

	ust::shared_ptr_final</Function/> function;
}

struct Namespace
{
	SrcLoc src_loc;
	ust::string8 name;
	NamespaceElements elements;
}

struct Import
{
	SrcLoc src_loc;
	ust::string8 name;
}

type NamespaceElement= ust::variant</ tup[
	ust::shared_ptr_final</Function/>,
	ust::shared_ptr_final</FunctionTemplate/>,
	ust::shared_ptr_final</Class/>,
	ust::shared_ptr_final</Enum/>,
	ust::shared_ptr_final</TypeAlias/>,
	ust::shared_ptr_final</TypeTemplate/>,
	ust::shared_ptr_final</Namespace/>, // TODO do we really need shared_ptr here?
	ust::shared_ptr_final</VariablesDeclaration/>,
	ust::shared_ptr_final</AutoVariableDeclaration/>,
	ust::shared_ptr_final</StaticAssert/>,
	ust::shared_ptr_final</Mixin/>
	] />;

type NamespaceElements= ust::vector</NamespaceElement/>;

type ProgramElement= NamespaceElement;
type ProgramElements= ust::vector</ProgramElement/>;

fn GetSrcLoc( Initializer& initializer ) : SrcLoc;
fn GetSrcLoc( TypeName& type_name ) : SrcLoc;
fn GetSrcLoc( Expression& expression ) : SrcLoc;
fn GetSrcLoc( ComplexName& complex_name ) : SrcLoc;
fn GetSrcLoc( BlockElement& block_element ) : SrcLoc;

} // namespace Synt

} // namespace U1
