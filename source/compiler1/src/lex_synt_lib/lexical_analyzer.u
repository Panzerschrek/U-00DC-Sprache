import "/math.u"
import "/string_conversions.u"
import "/utf.u"
import "lexical_analyzer.uh"

namespace U1
{

fn Lexem::ToDiagnosticString(this) : ust::string8
{
	if( lexem_type == Lexem::Type::Identifier )
	{
		return text;
	}
	if( lexem_type == Lexem::Type::MacroIdentifier )
	{
		return "?" + text;
	}
	if( lexem_type == Lexem::Type::MacroUniqueIdentifier )
	{
		return "??" + text;
	}
	if( lexem_type == Lexem::Type::String )
	{
		// For now ignore escape sequences (for simplicity).
		return ust::concat( "\"", text, "\"" );
	}
	if( lexem_type == Lexem::Type::CharLiteral )
	{
		// For now ignore escape sequences (for simplicity).
		return ust::concat( "'", text, "'" );
	}
	if( lexem_type == Lexem::Type::IntegerNumber )
	{
		halt if( text.size() < typeinfo</IntegerNumberLexemData/>.size_of );
		auto& number_lexem_data= unsafe( cast_ref_unsafe</IntegerNumberLexemData/>( text.front() ) );
		return ust::to_string8( number_lexem_data.value );
	}
	if( lexem_type == Lexem::Type::FloatingPointNumber )
	{
		halt if( text.size() < typeinfo</FloatingPointNumberLexemData/>.size_of );
		auto& number_lexem_data= unsafe( cast_ref_unsafe</FloatingPointNumberLexemData/>( text.front() ) );
		// For now just print only integer part. It's enough for something like errors indication.
		return ust::to_string8( u64( number_lexem_data.value ) );
	}
	if( lexem_type == Lexem::Type::LiteralSuffix )
	{
		return text;
	}
	if( lexem_type == Lexem::Type::EndOfFile )
	{
		return "EOF";
	}

	// Text is not stored for fixed lexems.
	// So, extract this text from the fixed lexems table.
	foreach( &lexem_size_group : c_fixed_lexems_table )
	{
		foreach( &l : lexem_size_group )
		{
			if( lexem_type == l[1] )
			{
				return l[0];
			}
		}
	}

	// Unhandled lexem type.
	halt;
}

type Iterator= ust::string_view8;

fn IsWhitespace( char32 c ) : bool
{
	switch(c)
	{
		' 'c32,
		// '\f'c32,
		// '\n'c32,
		// '\r'c32,
		// '\t'c32,
		... char32(0x1Fu),
		char32(0x7Fu) -> { return true; },
		default -> { return false; }
	}
}

fn IsNewline( char32 c ) : bool
{
	// See https://en.wikipedia.org/wiki/Newline#Unicode.
	return
		c == '\n'c32 || // line feed
		c == '\r'c32 || // carriage return
		c == '\f'c32 || // form feed
		c == char32(0x000B) || // vertical tab
		c == char32(0x0085) || // Next line
		c == char32(0x2028) || // line separator
		c == char32(0x2029) ;  // paragraph separator
}

fn IsNewlineSequence( char32 c0, char32 c1 ) : bool
{
	return c0 == '\r'c32 && c1 == '\n'c32;
}

fn IsNumberStartChar( char32 c ) : bool
{
	return c >= '0'c32 && c <= '9'c32;
}

fn IsIdentifierStartChar( char32 c ) : bool
{
	// HACK - manually define allowed "letters".
	// TODO - use something, like symbol category from unicode.
	switch(c)
	{
		'a'c32 ... 'z'c32,
		'A'c32 ... 'Z'c32,
		char32(0x0400u) ... char32(0x04FFu), // Cyrillic
		char32(0x0500u) ... char32(0x0527u), // Extended cyrillic
		char32(0x00C0u) ... char32(0x00D6u), // Additional latin symbols
		char32(0x00D8u) ... char32(0x00F6u), // Additional latin symbols
		char32(0x00F8u) ... char32(0x00FFu), // Additional latin symbols
		char32(0x0100u) ... char32(0x017Fu), // Extended latin part A
		char32(0x0180u) ... char32(0x024Fu)  // Extended latin part B
		-> { return true; },
		default -> { return false; },
	}
}

fn IsIdentifierChar( char32 c ) : bool
{
	return IsIdentifierStartChar(c) || IsNumberStartChar(c) || c == '_'c32;
}

fn ParseIdentifier( Iterator &mut it ) : Lexem
{
	var Lexem mut result;
	result.lexem_type= Lexem::Type::Identifier;

	it= Iterator(it); // Workaround for "reference pollution for outer variables inside loop" error.

	while( !it.empty() )
	{
		auto mut it_next= it;
		auto c = ust::utf::extract_code_point_or_null_from_string( it_next );
		if( !IsIdentifierChar( c ) )
		{
			break;
		}

		ust::utf::push_code_point_to_string( result.text, c );
		it= it_next;
	}

	return result;
}

fn ParseMacroUniqueIdentifier( Iterator &mut it ) : Lexem
{
	var Lexem mut result;
	result.lexem_type= Lexem::Type::MacroUniqueIdentifier;

	it = it.subrange_start(2s); // Skip "??"

	while( !it.empty() )
	{
		auto mut it_next= it;
		auto c = ust::utf::extract_code_point_or_null_from_string( it_next );
		if( !IsIdentifierChar( c ) )
		{
			break;
		}

		ust::utf::push_code_point_to_string( result.text, c );
		it= it_next;
	}

	return result;
}

fn ParseMacroIdentifier( Iterator &mut it ) : Lexem
{
	var Lexem mut result;
	result.lexem_type= Lexem::Type::MacroIdentifier;

	it.drop_front(); // Skip '?'

	it= Iterator(it); // Workaround for "reference pollution for outer variables inside loop" error.

	while( !it.empty() )
	{
		auto mut it_next= it;
		auto c = ust::utf::extract_code_point_or_null_from_string( it_next );
		if( !IsIdentifierChar( c ) )
		{
			break;
		}

		ust::utf::push_code_point_to_string( result.text, c );
		it= it_next;
	}

	return result;
}

// Function for fast calculation of large integer powers.
fn IntegerPower( f64 base_, u32 pow ) : f64
{
	var f64 mut res= 1.0, mut p= base_;

	for( var u32 mut i(1); ; i <<= 1u, p*= p )
	{
		if( (i & pow ) != 0u )
		{
			res*= p;
		}
		if( i >= pow )
		{
			break;
		}
	}

	return res;
}

fn TenIntegerPower( u32 pow ) : f64
{
	return IntegerPower( 10.0, pow );
}

// Returns u32(-1) if failed to parse.
template</ u32 base_ />
fn TryParseDigit( char8 c ) : u32
{
	static_if( base_ == 2u )
	{
		if( c >= '0' && c <= '1' )
		{
			return u32(c) - u32('0');
		}
	}
	else static_if( base_ == 8u )
	{
		if( c >= '0' && c <= '7' )
		{
			return u32(c) - u32('0');
		}
	}
	else static_if( base_ == 10u )
	{
		if( c >= '0' && c <= '9' )
		{
			return u32(c) - u32('0');
		}
	}
	else static_if( base_ == 16u )
	{
		switch(c)
		{
			'0' ... '9' -> { return u32(c) - u32('0'); },
			'a' ... 'f' -> { return u32(c) - u32('a') + u32(10); },
			'A' ... 'F' -> { return u32(c) - u32('A') + u32(10); },
			default -> {},
		}
	}
	else
	{
		static_assert( false, "Unsupported base!" );
	}

	return -1u;
}

fn TryParseNumericLexemTypeSuffix( Iterator &mut it, LexSyntErrors &mut out_errors, SrcLoc& src_loc ) : [ char8, 8 ]
{
	var [ char8, 8 ] mut res= zero_init;

	if( !it.empty() && IsIdentifierStartChar( ust::utf::get_code_point_or_null_from_string( it ) ) )
	{
		auto max_size= typeinfo</ typeof(res) />.element_count;
		var Lexem type_suffix= ParseIdentifier( it );
		if( type_suffix.text.size() >= max_size )
		{
			out_errors.push_back( LexSyntError( src_loc, "Type suffix of numeric literal is too long" ) );
		}

		for( auto mut i= 0s; i < ust::min( type_suffix.text.size(), max_size ); ++i )
		{
			res[i]= type_suffix.text[i];
		}
	}

	return res;
}

fn ContinueParsingFloatingPointNumber( f64 parsed_part, Iterator &mut it, LexSyntErrors &mut out_errors, SrcLoc& src_loc ) : Lexem
{
	var f64 mut value= parsed_part;

	// Integer part.
	while( !it.empty() )
	{
		auto digit= TryParseDigit</10u/>( it.front() );
		if( digit == -1u )
		{
			break;
		}

		it.drop_front();
		value= ust::fma( value, 10.0, f64(digit) );
	}

	var i32 mut num_fractional_digits= 0;

	// Fractional part.
	if( !it.empty() && it.front() == '.' )
	{
		it.drop_front();

		while( !it.empty() )
		{
			auto digit= TryParseDigit</10u/>( it.front() );
			if( digit == -1u )
			{
				break;
			}

			it.drop_front();
			++num_fractional_digits;
			value= ust::fma( value, 10.0, f64(digit) );
		}
	}

	var i32 mut exponent= 0;

	// Exponent.
	if( !it.empty() && it.front() == 'e' )
	{
		it.drop_front();

		auto mut sign= 1;
		if( !it.empty() && it.front() == '-' )
		{
			sign= -1;
			it.drop_front();
		}
		else if( !it.empty() && it.front() == '+' )
		{
			sign=  1;
			it.drop_front();
		}

		while( !it.empty() )
		{
			auto digit= TryParseDigit</10u/>( it.front() );
			if( digit == -1u )
			{
				break;
			}

			it.drop_front();
			exponent= exponent * 10 + i32(digit);

			if( exponent > 2048 )
			{
				// Do not allow too large exponents.
				out_errors.push_back( LexSyntError( src_loc, "Floating point number exponent overflow" ) );
				break;
			}
		}

		exponent*= sign;
	}

	// TODO - check no precision lost happens here.

	if( exponent >= num_fractional_digits )
	{
		value*= TenIntegerPower( u32( exponent - num_fractional_digits ) );
	}
	else
	{
		value/= TenIntegerPower( u32( num_fractional_digits - exponent ) );
	}

	var FloatingPointNumberLexemData mut result
	{
		.value= value,
		.type_suffix= TryParseNumericLexemTypeSuffix( it, out_errors, src_loc )
	};

	var Lexem mut result_lexem{ .lexem_type= Lexem::Type::FloatingPointNumber };
	result_lexem.text.resize( typeinfo</FloatingPointNumberLexemData/>.size_of, '\0' );
	unsafe( ust::memory_copy( ust::ptr_cast_to_byte8( result_lexem.text.data() ), ust::ptr_cast_to_byte8( $<(result) ), typeinfo</FloatingPointNumberLexemData/>.size_of ) );
	return result_lexem;
}

fn ParseDecimalNumber( Iterator &mut it, LexSyntErrors &mut out_errors, SrcLoc& src_loc ) : Lexem
{
	var u64 mut value( 0u );

	var u64 max_value= 0xFFFFFFFFFFFFFFFFu64;

	while( !it.empty() )
	{
		auto digit= TryParseDigit</10u/>( it.front() );
		if( digit == -1u )
		{
			break;
		}

		it.drop_front();

		if( value > max_value / 10u64 )
		{
			// Continue parsing as floating point in case of overflow.
			var f64 parsed_part= ust::fma( f64(value), 10.0, f64(digit) ); // TODO - ensure no precision lost happens in this operation.
			return ContinueParsingFloatingPointNumber( parsed_part, it, out_errors, src_loc );
		}
		value*= 10u64;

		if( value > max_value - u64(digit) )
		{
			// Continue parsing as floating point in case of overflow.
			var f64 parsed_part= f64(value) + f64(digit); // TODO - ensure no precision lost happens in this operation.
			return ContinueParsingFloatingPointNumber( parsed_part, it, out_errors, src_loc );
		}
		value+= u64(digit);
	}

	// If we have decimal point or exponent - continue parsing as floating point.
	if( !it.empty() && ( it.front() == '.' || it.front() == 'e' ) )
	{
		return ContinueParsingFloatingPointNumber( f64(value), it, out_errors, src_loc );
	}

	var IntegerNumberLexemData mut result
	{
		.value= value,
		.type_suffix= TryParseNumericLexemTypeSuffix( it, out_errors, src_loc )
	};

	var Lexem mut result_lexem{ .lexem_type= Lexem::Type::IntegerNumber };
	result_lexem.text.resize( typeinfo</IntegerNumberLexemData/>.size_of, '\0' );
	unsafe( ust::memory_copy( ust::ptr_cast_to_byte8( result_lexem.text.data() ), ust::ptr_cast_to_byte8( $<(result) ), typeinfo</IntegerNumberLexemData/>.size_of ) );
	return result_lexem;
}

// Initial prefix should be skipped before this call.
template</ u32 base_ />
fn ParseIntegerNumberImpl( Iterator &mut it, LexSyntErrors &mut out_errors, SrcLoc& src_loc ) : Lexem
{
	var u64 mut value(0u);

	// Require at least one digit.
	if( it.empty() )
	{
		out_errors.push_back( LexSyntError( src_loc, "Unexpected end of number" ) );
	}
	else
	{
		var u32 digit= TryParseDigit</base_/>( it.front() );
		it.drop_front();
		if( digit == -1u32 )
		{
			out_errors.push_back( LexSyntError( src_loc, "Unexpected end of number" ) );
		}
		value= u64(digit);
	}

	var u64 max_value= 0xFFFFFFFFFFFFFFFFu64;

	while( !it.empty() )
	{
		auto digit= TryParseDigit</base_/>( it.front() );
		if( digit == -1u )
		{
			break;
		}

		it.drop_front();

		if( value > max_value / u64(base_) )
		{
			out_errors.push_back( LexSyntError( src_loc, "Integer numeric literal overflow" ) );
			break;
		}
		value*= u64(base_);

		if( value > max_value - u64(digit) )
		{
			out_errors.push_back( LexSyntError( src_loc, "Integer numeric literal overflow" ) );
			break;
		}
		value+= u64(digit);
	}

	var IntegerNumberLexemData mut result
	{
		.value= value,
		.type_suffix= TryParseNumericLexemTypeSuffix( it, out_errors, src_loc )
	};

	var Lexem mut result_lexem{ .lexem_type= Lexem::Type::IntegerNumber };
	result_lexem.text.resize( typeinfo</IntegerNumberLexemData/>.size_of, '\0' );
	unsafe( ust::memory_copy( ust::ptr_cast_to_byte8( result_lexem.text.data() ), ust::ptr_cast_to_byte8( $<(result) ), typeinfo</IntegerNumberLexemData/>.size_of ) );
	return result_lexem;
}

fn ParseNumber( Iterator &mut it, LexSyntErrors &mut out_errors, SrcLoc& src_loc ) : Lexem
{
	if( it.size() >= 3s && it.front() == '0' )
	{
		auto d= it[1s];
		if( d == 'b' )
		{
			it= it.subrange_start(2s);
			return ParseIntegerNumberImpl</2u/>( it, out_errors, src_loc );
		}
		if( d == 'o' )
		{
			it= it.subrange_start(2s);
			return ParseIntegerNumberImpl</8u/>( it, out_errors, src_loc );
		}
		if( d == 'x' )
		{
			it= it.subrange_start(2s);
			return ParseIntegerNumberImpl</16u/>( it, out_errors, src_loc );
		}
	}

	return ParseDecimalNumber( it, out_errors, src_loc );
}

fn ParseString( Iterator &mut it, LexSyntErrors &mut out_errors, SrcLoc& src_loc ) : Lexem
{
	var Lexem mut result_lexem{ .lexem_type= Lexem::Type::String };

	it.drop_front(); // "

	while(!it.empty())
	{
		auto c= it.front();
		it.drop_front();
		switch(c)
		{
			'"' -> { break; },
			'\\' ->
			{
				if( it.empty() )
				{
					break;
				}
				auto escaped_c= it.front();
				it.drop_front();
				switch(escaped_c)
				{
					'"' , '\\', '\'' -> { result_lexem.text.push_back( escaped_c ); },
					'b' -> { result_lexem.text.push_back( '\b' ); },
					'f' -> { result_lexem.text.push_back( '\f' ); },
					'n' -> { result_lexem.text.push_back( '\n' ); },
					'r' -> { result_lexem.text.push_back( '\r' ); },
					't' -> { result_lexem.text.push_back( '\t' ); },
					'0' -> { result_lexem.text.push_back( '\0' ); },
					'u' ->
					{
						if( it.size() < 4s )
						{
							out_errors.push_back( LexSyntError( src_loc, "expected 4 hex digits" ) );
							return result_lexem;
						}
						auto mut char_code= 0u;
						for( auto mut i= 0u; i < 4u; ++i )
						{
							auto digit= TryParseDigit</16u/>( it.front() );
							if( digit == -1u )
							{
								out_errors.push_back( LexSyntError( src_loc, "expected hex number" ) );
								return result_lexem;
							}

							char_code|= digit << ( ( 3u - i ) * 4u );
							it.drop_front();
						}
						ust::utf::push_code_point_to_string( result_lexem.text, char32(char_code) );
					},
					default ->
					{
						var ust::string8 mut err= "invalid escape sequence: \\";
						err.push_back( escaped_c );
						out_errors.push_back( LexSyntError( src_loc, move(err) ) );
						break;
					},
				}
			},
			default ->{ result_lexem.text.push_back(c); },
		}
	}

	return result_lexem;
}

fn ParseCharLiteral( Iterator &mut it, LexSyntErrors &mut out_errors, SrcLoc& src_loc ) : Lexem
{
	var Lexem mut result_lexem{ .lexem_type= Lexem::Type::CharLiteral };

	it.drop_front(); // '

	if( it.empty() )
	{
		out_errors.push_back( LexSyntError( src_loc, "unexpected end of file after '" ) );
		return result_lexem;
	}

	var char8 c= it.front();
	if( c == '\'' )
	{
		out_errors.push_back( LexSyntError( src_loc, "empty char literal" ) );
		return result_lexem;
	}
	else if( c == '\\' )
	{
		it.drop_front(); // \
		if( it.empty() )
		{
			out_errors.push_back( LexSyntError( src_loc, "unexpected end of file after '\\" ) );
			return result_lexem;
		}
		var char8 escaped_c= it.drop_and_get_front();
		switch( escaped_c )
		{
			'"' -> { result_lexem.text.push_back('"'); },
			'\'' -> { result_lexem.text.push_back('\''); },
			'\\' -> { result_lexem.text.push_back('\\'); },
			'/' -> { result_lexem.text.push_back('/'); },
			'b' -> { result_lexem.text.push_back('\b'); },
			'f' -> { result_lexem.text.push_back('\f'); },
			'n' -> { result_lexem.text.push_back('\n'); },
			'r' -> { result_lexem.text.push_back('\r'); },
			't' -> { result_lexem.text.push_back('\t'); },
			'0' -> { result_lexem.text.push_back('\0'); },
			'u' ->
			{
				if( it.size() < 4s )
				{
					out_errors.push_back( LexSyntError( src_loc, "expected 4 hex digits" ) );
					return result_lexem;
				}
				auto mut char_code= 0u;
				for( auto mut i= 0u; i < 4u; ++i )
				{
					auto digit= TryParseDigit</16u/>( it.front() );
					if( digit == -1u )
					{
						out_errors.push_back( LexSyntError( src_loc, "expected hex number" ) );
						return result_lexem;
					}

					char_code|= digit << ( ( 3u - i ) * 4u );
					it.drop_front();
				}
				ust::utf::push_code_point_to_string( result_lexem.text, char32(char_code) );
			},
			default ->
			{
				var ust::string8 mut err= "invalid escape sequence: \\";
				err.push_back( escaped_c );
				out_errors.push_back( LexSyntError( src_loc, move(err) ) );
				return result_lexem;
			}
		}
	}
	else
	{
		ust::utf::push_code_point_to_string( result_lexem.text, ust::utf::extract_code_point_or_null_from_string( it ) );
	}

	if( it.empty() )
	{
		out_errors.push_back( LexSyntError( src_loc, "unexpected end of file at char literal" ) );
		return result_lexem;
	}
	if( it.front() != '\'' )
	{
		out_errors.push_back( LexSyntError( src_loc, "expected ' at end of char literal" ) );
		return result_lexem;
	}
	it.drop_front();

	return result_lexem;
}

fn DiffUTF8Chars( Iterator mut start, Iterator end ) : size_type
{
	auto mut r= 0s;
	while(start.size() > end.size())
	{
		++r;
		ust::utf::extract_code_point_or_null_from_string(start);
	}
	return r;
}

var tup[
	[ tup[ [ char8, 3 ], Lexem::Type ],  4 ],
	[ tup[ [ char8, 2 ], Lexem::Type ], 26 ],
	[ tup[ [ char8, 1 ], Lexem::Type ], 26 ] ]
c_fixed_lexems_table
[
	[
		[ "<<=", Lexem::Type::DoubleLessEqual ],
		[ ">>=", Lexem::Type::DoubleGreaterEqual ],
		[ "<=>", Lexem::Type::LessEqualGreater ],
		[ "...", Lexem::Type::Ellipsis ],
	],
	[
		[ "</", Lexem::Type::TemplateBracketLeft ],
		[ "/>", Lexem::Type::TemplateBracketRight ],
		[ "<?", Lexem::Type::MacroBracketLeft  ],
		[ "?>", Lexem::Type::MacroBracketRight ],
		[ "::", Lexem::Type::DoubleColon ],
		[ "++", Lexem::Type::DoublePlus ],
		[ "--", Lexem::Type::DoubleMinus ],
		[ "==", Lexem::Type::DoubleEqual ],
		[ "!=", Lexem::Type::ExclamationEqual ],
		[ "<=", Lexem::Type::LessEqual ],
		[ ">=", Lexem::Type::GreaterEqual ],
		[ "&&", Lexem::Type::DoubleAmpersand ],
		[ "||", Lexem::Type::DoublePipe ],
		[ "+=", Lexem::Type::PlusEqual ],
		[ "-=", Lexem::Type::MinusEqual ],
		[ "*=", Lexem::Type::AsteriskEqual ],
		[ "/=", Lexem::Type::SlashEqual ],
		[ "%=", Lexem::Type::PercentEqual ],
		[ "&=", Lexem::Type::AmpersandEqual ],
		[ "|=", Lexem::Type::PipeEqual ],
		[ "^=", Lexem::Type::CaretEqual ],
		[ "<<", Lexem::Type::DoubleLess ],
		[ ">>", Lexem::Type::DoubleGreater ],
		[ "->", Lexem::Type::MinusGreater ],
		[ "$<", Lexem::Type::DollarLess ],
		[ "$>", Lexem::Type::DollarGreater ],
	],
	[
		[ "(", Lexem::Type::BracketLeft ],
		[ ")", Lexem::Type::BracketRight ],
		[ "[", Lexem::Type::SquareBracketLeft ],
		[ "]", Lexem::Type::SquareBracketRight ],
		[ "{", Lexem::Type::BraceLeft ],
		[ "}", Lexem::Type::BraceRight ],
		[ ",", Lexem::Type::Comma ],
		[ ".", Lexem::Type::Dot ],
		[ ":", Lexem::Type::Colon ],
		[ ";", Lexem::Type::Semicolon ],
		[ "?", Lexem::Type::Question ],
		[ "=", Lexem::Type::Equal ],
		[ "+", Lexem::Type::Plus ],
		[ "-", Lexem::Type::Minus ],
		[ "*", Lexem::Type::Asterisk ],
		[ "/", Lexem::Type::Slash ],
		[ "%", Lexem::Type::Percent ],
		[ "<", Lexem::Type::Less ],
		[ ">", Lexem::Type::Greater ],
		[ "&", Lexem::Type::Ampersand ],
		[ "|", Lexem::Type::Pipe ],
		[ "^", Lexem::Type::Caret ],
		[ "~", Lexem::Type::Tilde ],
		[ "!", Lexem::Type::Exclamation ],
		[ "@", Lexem::Type::At ],
		[ "$", Lexem::Type::Dollar ],
	]
];

fn LexicalAnalysis( ust::string_view8 program_text ) : LexicalAnalysisResult
{
	var LexicalAnalysisResult mut result;

	auto mut it= program_text;

	it= Iterator(it); // Workaround for "reference pollution for outer variables inside loop" error.

	if( !it.empty() && ust::utf::get_code_point_or_null_from_string(it) == char32(0xFEFF) )
	{
		ust::utf::extract_code_point_or_null_from_string(it); // Skip UTF-8 byte order mark.
	}

	auto mut prev_it= it;

	var u32 mut line= 1u; // Count lines from "1", in human-readable format.
	var u32 mut column= 0u;

	while( !it.empty() )
	{
		column+= u32( DiffUTF8Chars( prev_it, it ) );
		prev_it= it;
		var SrcLoc src_loc( 0u, line, column );

		auto c= ust::utf::get_code_point_or_null_from_string(it);

		var char32 mut next_c= zero_init;
		if( it.size() > 1s ) { next_c= ust::utf::get_code_point_or_null_from_string( it.subrange_start( 1s ) ); }

		var Lexem mut lexem;

		// single line comment
		if( c == '/'c32 && next_c == '/'c32 )
		{
			// Read all until new line, but do not extract new line symbol itself.
			while( !it.empty() )
			{
				auto mut it_copy= it;
				var char32 c= ust::utf::extract_code_point_or_null_from_string(it_copy);
				if( IsNewline(c) )
				{
					break;
				}
				it= it_copy;
			}

			continue;
		}
		// multiline comment
		if( c == '/'c32 && next_c == '*'c32 )
		{
			it= it.subrange_start(2s);
			auto mut comments_depth= 1u;
			while( it.size() >= 2s && comments_depth > 0u )
			{
				if( it[0s] == '*' && it[1s] == '/' )
				{
					it= it.subrange_start(2s);
					--comments_depth;
				}
				else if( it[0s] == '/' && it[1s] == '*' )
				{
					it= it.subrange_start(2s);
					++comments_depth;
				}
				else
				{
					var char32 comment_c= ust::utf::extract_code_point_or_null_from_string( it );
					if( IsNewline(comment_c) )
					{
						++line;
						column= 0u;

						// Handle case with two-symbol line ending.
						if( !it.empty() )
						{
							auto mut it_copy= it;
							var char32 next_c= ust::utf::extract_code_point_or_null_from_string( it_copy );
							if( IsNewlineSequence( comment_c, next_c ) )
							{
								it= it_copy;
							}
						}
						prev_it= it;
					}
				}
			}
			if( comments_depth != 0u )
			{
				result.errors.push_back( LexSyntError( src_loc, "Lexical error: expected */" ) );
			}

			continue;
		}
		else if( IsNewline(c) )
		{
			++line;
			column= 0u;

			ust::utf::extract_code_point_or_null_from_string(it); // Consume this line ending symbol.

			// Handle case with two-symbol line ending.
			if( !it.empty() )
			{
				auto mut it_copy= it;
				var char32 next_c= ust::utf::extract_code_point_or_null_from_string( it_copy );
				if( IsNewlineSequence( c, next_c ) )
				{
					it= it_copy;
				}
			}

			prev_it= it;
			continue;
		}
		else if( IsWhitespace(c) )
		{
			it.drop_front();
			continue;
		}
		else if( IsIdentifierStartChar(c) )
		{
			lexem= ParseIdentifier(it);
		}
		else if( c == '?'c32 && next_c == '?'c32 )
		{
			lexem= ParseMacroUniqueIdentifier(it);
		}
		else if( c == '?'c32 && IsIdentifierStartChar(next_c) )
		{
			lexem= ParseMacroIdentifier(it);
		}
		else if( IsNumberStartChar(c) )
		{
			lexem= ParseNumber( it, result.errors, src_loc );
		}
		else if( c == '"'c32 )
		{
			lexem= ParseString( it, result.errors, src_loc );
			if( !it.empty() && IsIdentifierStartChar( ust::utf::get_code_point_or_null_from_string( it ) ) )
			{
				lexem.src_loc= src_loc;
				result.lexems.push_back( take(lexem) );

				lexem= ParseIdentifier(it);
				lexem.lexem_type= Lexem::Type::LiteralSuffix;
			}
		}
		else if( c == '\''c32 )
		{
			lexem= ParseCharLiteral( it, result.errors, src_loc );
			if( !it.empty() && IsIdentifierStartChar( ust::utf::get_code_point_or_null_from_string( it ) ) )
			{
				lexem.src_loc= src_loc;
				result.lexems.push_back( take(lexem) );

				lexem= ParseIdentifier(it);
				lexem.lexem_type= Lexem::Type::LiteralSuffix;
			}
		}
		else
		{
			{
				foreach( &lexem_size_group : c_fixed_lexems_table ) label size_groups_loop
				{
					auto s= typeinfo</ typeof(lexem_size_group) />.element_type.elements_list[0s].type.element_count;
					if( s > it.size() )
					{
						continue;
					}
					auto check_range= it.subrange_end( s );

					foreach( &l : lexem_size_group )
					{
						if( check_range == l[0] )
						{
							// Do not store text for trivial lexems (for performance reasons).
							lexem.lexem_type= l[1];
							it= it.subrange_start( s );
							break label fixed_lexem_processing;
						}
					}
				}

				// This code is reachable only if we failed to process a fixed lexem.
				result.errors.push_back( LexSyntError( src_loc, "Lexical error: unrecognized character: " + ust::to_string8( u32(c) ) ) );
				it.drop_front();
				continue;

			} label fixed_lexem_processing
		}

		lexem.src_loc= src_loc;
		result.lexems.push_back(move(lexem));
	}

	result.lexems.push_back( Lexem{ .src_loc( 0u, line, column ), .lexem_type= Lexem::Type::EndOfFile, .text= "EOF" } );

	return result;
}

} // namespace U1
