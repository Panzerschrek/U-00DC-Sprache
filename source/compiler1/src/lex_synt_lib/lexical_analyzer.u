import "/string_conversions.u"
import "/utf.u"
import "lexical_analyzer.uh"

namespace U1
{

fn Lexem::ToDiagnosticString(this) : ust::string8
{
	if( lexem_type == Lexem::Type::Identifier )
	{
		return text;
	}
	if( lexem_type == Lexem::Type::MacroIdentifier )
	{
		return "?" + text;
	}
	if( lexem_type == Lexem::Type::MacroUniqueIdentifier )
	{
		return "??" + text;
	}
	if( lexem_type == Lexem::Type::String )
	{
		// For now ignore escape sequences (for simplicity).
		return ust::concat( "\"", text, "\"" );
	}
	if( lexem_type == Lexem::Type::Number )
	{
		halt if( text.size() < typeinfo</NumberLexemData/>.size_of );
		auto& number_lexem_data= unsafe( cast_ref_unsafe</NumberLexemData/>( text.front() ) );
		// For now just print only integer part. It's enough for something like errors indication.
		return ust::to_string8( number_lexem_data.value_int );
	}
	if( lexem_type == Lexem::Type::LiteralSuffix )
	{
		return text;
	}
	if( lexem_type == Lexem::Type::EndOfFile )
	{
		return "EOF";
	}

	// Text is not stored for fixed lexems.
	// So, extract this text from the fixed lexems table.
	foreach( &lexem_size_group : c_fixed_lexems_table )
	{
		foreach( &l : lexem_size_group )
		{
			if( lexem_type == l[1] )
			{
				return l[0];
			}
		}
	}

	// Unhandled lexem type.
	halt;
}

type Iterator= ust::string_view8;

fn IsWhitespace( char32 c ) : bool
{
	switch(c)
	{
		' 'c32,
		// '\f'c32,
		// '\n'c32,
		// '\r'c32,
		// '\t'c32,
		... char32(0x1Fu),
		char32(0x7Fu) -> { return true; },
		default -> { return false; }
	}
}

fn IsNewline( char32 c ) : bool
{
	// See https://en.wikipedia.org/wiki/Newline#Unicode.
	return
		c == '\n'c32 || // line feed
		c == '\r'c32 || // carriage return
		c == '\f'c32 || // form feed
		c == char32(0x000B) || // vertical tab
		c == char32(0x0085) || // Next line
		c == char32(0x2028) || // line separator
		c == char32(0x2029) ;  // paragraph separator
}

fn IsNewlineSequence( char32 c0, char32 c1 ) : bool
{
	return c0 == '\r'c32 && c1 == '\n'c32;
}

fn IsNumberStartChar( char32 c ) : bool
{
	return c >= '0'c32 && c <= '9'c32;
}

fn IsIdentifierStartChar( char32 c ) : bool
{
	// HACK - manually define allowed "letters".
	// TODO - use something, like symbol category from unicode.
	switch(c)
	{
		'a'c32 ... 'z'c32,
		'A'c32 ... 'Z'c32,
		char32(0x0400u) ... char32(0x04FFu), // Cyrillic
		char32(0x0500u) ... char32(0x0527u), // Extended cyrillic
		char32(0x00C0u) ... char32(0x00D6u), // Additional latin symbols
		char32(0x00D8u) ... char32(0x00F6u), // Additional latin symbols
		char32(0x00F8u) ... char32(0x00FFu), // Additional latin symbols
		char32(0x0100u) ... char32(0x017Fu), // Extended latin part A
		char32(0x0180u) ... char32(0x024Fu)  // Extended latin part B
		-> { return true; },
		default -> { return false; },
	}
}

fn IsIdentifierChar( char32 c ) : bool
{
	return IsIdentifierStartChar(c) || IsNumberStartChar(c) || c == '_'c32;
}

fn ParseIdentifier( Iterator &mut it ) : Lexem
{
	var Lexem mut result;
	result.lexem_type= Lexem::Type::Identifier;

	it= Iterator(it); // Workaround for "reference pollution for outer variables inside loop" error.

	while( !it.empty() )
	{
		auto mut it_next= it;
		auto c = ust::utf::extract_code_point_or_null_from_string( it_next );
		if( !IsIdentifierChar( c ) )
		{
			break;
		}

		ust::utf::push_code_point_to_string( result.text, c );
		it= it_next;
	}

	return result;
}

fn ParseMacroUniqueIdentifier( Iterator &mut it ) : Lexem
{
	var Lexem mut result;
	result.lexem_type= Lexem::Type::MacroUniqueIdentifier;

	it = it.subrange_start(2s); // Skip "??"

	while( !it.empty() )
	{
		auto mut it_next= it;
		auto c = ust::utf::extract_code_point_or_null_from_string( it_next );
		if( !IsIdentifierChar( c ) )
		{
			break;
		}

		ust::utf::push_code_point_to_string( result.text, c );
		it= it_next;
	}

	return result;
}

fn ParseMacroIdentifier( Iterator &mut it ) : Lexem
{
	var Lexem mut result;
	result.lexem_type= Lexem::Type::MacroIdentifier;

	it.drop_front(); // Skip '?'

	it= Iterator(it); // Workaround for "reference pollution for outer variables inside loop" error.

	while( !it.empty() )
	{
		auto mut it_next= it;
		auto c = ust::utf::extract_code_point_or_null_from_string( it_next );
		if( !IsIdentifierChar( c ) )
		{
			break;
		}

		ust::utf::push_code_point_to_string( result.text, c );
		it= it_next;
	}

	return result;
}

fn PowI( u64 base_, u64 pow ) : f64
{
	if( pow == 0u64 )
	{
		return 1.0;
	}
	if( pow == 1u64 )
	{
		return f64(base_);
	}
	if( pow == 2u64 )
	{
		return f64(base_ * base_);
	}

	auto half_pow= pow >> 1u;
	auto mut res= PowI( base_, half_pow );
	res= res * res;
	if( half_pow * 2u64 != pow )
	{
		res*= f64(base_);
	}
	return res;
}

fn NumberFunc2( char8 c ) : u64
{
	if( c >= '0' && c <= '1' )
	{
		return u64(c) - u64('0');
	}
	return -1u64;
}

fn NumberFunc8( char8 c ) : u64
{
	if( c >= '0' && c <= '7' )
	{
		return u64(c) - u64('0');
	}
	return -1u64;
}

fn NumberFunc10( char8 c ) : u64
{
	if( c >= '0' && c <= '9' )
	{
		return u64(c) - u64('0');
	}
	return -1u64;
}

fn NumberFunc16( char8 c ) : u64
{
	switch(c)
	{
		'0' ... '9' -> { return u64(c) - u64('0'); },
		'a' ... 'f' -> { return u64(c) - u64('a') + u64(10); },
		'A' ... 'F' -> { return u64(c) - u64('A') + u64(10); },
		default -> { return -1u64; },
	}
}

fn ParseNumber( Iterator &mut it, LexSyntErrors &mut out_errors, SrcLoc& src_loc ) : Lexem
{
	var u64 mut base_(10);
	auto mut number_func= NumberFunc10;

	if( it.size() >= 3s && it.front() == '0' )
	{
		auto d= it[1s];
		if( d == 'b' )
		{
			base_= 2u64;
			number_func= NumberFunc2;
			it= it.subrange_start(2s);
		}
		if( d == 'o' )
		{
			base_= 8u64;
			number_func= NumberFunc8;
			it= it.subrange_start(2s);
		}
		if( d == 'x' )
		{
			base_= 16u64;
			number_func= NumberFunc16;
			it= it.subrange_start(2s);
		}
	}

	var u64 mut integer_part(0), mut fractional_part(0);
	var i32 mut fractional_part_digits= 0, mut exponent= 0;
	var bool mut has_fraction_point= false;

	while( !it.empty() )
	{
		auto num= number_func( it.front() );
		if( num == -1u64 )
		{
			break;
		}

		auto integer_part_before= integer_part;
		integer_part= integer_part * base_ + num;
		it.drop_front();

		if( integer_part < integer_part_before ) // Check overflow
		{
			out_errors.push_back( LexSyntError( src_loc, "Integer part of numeric literal is too long" ) );
			break;
		}
	}

	if( !it.empty() && it.front() == '.' )
	{
		it.drop_front();
		has_fraction_point= true;

		while( !it.empty() )
		{
			var u64 num= number_func( it.front() );
			if( num == -1u64 )
			{
				break;
			}

			var u64 fractional_part_before= fractional_part;
			fractional_part= fractional_part * base_ + num;
			++fractional_part_digits;
			it.drop_front();

			if( fractional_part < fractional_part_before ) // Check overflow
			{
				out_errors.push_back( LexSyntError( src_loc,"Fractional part of numeric literal is too long" ) );
				break;
			}
		}
	}

	if( base_ == 10u64 && !it.empty() && it.front() == 'e' )
	{
		it.drop_front();

		auto mut sign= 1;
		if( !it.empty() && it.front() == '-' )
		{
			sign= -1;
			it.drop_front();
		}
		else if( !it.empty() && it.front() == '+' )
		{
			sign=  1;
			it.drop_front();
		}

		while( !it.empty() )
		{
			auto num= NumberFunc10( it.front() );
			if( num == -1u64 )
			{
				break;
			}
			exponent= exponent * i32(base_) + i32(num);
			it.drop_front();
		}

		exponent*= sign;
	}

	var NumberLexemData mut result;

	// For double calculate only powers > 0, because pow( base, positive ) is always integer and has exact double representation.
	// pow( base, negative ) may have not exact double representation (1/10 for example).
	// Example:
	// 3 / 10 - right
	// 3 * (1/10) - wrong
	if( exponent >= 0 )
	{
		result.value_double= f64(integer_part) * PowI( base_, u64(exponent) );
	}
	else
	{
		result.value_double= f64(integer_part) / PowI( base_, u64(-exponent) );
	}
	if( exponent >= fractional_part_digits )
	{
		result.value_double+= f64(fractional_part) * PowI( base_, u64( exponent - fractional_part_digits ) );
	}
	else
	{
		result.value_double+= f64(fractional_part) / PowI( base_, u64( fractional_part_digits - exponent ) );
	}

	result.value_int= integer_part;

	for( auto mut i= 0; i <  exponent; ++i )
	{
		result.value_int*= base_;
	}
	for( auto mut i= 0; i < -exponent; ++i )
	{
		result.value_int/= base_;
	}

	auto mut fractional_part_corrected= fractional_part;

	for( auto mut i= 0; i < exponent - fractional_part_digits; ++i )
	{
		fractional_part_corrected*= base_;
	}
	for( auto mut i= 0; i < fractional_part_digits - exponent; ++i )
	{
		fractional_part_corrected/= base_;
	}

	result.value_int+= fractional_part_corrected;
	result.has_fractional_point= has_fraction_point;

	if( !it.empty() && IsIdentifierStartChar( ust::utf::get_code_point_or_null_from_string( it ) ) )
	{
		auto max_size= typeinfo</ typeof(result.type_suffix) />.element_count;
		var Lexem type_suffix= ParseIdentifier( it );
		if( type_suffix.text.size() >= max_size )
		{
			out_errors.push_back( LexSyntError( src_loc, "Type suffix of numeric literal is too long" ) );
		}

		for( auto mut i= 0s; i < ust::min( type_suffix.text.size(), max_size ); ++i )
		{
			result.type_suffix[i]= type_suffix.text[i];
		}
	}

	var Lexem mut result_lexem;
	result_lexem.lexem_type= Lexem::Type::Number;
	result_lexem.text.resize( typeinfo</NumberLexemData/>.size_of, '\0' );
	unsafe( ust::memory_copy( ust::ptr_cast_to_byte8(result_lexem.text.data()), ust::ptr_cast_to_byte8( $<(result) ), typeinfo</NumberLexemData/>.size_of ) );
	return result_lexem;
}

fn ParseString( Iterator &mut it, LexSyntErrors &mut out_errors, SrcLoc& src_loc ) : Lexem
{
	var Lexem mut result_lexem{ .lexem_type= Lexem::Type::String };

	it.drop_front(); // "

	while(!it.empty())
	{
		auto c= it.front();
		it.drop_front();
		switch(c)
		{
			'"' -> { break; },
			'\\' ->
			{
				if( it.empty() )
				{
					break;
				}
				auto escaped_c= it.front();
				it.drop_front();
				switch(escaped_c)
				{
					'"' , '\\' -> { result_lexem.text.push_back( escaped_c ); },
					'b' -> { result_lexem.text.push_back( '\b' ); },
					'f' -> { result_lexem.text.push_back( '\f' ); },
					'n' -> { result_lexem.text.push_back( '\n' ); },
					'r' -> { result_lexem.text.push_back( '\r' ); },
					't' -> { result_lexem.text.push_back( '\t' ); },
					'0' -> { result_lexem.text.push_back( '\0' ); },
					'u' ->
					{
						if( it.size() < 4s )
						{
							out_errors.push_back( LexSyntError( src_loc, "expected 4 hex digits" ) );
							return result_lexem;
						}
						auto mut char_code= 0u;
						for( auto mut i= 0u; i < 4u; ++i )
						{
							auto digit= NumberFunc16( it.front() );
							if( digit == -1u64 )
							{
								out_errors.push_back( LexSyntError( src_loc, "expected hex number" ) );
								return result_lexem;
							}

							char_code|= u32(digit) << ( ( 3u - i ) * 4u );
							it.drop_front();
						}
						ust::utf::push_code_point_to_string( result_lexem.text, char32(char_code) );
					},
					default ->
					{
						var ust::string8 mut err= "invalid escape sequence: \\";
						err.push_back( escaped_c );
						out_errors.push_back( LexSyntError( src_loc, move(err) ) );
						break;
					},
				}
			},
			default ->{ result_lexem.text.push_back(c); },
		}
	}

	return result_lexem;
}

fn DiffUTF8Chars( Iterator mut start, Iterator end ) : size_type
{
	auto mut r= 0s;
	while(start.size() > end.size())
	{
		++r;
		ust::utf::extract_code_point_or_null_from_string(start);
	}
	return r;
}

var tup[
	[ tup[ [ char8, 3 ], Lexem::Type ],  4 ],
	[ tup[ [ char8, 2 ], Lexem::Type ], 26 ],
	[ tup[ [ char8, 1 ], Lexem::Type ], 27 ] ]
c_fixed_lexems_table
[
	[
		[ "<<=", Lexem::Type::AssignShiftLeft  ],
		[ ">>=", Lexem::Type::AssignShiftRight ],
		[ "<=>", Lexem::Type::CompareOrder ],
		[ "...", Lexem::Type::Ellipsis ],
	],
	[
		[ "</", Lexem::Type::TemplateBracketLeft  ],
		[ "/>", Lexem::Type::TemplateBracketRight ],
		[ "<?", Lexem::Type::MacroBracketLeft  ],
		[ "?>", Lexem::Type::MacroBracketRight ],
		[ "::", Lexem::Type::Scope ],
		[ "++", Lexem::Type::Increment ],
		[ "--", Lexem::Type::Decrement ],
		[ "==", Lexem::Type::CompareEqual ],
		[ "!=", Lexem::Type::CompareNotEqual ],
		[ "<=", Lexem::Type::CompareLessOrEqual ],
		[ ">=", Lexem::Type::CompareGreaterOrEqual ],
		[ "&&", Lexem::Type::Conjunction ],
		[ "||", Lexem::Type::Disjunction ],
		[ "+=", Lexem::Type::AssignAdd ],
		[ "-=", Lexem::Type::AssignSub ],
		[ "*=", Lexem::Type::AssignMul ],
		[ "/=", Lexem::Type::AssignDiv ],
		[ "%=", Lexem::Type::AssignRem ],
		[ "&=", Lexem::Type::AssignAnd ],
		[ "|=", Lexem::Type::AssignOr  ],
		[ "^=", Lexem::Type::AssignXor ],
		[ "<<", Lexem::Type::ShiftLeft  ],
		[ ">>", Lexem::Type::ShiftRight ],
		[ "->", Lexem::Type::RightArrow ],
		[ "$<", Lexem::Type::ReferenceToPointer ],
		[ "$>", Lexem::Type::PointerToReference ],
	],
	[
		[ "(", Lexem::Type::BracketLeft ],
		[ ")", Lexem::Type::BracketRight ],
		[ "[", Lexem::Type::SquareBracketLeft ],
		[ "]", Lexem::Type::SquareBracketRight ],
		[ "{", Lexem::Type::BraceLeft ],
		[ "}", Lexem::Type::BraceRight ],
		[ ",", Lexem::Type::Comma ],
		[ ".", Lexem::Type::Dot ],
		[ ":", Lexem::Type::Colon ],
		[ ";", Lexem::Type::Semicolon ],
		[ "?", Lexem::Type::Question ],
		[ "=", Lexem::Type::Assignment ],
		[ "+", Lexem::Type::Plus ],
		[ "-", Lexem::Type::Minus ],
		[ "*", Lexem::Type::Star ],
		[ "/", Lexem::Type::Slash ],
		[ "%", Lexem::Type::Percent ],
		[ "<", Lexem::Type::CompareLess ],
		[ ">", Lexem::Type::CompareGreater ],
		[ "&", Lexem::Type::And ],
		[ "|", Lexem::Type::Or ],
		[ "^", Lexem::Type::Xor ],
		[ "~", Lexem::Type::Tilda ],
		[ "!", Lexem::Type::Not ],
		[ "'", Lexem::Type::Apostrophe ],
		[ "@", Lexem::Type::At ],
		[ "$", Lexem::Type::PointerTypeMark ],
	]
];

fn LexicalAnalysis( ust::string_view8 program_text ) : LexicalAnalysisResult
{
	var LexicalAnalysisResult mut result;

	auto mut it= program_text;

	it= Iterator(it); // Workaround for "reference pollution for outer variables inside loop" error.

	if( !it.empty() && ust::utf::get_code_point_or_null_from_string(it) == char32(0xFEFF) )
	{
		ust::utf::extract_code_point_or_null_from_string(it); // Skip UTF-8 byte order mark.
	}

	auto mut prev_it= it;

	var u32 mut line= 1u; // Count lines from "1", in human-readable format.
	var u32 mut column= 0u;

	while( !it.empty() )
	{
		column+= u32( DiffUTF8Chars( prev_it, it ) );
		prev_it= it;
		var SrcLoc src_loc( 0u, line, column );

		auto c= ust::utf::get_code_point_or_null_from_string(it);

		var char32 mut next_c= zero_init;
		if( it.size() > 1s ) { next_c= ust::utf::get_code_point_or_null_from_string( it.subrange_start( 1s ) ); }

		var Lexem mut lexem;

		// single line comment
		if( c == '/'c32 && next_c == '/'c32 )
		{
			// Read all until new line, but do not extract new line symbol itself.
			while( !it.empty() )
			{
				auto mut it_copy= it;
				var char32 c= ust::utf::extract_code_point_or_null_from_string(it_copy);
				if( IsNewline(c) )
				{
					break;
				}
				it= it_copy;
			}

			continue;
		}
		// multiline comment
		if( c == '/'c32 && next_c == '*'c32 )
		{
			it= it.subrange_start(2s);
			auto mut comments_depth= 1u;
			while( it.size() >= 2s && comments_depth > 0u )
			{
				if( it[0s] == '*' && it[1s] == '/' )
				{
					it= it.subrange_start(2s);
					--comments_depth;
				}
				else if( it[0s] == '/' && it[1s] == '*' )
				{
					it= it.subrange_start(2s);
					++comments_depth;
				}
				else
				{
					var char32 comment_c= ust::utf::extract_code_point_or_null_from_string( it );
					if( IsNewline(comment_c) )
					{
						++line;
						column= 0u;

						// Handle case with two-symbol line ending.
						if( !it.empty() )
						{
							auto mut it_copy= it;
							var char32 next_c= ust::utf::extract_code_point_or_null_from_string( it_copy );
							if( IsNewlineSequence( comment_c, next_c ) )
							{
								it= it_copy;
							}
						}
						prev_it= it;
					}
				}
			}
			if( comments_depth != 0u )
			{
				result.errors.push_back( LexSyntError( src_loc, "Lexical error: expected */" ) );
			}

			continue;
		}
		else if( IsNewline(c) )
		{
			++line;
			column= 0u;

			ust::utf::extract_code_point_or_null_from_string(it); // Consume this line ending symbol.

			// Handle case with two-symbol line ending.
			if( !it.empty() )
			{
				auto mut it_copy= it;
				var char32 next_c= ust::utf::extract_code_point_or_null_from_string( it_copy );
				if( IsNewlineSequence( c, next_c ) )
				{
					it= it_copy;
				}
			}

			prev_it= it;
			continue;
		}
		else if( IsWhitespace(c) )
		{
			it.drop_front();
			continue;
		}
		else if( IsIdentifierStartChar(c) )
		{
			lexem= ParseIdentifier(it);
		}
		else if( c == '?'c32 && next_c == '?'c32 )
		{
			lexem= ParseMacroUniqueIdentifier(it);
		}
		else if( c == '?'c32 && IsIdentifierStartChar(next_c) )
		{
			lexem= ParseMacroIdentifier(it);
		}
		else if( IsNumberStartChar(c) )
		{
			lexem= ParseNumber( it, result.errors, src_loc );
		}
		else if( c == '"'c32 )
		{
			lexem= ParseString( it, result.errors, src_loc );
			if( !it.empty() && IsIdentifierStartChar( ust::utf::get_code_point_or_null_from_string( it ) ) )
			{
				lexem.src_loc= src_loc;
				result.lexems.push_back( take(lexem) );

				lexem= ParseIdentifier(it);
				lexem.lexem_type= Lexem::Type::LiteralSuffix;
			}
		}
		else
		{
			foreach( &lexem_size_group : c_fixed_lexems_table ) label size_groups_loop
			{
				auto s= typeinfo</ typeof(lexem_size_group) />.element_type.elements_list[0s].type.element_count;
				if( s > it.size() )
				{
					continue;
				}
				auto check_range= it.subrange_end( s );

				foreach( &l : lexem_size_group )
				{
					if( check_range == l[0] )
					{
						// Do not store text for trivial lexems (for performance reasons).
						lexem.lexem_type= l[1];
						it= it.subrange_start( s );
						break label size_groups_loop;
					}
				}
			}
		}

		if( lexem.lexem_type != Lexem::Type::None )
		{
			lexem.src_loc= src_loc;
			result.lexems.push_back(move(lexem));
		}
		else
		{
			move(lexem);
			result.errors.push_back( LexSyntError( src_loc, "Lexical error: unexpected lexem" ) );
			it.drop_front();
		}
	}

	result.lexems.push_back( Lexem{ .src_loc( 0u, line, column ), .lexem_type= Lexem::Type::EndOfFile, .text= "EOF" } );

	return result;
}

} // namespace U1
