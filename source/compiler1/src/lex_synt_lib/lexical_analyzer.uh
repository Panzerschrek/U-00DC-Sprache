import "/string.u"
import "/vector.u"
import "lex_synt_error.uh"

namespace U1
{

struct NumberLexemData
{
	f64 value_double= 0.0;
	u64 value_int(0);
	bool has_fractional_point= false;
	[ char8, 7 ] type_suffix= zero_init;
}

struct Lexem
{
	enum Type
	{
		None,

		Identifier,
		MacroIdentifier,
		MacroUniqueIdentifier,
		String,
		CharLiteral,
		Number,

		LiteralSuffix, // For strings, numbers

		BracketLeft, // (
		BracketRight, // )

		SquareBracketLeft, // [
		SquareBracketRight, // ]

		BraceLeft, // {
		BraceRight, // }

		TemplateBracketLeft , // </
		TemplateBracketRight, // />

		MacroBracketLeft,  // <?
		MacroBracketRight, // ?>

		DoubleColon, // ::

		Comma, // ,
		Dot, // .
		Colon, // :
		Semicolon, // ;
		Question, // ?

		Equal, // =
		Plus, // +
		Minus, // -
		Asterisk, // *
		Slash, // /
		Percent, // %

		Ampersand, // &
		Pipe, // |
		Caret, // ^
		Tilde, // ~
		Exclamation, // !

		At, // @

		DoublePlus, // ++
		DoubleMinus, // --

		Less, // <
		Greater, // >
		DoubleEqual, // ==
		ExclamationEqual, // !=
		LessEqual, // <=
		GreaterEqual, // >=
		LessEqualGreater, // <=>

		DoubleAmpersand, // &&
		DoublePipe, // ||

		PlusEqual, // +=
		MinusEqual, // -=
		AsteriskEqual, // *=
		SlashEqual, // /=
		PercentEqual, // %=
		AmpersandEqual, // &=
		PipeEqual,  // |=
		CaretEqual, // ^=

		DoubleLess , // <<
		DoubleGreater, // >>

		DoubleLessEqual , // <<=
		DoubleGreaterEqual, // >>=

		MinusGreater, // ->

		Dollar, // $
		DollarLess, // $<
		DollarGreater, // $>

		Ellipsis, // ...

		EndOfFile,
	}

	// Contains text for non-fixed lexems (identifiers, strings, etc.).
	// For fixed lexems is emplty.
	// For numbers contains data of "struct NumberLexemData".
	ust::string8 text;

	SrcLoc src_loc;
	Type lexem_type= Type::None;

	// It's not exact, but enough for errors messaging.
	fn ToDiagnosticString(this) : ust::string8;
}

type Lexems= ust::vector</Lexem/>;

struct LexicalAnalysisResult
{
	Lexems lexems;
	LexSyntErrors errors;
}

fn LexicalAnalysis( ust::string_view8 program_text ) : LexicalAnalysisResult;

} // namespace U1
