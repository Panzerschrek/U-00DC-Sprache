import "error_reporting.uh"
import "code_builder.uh"

namespace U1
{

fn CodeBuilder::CheckCompleteFunctionReferenceNotation( FunctionType& function_type, NamesScopePtr& names_scope, SrcLoc& src_loc )
{
	CheckFunctionReferencesNotationInnerReferences( function_type, names_scope, src_loc );
	CheckFunctionReferencesNotationMutabilityCorrectness( function_type, names_scope, src_loc );
}

fn CodeBuilder::CheckFunctionReferencesNotationInnerReferences( FunctionType& function_type, NamesScopePtr& names_scope, SrcLoc& src_loc )
{
	foreach( &pollution : function_type.references_pollution )
	{
		CheckFunctionReferencesNotationParamReference( function_type, pollution.dst, names_scope, src_loc );
		CheckFunctionReferencesNotationParamReference( function_type, pollution.src, names_scope, src_loc );
	}

	foreach( &param_reference : function_type.return_references )
	{
		CheckFunctionReferencesNotationParamReference( function_type, param_reference, names_scope, src_loc );
	}
	foreach( &param_references : function_type.return_inner_references )
	{
		foreach( &param_reference : param_references )
		{
			CheckFunctionReferencesNotationParamReference( function_type, param_reference, names_scope, src_loc );
		}
	}

	if( !function_type.return_inner_references.empty() )
	{
		auto return_type_tag_count= function_type.return_type.ReferenceTagCount();
		if( function_type.return_inner_references.size() != size_type(return_type_tag_count) )
		{
			REPORT_ERROR( InnerReferenceTagCountMismatch, names_scope, src_loc, return_type_tag_count, function_type.return_inner_references.size() )
		}
	}
}

fn CodeBuilder::CheckFunctionReferencesNotationParamReference( FunctionType& function_type, FunctionType::ParamReference& param_reference, NamesScopePtr& names_scope, SrcLoc& src_loc )
{
	if( param_reference.reference_index != FunctionType::c_param_reference_number && size_type(param_reference.param_index) < function_type.params.size()  )
	{
		var Type& t= function_type.params[ size_type( param_reference.param_index) ].t;
		auto tag_count= t.ReferenceTagCount();
		if( u32(param_reference.reference_index) >= tag_count )
		{
			REPORT_ERROR( ReferenceTagOutOfRange, names_scope, src_loc, u32(param_reference.reference_index), t, tag_count )
		}
	}
}

fn CodeBuilder::CheckFunctionReferencesNotationMutabilityCorrectness( FunctionType& function_type, NamesScopePtr& names_scope, SrcLoc& src_loc )
{
	// Do not allow to specify reference notation where immutable references are linked with mutable references.

	if( function_type.return_value_type == ValueType::ReferenceMut )
	{
		CheckReferenceNotationMutabilityViolationForReturnReferences( function_type, function_type.return_references, names_scope, src_loc );
	}

	for(
		var size_type mut i= 0s, i_end= ust::min( size_type( function_type.return_type.ReferenceTagCount() ), function_type.return_inner_references.size() );
		i < i_end;
		++i )
	{
		if( function_type.return_type.GetInnerReferenceKind(i) == InnerReferenceKind::Mut )
		{
			CheckReferenceNotationMutabilityViolationForReturnReferences( function_type, function_type.return_inner_references[i], names_scope, src_loc );
		}
	}

	foreach( & pollution : function_type.references_pollution )
	{
		auto dst_param_index= size_type(pollution.dst.param_index);
		if( dst_param_index >= function_type.params.size() )
		{
			continue;
		}
		var FunctionType::Param& dst_param= function_type.params[ dst_param_index ];

		if( pollution.dst.reference_index != FunctionType::c_param_reference_number &&
			u32(pollution.dst.reference_index) < dst_param.t.ReferenceTagCount() &&
			dst_param.t.GetInnerReferenceKind( size_type( pollution.dst.reference_index ) ) == InnerReferenceKind::Mut )
		{
			CheckReferenceNotationMutabilityViolationForMutableReference( function_type, pollution.src, names_scope, src_loc );
		}
	}
}

fn CodeBuilder::CheckReferenceNotationMutabilityViolationForReturnReferences( FunctionType& function_type, FunctionType::ParamReferences& return_references, NamesScopePtr& names_scope, SrcLoc& src_loc )
{
	foreach( &return_reference : return_references )
	{
		CheckReferenceNotationMutabilityViolationForMutableReference( function_type, return_reference, names_scope, src_loc );
	}
}

fn CodeBuilder::CheckReferenceNotationMutabilityViolationForMutableReference( FunctionType& function_type, FunctionType::ParamReference& param_reference, NamesScopePtr& names_scope, SrcLoc& src_loc )
{
	auto param_index= size_type(param_reference.param_index);
	if( param_index >= function_type.params.size() )
	{
		return; // May be in case of error.
	}

	var FunctionType::Param& param= function_type.params[ param_index ];

	if( param_reference.reference_index == FunctionType::c_param_reference_number )
	{
		if( param.value_type == ValueType::ReferenceImut )
		{
			REPORT_ERROR( ReferenceNotationViolatesImmutability, names_scope, src_loc )
		}
	}
	else
	{
		if( u32(param_reference.reference_index) < param.t.ReferenceTagCount() &&
			param.t.GetInnerReferenceKind( size_type(param_reference.reference_index) ) != InnerReferenceKind::Mut )
		{
			REPORT_ERROR( ReferenceNotationViolatesImmutability, names_scope, src_loc )
		}
	}
}

fn CodeBuilder::CheckReturnedReferenceIsAllowed( this, NamesScopePtr& names, FunctionContext& function_context, VariablePtr& return_reference_node, SrcLoc& src_loc )
{
	foreach( &node : function_context.references_graph.GetAllAccessibleVariableNodes( return_reference_node ) )
	{
		if( !IsReferenceAllowedForReturn( function_context, node ) )
		{
			REPORT_ERROR( ReturningUnallowedReference, names, src_loc, node.lock_imut().deref().name )
		}
	}
}

fn CodeBuilder::IsReferenceAllowedForReturn( this, FunctionContext& function_context, VariablePtr& variable_node ) : bool
{
	foreach( &return_reference : function_context.function_type.return_references )
	{
		auto& arg_nodes= function_context.args_nodes[ size_type(return_reference.param_index) ];
		if( return_reference.reference_index == FunctionType::c_param_reference_number &&
			variable_node == arg_nodes[0] )
		{
			return true;
		}
		if( size_type(return_reference.reference_index) < arg_nodes[1].size() &&
			variable_node == arg_nodes[1][size_type(return_reference.reference_index)] )
		{
			return true;
		}
	}

	return false;
}

fn CodeBuilder::CheckReturnedInnerReferenceIsAllowed( this, NamesScopePtr& names, FunctionContext& function_context, VariablePtr& return_reference_node, SrcLoc& src_loc )
{
	with( &inner_reference_nodes : return_reference_node.lock_imut().deref().inner_reference_nodes )
	{
		for( auto mut i= 0s; i < inner_reference_nodes.size(); ++i )
		{
			foreach( &node : function_context.references_graph.GetAllAccessibleVariableNodes( inner_reference_nodes[i] ) )
			{
				if( !IsReferenceAllowedForInnerReturn( function_context, node, i ) )
				{
					REPORT_ERROR( ReturningUnallowedReference, names, src_loc, node.lock_imut().deref().name )
				}
			}
		}
	}
}

fn CodeBuilder::IsReferenceAllowedForInnerReturn( this, FunctionContext& function_context, VariablePtr& variable_node, size_type index ) : bool
{
	if( function_context.function_type.return_value_type != ValueType::Value )
	{
		// Process specially inner references of returning reference.
		// Allow skipping return inner references in case if an arg inner reference is returned.
		// This is done in order to support returning references to types with references inside (second order references support).
		foreach( &param_reference : function_context.function_type.return_references )
		{
			if( param_reference.reference_index != FunctionType::c_param_reference_number )
			{
				// Returning inner arg reference.
				if( size_type( param_reference.param_index ) < function_context.args_second_order_nodes.size() )
				{
					auto& arg_second_order_nodes= function_context.args_second_order_nodes[ size_type( param_reference.param_index ) ];
					if( size_type(param_reference.reference_index) < arg_second_order_nodes.size() &&
						arg_second_order_nodes[ size_type(param_reference.reference_index) ] == variable_node )
					{
						// Allow returning this node - it's correct second order variable node.
						return true;
					}
				}
			}
		}
	}

	if( index >= function_context.function_type.return_inner_references.size() )
	{
		return false;
	}
	foreach( &return_reference : function_context.function_type.return_inner_references[index] )
	{
		auto& arg_nodes= function_context.args_nodes[ size_type(return_reference.param_index) ];
		if( return_reference.reference_index == FunctionType::c_param_reference_number &&
			variable_node == arg_nodes[0] )
		{
			return true;
		}
		if( size_type(return_reference.reference_index) < arg_nodes[1].size() &&
			variable_node == arg_nodes[1][ size_type(return_reference.reference_index) ] )
		{
			return true;
		}
	}
	return false;
}

fn CodeBuilder::CheckAsyncReturnReferenceIsAllowed(
	NamesScopePtr& names,
	FunctionContext& function_context,
	CoroutineTypeDescription& coroutine_type_description,
	VariablePtr& node,
	SrcLoc& src_loc )
{
	foreach( &var_node : function_context.references_graph.GetAllAccessibleVariableNodes( node ) ) label accessible_nodes_loop
	{
		auto coroutine_inner_reference= GetCoroutineInnerReferenceForParamNode( function_context, var_node );

		foreach( &param_reference : coroutine_type_description.return_references )
		{
			if( coroutine_inner_reference == param_reference )
			{
				continue label accessible_nodes_loop;
			}
		}

		REPORT_ERROR( ReturningUnallowedReference, names, src_loc, var_node.lock_imut().deref().name )
	}
}

fn CodeBuilder::CheckAsyncReturnInnerReferencesAreAllowed(
	NamesScopePtr& names,
	FunctionContext& function_context,
	CoroutineTypeDescription& coroutine_type_description,
	VariablePtr& node,
	SrcLoc& src_loc )
{
	with( &inner_reference_nodes : node.lock_imut().deref().inner_reference_nodes )
	{
		for( var size_type mut i= 0s; i < inner_reference_nodes.size(); ++i )
		{
			foreach( &var_node : function_context.references_graph.GetAllAccessibleVariableNodes( inner_reference_nodes[i] ) ) label accessible_nodes_loop
			{
				auto coroutine_inner_reference= GetCoroutineInnerReferenceForParamNode( function_context, var_node );

				if( i < coroutine_type_description.return_inner_references.size() )
				{
					foreach( &param_reference : coroutine_type_description.return_inner_references[i] )
					{
						if( coroutine_inner_reference == param_reference )
						{
							continue label accessible_nodes_loop;
						}
					}
				}

				REPORT_ERROR( ReturningUnallowedReference, names, src_loc, var_node.lock_imut().deref().name )
			}
		}
	}
}

fn CodeBuilder::GetCoroutineInnerReferenceForParamNode( FunctionContext& function_context, VariablePtr& node ) : ust::optional</FunctionType::ParamReference/>
{
	// Map coroutine function input references to returned coroutine inner references.
	// If this changed, "TransformCoroutineFunctionType" function must be changed too!

	auto mut coroutine_inner_reference_index= 0s;
	for( var size_type mut i= 0s; i < function_context.function_type.params.size(); ++i )
	{
		var FunctionType::Param& param= function_context.function_type.params[i];
		auto& arg_nodes= function_context.args_nodes[i];

		if( param.value_type == ValueType::Value )
		{
			auto& inner_nodes= arg_nodes[1];
			for( var size_type mut j= 0s; j < inner_nodes.size(); ++j )
			{
				if( node == inner_nodes[j] )
				{
					return FunctionType::ParamReference{ .param_index= 0u8, .reference_index= u8(coroutine_inner_reference_index + j) };
				}
			}

			coroutine_inner_reference_index+= size_type( param.t.ReferenceTagCount() );
		}
		else
		{
			if( node == arg_nodes[0] )
			{
				return FunctionType::ParamReference{ .param_index= 0u8, .reference_index= u8(coroutine_inner_reference_index) };
			}

			++coroutine_inner_reference_index;
		}
	}

	return ust::null_optional;
}

fn CodeBuilder::CheckReferencesPollutionBeforeReturn( this, NamesScopePtr& names_scope, FunctionContext& function_context, SrcLoc& src_loc )
{
	auto& function_type= function_context.function_type;
	auto& params= function_type.params;
	for( auto mut param_i= 0s; param_i < params.size(); ++param_i )
	{
		if( params[param_i].value_type == ValueType::Value )
		{
			continue;
		}
		with( &inner_reference_nodes : function_context.args_nodes[param_i][0].lock_imut().deref().inner_reference_nodes )
		{
			for( auto mut tag_i= 0s; tag_i < inner_reference_nodes.size(); ++tag_i )
			{
				var VariablePtr& inner_reference_node= inner_reference_nodes[tag_i];
				foreach( &accessible_variable_node : function_context.references_graph.GetAllAccessibleVariableNodes( inner_reference_node ) ) label accessible_nodes_loop
				{
					if( accessible_variable_node == function_context.args_nodes[param_i][1][tag_i] )
					{
						continue;
					}

					var ust::optional</FunctionType::ParamReference/> mut param_reference;
					for( auto mut j= 0s; j < params.size(); ++j )
					{
						if( accessible_variable_node == function_context.args_nodes[j][0] )
						{
							param_reference= FunctionType::ParamReference{ .param_index= u8(j), .reference_index= FunctionType::c_param_reference_number };
						}
						for( auto mut tag_j= 0s; tag_j < function_context.args_nodes[j][1].size(); ++tag_j )
						{
							if( accessible_variable_node == function_context.args_nodes[j][1][tag_j] )
							{
								param_reference= FunctionType::ParamReference{ .param_index= u8(j), .reference_index=u8(tag_j) };
							}
						}
					}

					if_var( &src : param_reference )
					{
						var FunctionType::ReferencePollution actual_reference_pollution
						{
							.dst{ .param_index= u8(param_i), .reference_index= u8(tag_i) },
							.src= src,
						};

						foreach( &reference_pollution : function_type.references_pollution )
						{
							if( actual_reference_pollution == reference_pollution )
							{
								continue label accessible_nodes_loop;
							}
						}
					}

					REPORT_ERROR( UnallowedReferencePollution, names_scope, src_loc )
				}
			}
		}
	}

	// For now disable all pollution for accessible variables inner reference nodes.
	for( auto mut arg_index= 0s; arg_index < function_context.args_nodes.size(); ++arg_index )
	{
		auto& nodes_pair= function_context.args_nodes[arg_index];
		if( arg_index < function_context.args_second_order_nodes.size() )
		{
			auto& arg_second_order_nodes= function_context.args_second_order_nodes[arg_index];
			for( auto mut inner_reference_index= 0s; inner_reference_index < nodes_pair[1].size(); ++inner_reference_index )
			{
				if( inner_reference_index < arg_second_order_nodes.size() )
				{
					var VariableNullablePtr& second_order_variable_node= arg_second_order_nodes[ inner_reference_index ];
					foreach( & inner_node : nodes_pair[1][ inner_reference_index ].lock_imut().deref().inner_reference_nodes )
					{
						foreach( &v : function_context.references_graph.GetAllAccessibleVariableNodes( inner_node ) )
						{
							if( v != second_order_variable_node )
							{
								REPORT_ERROR( UnallowedReferencePollution, names_scope, src_loc )
							}
						}
					}
				}
			}
		}
	}
}

fn CodeBuilder::CollectReturnReferences( FunctionContext &mut function_context, VariablePtr& return_node )
{
	auto reference_notation_deduction_context_ptr= function_context.reference_notation_deduction_context;
	auto mut lock= reference_notation_deduction_context_ptr.try_lock_mut();
	var ReferenceNotationDeductionContext &mut reference_notation_deduction_context= lock.deref();

	auto lambda_preprocessing_context_ptr= function_context.lambda_preprocessing_context;

	foreach( &variable_node : function_context.references_graph.GetAllAccessibleVariableNodes( return_node ) )
	{
		for( auto mut arg_n= 0s; arg_n < function_context.args_nodes.size(); ++arg_n )
		{
			if( variable_node == function_context.args_nodes[arg_n][0] )
			{
				reference_notation_deduction_context.return_references.push_back(
					FunctionType::ParamReference{ .param_index= u8(arg_n), .reference_index= FunctionType::c_param_reference_number } );
			}
			for( auto mut tag_n= 0s; tag_n < function_context.args_nodes[arg_n][1].size(); ++tag_n )
			{
				if( variable_node == function_context.args_nodes[arg_n][1][tag_n] )
				{
					reference_notation_deduction_context.return_references.push_back(
						FunctionType::ParamReference{ .param_index= u8(arg_n), .reference_index= u8(tag_n) } );
				}
			}
		}

		if( !lambda_preprocessing_context_ptr.empty() )
		{
			auto mut lock= lambda_preprocessing_context_ptr.try_lock_mut();
			var LambdaPreprocessingContext &mut lambda_preprocessing_context= lock.deref();
			foreach( &captured_variable_pair : lambda_preprocessing_context.captured_external_variables )
			{
				LambdaPreprocessingEnsureCapturedVariableRegistered( function_context, captured_variable_pair.value() );
				if( variable_node == captured_variable_pair.value().variable_node )
				{
					lambda_preprocessing_context.captured_variables_return_references.push_back( variable_node );
				}

				foreach( &accessible_variable : captured_variable_pair.value().accessible_variables )
				{
					if( variable_node == accessible_variable )
					{
						lambda_preprocessing_context.captured_variables_return_references.push_back( variable_node );
					}
				}
			}
		}
	}
}

fn CodeBuilder::CollectReturnInnerReferences( FunctionContext &mut function_context, VariablePtr& return_node )
{
	auto reference_notation_deduction_context_ptr= function_context.reference_notation_deduction_context;
	auto mut lock= reference_notation_deduction_context_ptr.try_lock_mut();
	var ReferenceNotationDeductionContext &mut reference_notation_deduction_context= lock.deref();

	auto lambda_preprocessing_context_ptr= function_context.lambda_preprocessing_context;

	with( &inner_reference_nodes : return_node.lock_imut().deref().inner_reference_nodes )
	{
		if( reference_notation_deduction_context.return_inner_references.size() < inner_reference_nodes.size() )
		{
			reference_notation_deduction_context.return_inner_references.resize( inner_reference_nodes.size() );
		}

		for( auto mut i= 0s; i < inner_reference_nodes.size(); ++i )
		{
			foreach( &variable_node : function_context.references_graph.GetAllAccessibleVariableNodes( inner_reference_nodes[i] ) )
			{
				for( auto mut arg_n= 0s; arg_n < function_context.args_nodes.size(); ++arg_n )
				{
					if( variable_node == function_context.args_nodes[arg_n][0] )
					{
						reference_notation_deduction_context.return_inner_references[i].push_back(
							FunctionType::ParamReference{ .param_index= u8(arg_n), .reference_index= FunctionType::c_param_reference_number } );
					}
					for( auto mut tag_n= 0s; tag_n < function_context.args_nodes[arg_n][1].size(); ++tag_n )
					{
						if( variable_node == function_context.args_nodes[arg_n][1][tag_n] )
						{
							reference_notation_deduction_context.return_inner_references[i].push_back(
								FunctionType::ParamReference{ .param_index= u8(arg_n), .reference_index= u8(tag_n) } );
						}
					}
				}

				if( !lambda_preprocessing_context_ptr.empty() )
				{
					auto mut lock= lambda_preprocessing_context_ptr.try_lock_mut();
					var LambdaPreprocessingContext &mut lambda_preprocessing_context= lock.deref();

					if( lambda_preprocessing_context.captured_variables_return_inner_references.size() < inner_reference_nodes.size() )
					{
						lambda_preprocessing_context.captured_variables_return_inner_references.resize( inner_reference_nodes.size() );
					}

					foreach( &captured_variable_pair : lambda_preprocessing_context.captured_external_variables )
					{
						LambdaPreprocessingEnsureCapturedVariableRegistered( function_context, captured_variable_pair.value() );
						if( variable_node == captured_variable_pair.value().variable_node )
						{
							lambda_preprocessing_context.captured_variables_return_inner_references[i].push_back( variable_node );
						}

						foreach( &accessible_variable : captured_variable_pair.value().accessible_variables )
						{
							if( variable_node == accessible_variable )
							{
								lambda_preprocessing_context.captured_variables_return_inner_references[i].push_back( variable_node );
							}
						}
					}
				}
			}
		}
	}
}

fn CodeBuilder::CollectReferencePollution( FunctionContext &mut function_context )
{
	auto reference_notation_deduction_context_ptr= function_context.reference_notation_deduction_context;
	auto mut lock= reference_notation_deduction_context_ptr.try_lock_mut();
	var ReferenceNotationDeductionContext &mut reference_notation_deduction_context= lock.deref();

	auto lambda_preprocessing_context_ptr= function_context.lambda_preprocessing_context;

	var FunctionType function_type= function_context.function_type;
	auto& params= function_type.params;

	// Process args destinations.
	for( auto mut param_i= 0s; param_i < params.size(); ++param_i )
	{
		if( params[param_i].value_type == ValueType::Value )
		{
			continue;
		}
		auto& args_nodes= function_context.args_nodes;
		with( &inner_reference_nodes : args_nodes[param_i][0].lock_imut().deref().inner_reference_nodes )
		{
			for( auto mut tag_i= 0s; tag_i < inner_reference_nodes.size(); ++tag_i )
			{
				var VariablePtr& inner_reference_node= inner_reference_nodes[tag_i];
				foreach( &accessible_variable_node : function_context.references_graph.GetAllAccessibleVariableNodes( inner_reference_node ) )
				{
					if( accessible_variable_node == args_nodes[param_i][1][tag_i] )
					{
						continue;
					}

					var ust::optional</ FunctionType::ParamReference /> mut src_param_reference;

					// Process args sources.
					for( auto mut j= 0s; j < params.size(); ++j )
					{
						if( accessible_variable_node == args_nodes[j][0] )
						{
							src_param_reference= FunctionType::ParamReference{ .param_index= u8(j), .reference_index= FunctionType::c_param_reference_number };
						}
						for( auto mut tag_j= 0s; tag_j < args_nodes[j][1].size(); ++tag_j )
						{
							if( accessible_variable_node == args_nodes[j][1][tag_j] )
							{
								src_param_reference= FunctionType::ParamReference{ .param_index= u8(j), .reference_index=u8(tag_j) };
							}
						}
					}

					if_var( &src : src_param_reference )
					{
						reference_notation_deduction_context.references_pollution.push_back(
							FunctionType::ReferencePollution
							{
								.dst{ .param_index= u8(param_i), .reference_index= u8(tag_i) },
								.src= src,
							} );
					}

					if( !lambda_preprocessing_context_ptr.empty() )
					{
						auto mut lock= lambda_preprocessing_context_ptr.try_lock_mut();
						var LambdaPreprocessingContext &mut lambda_preprocessing_context= lock.deref();

						var ust::shared_ptr_nullable_mut</Variable/> mut src_captured_variable;

						// Process captured variables sources.
						foreach( &captured_variable_pair : lambda_preprocessing_context.captured_external_variables )
						{
							if( accessible_variable_node == captured_variable_pair.value().variable_node )
							{
								src_captured_variable= accessible_variable_node;
							}

							foreach( &captured_variable_accessible_variable : captured_variable_pair.value().accessible_variables )
							{
								if( accessible_variable_node == captured_variable_accessible_variable )
								{
									src_captured_variable= accessible_variable_node;
								}
							}
						}

						if( !src_captured_variable.empty() )
						{
							lambda_preprocessing_context.references_pollution.push_back(
								LambdaPreprocessingContext::ReferencePollution
								{
									.dst= FunctionType::ParamReference{ .param_index= u8(param_i), .reference_index= u8(tag_i) },
									.src= src_captured_variable.try_to_non_nullable(),
								} );
						}
					}
				}
			}
		}
	}

	if( lambda_preprocessing_context_ptr.empty() )
	{
		return;
	}

	auto mut lambda_preprocessing_context_lock= lambda_preprocessing_context_ptr.try_lock_mut();
	var LambdaPreprocessingContext &mut lambda_preprocessing_context= lambda_preprocessing_context_lock.deref();
	auto& captured_external_variables= lambda_preprocessing_context.captured_external_variables;

	// Process captured variables destinations.
	foreach( &dst_captured_variable_pair : captured_external_variables )
	{
		LambdaPreprocessingEnsureCapturedVariableRegistered( function_context, dst_captured_variable_pair.value() );
		var VariablePtr& captured_variable= dst_captured_variable_pair.value().reference_node;
		with( &inner_reference_nodes : captured_variable.lock_imut().deref().inner_reference_nodes )
		{
			for( auto mut dst_tag= 0s; dst_tag < inner_reference_nodes.size(); ++dst_tag )
			{
				foreach( &accessible_variable_node : function_context.references_graph.GetAllAccessibleVariableNodes( inner_reference_nodes[ dst_tag ] ) )
				{
					var VariablePtr& dst_node= dst_captured_variable_pair.value().accessible_variables[ dst_tag ];
					if( accessible_variable_node == dst_node )
					{
						continue;
					}

					var ust::optional</ LambdaPreprocessingContext::ReferenceLink /> mut src_param_reference;

					// Process args sources.
					for( auto mut j= 0s; j < params.size(); ++j )
					{
						if( accessible_variable_node == function_context.args_nodes[j][0] )
						{
							src_param_reference= FunctionType::ParamReference{ .param_index= u8(j), .reference_index= FunctionType::c_param_reference_number };
						}
						for( auto mut tag_j= 0s; tag_j < function_context.args_nodes[j][1].size(); ++tag_j )
						{
							if( accessible_variable_node == function_context.args_nodes[j][1][tag_j] )
							{
								src_param_reference= FunctionType::ParamReference{ .param_index= u8(j), .reference_index=u8(tag_j) };
							}
						}
					}

					// Process captured variables sources.
					foreach( &src_captured_variable_pair : captured_external_variables )
					{
						if( accessible_variable_node == src_captured_variable_pair.value().variable_node )
						{
							src_param_reference= accessible_variable_node;
						}

						foreach( &src_captured_variable_accessible_variable : src_captured_variable_pair.value().accessible_variables )
						{
							if( accessible_variable_node == src_captured_variable_accessible_variable )
							{
								src_param_reference= accessible_variable_node;
							}
						}
					}

					if_var( &src : src_param_reference )
					{
						lambda_preprocessing_context.references_pollution.push_back(
							LambdaPreprocessingContext::ReferencePollution
							{
								.dst= dst_node,
								.src= src,
							} );
					}
				}
			}
		}
	}
}

fn CodeBuilder::MergeReferencesGraphsAfterConditionalBranches( ust::array_view_imut</ReferencesGraph/> branches, NamesScopePtr names_scope, SrcLoc& src_loc ) : ReferencesGraph
{
	with( mut lock : names_scope.lock_imut().deref().GetErrors().try_lock_mut() )
	{
		return ReferencesGraph::MergeReferencesGraphsAfterConditionalBranches( branches, lock.deref(), src_loc );
	}
}

fn CodeBuilder::CheckReferencesGraphAfterLoop( ReferencesGraph& state_before, ReferencesGraph& state_after, NamesScopePtr names_scope, SrcLoc& src_loc )
{
	with( mut lock : names_scope.lock_imut().deref().GetErrors().try_lock_mut() )
	{
		ReferencesGraph::CheckReferencesGraphAfterLoop( state_before, state_after, lock.deref(), src_loc );
	}
}

fn CodeBuilder::SetupReferencesInCopyOrMove(
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	VariablePtr& dst_node,
	VariablePtr& src_node,
	SrcLoc& src_loc )
{
	auto reference_tag_count= dst_node.lock_imut().deref().t.ReferenceTagCount();
	if( reference_tag_count == 0u )
	{
		return;
	}

	foreach( pair : src_node.lock_imut().deref().inner_reference_nodes.iter().zip( dst_node.lock_imut().deref().inner_reference_nodes.iter() ) )
	{
		function_context.references_graph.TryAddLinkToAllAccessibleVariableNodesInnerReferences(
			pair.first, pair.second, names_scope, src_loc );
	}
}

} // namespace U1
