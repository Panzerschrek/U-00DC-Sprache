import "/scoped_array.u"
import "/sort.u"
import "/string_conversions.u"
import "debug_info_builder.uh"

namespace U1
{

fn DebugInfoBuilder::constructor(
	LLVMContextRef llvm_context,
	LLVMTargetDataRef data_layout,
	SourceGraph& source_graph,
	LLVMModuleRef mod,
	bool build_debug_info )
	( llvm_context_(llvm_context), data_layout_(data_layout) )
{
	if( !build_debug_info )
	{
		return;
	}

	builder_= unsafe( LLVMCreateDIBuilder( mod ) );

	{
		var ust::string_view8 debug_metadata_name= "dbg";
		debug_metadata_kind_id_= unsafe( LLVMGetMDKindIDInContext( llvm_context_, debug_metadata_name.data(), u32( debug_metadata_name.size() ) ) );
	}

	source_file_entries_=
		ust::make_vector_from_mapped_range(
			source_graph.nodes,
			lambda[builder= builder_]( SourceGraph::Node& node ) : auto
			{
				return unsafe( LLVMDIBuilderCreateFile(
					builder,
					cast_mut(node.file_path_normalized).data(), node.file_path_normalized.size(),
					ust::nullptr</char8/>(), 0s ) );
			} );

	// TODO - fix this. LLVM C interface doesn't provide any way to specify custom language, so, use language id for "C".
	var LLVMDWARFSourceLanguage c_dwarf_language_id= 1u;

	compile_unit_=
		unsafe( LLVMDIBuilderCreateCompileUnit(
			builder_,
			c_dwarf_language_id,
			source_file_entries_.front(),
			ust::nullptr</char8/>(), 0s, // TODO - set producer
			LLVMBool::False, // TODO - pass "optimized' flag
			ust::nullptr</char8/>(), 0s, // Flags
			0u, // Runtime version
			ust::nullptr</char8/>(), 0s, // SplitName
			LLVMDWARFEmissionKind::Full,
			0u, // DWOId
			LLVMBool::True, // SplitDebugInlining
			LLVMBool::False, // DebugInfoForProfiling
			ust::nullptr</char8/>(), 0s, // SysRoot
			ust::nullptr</char8/>(), 0s  // SDK
		) );

	var ust::string_view8 stub_type_name= "_stub_debug_type";
	stub_type_= unsafe( LLVMDIBuilderCreateBasicType(
		builder_,
		stub_type_name.data(), stub_type_name.size(),
		8u64,
		LLVMDWARFTypeEncoding::unsigned,
		0u ) );
}

fn DebugInfoBuilder::destructor()
{
	if( builder_ == Null::LLVMDIBuilderRef() )
	{
		return;
	}

	// Build full debug info for classes, because at this moment all classes should be complete.
	// Use separate list since we can't iterate over classes_di_types_ and adding new elements simultaniously.
	// Use counter-based loop, since this container may be modified during iteration.
	var ust::vector</ tup[ LLVMMetadataRef, LLVMMetadataRef ] /> mut metadata_to_replace;
	for( var size_type mut i= 0s; i < classes_order_.size(); ++i )
	{
		var ClassTypePtr class_type= classes_order_[i];
		var LLVMMetadataRef temp_metadata= classes_di_types_[class_type];
		var LLVMMetadataRef new_metadata= BuildClassTypeFullDebugInfo( class_type );
		metadata_to_replace.push_back( ust::make_tuple( temp_metadata, new_metadata ) );
	}
	unsafe( U1_ReplaceMetadataNodes( metadata_to_replace.data(), metadata_to_replace.size() ) );

	unsafe
	{
		LLVMDIBuilderFinalize( builder_ );
		LLVMDisposeDIBuilder( builder_ );
	}
}

fn DebugInfoBuilder::CreateFunctionInfo( mut this, FunctionVariable& func_variable )
{
	if( builder_ == Null::LLVMDIBuilderRef() )
	{
		return;
	}

	var Synt::Function& syntax_element= func_variable.body_syntax_element.try_deref();
	var SrcLoc& src_loc= syntax_element.src_loc;
	var ust::string8& name= syntax_element.name.back();

	with( &lazy_function : func_variable.llvm_function.lock_imut().deref() )
	{
		var LLVMMetadataRef file= source_file_entries_[ size_type(src_loc.GetFileIndex()) ];

		var ust::string8& linkage_name= lazy_function.name_mangled;

		unsafe
		{
			auto di_function= LLVMDIBuilderCreateFunction(
				builder_,
				file,
				cast_mut(name).data(), name.size(),
				cast_mut(linkage_name).data(), linkage_name.size(),
				file,
				src_loc.GetLine(),
				CreateFunctionDIType( func_variable.t ),
				LLVMBool::False, // IsLocalToUnit
				LLVMBool::True, // IsDefinition
				src_loc.GetLine(),
				LLVMDIFlags(0),
				LLVMBool::False /* TODO - pass optimized flag*/ );

			LLVMSetSubprogram( lazy_function.function, di_function );
		}
	}
}

fn DebugInfoBuilder::SetCurrentLocation( mut this, FunctionContext& function_context, SrcLoc& src_loc )
{
	if( builder_ == Null::LLVMDIBuilderRef() )
	{
		return;
	}

	unsafe
	{
		auto debug_location= LLVMDIBuilderCreateDebugLocation(
			llvm_context_,
			src_loc.GetLine(),
			src_loc.GetColumn(),
			function_context.current_debug_info_scope,
			Null::LLVMMetadataRef() );
		LLVMSetCurrentDebugLocation2( function_context.llvm_ir_builder, debug_location );
	}
}

fn nodiscard DebugInfoBuilder::StartBlock( mut this, FunctionContext &mut function_context, SrcLoc& src_loc ) : LLVMMetadataRef
{
	if( builder_ == Null::LLVMDIBuilderRef() )
	{
		return Null::LLVMMetadataRef();
	}

	auto prev= function_context.current_debug_info_scope;
	function_context.current_debug_info_scope= unsafe( LLVMDIBuilderCreateLexicalBlock(
		builder_,
		function_context.current_debug_info_scope,
		source_file_entries_[ size_type(src_loc.GetFileIndex()) ],
		src_loc.GetLine(),
		src_loc.GetColumn() ) );

	return prev;
}

fn DebugInfoBuilder::EndBlock( mut this, FunctionContext &mut function_context, LLVMMetadataRef prev_block )
{
	if( builder_ == Null::LLVMDIBuilderRef() )
	{
		return;
	}

	function_context.current_debug_info_scope= prev_block;
}

fn DebugInfoBuilder::CreateVariableInfo( mut this, FunctionContext& function_context, Variable& variable, ust::string8& name, SrcLoc& src_loc )
{
	if( builder_ == Null::LLVMDIBuilderRef() )
	{
		return;
	}

	unsafe
	{
		auto di_variable= LLVMDIBuilderCreateAutoVariable(
			builder_,
			function_context.current_debug_info_scope,
			cast_mut(name).data(), name.size(),
			source_file_entries_[ size_type(src_loc.GetFileIndex()) ],
			src_loc.GetLine(),
			CreateDIType( variable.t ),
			LLVMBool::False, // AlwaysPreserve
			LLVMDIFlags(0),
			LLVMABIAlignmentOfType( data_layout_, variable.t.GetLLVMType() ) * 8u32 );

		auto debug_location= LLVMDIBuilderCreateDebugLocation(
			llvm_context_,
			src_loc.GetLine(),
			src_loc.GetColumn(),
			function_context.current_debug_info_scope,
			Null::LLVMMetadataRef() );

		LLVMDIBuilderInsertDeclareAtEnd(
			builder_,
			variable.llvm_value,
			di_variable,
			LLVMDIBuilderCreateExpression( builder_, 0i64, 0s ),
			debug_location,
			LLVMGetInsertBlock(function_context.llvm_ir_builder) );
	}
}

fn DebugInfoBuilder::CreateReferenceVariableInfo( mut this, FunctionContext& function_context, Variable& variable, ust::string8& name, SrcLoc& src_loc )
{
	if( builder_ == Null::LLVMDIBuilderRef() )
	{
		return;
	}
	unsafe
	{
		auto pointer_llvm_type= LLVMPointerType( variable.t.GetLLVMType(), 0u );
		auto di_type= LLVMDIBuilderCreatePointerType(
			builder_,
			CreateDIType( variable.t ),
			LLVMABISizeOfType( data_layout_, pointer_llvm_type ) * 8u64,
			LLVMABIAlignmentOfType( data_layout_, pointer_llvm_type ) * 8u32,
			0u, // address space
			ust::nullptr</char8/>(), 0s );

		auto di_variable= LLVMDIBuilderCreateAutoVariable(
			builder_,
			function_context.current_debug_info_scope,
			cast_mut(name).data(), name.size(),
			source_file_entries_[ size_type(src_loc.GetFileIndex()) ],
			src_loc.GetLine(),
			di_type,
			LLVMBool::False, // AlwaysPreserve
			LLVMDIFlags(0),
			LLVMABIAlignmentOfType( data_layout_, pointer_llvm_type ) * 8u32 );

		// We needs address for reference, so, move it into stack variable.
		auto address_for_ref= LLVMBuildAlloca( function_context.alloca_ir_builder, pointer_llvm_type, g_null_string );
		LLVMBuildStore( function_context.llvm_ir_builder, variable.llvm_value, address_for_ref );

		auto debug_location= LLVMDIBuilderCreateDebugLocation(
			llvm_context_,
			src_loc.GetLine(),
			src_loc.GetColumn(),
			function_context.current_debug_info_scope,
			Null::LLVMMetadataRef() );

		LLVMDIBuilderInsertDeclareAtEnd(
			builder_,
			address_for_ref,
			di_variable,
			LLVMDIBuilderCreateExpression( builder_, 0i64, 0s ),
			debug_location,
			LLVMGetInsertBlock(function_context.llvm_ir_builder) );
	}
}

fn DebugInfoBuilder::CreateGlobalVariableInfo( mut this, NamesScopePtr& parent_scope, Variable& variable, ust::string_view8 variable_name, SrcLoc& src_loc )
{
	if( builder_ == Null::LLVMDIBuilderRef() )
	{
		return;
	}

	if( parent_scope.lock_imut().deref().IsInsideTemplate() )
	{
		// There is no reason to create debug information for global variables inside templates.
		// It seems that debuggers struggle to show such global variables.
		return;
	}

	unsafe
	{
		var LLVMValueRef global_variable= LLVMIsAGlobalVariable( variable.llvm_value );
		if( global_variable != Null::LLVMValueRef() )
		{
			var LLVMMetadataRef scope= GetOrCreateNamespaceScope( parent_scope );

			var size_type mut mangled_name_len= 0s;
			var $(char8) mangled_name= LLVMGetValueName2( variable.llvm_value, mangled_name_len );

			var LLVMMetadataRef file= source_file_entries_[ size_type(src_loc.GetFileIndex()) ];

			var LLVMMetadataRef type_debug_info= CreateDIType( variable.t );

			var LLVMBool is_local_to_unit= LLVMBool::False; // Consider global variables non-local, since global mutable variables may be deduplicated.

			var LLVMMetadataRef var_info=
				LLVMDIBuilderCreateGlobalVariableExpression(
					builder_,
					scope,
					variable_name.data(), variable_name.size(),
					mangled_name, mangled_name_len,
					file,
					src_loc.GetLine(),
					type_debug_info,
					is_local_to_unit,
					Null::LLVMMetadataRef(),
					Null::LLVMMetadataRef(),
					0u );

			LLVMGlobalSetMetadata( global_variable, debug_metadata_kind_id_, var_info );
		}
	}
}

fn DebugInfoBuilder::GetOrCreateNamespaceScope( mut this, NamesScopePtr& names_scope ) : LLVMMetadataRef
{
	if_var( scope_debug_info : namespace_scopes_.find( names_scope ) )
	{
		return scope_debug_info;
	}

	with( &s : names_scope.lock_imut().deref() )
	{
		var ust::shared_ptr_nullable_imut</NamesScope/> parent_scope= s.GetParent();
		if( parent_scope.empty() )
		{
			return source_file_entries_.front();
		}

		var LLVMMetadataRef parent_scope_debug_info= GetOrCreateNamespaceScope( parent_scope.try_to_non_nullable() );

		var ust::string_view8 name= s.GetThisNamespaceName();

		var LLVMMetadataRef scope_debug_info=
			unsafe( LLVMDIBuilderCreateNameSpace( builder_, parent_scope_debug_info, name.data(), name.size(), LLVMBool::True ) );

		namespace_scopes_.insert_new( names_scope, scope_debug_info );

		return scope_debug_info;
	}
}

fn DebugInfoBuilder::CreateDIType( mut this, Type& t ) : LLVMMetadataRef
{
	if_var( &tt : t.GetFundamentalType() )
	{
		return CreateDITypeImpl( tt );
	}
	if_var( &tt : t.GetRawPointerType() )
	{
		return CreateDITypeImpl( tt );
	}
	if_var( &tt : t.GetFunctionPointerType() )
	{
		return CreateDITypeImpl( tt );
	}
	if_var( &tt : t.GetArrayType() )
	{
		return CreateDITypeImpl( tt );
	}
	if_var( &tt : t.GetTupleType() )
	{
		return CreateDITypeImpl( tt );
	}
	if_var( &tt : t.GetClassType() )
	{
		return CreateDITypeImpl( tt );
	}
	if_var( &tt : t.GetEnumType() )
	{
		return CreateDITypeImpl( tt );
	}

	return stub_type_;
}

fn DebugInfoBuilder::CreateDITypeImpl( mut this, FundamentalType& t ) : LLVMMetadataRef
{
	auto type_name= GetFundamentalTypeName( t.fundamental_type );

	if( t.fundamental_type == U_FundamentalType::void_ )
	{
		// Internal representation of void type is llvm struct with zero elements.
		auto di_file= source_file_entries_.front();

		return unsafe( LLVMDIBuilderCreateStructType(
			builder_,
			di_file,
			type_name.data(), type_name.size(),
			di_file,
			0u, // Line
			LLVMABISizeOfType( data_layout_, t.llvm_type ) * 8u64,
			LLVMABIAlignmentOfType( data_layout_, t.llvm_type ) * 8u32,
			LLVMDIFlags(0),
			Null::LLVMMetadataRef(), // DerivedFrom
			ust::nullptr</LLVMMetadataRef/>(), 0u, // elements
			0u, // RuntimeLang
			Null::LLVMMetadataRef(),// VTableHolder
			ust::nullptr</char8/>(), 0s ) );
	}

	var LLVMDWARFTypeEncoding mut encoding= LLVMDWARFTypeEncoding::unsigned;
	if( t.fundamental_type == U_FundamentalType::bool_ ){  encoding= LLVMDWARFTypeEncoding::boolean;        }
	else if( IsFloatingPoint( t.fundamental_type )     ){  encoding= LLVMDWARFTypeEncoding::float;          }
	else if( IsChar( t.fundamental_type )              ){  encoding= LLVMDWARFTypeEncoding::unsigned_char;  }
	else if( IsByte( t.fundamental_type )              ){  encoding= LLVMDWARFTypeEncoding::unsigned;       }
	else if( IsSignedInteger( t.fundamental_type )     ){  encoding= LLVMDWARFTypeEncoding::signed;         }
	else if( IsUnsignedInteger( t.fundamental_type )   ){  encoding= LLVMDWARFTypeEncoding::unsigned;       }

	return unsafe( LLVMDIBuilderCreateBasicType(
		builder_,
		type_name.data(), type_name.size(),
		LLVMABISizeOfType( data_layout_, t.llvm_type ) * 8u64,
		encoding,
		0u ) );
}

fn DebugInfoBuilder::CreateDITypeImpl( mut this, ArrayType& t ) : LLVMMetadataRef
{
	if( unsafe( LLVMTypeIsSized( t.llvm_type ) ) == LLVMBool::False )
	{
		return stub_type_;
	}

	unsafe
	{
		auto mut subrange= LLVMDIBuilderGetOrCreateSubrange( builder_, 0i64, i64(t.element_count) );
		return LLVMDIBuilderCreateArrayType(
			builder_,
			LLVMABISizeOfType( data_layout_, t.llvm_type ) * 8u64,
			LLVMABIAlignmentOfType( data_layout_, t.llvm_type ) * 8u,
			CreateDIType( t.element_type ),
			$<(subrange), 1u );
	}
}

fn DebugInfoBuilder::CreateDITypeImpl( mut this, TupleType& t ) : LLVMMetadataRef
{
	if( unsafe( LLVMTypeIsSized( t.llvm_type ) ) == LLVMBool::False )
	{
		return stub_type_;
	}

	scoped_array LLVMMetadataRef mut elements[ t.element_types.size() ]( Null::LLVMMetadataRef() );

	auto di_file= source_file_entries_.front();

	for( auto mut i= 0s; i < t.element_types.size(); ++i )
	{
		var ust::string8 name= ust::to_string8(i);
		var Type& element_type= t.element_types[i];
		var LLVMMetadataRef element_di_type= CreateDIType( element_type );
		var LLVMTypeRef llvm_element_type= element_type.GetLLVMType();

		elements[i]=
			unsafe( LLVMDIBuilderCreateMemberType(
				builder_,
				di_file,
				cast_mut(name).data(), name.size(),
				di_file,
				0u, // Line
				LLVMABISizeOfType( data_layout_, llvm_element_type ) * 8u64,
				LLVMABIAlignmentOfType( data_layout_, llvm_element_type ) * 8u32,
				LLVMOffsetOfElement( data_layout_, t.llvm_type, u32(i) ) * 8u64,
				LLVMDIFlags(0),
				element_di_type) );
	}

	var ust::string8 name= Type(t).ToString();

	return unsafe( LLVMDIBuilderCreateStructType(
		builder_,
		di_file,
		cast_mut(name).data(), name.size(),
		di_file,
		0u, // Line
		LLVMABISizeOfType( data_layout_, t.llvm_type ) * 8u64,
		LLVMABIAlignmentOfType( data_layout_, t.llvm_type ) * 8u32,
		LLVMDIFlags(0),
		Null::LLVMMetadataRef(), // DerivedFrom
		elements.data(), u32(elements.size()),
		0u, // RuntimeLang
		Null::LLVMMetadataRef(),// VTableHolder
		ust::nullptr</char8/>(), 0s ) );
}

fn DebugInfoBuilder::CreateDITypeImpl( mut this, RawPointerType& t ) : LLVMMetadataRef
{
	return unsafe( LLVMDIBuilderCreatePointerType(
		builder_,
		CreateDIType( t.element_type ),
		LLVMABISizeOfType( data_layout_, t.llvm_type ) * 8u64,
		LLVMABIAlignmentOfType( data_layout_, t.llvm_type ) * 8u32,
		0u, // address space
		ust::nullptr</char8/>(), 0s ) );
}

fn DebugInfoBuilder::CreateDITypeImpl( mut this, FunctionPointerType& t ) : LLVMMetadataRef
{
	return unsafe( LLVMDIBuilderCreatePointerType(
		builder_,
		CreateFunctionDIType( t.function_type ),
		LLVMABISizeOfType( data_layout_, t.llvm_type ) * 8u64,
		LLVMABIAlignmentOfType( data_layout_, t.llvm_type ) * 8u32,
		0u, // address space
		ust::nullptr</char8/>(), 0s ) );
}

fn DebugInfoBuilder::CreateDITypeImpl( mut this, ClassTypePtr& t ) : LLVMMetadataRef
{
	if_var( cache_value : classes_di_types_.find( t ) )
	{
		return cache_value;
	}

	auto class_lock= t.lock_imut();
	var ClassType& class_type= class_lock.deref();
	var SrcLoc mut src_loc;
	if_var( &syntax_element : class_type.syntax_element )
	{
		src_loc= syntax_element.src_loc;
	}

	auto di_file= source_file_entries_[ size_type(src_loc.GetFileIndex()) ];

	var ust::string8 name= Type(t).ToString();

	auto forward_declaration=
		unsafe( LLVMDIBuilderCreateReplaceableCompositeType(
			builder_,
			2u, // DW_TAG_class_type
			cast_mut(name).data(), name.size(),
			di_file,
			di_file,
			src_loc.GetLine(),
			0u, // RuntimeLang
			0u64, // Size
			0u, // Alignment
			0u, // Flags
			ust::nullptr</char8/>(), 0s ) );

	// Insert stub first to prevent loops.
	classes_di_types_.insert_new( t, forward_declaration );
	classes_order_.push_back( t );
	return forward_declaration;
}

fn DebugInfoBuilder::CreateDITypeImpl( mut this, EnumTypePtr& t ) : LLVMMetadataRef
{
	if_var( cache_value : enums_di_types_.find( t ) )
	{
		return cache_value;
	}

	auto enum_lock= t.lock_imut();
	var Enum& enum_= enum_lock.deref();

	// Collect enum elements and sort them by enum numeric value.
	// Avoid emitting debug info in hashmap order.

	type NamedEnumElement = tup[ ust::string8, u64 ];

	scoped_array NamedEnumElement mut raw_elements[ enum_.elements.size() ]( ust::make_tuple( ust::string8(), 0u64 ) );
	foreach( pair : enum_.elements.iter().zip( raw_elements.iter() ) )
	{
		var LLVMValueRef constexpr_value= pair.first.value().constexpr_value;
		pair.second= ust::make_tuple( pair.first.key(), unsafe( LLVMConstIntGetZExtValue(constexpr_value ) ) );
	}

	ust::sort_by_key( raw_elements, lambda[]( NamedEnumElement& el ) : u64 { return el[1]; } );

	scoped_array LLVMMetadataRef mut elements[ raw_elements.size() ]( Null::LLVMMetadataRef() );
	foreach( pair : raw_elements.iter().zip( elements.iter() ) )
	{
		pair.second=
			unsafe( LLVMDIBuilderCreateEnumerator(
				builder_,
				cast_mut(pair.first[0]).data(), pair.first[0].size(),
				i64(pair.first[1]),
				LLVMBool::False ) );
	}

	var SrcLoc& src_loc= enum_.syntax_element.deref().src_loc;
	auto di_file= source_file_entries_[ size_type(src_loc.GetFileIndex()) ];

	var ust::string8 name= Type(t).ToString();

	auto di_type= unsafe( LLVMDIBuilderCreateEnumerationType(
		builder_,
		di_file,
		cast_mut(name).data(), name.size(),
		di_file,
		src_loc.GetLine(),
		LLVMABISizeOfType( data_layout_, enum_.underlying_type.llvm_type ) * 8u64,
		LLVMABIAlignmentOfType( data_layout_, enum_.underlying_type.llvm_type ) * 8u32,
		elements.data(), u32(elements.size()),
		CreateDITypeImpl(enum_.underlying_type) ) );

	enums_di_types_.insert_new( t, di_type );
	return di_type;
}

fn DebugInfoBuilder::CreateFunctionDIType( mut this, FunctionType& t ) : LLVMMetadataRef
{
	var ust::vector</LLVMMetadataRef/> mut di_types;
	{
		auto mut di_type= CreateDIType( t.return_type );
		if( t.return_value_type != ValueType::Value )
		{
			unsafe
			{
				auto pointer_llvm_type= LLVMPointerType( t.return_type.GetLLVMType(), 0u );
				di_type= LLVMDIBuilderCreatePointerType(
					builder_,
					di_type,
					LLVMABISizeOfType( data_layout_, pointer_llvm_type ) * 8u64,
					LLVMABIAlignmentOfType( data_layout_, pointer_llvm_type ) * 8u32,
					0u, // address space
					ust::nullptr</char8/>(), 0s );
			}
		}

		di_types.push_back( di_type );
	}

	foreach( &param : t.params )
	{
		auto mut di_type= CreateDIType( param.t );
		if( param.value_type != ValueType::Value )
		{
			unsafe
			{
				auto pointer_llvm_type= LLVMPointerType( param.t.GetLLVMType(), 0u );
				di_type= LLVMDIBuilderCreatePointerType(
					builder_,
					di_type,
					LLVMABISizeOfType( data_layout_, pointer_llvm_type ) * 8u64,
					LLVMABIAlignmentOfType( data_layout_, pointer_llvm_type ) * 8u32,
					0u, // address space
					ust::nullptr</char8/>(), 0s );
			}
		}
		di_types.push_back( di_type );
	}

	return unsafe( LLVMDIBuilderCreateSubroutineType(
		builder_,
		source_file_entries_.front(),
		di_types.data(), u32( di_types.size() ),
		LLVMDIFlags(0) ) );
}

fn DebugInfoBuilder::BuildClassTypeFullDebugInfo( mut this, ClassTypePtr& class_ ) : LLVMMetadataRef
{
	// Create stub first.
	// It is important, since we need to create cache value for this class, even if it was not referenced previously,
	// because we need to build proper debug info for it in case if it will be requested by BuildClassTypeFullDebugInfo call for other class,
	// (that for example contains this class).
	CreateDITypeImpl( class_ );

	auto class_lock= class_.lock_imut();
	var ClassType& class_type= class_lock.deref();
	var SrcLoc mut src_loc;
	if_var( &syntax_element : class_type.syntax_element )
	{
		src_loc= syntax_element.src_loc;
	}

	auto di_file= source_file_entries_[ size_type(src_loc.GetFileIndex()) ];

	var ust::vector</LLVMMetadataRef/> mut elements;
	var u64 mut size_in_bits(1);
	var u32 mut alignment_in_bits(1);

	if( class_type.is_complete && // Build proper info for complete clases.
		!class_type.generated_class_data.has</ TypeinfoClassDescription />() ) // Skip typeinfo structs because of potential dependency loops.
	{
		foreach( &field_pair : class_type.fields_order )
		{
			var ust::string8& field_name= field_pair[0];
			auto field_lock= field_pair[1].lock_imut();
			var ClassField& field= field_lock.deref();

			if( field.index == ~0u ){ continue; } // May be in case of error

			var LLVMMetadataRef mut element_di_type= CreateDIType( field.t );
			var LLVMTypeRef mut llvm_element_type= field.t.GetLLVMType();

			if( field.is_reference )
			{
				auto pointer_llvm_type= unsafe( LLVMPointerType( llvm_element_type, 0u ) );
				element_di_type= unsafe( LLVMDIBuilderCreatePointerType(
					builder_,
					element_di_type,
					LLVMABISizeOfType( data_layout_, pointer_llvm_type ) * 8u64,
					LLVMABIAlignmentOfType( data_layout_, pointer_llvm_type ) * 8u32,
					0u, // address space
					ust::nullptr</char8/>(), 0s ) );
				llvm_element_type= pointer_llvm_type;
			}

			elements.push_back(
				unsafe( LLVMDIBuilderCreateMemberType(
					builder_,
					di_file,
					cast_mut(field_name).data(), field_name.size(),
					di_file,
					0u, // Line
					LLVMABISizeOfType( data_layout_, llvm_element_type ) * 8u64,
					LLVMABIAlignmentOfType( data_layout_, llvm_element_type ) * 8u32,
					LLVMOffsetOfElement( data_layout_, class_type.llvm_type, u32(field.index) ) * 8u64,
					LLVMDIFlags(0),
					element_di_type) ) );
		}

		foreach( &parent : class_type.parents )
		{
			var LLVMMetadataRef parent_di_type= CreateDIType( parent.class_ );
			var LLVMTypeRef llvm_element_type= parent.class_.lock_imut().deref().llvm_type;
			var ust::string8 name= Type(parent.class_).ToString();

			elements.push_back(
				unsafe( LLVMDIBuilderCreateMemberType(
					builder_,
					di_file,
					cast_mut(name).data(), name.size(),
					di_file,
					0u, // Line
					LLVMABISizeOfType( data_layout_, llvm_element_type ) * 8u64,
					LLVMABIAlignmentOfType( data_layout_, llvm_element_type ) * 8u32,
					LLVMOffsetOfElement( data_layout_, class_type.llvm_type, parent.field_number ) * 8u64,
					LLVMDIFlags(0),
					parent_di_type ) ) );
		}

		size_in_bits= unsafe( LLVMABISizeOfType( data_layout_, class_type.llvm_type ) ) * 8u64;
		alignment_in_bits= unsafe( LLVMABIAlignmentOfType( data_layout_, class_type.llvm_type ) ) * 8u32;
	}
	else
	{
		// Leave fields list empty and use stub size/alignment for incomplete classes (in case of error).
	}

	var ust::string8 name= Type(class_).ToString();

	auto di_type= unsafe( LLVMDIBuilderCreateStructType(
		builder_,
		di_file,
		cast_mut(name).data(), name.size(),
		di_file,
		src_loc.GetLine(),
		size_in_bits,
		alignment_in_bits,
		LLVMDIFlags(0),
		Null::LLVMMetadataRef(), // DerivedFrom
		elements.data(), u32(elements.size()),
		0u, // RuntimeLang
		Null::LLVMMetadataRef(),// VTableHolder
		ust::nullptr</char8/>(), 0s ) );

	return di_type;
}

} // namespace U1
