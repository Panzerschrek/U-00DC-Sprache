import "../lex_synt_lib/source_graph.uh"
import "function_context.uh"

namespace U1
{

class DebugInfoBuilder
{
public:
	fn constructor(
		LLVMContextRef llvm_context,
		LLVMTargetDataRef data_layout,
		SourceGraph& source_graph,
		LLVMModuleRef mod,
		bool build_debug_info );

	fn destructor();

	fn CreateFunctionInfo( mut this, FunctionVariable& func_variable );

	fn SetCurrentLocation( mut this, FunctionContext& function_context, SrcLoc& src_loc );
	fn nodiscard StartBlock( mut this, FunctionContext &mut function_context, SrcLoc& src_loc ) : LLVMMetadataRef;
	fn EndBlock( mut this, FunctionContext &mut function_context, LLVMMetadataRef prev_block );

	fn CreateVariableInfo( mut this, FunctionContext& function_context, Variable& variable, ust::string8& name, SrcLoc& src_loc );
	fn CreateReferenceVariableInfo( mut this, FunctionContext& function_context, Variable& variable, ust::string8& name, SrcLoc& src_loc );

private:
	fn CreateDIType( mut this, Type& t ) : LLVMMetadataRef;
	fn CreateDITypeImpl( mut this, FundamentalType& t ) : LLVMMetadataRef;
	fn CreateDITypeImpl( mut this, ArrayType& t ) : LLVMMetadataRef;
	fn CreateDITypeImpl( mut this, TupleType& t ) : LLVMMetadataRef;
	fn CreateDITypeImpl( mut this, RawPointerType& t ) : LLVMMetadataRef;
	fn CreateDITypeImpl( mut this, FunctionPointerType& t ) : LLVMMetadataRef;
	fn CreateDITypeImpl( mut this, ClassTypePtr& t ) : LLVMMetadataRef;
	fn CreateDITypeImpl( mut this, EnumTypePtr& t ) : LLVMMetadataRef;

	fn CreateFunctionDIType( mut this, FunctionType& t ) : LLVMMetadataRef;

	fn BuildClassTypeFullDebugInfo( mut this, ClassTypePtr& class_ ) : LLVMMetadataRef;

private:
	LLVMContextRef imut llvm_context_;
	LLVMTargetDataRef imut data_layout_;

	LLVMDIBuilderRef builder_= LLVMDIBuilderRef::Null;
	ust::vector</LLVMMetadataRef/> source_file_entries_; // Entry for each file in sources graph.
	LLVMMetadataRef compile_unit_= LLVMMetadataRef::Null;

	LLVMMetadataRef stub_type_= LLVMMetadataRef::Null;

	// Cache of debug info types for classes and enums.
	ust::unordered_map</ ClassTypePtr, LLVMMetadataRef /> classes_di_types_;
	// Populate this vector in order to perform full debug info building for classes properly.
	ust::vector</ ClassTypePtr /> classes_order_;

	// Cache of debug info types for enums.
	ust::unordered_map</ EnumTypePtr, LLVMMetadataRef /> enums_di_types_;
}

} // namespace U1
