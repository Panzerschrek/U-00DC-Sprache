import "/scoped_array.u"
import "/CodeBuilderLib/keywords.uh"
import "error_reporting.uh"
import "code_builder.uh"

namespace U1
{

fn CodeBuilder::PrepareType( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::TypeName& type_name ) : Type
{
	variant_visit( &t : type_name )
	{
		return PrepareTypeImpl( names_scope, function_context, t );
	}

	halt;
}

fn CodeBuilder::PrepareTypeImpl( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::ComplexName& named_type ) : Type
{
	var Value resolved_value= ResolveValue( names_scope, function_context, named_type );
	if_var( & t : resolved_value.get</Type/>() )
	{
		return t;
	}

	REPORT_ERROR( NameIsNotTypeName, names_scope, Synt::GetSrcLoc(named_type), GetValueKindName(resolved_value) )
	return Type( FundamentalType( U_FundamentalType::InvalidType, fundamental_llvm_types_.invalid_type_ ) );
}

fn CodeBuilder::PrepareTypeImpl( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::ArrayType& array_type ) : Type
{
	var Type mut element_type= PrepareType( names_scope, function_context, array_type.element_type );

	var u64 mut element_count(0);

	WithVariablesFrame(
		function_context,
		lambda[&]( CodeBuilder &mut self, FunctionContext &mut function_context )
		{
			var bool prev_is_functionless_context= function_context.is_functionless_context;
			function_context.is_functionless_context= true;

			auto state= SaveFunctionContextState( function_context );
			with( &index_variable: self.BuildExpressionCodeEnsureVariable( names_scope, function_context, array_type.element_count ).lock_imut().deref() )
			{
				if( index_variable.constexpr_value != LLVMValueRef::Null )
				{
					{
						if_var( &fundamental_type : index_variable.t.GetFundamentalType() )
						{
							if( IsInteger( fundamental_type.fundamental_type ) )
							{
								if( IsSignedInteger( fundamental_type.fundamental_type ) )
								{
									auto s= unsafe( LLVMConstIntGetSExtValue( index_variable.constexpr_value ) );
									if( s >= 0i64 )
									{
										element_count= u64(s);
									}
									else
									{
										element_count= 0u64;
										REPORT_ERROR( ArraySizeIsNegative, names_scope, array_type.src_loc  )
									}
								}
								else
								{
									element_count= unsafe( LLVMConstIntGetZExtValue( index_variable.constexpr_value ) );
								}
								break label integer_check;
							}
						}
						REPORT_ERROR( ArraySizeIsNotInteger, names_scope, array_type.src_loc )

					} label integer_check
				}
				else
				{
					REPORT_ERROR( ExpectedConstantExpression, names_scope, array_type.src_loc )
				}
			}

			RestoreFunctionContextState( function_context, state );

			function_context.is_functionless_context= prev_is_functionless_context;
		} );

	return ArrayType
	{
		.llvm_type= unsafe( LLVMArrayType2( element_type.GetLLVMType(), element_count ) ),
		.element_type= move(element_type),
		.element_count= element_count,
	};
}


fn CodeBuilder::PrepareTypeImpl( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::TupleType& tuple_type ) : Type
{
	var TupleType mut out_tuple_type
	{
		.element_types=
			ust::make_vector_from_mapped_range(
				tuple_type.elements,
				lambda[&self= this, &names_scope, &function_context]( Synt::TypeName& element ) : Type
				{
					return self.PrepareType( names_scope, function_context, element );
				} ),
	};

	scoped_array LLVMTypeRef mut element_llvm_types[ out_tuple_type.element_types.size() ]( out_tuple_type.element_types.iter().map( Type::GetLLVMType ) );

	out_tuple_type.llvm_type= unsafe( LLVMStructTypeInContext( llvm_context_, element_llvm_types.data(), u32(element_llvm_types.size()), LLVMBool::False ) );

	return out_tuple_type;
}

fn CodeBuilder::PrepareTypeImpl( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::RawPointerType& raw_pointer_type ) : Type
{
	var RawPointerType mut out_type{ .element_type = PrepareType( names_scope, function_context, raw_pointer_type.element_type ) };
	out_type.llvm_type= unsafe( LLVMPointerType( out_type.element_type.GetLLVMType(), 0u ) );

	return out_type;
}

fn CodeBuilder::PrepareTypeImpl( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::FunctionType& function_type ) : Type
{
	if( function_type.IsAutoReturn() )
	{
		REPORT_ERROR( AutoForFunctionTypeReturnType, names_scope, function_type.src_loc )
	}

	var FunctionType mut res= PrepareFunctionType( names_scope, function_context, function_type, ust::shared_ptr_nullable_mut</ClassType/>() );
	return FunctionTypeToPointer( move(res) );
}

fn CodeBuilder::PrepareTypeImpl( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::CoroutineType& coroutine_type ) : Type
{
	var CoroutineTypeDescription mut coroutine_type_description
	{
		.kind= coroutine_type.kind,
		.return_type= PrepareType( names_scope, function_context, coroutine_type.return_type ),
		.return_value_type= ( coroutine_type.return_value_reference_modifier == Synt::ReferenceModifier::Reference
			? ( coroutine_type.return_value_mutability_modifier == Synt::MutabilityModifier::Mutable
				? ValueType::ReferenceMut
				: ValueType::ReferenceImut )
			: ValueType::Value ),
		.non_sync_= ImmediateEvaluateNonSyncTag( names_scope, function_context, coroutine_type.non_sync_tag ),
		.inner_references=
			ust::make_vector_from_mapped_range(
				coroutine_type.inner_reference_tags,
				lambda( Synt::MutabilityModifier m ) : auto
				{
					return ( m == Synt::MutabilityModifier::Mutable ? InnerReferenceKind::Mut : InnerReferenceKind::Imut );
				} ),
	};

	if( !coroutine_type_description.non_sync_ && GetTypeNonSync( coroutine_type_description.return_type, names_scope, coroutine_type.src_loc  ) )
	{
		REPORT_ERROR( CoroutineNonSyncRequired, names_scope, coroutine_type.src_loc )
	}

	auto num_params= 1s;
	if_var( &return_value_reference_expression : coroutine_type.return_value_reference_expression )
	{
		coroutine_type_description.return_references= EvaluateFunctionReturnReferences( names_scope, function_context, return_value_reference_expression, num_params );
	}
	if_var( &return_value_inner_references_expression : coroutine_type.return_value_inner_references_expression )
	{
		coroutine_type_description.return_inner_references= EvaluateFunctionReturnInnerReferences( names_scope, function_context, return_value_inner_references_expression, num_params );
	}

	// For now there is no reason to process reference tag.
	// Assume, that if generator returns a reference, it points to single possible reference tag - inner reference tag.
	return GetCoroutineType( GetRootNamespace( names_scope ), coroutine_type_description );
}

fn CodeBuilder::PrepareTypeImpl( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, ust::shared_ptr_final</Synt::Mixin/>& mixin_ ) : Type
{
	if_var( &type_name : ExpandTypeNameMixin( names_scope, function_context, mixin_ ) )
	{
		return PrepareType( names_scope, function_context, type_name );
	}

	return invalid_type_; // An error should be generated earlier.
}

fn CodeBuilder::PrepareFunctionType( mut this, NamesScopePtr& names_scope, FunctionContext &mut function_context, Synt::FunctionType& function_type, ust::shared_ptr_nullable_mut</ClassType/>& class_type ) : FunctionType
{
	var FunctionType mut res
	{
		.return_type(
			( function_type.return_type.empty() || function_type.IsAutoReturn()
				? Type( void_type_ )
				: PrepareType( names_scope, function_context, function_type.return_type.try_deref() ) ) ),
		.return_value_type= ValueType::Value,
		.is_unsafe= function_type.is_unsafe,
		.calling_convention= PrepareCallingConvention( names_scope, function_context, function_type.calling_convention ),
	};

	if( function_type.return_value_reference_modifier == Synt::ReferenceModifier::Reference )
	{
		res.return_value_type= ( function_type.return_value_mutability_modifier == Synt::MutabilityModifier::Mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut );
	}

	foreach( &param : function_type.params )
	{
		var FunctionType::Param mut out_param
		{
			.t( invalid_type_ ),
			.value_type= ValueType::Value,
		};

		if( param.reference_modifier == Synt::ReferenceModifier::Reference )
		{
			out_param.value_type= ( param.mutability_modifier == Synt::MutabilityModifier::Mutable ? ValueType::ReferenceMut : ValueType::ReferenceImut );
		}

		if( param.name == KeywordToString( Keyword::this_ ) )
		{
			if( class_type.empty() )
			{
				REPORT_ERROR( ThisInNonclassFunction, names_scope, param.src_loc )
			}
			else if( ust::ref_cmp_ne( param, function_type.params.front() ) )
			{
				REPORT_ERROR( UsingKeywordAsName, names_scope, param.src_loc )
			}
			else
			{
				auto mut param_ok= false;
				if_var( &param_type_complex_name : param.t.get</Synt::ComplexName/>() )
				{
					if_var( &name_lookup : param_type_complex_name.get</Synt::NameLookup/>() )
					{
						param_ok= name_lookup.name.empty();
					}
				}
				if( !param_ok )
				{
					REPORT_ERROR( UsingKeywordAsName, names_scope, param.src_loc )
				}

				out_param.t= class_type.try_to_non_nullable();
			}
		}
		else
		{
			if( IsKeyword( param.name ) )
			{
				REPORT_ERROR( UsingKeywordAsName, names_scope, param.src_loc )
			}

			out_param.t= PrepareType( names_scope, function_context, param.t );
		}

		res.params.push_back( move(out_param) );
	}

	auto num_params= res.params.size();
	if_var( &references_pollution_expression : function_type.references_pollution_expression )
	{
		res.references_pollution= EvaluateFunctionReferencePollution( names_scope, function_context, references_pollution_expression, num_params );
	}
	if_var( &return_value_reference_expression : function_type.return_value_reference_expression )
	{
		res.return_references= EvaluateFunctionReturnReferences( names_scope, function_context, return_value_reference_expression, num_params );
	}
	if_var( &return_value_inner_references_expression : function_type.return_value_inner_references_expression )
	{
		res.return_inner_references= EvaluateFunctionReturnInnerReferences( names_scope, function_context, return_value_inner_references_expression, num_params );
	}

	// Generate mapping of input references to output references if return reference notation is not specified.
	// Assume that immutable return reference may point to any reference param and mutable return reference only to mutable reference params.
	if( res.return_value_type != ValueType::Value &&
		function_type.return_value_reference_expression.empty() &&
		function_type.return_value_inner_references_expression.empty() )
	{
		for( auto mut i= 0s; i < res.params.size(); ++i )
		{
			if( ( res.return_value_type == ValueType::ReferenceImut && res.params[i].value_type != ValueType::Value ) ||
				( res.return_value_type == ValueType::ReferenceMut  && res.params[i].value_type == ValueType::ReferenceMut ) )
			{
				res.return_references.push_back( FunctionType::ParamReference{ .param_index= u8(i), .reference_index= FunctionType::c_param_reference_number } );
			}
		}
		NormalizeParamReferencesList( res.return_references );
	}

	return res;
}

fn CodeBuilder::GetLLVMFunctionType( mut this, FunctionType& function_type ) : LLVMTypeRef
{
	if( function_type.return_value_type == ValueType::Value )
	{
		EnsureTypeComplete( function_type.return_type );
	}

	foreach( &param : function_type.params )
	{
		if( param.value_type == ValueType::Value )
		{
			EnsureTypeComplete( param.t );
		}
	}

	var ICallingConventionInfo::CallInfo call_info=
		calling_convention_infos_[ size_type( function_type.calling_convention ) ].lock_imut().deref().CalculateFunctionCallInfo( function_type );

	return GetLLVMFunctionType( function_type, call_info );
}

fn CodeBuilder::GetLLVMFunctionType( mut this, FunctionType& function_type, ICallingConventionInfo::CallInfo& call_info ) : LLVMTypeRef
{
	var ust::vector</LLVMTypeRef/> mut llvm_param_types;
	var LLVMTypeRef mut ret_llvm_type= LLVMTypeRef::Null;

	if( function_type.return_value_type == ValueType::Value )
	{
		if( function_type.return_type == void_type_ )
		{
			ret_llvm_type= fundamental_llvm_types_.void_for_ret_;
		}
		else
		{
			switch( call_info.return_value_passing.kind )
			{
				ICallingConventionInfo::ReturnValuePassingKind::Direct,
				ICallingConventionInfo::ReturnValuePassingKind::DirectZExt,
				ICallingConventionInfo::ReturnValuePassingKind::DirectSExt ->
				{
					ret_llvm_type= call_info.return_value_passing.llvm_type;
				},
				ICallingConventionInfo::ReturnValuePassingKind::ByPointer ->
				{
					ret_llvm_type= fundamental_llvm_types_.void_for_ret_;
					llvm_param_types.push_back( unsafe( LLVMPointerType( function_type.return_type.GetLLVMType(), 0u ) ) );
				},
			}
		}
	}
	else
	{
		ret_llvm_type= unsafe( LLVMPointerType( function_type.return_type.GetLLVMType(), 0u ) );
	}

	foreach( &argument_passing : call_info.arguments_passing )
	{
		llvm_param_types.push_back( argument_passing.llvm_type );
	}

	return unsafe( LLVMFunctionType( ret_llvm_type, llvm_param_types.data(), u32(llvm_param_types.size()), LLVMBool::False ) );
}

fn CodeBuilder::FunctionTypeToPointer( mut this, FunctionType mut function_type ) : FunctionPointerType
{
	return FunctionPointerType
	{
		.function_type= move(function_type),
		.llvm_type= unsafe( LLVMPointerTypeInContext( llvm_context_, 0u ) )
	};
}

fn CodeBuilder::PrepareCallingConvention(
	mut this,
	NamesScopePtr& names_scope,
	FunctionContext &mut function_context,
	ust::box_nullable</Synt::Expression/>& calling_convention_name ) : CallingConvention
{
	if( calling_convention_name.empty() )
	{
		return CallingConvention::Default;
	}

	var Synt::Expression& expr= calling_convention_name.try_deref();

	var VariableLite v= BuildExpressionCodeEnsureVariable( names_scope, function_context, expr );

	if_var( &array_type : v.t.GetArrayType() )
	{
		if_var( &fundamental_type : array_type.element_type.GetFundamentalType() )
		{
			if( fundamental_type.fundamental_type == U_FundamentalType::char8_ )
			{
				if( v.constexpr_value != LLVMValueRef::Null )
				{
					if( unsafe( LLVMIsAConstantDataArray( v.constexpr_value ) ) != LLVMValueRef::Null )
					{
						var size_type mut str_length= 0s;
						var $(char8) str_start= unsafe( LLVMGetAsString( v.constexpr_value, str_length ) );
						auto name_str= unsafe( ust::string_view8( str_start, str_length ) );

						if_var( cc : StringToCallingConvention( name_str ) )
						{
							return cc;
						}

						REPORT_ERROR( UnknownCallingConvention, names_scope, Synt::GetSrcLoc( expr ) , name_str )
						return CallingConvention::Default;
					}
					else
					{
						REPORT_ERROR( UnknownCallingConvention, names_scope, Synt::GetSrcLoc( expr ) , "<non-trivial constant expression>" )
						return CallingConvention::Default;
					}
				}
				else
				{
					REPORT_ERROR( ExpectedConstantExpression, names_scope, Synt::GetSrcLoc( expr ) )
					return CallingConvention::Default;
				}
			}
		}
	}

	REPORT_ERROR( TypesMismatch, names_scope, Synt::GetSrcLoc( expr ), "char8 array", v.t )
	return CallingConvention::Default;
}

fn CodeBuilder::GetLLVMCallingConvention( this, CallingConvention calling_convention ) : LLVMCallConvID
{
	switch( calling_convention )
	{
		CallingConvention::Default -> { return LLVMCallConv::Fast; }, // Use fast calling convention, which should be generally faster compared to C calling convention.
		CallingConvention::C -> { return LLVMCallConv::C; },
		CallingConvention::Fast -> { return LLVMCallConv::Fast; },
		CallingConvention::Cold -> { return LLVMCallConv::Cold; },
		CallingConvention::System ->
		{
			if( target_triple_str_ == "i686-pc-windows-gnu\0" ||
				target_triple_str_ == "i686-pc-windows-msvc\0" )
			{
				return LLVMCallConv::X86Stdcall;
			}

			return LLVMCallConv::C;
		},
	}
}

} // namespace U1
