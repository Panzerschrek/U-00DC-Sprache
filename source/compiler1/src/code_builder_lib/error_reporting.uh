import "/composite.u"
import "/random_access_range.u"
import "/string_conversions.u"
import "/vector.u"
import "code_builder_errors.uh"
import "../lex_synt_lib/syntax_analyzer.uh"
import "structs_combined.uh"

// Perform almost all errors preprocessing code in separate function instead of doing this in inline macro.
// Doing so prevent inlining of error processing code, because this code generally is rarely executed.

?macro <? REPORT_ERROR:block ( ?error_code:ident, ?names_scope:expr, ?src_loc:expr ?args:rep<? , ?arg:expr ?> ) ?> ->
<?
	PutErrorIntoContainer(
		?names_scope,
		ReportError( CodeBuilderErrorCode::?error_code, ?src_loc ?args<? , ?arg ?> ) );
?>

namespace U1
{

fn ReportError( CodeBuilderErrorCode code, SrcLoc& src_loc ) : CodeBuilderError
{
	return ReportErrorImpl( code, src_loc, ust::array_view_imut</ust::string8/>() );
}

template</ type A />
fn ReportError( CodeBuilderErrorCode code, SrcLoc& src_loc, A& param0 ) : CodeBuilderError
{
	return ReportErrorImpl( code, src_loc, ust::make_array( PreprocessErrorArg(param0) ) );
}

template</ type A, type B />
fn ReportError( CodeBuilderErrorCode code, SrcLoc& src_loc, A& param0, B& param1 ) : CodeBuilderError
{
	return ReportErrorImpl( code, src_loc, ust::make_array( PreprocessErrorArg(param0), PreprocessErrorArg( param1 ) ) );
}

template</ type A, type B, type C />
fn ReportError( CodeBuilderErrorCode code, SrcLoc& src_loc, A& param0, B& param1, C& param2 ) : CodeBuilderError
{
	return ReportErrorImpl( code, src_loc, ust::make_array( PreprocessErrorArg(param0), PreprocessErrorArg( param1 ), PreprocessErrorArg( param2 ) ) );
}

template</ type A, type B, type C, type D />
fn ReportError( CodeBuilderErrorCode code, SrcLoc& src_loc, A& param0, B& param1, C& param2, D& param3 ) : CodeBuilderError
{
	return ReportErrorImpl( code, src_loc, ust::make_array( PreprocessErrorArg(param0), PreprocessErrorArg( param1 ), PreprocessErrorArg( param2 ), PreprocessErrorArg( param3 ) ) );
}

template</type T/>
fn PreprocessErrorArg( T& x ) : ust::string8
{
	return ust::to_string8(x);
}

template</size_type s/>
fn PreprocessErrorArg( [char8, s]& str ) : ust::string8
{
	return str;
}

fn PreprocessErrorArg( Type& t ) : ust::string8
{
	return t.ToString();
}

fn PreprocessErrorArg( ust::string8 s ) : ust::string8
{
	return s;
}

fn PreprocessErrorArg( ust::string_view8 s ) : ust::string8
{
	return s;
}

fn ReportErrorImpl( CodeBuilderErrorCode code, SrcLoc& src_loc, ust::array_view_imut</ust::string8/> format_args ) : CodeBuilderError;

fn PutErrorIntoContainer( NamesScopePtr& names_scope, CodeBuilderError mut error );

fn NormalizeErrors( ErrorsContainer &mut errors, Synt::MacroExpansionContexts& macro_expansion_contexts );

} // namespace U1
