import "constexpr_function_evaluator.uh"


namespace U1
{

fn ErrorHandlerFunc( byte8 &mut user_data, $(char8) error_text_start, size_type error_text_size ) unsafe call_conv( "C" )
{
	unsafe
	{
		auto &mut errors_container= cast_ref_unsafe</ ust::vector</ ust::string8 /> />(user_data);
		errors_container.push_back( ust::string_view8( error_text_start, error_text_size ) );
	}
}

fn ConstexprFunctionEvaluator::constructor( LLVMTargetDataRef data_layout )
{
	impl_= unsafe( U1_ConstexprFunctionEvaluatorCreate( data_layout ) );
}

fn ConstexprFunctionEvaluator::destructor()
{
	unsafe( U1_ConstexprFunctionEvaluatorDestroy( impl_ ) );
}

fn ConstexprFunctionEvaluator::Evaluate(
	mut this, LLVMValueRef function, ust::array_view_imut</LLVMValueRef/> args, LLVMTypeRef return_type ) : Result
{
	var ust::vector</ ust::string8 /> mut errors;

	var LLVMValueRef constant=
		unsafe(
			U1_ConstexprFunctionEvaluatorEvaluate(
				impl_,
				function,
				args.data(),
				args.size(),
				return_type,
				ConstexprFunctionEvaluatorErrorHandlerFunc( ErrorHandlerFunc ),
				cast_ref_unsafe</byte8/>( errors ) ) );

	if( !errors.empty() || constant == LLVMValueRef::Null )
	{
		return errors;
	}
	else
	{
		return constant;
	}
}

} // namespace U1
