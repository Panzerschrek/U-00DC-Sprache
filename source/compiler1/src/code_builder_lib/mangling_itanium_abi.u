import "/assert.u"
import "/helpers.u"
import "/string_conversions.u"
import "/CodeBuilderLib/keywords.uh"
import "mangling.uh"

// Use this macro to add node into mangled name which is counted as substitution unit.
// Termainal instructions in passed block are not allowed.
?macro <? ADD_NODE:block( ?mangler_state:ident ) ?b:block?>
->
<?
	{
		auto ??start= ?mangler_state.GetCurrentPos();
		auto ??compressed_start= ?mangler_state.GetCurrentCompressedPos();
		?b
		?mangler_state.FinalizePart( ??start, ??compressed_start );
	}
?>

namespace U1
{

fn CreateManglerItaniumABI() : ust::box</IMangler/>
{
	return ust::make_box(ManglerItaniumABI());
}

class ManglerItaniumABI final : IMangler
{
public:
	fn virtual override MangleFunction(
		mut this,
		NamesScope& parent_scope,
		ust::string_view8 name,
		FunctionType& function_type ) : ust::string8;

	fn virtual override MangleFunction(
		mut this,
		NamesScope& parent_scope,
		ust::string_view8 name,
		FunctionType& function_type,
		TemplateArgsFinished& template_args ) : ust::string8;

	fn virtual override MangleGlobalVariable( mut this, NamesScope& parent_scope, ust::string_view8 variable_name, Type& t, bool is_constant ) : ust::string8;
	fn virtual override MangleType( mut this, Type& t ) : ust::string8;
	fn virtual override MangleVirtualTable( mut this, Type& t ) : ust::string8;

private:
	fn MangleFunctionImpl(
		mut this,
		NamesScope& parent_scope,
		ust::string_view8 name,
		FunctionType& function_type,
		ust::optional_ref_imut</TemplateArgsFinished/> template_args ) : ust::string8;

private:
	ManglerState state_;
}

fn ManglerItaniumABI::MangleFunction(
	mut this,
	NamesScope& parent_scope,
	ust::string_view8 name,
	FunctionType& function_type ) : ust::string8
{
	return MangleFunctionImpl( parent_scope, name, function_type, ust::null_optional_ref );
}

fn ManglerItaniumABI::MangleFunction(
	mut this,
	NamesScope& parent_scope,
	ust::string_view8 name,
	FunctionType& function_type,
	TemplateArgsFinished& template_args ) : ust::string8
{
	return MangleFunctionImpl( parent_scope, name, function_type, template_args );
}

fn ManglerItaniumABI::MangleGlobalVariable( mut this, NamesScope& parent_scope, ust::string_view8 variable_name, Type& t, bool is_constant ) : ust::string8
{
	// type/constantness is not used in this mangling scheme.
	ust::ignore_unused( t );
	ust::ignore_unused( is_constant );

	// Variables inside global namespace have simple names.
	if( parent_scope.GetParent().empty() )
	{
		return ust::concat( variable_name, "\0" );
	}

	state_.Push( "_Z" );
	EncodeNestedName( state_, variable_name, parent_scope );
	return state_.TakeResult();
}

fn ManglerItaniumABI::MangleType( mut this, Type& t ) : ust::string8
{
	EncodeTypeName(state_, t);
	return state_.TakeResult();
}

fn ManglerItaniumABI::MangleVirtualTable( mut this,Type& t ) : ust::string8
{
	state_.Push( "_ZTV" );
	EncodeTypeName( state_, t );
	return state_.TakeResult();
}

fn ManglerItaniumABI::MangleFunctionImpl(
	mut this,
	NamesScope& parent_scope,
	ust::string_view8 name,
	FunctionType& function_type,
	ust::optional_ref_imut</TemplateArgsFinished/> template_args_opt ) : ust::string8
{
	state_.Push( "_Z" );

	var ust::string8 mut name_prefixed= DecodeOperator( name );
	if( name_prefixed.empty() )
	{
		name_prefixed= ust::to_string8( name.size() );
		name_prefixed+= name;
	}

	if_var( &template_args : template_args_opt )
	{
		ADD_NODE( state_ )
		{
			if( !parent_scope.GetParent().empty() )
			{
				state_.Push( 'N' );
				ADD_NODE( state_ )
				{
					EncodeNamespacePrefix_r( state_, parent_scope );
					state_.Push( name_prefixed );
				}

				EncodeTemplateArgs( state_, template_args );
				state_.Push( "Ev" );
			}
			else
			{
				ADD_NODE( state_ )
				{
					state_.Push( name_prefixed );
				}

				EncodeTemplateArgs( state_, template_args );
				state_.Push( 'v' );
			}
		}
	}
	else
	{
		if( !parent_scope.GetParent().empty() )
		{
			state_.Push( 'N' );
			EncodeNamespacePrefix_r( state_, parent_scope );
			state_.Push( name_prefixed );
			state_.Push( 'E' );
		}
		else
		{
			state_.Push( name_prefixed );
		}
	}

	EncodeFunctionParams( state_, function_type.params );

	return state_.TakeResult();
}

class ManglerState
{
public:
	fn Push( mut this, char8 c );
	fn Push( mut this, ust::string_view8 name );
	fn PushLengthPrefixed( mut this, ust::string_view8 name );
	fn PushDecimalNumber( mut this, u64 n );

	fn TakeResult( mut this ) : ust::string8;

public:
	// For state management.
	fn GetCurrentPos( this ) : size_type;
	fn GetCurrentCompressedPos( this ) : size_type;
	fn FinalizePart( mut this, size_type start, size_type compressed_start );

private:
	type LenType= u16;
	struct Substitution
	{
		LenType start;
		LenType size;
	}

private:
	ust::vector</Substitution/> substitutions_;
	ust::string8 result_full_;
	ust::string8 result_compressed_;
}

fn ManglerState::Push( mut this, char8 c )
{
	result_full_.push_back( c );
	result_compressed_.push_back( c );
}

fn ManglerState::Push( mut this, ust::string_view8 name )
{
	result_full_+= name;
	result_compressed_+= name;
}

fn ManglerState::PushLengthPrefixed( mut this, ust::string_view8 name )
{
	PushDecimalNumber( u64(name.size()) );
	Push( name );
}

fn ManglerState::PushDecimalNumber( mut this, u64 n )
{
	// Small optimization for common cases. Needed because "ust::to_string8" allocates memory.
	auto zero_char= u64('0');
	if( n < 10u64 )
	{
		Push( char8( zero_char + n ) );
	}
	else if( n < 100u64 )
	{
		Push( char8( zero_char + n / 10u64 ) );
		Push( char8( zero_char + n % 10u64 ) );
	}
	else if( n < 1000u64 )
	{
		Push( char8( zero_char + n / 100u64 ) );
		Push( char8( zero_char + n / 10u64 % 10u64 ) );
		Push( char8( zero_char + n % 10u64 ) );
	}
	else
	{
		Push( ust::to_string8( n ) );
	}
}

fn ManglerState::TakeResult( mut this ) : ust::string8
{
	// Take copy for result. This allows us to re-use internal buffer for mangling of next name.
	result_compressed_.push_back( '\0' );
	var ust::string8 result= result_compressed_;

	substitutions_.clear();
	result_full_.clear();
	result_compressed_.clear();

	return result;
}

fn ManglerState::GetCurrentPos( this ) : size_type
{
	return result_full_.size();
}

fn ManglerState::GetCurrentCompressedPos( this ) : size_type
{
	return result_compressed_.size();
}

fn ManglerState::FinalizePart( mut this, size_type start, size_type compressed_start )
{
	auto size= result_full_.size() - start;

	// Search for replacement.
	for( auto mut i= 0s; i < substitutions_.size(); ++i )
	{
		var Substitution substitution= substitutions_[i];
		if(
			cast_imut(result_full_).range().subrange( start, start + size ) ==
			cast_imut(result_full_).range().subrange( size_type(substitution.start), size_type(substitution.start) + size_type( substitution.size) ) )
		{
			result_compressed_.resize( compressed_start, '0' );
			result_compressed_.push_back( 'S' );

			if( i > 0s )
			{
				// Use 32-bit division, which is significantly faster, than 64-bit.
				var u32 n( i - 1s );
				if( n < 36u )
				{
					result_compressed_.push_back( Base36Digit( n ) );
				}
				else if( n < 36u * 36u )
				{
					result_compressed_.push_back( Base36Digit( n / 36u ) );
					result_compressed_.push_back( Base36Digit( n % 36u ) );
				}
				else if( n < 36u * 36u * 36u )
				{
					result_compressed_.push_back( Base36Digit( n / ( 36u * 36u ) ) );
					result_compressed_.push_back( Base36Digit( n / 36u % 36u ) );
					result_compressed_.push_back( Base36Digit( n % 36u ) );
				}
				else { halt; } // Too much substitutions.
			}
			result_compressed_.push_back( '_' );
			return;
		}
	}

	// Not found replacement - add new substitution.
	substitutions_.push_back( Substitution{ .start= LenType(start), .size= LenType(size) } );
}

fn Base36Digit( u32 value ) : char8
{
	debug_assert( value < 36u );
	if( value < 10u )
	{
		return char8(u32('0') + value);
	}
	else
	{
		return char8(u32('A') + ( value - 10u ) );
	}
}

fn EncodeNestedName( ManglerState &mut mangler_state, ust::string_view8 name, NamesScope& parent_scope )
{
	ADD_NODE( mangler_state )
	{
		if( !parent_scope.GetParent().empty() )
		{
			mangler_state.Push( 'N' );
			EncodeNamespacePrefix_r( mangler_state, parent_scope );
			mangler_state.PushLengthPrefixed( name );
			mangler_state.Push( 'E' );
		}
		else
		{
			mangler_state.PushLengthPrefixed( name );
		}
	}
}

fn EncodeFundamentalTypeName( U_FundamentalType t ) : ust::string_view8
{
	switch(t)
	{
		U_FundamentalType::InvalidType -> { return ""; },
		U_FundamentalType::void_		-> { return "v"; },
		U_FundamentalType::bool_		-> { return "b"; },
		U_FundamentalType::i8_			-> { return "a"; }, // C++ signed char
		U_FundamentalType::u8_			-> { return "h"; }, // C++ unsigned char
		U_FundamentalType::i16_		-> { return "s"; },
		U_FundamentalType::u16_		-> { return "t"; },
		U_FundamentalType::i32_		-> { return "i"; },
		U_FundamentalType::u32_		-> { return "j"; },
		U_FundamentalType::i64_		-> { return "x"; },
		U_FundamentalType::u64_		-> { return "y"; },
		U_FundamentalType::i128_	-> { return "n"; },
		U_FundamentalType::u128_	-> { return "o"; },
		U_FundamentalType::ssize_type_-> { return "l"; },
		U_FundamentalType::size_type_ -> { return "m"; },
		U_FundamentalType::f32_		-> { return "f"; },
		U_FundamentalType::f64_		-> { return "d"; },
		U_FundamentalType::char8_	-> { return "c"; },
		U_FundamentalType::char16_	-> { return "Ds"; },
		U_FundamentalType::char32_	-> { return "Di"; },
		// Use vendor-extended types for "byte" types.
		U_FundamentalType::byte8_	-> { return "u5byte8"  ; },
		U_FundamentalType::byte16_	-> { return "u6byte16" ; },
		U_FundamentalType::byte32_	-> { return "u6byte32" ; },
		U_FundamentalType::byte64_	-> { return "u6byte64" ; },
		U_FundamentalType::byte128_	-> { return "u7byte128"; },
	}
}

fn EncodeFunctionParam( ManglerState& mut mangler_state, FunctionType::Param& param )
{
	if( param.value_type == ValueType::Value )
	{
		EncodeTypeName( mangler_state, param.t );
	}
	else
	{
		ADD_NODE( mangler_state )
		{
			mangler_state.Push( 'R' );
			if( param.value_type == ValueType::ReferenceMut )
			{
				EncodeTypeName( mangler_state, param.t );
			}
			else
			{
				ADD_NODE( mangler_state )
				{
					mangler_state.Push( 'K' );
					EncodeTypeName( mangler_state, param.t );
				}
			}
		}
	}
}

fn EncodeFunctionParams( ManglerState& mut mangler_state, ust::array_view_imut</FunctionType::Param/> params )
{
	foreach( &param : params )
	{
		var bool mut is_void_param= false;
		if( param.value_type == ValueType::Value )
		{
			if_var( &fundamental_type : param.t.GetFundamentalType() )
			{
				is_void_param= fundamental_type.fundamental_type == U_FundamentalType::void_;
			}
		}

		if( is_void_param )
		{
			// We need to distinguish between function with no params (with "v" for params) and function with single "void" param.
			// So, mark real "void" params with "const".
			// Normaly we do not use "konst" prefix for value params, so, "void" type is single exception.
			ADD_NODE( mangler_state )
			{
				mangler_state.Push( 'K' );
				EncodeTypeName( mangler_state, param.t );
			}
		}
		else
		{
			EncodeFunctionParam( mangler_state, param );
		}
	}

	if( params.empty() )
	{
		mangler_state.Push( 'v' );
	}
}

fn EncodeParamReference( ManglerState &mut mangler_state, FunctionType::ParamReference& param_reference )
{
	mangler_state.Push( "il" );

	mangler_state.Push( 'L' );
	mangler_state.Push( EncodeFundamentalTypeName( U_FundamentalType::char8_ ) );
	mangler_state.PushDecimalNumber( u64(param_reference.param_index) + u64('0') );
	mangler_state.Push( 'E' );

	mangler_state.Push( 'L' );
	mangler_state.Push( EncodeFundamentalTypeName( U_FundamentalType::char8_ ) );
	if( param_reference.reference_index == FunctionType::c_param_reference_number )
	{
		mangler_state.PushDecimalNumber( u64('_') );
	}
	else
	{
		mangler_state.PushDecimalNumber( u64(param_reference.reference_index) + u64('a') );
	}
	mangler_state.Push( 'E' );

	mangler_state.Push( 'E' );
}

fn EncodeReferencePollutionAsType( ManglerState& mut mangler_state, FunctionType::ReferencesPollution& reference_pollution )
{
	ADD_NODE( mangler_state )
	{
		ADD_NODE( mangler_state )
		{
			mangler_state.PushLengthPrefixed( "_RP" );
		}

		mangler_state.Push( 'I' );
		{
			mangler_state.Push( 'X' );

			mangler_state.Push( "il" );
			foreach( &pollution_element : reference_pollution )
			{
				mangler_state.Push( "il" );
				EncodeParamReference( mangler_state, pollution_element.dst );
				EncodeParamReference( mangler_state, pollution_element.src );
				mangler_state.Push( 'E' );
			}
			mangler_state.Push( 'E' );

			mangler_state.Push( 'E' );
		}
		mangler_state.Push( 'E' );
	}
}

fn EncodeReturnReferencesAsType( ManglerState& mut mangler_state, FunctionType::ParamReferences& return_references )
{
	ADD_NODE( mangler_state )
	{
		ADD_NODE( mangler_state )
		{
			mangler_state.PushLengthPrefixed( "_RR" );
		}

		mangler_state.Push( 'I' );
		{
			mangler_state.Push( 'X' );

			mangler_state.Push( "il" );
			foreach( &param_reference : return_references )
			{
				EncodeParamReference( mangler_state, param_reference );
			}
			mangler_state.Push( 'E' );

			mangler_state.Push( 'E' );
		}
		mangler_state.Push( 'E' );
	}
}

fn EncodeReturnInnerReferencesAsType( ManglerState& mut mangler_state, FunctionType::ReturnInnerReferences& return_inner_references )
{
	ADD_NODE( mangler_state )
	{
		ADD_NODE( mangler_state )
		{
			mangler_state.PushLengthPrefixed( "_RIR" );
		}

		mangler_state.Push( 'I' );
		{
			mangler_state.Push( 'X' );

			mangler_state.Push( "il" );
			foreach( &return_references : return_inner_references )
			{
				mangler_state.Push( "il" );
				foreach( &param_reference : return_references )
				{
					EncodeParamReference( mangler_state, param_reference );
				}
				mangler_state.Push( 'E' );
			}
			mangler_state.Push( 'E' );

			mangler_state.Push( 'E' );
		}
		mangler_state.Push( 'E' );
	}
}

fn EncodeTemplateClassName( ManglerState &mut mangler_state, ClassType& class_type )
{
	auto& base_template= class_type.generated_class_data.try_get</ ClassType::BaseTemplate />();
	ADD_NODE( mangler_state )
	{
		// Skip template parameters namespace.
		auto parent= class_type.members.lock_imut().deref().GetParent().try_lock_imut().deref().GetParent();
		if( !parent.try_lock_imut().deref().GetThisNamespaceName().empty() )
		{
			EncodeNamespacePrefix_r( mangler_state, parent.try_lock_imut().deref() );
		}

		mangler_state.PushLengthPrefixed( base_template.class_template.lock_imut().deref().syntax_element.deref().name );
	}

	EncodeTemplateArgs( mangler_state, base_template.signature_args );
}

fn EncodeLambdaClassName( ManglerState &mut mangler_state, ClassType& class_type )
{
	auto& lambda_class_data= class_type.generated_class_data.try_get</ LambdaClassData />();

	with( &members : class_type.members.lock_imut().deref() )
	{
		if( lambda_class_data.template_args.empty() )
		{
			ADD_NODE( mangler_state )
			{
				auto parent_ptr= members.GetParent();
				if( !parent_ptr.empty() )
				{
					with( &parent : parent_ptr.try_lock_imut().deref() )
					{
						if( !parent.GetThisNamespaceName().empty() )
						{
							EncodeNamespacePrefix_r( mangler_state, parent );
						}
					}
				}

				mangler_state.PushLengthPrefixed( members.GetThisNamespaceName() );
			}
		}
		else
		{
			ADD_NODE( mangler_state )
			{
				ADD_NODE( mangler_state )
				{
					// Skip template parameters namespace.
					auto parent_ptr= members.GetParent().try_lock_imut().deref().GetParent();
					if( !parent_ptr.empty() )
					{
						with( &parent : parent_ptr.try_lock_imut().deref() )
						{
							if( !parent.GetThisNamespaceName().empty() )
							{
								EncodeNamespacePrefix_r( mangler_state, parent );
							}
						}
					}

					mangler_state.PushLengthPrefixed( members.GetThisNamespaceName() );
				}

				EncodeTemplateArgs( mangler_state, lambda_class_data.template_args );
			}
		}
	}
}

fn EncodeCoroutineClassName( ManglerState &mut mangler_state, ClassType& class_type )
{
	var CoroutineTypeDescription& coroutine_type_description= class_type.generated_class_data.try_get</ CoroutineTypeDescription />();

	ADD_NODE( mangler_state )
	{
		ADD_NODE( mangler_state )
		{
			mangler_state.PushLengthPrefixed( class_type.members.lock_imut().deref().GetThisNamespaceName() );
		}

		// Encode coroutine type as template with several arguments.
		mangler_state.Push( 'I' );

		if( coroutine_type_description.return_value_type == ValueType::Value )
		{
			EncodeTypeName( mangler_state, coroutine_type_description.return_type );
		}
		else
		{
			ADD_NODE( mangler_state )
			{
				mangler_state.Push( 'R' );
				if( coroutine_type_description.return_value_type == ValueType::ReferenceMut )
				{
					EncodeTypeName( mangler_state, coroutine_type_description.return_type );
				}
				else
				{
					ADD_NODE( mangler_state )
					{
						mangler_state.Push( 'K' );
						EncodeTypeName( mangler_state, coroutine_type_description.return_type );
					}
				}
			}
		}

		// Encode non-sync tag, if it exists.
		if( coroutine_type_description.non_sync_ )
		{
			mangler_state.Push( 'L' );
			mangler_state.Push( EncodeFundamentalTypeName( U_FundamentalType::bool_ ) );
			mangler_state.Push( '1' );
			mangler_state.Push( 'E' );
		}

		// Encode inner reference kind as variable template parameter.
		foreach( inner_reference_kind : coroutine_type_description.inner_references )
		{
			mangler_state.Push( 'L' );
			mangler_state.Push( EncodeFundamentalTypeName( U_FundamentalType::u32_ ) );
			mangler_state.PushDecimalNumber( u64(inner_reference_kind) );
			mangler_state.Push( 'E' );
		}

		if( !coroutine_type_description.return_references.empty() )
		{
			EncodeReturnReferencesAsType( mangler_state, coroutine_type_description.return_references );
		}
		if( !coroutine_type_description.return_inner_references.empty() )
		{
			EncodeReturnInnerReferencesAsType( mangler_state, coroutine_type_description.return_inner_references );
		}

		// Do not encode coroutine kind here, because coroutine class name contains kind.

		mangler_state.Push( 'E' );
	}
}

fn EncodeTypeName( ManglerState& mut mangler_state, Type& t )
{
	if_var( &fundamental_type : t.GetFundamentalType() )
	{
		mangler_state.Push( EncodeFundamentalTypeName( fundamental_type.fundamental_type ) );
	}
	else if_var( &array_type : t.GetArrayType() )
	{
		ADD_NODE( mangler_state )
		{
			mangler_state.Push( 'A' );
			mangler_state.PushDecimalNumber( array_type.element_count );
			mangler_state.Push( '_' );
			EncodeTypeName( mangler_state, array_type.element_type );
		}
	}
	else if_var( &tuple_type : t.GetTupleType() )
	{
		ADD_NODE( mangler_state )
		{
			ADD_NODE( mangler_state )
			{
				mangler_state.PushLengthPrefixed( KeywordToString( Keyword::tup_ ) );
			}

			mangler_state.Push( 'I' );
			foreach( &element_type : tuple_type.element_types )
			{
				EncodeTypeName( mangler_state, element_type );
			}
			mangler_state.Push( 'E' );
		}
	}
	else if_var( &class_type_ptr : t.GetClassType() )
	{
		auto class_lock= class_type_ptr.lock_imut();
		auto& class_type= class_lock.deref();
		auto class_members= class_type.members;
		auto class_members_lock= class_members.lock_imut();
		auto& class_members_ref= class_members_lock.deref();

		if_var( &typeinfo_class_description : class_type.generated_class_data.get</ TypeinfoClassDescription />() )
		{
			ADD_NODE( mangler_state )
			{
				ADD_NODE( mangler_state )
				{
					mangler_state.PushLengthPrefixed( class_type.members.lock_imut().deref().GetThisNamespaceName() );
				}
				ADD_NODE( mangler_state )
				{
					var TemplateArgsFinished typeinfo_args= ust::make_array( TemplateArgFinished( typeinfo_class_description.source_type ) );
					EncodeTemplateArgs( mangler_state, typeinfo_args );
				}
			}
		}
		else if_var( &base_template : class_type.generated_class_data.get</ ClassType::BaseTemplate />() )
		{
			ADD_NODE( mangler_state )
			{
				auto t= base_template.class_template;
				auto t_namespace= t.lock_imut().deref().parent_names_scope.lock();
				if( !t_namespace.empty() && !t_namespace.try_lock_imut().deref().GetParent().empty() )
				{
					mangler_state.Push( 'N' );
					EncodeTemplateClassName( mangler_state, class_type );
					mangler_state.Push( 'E' );
				}
				else
				{
					EncodeTemplateClassName( mangler_state, class_type );
				}
			}
		}
		else if( class_type.generated_class_data.has</ CoroutineTypeDescription />() )
		{
			EncodeCoroutineClassName( mangler_state, class_type );
		}
		else if( class_type.generated_class_data.has</ LambdaClassData />() )
		{
			EncodeLambdaClassName( mangler_state, class_type );
		}
		else
		{
			EncodeNestedName( mangler_state, class_members_ref.GetThisNamespaceName(), class_members_ref.GetParent().try_lock_imut().deref() );
		}
	}
	else if_var( &enum_type : t.GetEnumType() )
	{
		auto enum_members= enum_type.lock_imut().deref().names_scope;
		auto enum_members_lock= enum_members.lock_imut();
		auto& enum_members_ref= enum_members_lock.deref();

		EncodeNestedName( mangler_state, enum_members_ref.GetThisNamespaceName(), enum_members_ref.GetParent().try_lock_imut().deref() );
	}
	else if_var( &raw_poiter_type : t.GetRawPointerType() )
	{
		ADD_NODE( mangler_state )
		{
			mangler_state.Push( 'P' );
			EncodeTypeName( mangler_state, raw_poiter_type.element_type );
		}
	}
	else if_var( &function_pointer_type : t.GetFunctionPointerType() )
	{
		ADD_NODE( mangler_state )
		{
			mangler_state.Push( 'P' );
			EncodeFunctionTypeName( mangler_state, function_pointer_type.function_type );
		}
	}
	else { halt; }
}

fn EncodeFunctionTypeName( ManglerState& mut mangler_state, FunctionType& function_type )
{
	ADD_NODE( mangler_state )
	{
		switch( function_type.calling_convention )
		{
			LLVMCallConv::C -> {},
			LLVMCallConv::Cold ->
			{
				mangler_state.Push( 'U' );
				mangler_state.PushLengthPrefixed( "cold" );
			},
			LLVMCallConv::Fast ->
			{
				mangler_state.Push( 'U' );
				mangler_state.PushLengthPrefixed( "fast" );
			},
			LLVMCallConv::X86Stdcall ->
			{
				mangler_state.Push( 'U' );
				mangler_state.PushLengthPrefixed( "stdcall" );
			},
			default -> { /* Unhandled convention */ halt; },
		}

		mangler_state.Push( 'F' );

		EncodeFunctionParam(
			mangler_state,
			FunctionType::Param{ .t( function_type.return_type ), .value_type= function_type.return_value_type } );

		EncodeFunctionParams( mangler_state, function_type.params );

		if( !function_type.references_pollution.empty() )
		{
			EncodeReferencePollutionAsType( mangler_state, function_type.references_pollution );
		}
		if( !function_type.return_references.empty() )
		{
			EncodeReturnReferencesAsType( mangler_state, function_type.return_references );
		}
		if( !function_type.return_inner_references.empty() )
		{
			EncodeReturnInnerReferencesAsType( mangler_state, function_type.return_inner_references );
		}

		if( function_type.is_unsafe )
		{
			mangler_state.PushLengthPrefixed( "unsafe" );
		}

		mangler_state.Push( 'E' );
	}
}

fn EncodeNamespacePrefix_r( ManglerState& mut mangler_state, NamesScope& names_scope )
{
	// Process separately class templates and coroutine types.
	auto class_ptr= names_scope.GetClass();
	if( !class_ptr.empty() )
	{
		auto class_lock= class_ptr.try_lock_imut();
		auto& class_= class_lock.deref();
		if( class_.generated_class_data.has</ ClassType::BaseTemplate />() )
		{
			ADD_NODE( mangler_state )
			{
				EncodeTemplateClassName( mangler_state, class_ );
			}
			return;
		}
		if( class_.generated_class_data.has</ CoroutineTypeDescription />() )
		{
			EncodeCoroutineClassName( mangler_state, class_ );
			return;
		}
		if( class_.generated_class_data.has</ LambdaClassData />() )
		{
			EncodeLambdaClassName( mangler_state, class_ );
			return;
		}
	}

	ADD_NODE( mangler_state )
	{
		auto parent= names_scope.GetParent();
		if( !parent.empty() )
		{
			auto parent_lock= parent.try_lock_imut();
			auto& parent_ref= parent_lock.deref();
			if( !parent_ref.GetThisNamespaceName().empty() )
			{
				EncodeNamespacePrefix_r( mangler_state, parent_ref );
			}
		}

		mangler_state.PushLengthPrefixed( names_scope.GetThisNamespaceName() );
	}
}

fn EncodeTemplateArgs( ManglerState &mut mangler_state, TemplateArgsFinished& template_args )
{
	mangler_state.Push( 'I' );

	foreach( &arg : template_args )
	{
		variant_visit( &el : arg )
		{
			EncodeTemplateArgImpl( mangler_state, el );
		}
	}

	mangler_state.Push( 'E' );
}

fn EncodeTemplateArgImpl( ManglerState &mut mangler_state, Type& t )
{
	EncodeTypeName( mangler_state, t );
}

fn EncodeTemplateArgImpl( ManglerState &mut mangler_state, VariablePtr& v_ptr )
{
	with( &v : v_ptr.lock_imut().deref() )
	{
		if( !v.t.GetArrayType().empty() || !v.t.GetTupleType().empty() )
		{
			// Encode composite template args as expressions.
			mangler_state.Push( 'X' );
			EncodeConstexprValue( mangler_state, v.t, v.constexpr_value );
			mangler_state.Push( 'E' );
		}
		else
		{
			EncodeConstexprValue( mangler_state, v.t, v.constexpr_value );
		}
	}
}

fn EncodeTemplateArgImpl( ManglerState &mut mangler_state, TypeTemplatePtr& type_template )
{
	with( &t : type_template.lock_imut().deref() )
	{
		EncodeNestedName( mangler_state, t.syntax_element.deref().name, t.parent_names_scope.lock().try_lock_imut().deref() );

		// Do not mangle template signature params to distinguish between different overloaded type templates.
		// it's not required, since only sets with one type template may be used as template arguments.
		// Merging different type templates imported from different files into the same type templates set isn't possible too.
	}
}

fn EncodeConstexprValue( ManglerState &mut mangler_state, Type& t, LLVMValueRef constexpr_value )
{
	if_var( &array_type : t.GetArrayType() )
	{
		// Encode array type as C++ expression like "type_name{ el0, el1, el2 }".
		// Use "tl" instead of "il" to distinguish arrays and tuples.
		mangler_state.Push( "tl" );

		EncodeTypeName( mangler_state, t );

		for( auto mut i= 0u64; i < array_type.element_count; ++i )
		{
			EncodeConstexprValue( mangler_state, array_type.element_type, unsafe( LLVMGetAggregateElement( constexpr_value, u32(i) ) ) );
		}

		mangler_state.Push( 'E' );
	}
	else if_var( &tuple_type : t.GetTupleType() )
	{
		// Encode tuple type as C++ expression like "type_name{ el0, el1, el2 }".
		// Use "tl" instead of "il" to distinguish arrays and tuples.
		mangler_state.Push( "tl" );

		EncodeTypeName( mangler_state, t );

		for( auto mut i= 0s; i < tuple_type.element_types.size(); ++i )
		{
			EncodeConstexprValue( mangler_state, tuple_type.element_types[i], unsafe( LLVMGetAggregateElement( constexpr_value, u32(i) ) ) );
		}

		mangler_state.Push( 'E' );
	}
	else
	{
		mangler_state.Push( 'L' );
		EncodeTypeName( mangler_state, t );

		auto mut is_signed= false;
		if_var( fundamental_type : t.GetFundamentalType() )
		{
			is_signed= IsSignedInteger( fundamental_type.fundamental_type );
		}
		else if_var( enum_type : t.GetEnumType() )
		{
			is_signed= IsSignedInteger( enum_type.lock_imut().deref().underlying_type.fundamental_type );
		}

		if( constexpr_value != LLVMValueRef::Null )
		{
			if( is_signed )
			{
				auto num= unsafe( LLVMConstIntGetSExtValue( constexpr_value ) );
				if( num >= 0i64 )
				{
					mangler_state.PushDecimalNumber( u64(num) );
				}
				else
				{
					mangler_state.Push( 'n' );
					mangler_state.PushDecimalNumber( u64(-num) );
				}
			}
			else
			{
				mangler_state.PushDecimalNumber( unsafe( LLVMConstIntGetZExtValue( constexpr_value ) ) );
			}
		}

		mangler_state.Push( 'E' );
	}
}

fn DecodeOperator( ust::string_view8 o ) : ust::string_view8
{
	if( o == "+" ){ return "pl"; }
	if( o == "-" ){ return "mi"; }
	if( o == "*" ){ return "ml"; }
	if( o == "/" ){ return "dv"; }
	if( o == "%" ){ return "rm"; }

	if( o == "==" ){ return "eq"; }
	if( o == "<=>" ){ return "ss"; } // C++ spaceship operator

	if( o == "&" ){ return "an"; }
	if( o == "|" ){ return "or"; }
	if( o == "^" ){ return "eo"; }

	if( o == "<<" ){ return "ls"; }
	if( o == ">>" ){ return "rs"; }

	if( o == "+=" ){ return "pL"; }
	if( o == "-=" ){ return "mI"; }
	if( o == "*=" ){ return "mL"; }
	if( o == "/=" ){ return "dV"; }
	if( o == "%=" ){ return "rM"; }

	if( o == "&=" ){ return "aN"; }
	if( o == "|=" ){ return "oR"; }
	if( o == "^=" ){ return "eO"; }

	if( o == "<<=" ){ return "lS"; }
	if( o == ">>=" ){ return "rS"; }

	if( o == "!" ){ return "nt"; }
	if( o == "~" ){ return "co"; }

	if( o == "=" ){ return "aS"; }
	if( o == "++" ){ return "pp"; }
	if( o == "--" ){ return "mm"; }

	if( o == "()" ){ return "cl"; }
	if( o == "[]" ){ return "ix"; }

	return "";
}

} // namespace U1
