import "/hash_set.u"
import "references_graph.uh"

namespace U1
{

struct AllocaInfo
{
	LLVMValueRef is_stack_allocation; // A boolean value indicating stack or heap allocation.
	LLVMValueRef ptr_for_free; // Pointer for free or for llvm.stackrestore.
}

struct VariablesFrame
{
	ust::vector</ VariablePtr /> variables;
	ust::vector</ AllocaInfo /> allocas;
}

struct LoopFrame
{
	LLVMBasicBlockRef block_for_break;
	LLVMBasicBlockRef block_for_continue;
	// Number of variables frames at stack before loop block creation.
	size_type variable_frames_stack_size;

	ust::string8 name; // Contains label or is empty for non-labeled loops.

	// Populated during loop body building.
	ust::vector</ReferencesGraph/> break_references_graphs;
	ust::vector</ReferencesGraph/> continue_references_graphs;
}

struct ReturnTypeDeductionContext
{
	// Filled during function preprocessing.
	ust::optional</Type/> return_type;
}

struct ReferenceNotationDeductionContext
{
	// Filled during function preprocessing.
	FunctionType::ParamReferences return_references;
	FunctionType::ReturnInnerReferences return_inner_references;
	FunctionType::ReferencesPollution references_pollution;
}

struct LambdaPreprocessingContext
{
	type ExplicitCaptures= ust::hash_map</ VariablePtr, ExplicitCapture />;

	struct ExplicitCapture
	{
		bool capture_by_reference;
	}

	struct CapturedVariableData
	{
		// Variable from parent function.
		VariablePtr source_variable;

		// Newly-created nodes inside the lambda.
		VariablePtr variable_node;
		VariablePtr reference_node;
		ust::vector</VariablePtr/> accessible_variables;
	}

	struct ReferencePollution
	{
		ReferenceLink dst;
		ReferenceLink src;
	}

	type ReferenceLink= ust::variant</ tup[ FunctionType::ParamReference, VariablePtr ] />;

	// Inputs (filled before lambda preprocessing).
	ust::weak_ptr_imut</ LambdaPreprocessingContext /> parent;
	ust::hash_set</VariablePtr/> external_variables;
	ust::optional</ExplicitCaptures/> explicit_captures; // If none - all variables are allowed for captured.
	bool capture_by_reference;
	bool lambda_this_is_mutable;

	// Outputs (filled during lambda preprocessing).

	ust::hash_map</ust::string8, CapturedVariableData/> captured_external_variables;

	ust::vector</ReferencePollution/> references_pollution;

	// Contains set of variables of the preprocessed lambda.
	ust::vector</VariablePtr/> captured_variables_return_references;
	ust::vector</ ust::vector</VariablePtr/> /> captured_variables_return_inner_references;

	bool has_preprocessing_errors= false;
}

class FunctionContext
{
public:
	fn constructor(
		LLVMContextRef llvm_context,
		LLVMValueRef in_llvm_function,
		FunctionType mut in_function_type );
	fn destructor();

public:
	FunctionType function_type;

	LLVMValueRef imut llvm_function;

	LLVMBuilderRef alloca_ir_builder= LLVMBuilderRef::Null;

	LLVMBasicBlockRef function_basic_block= LLVMBasicBlockRef::Null;
	LLVMBuilderRef llvm_ir_builder= LLVMBuilderRef::Null;

	// For reference checks.
	// arg variable node + inner reference nodes.
	ust::vector</ tup[ VariablePtr, ust::vector</VariablePtr /> ] /> args_nodes;

	// For each argument and each argument type reference tag store optional second order variable node (to support second order references).
	// This container may have less elements than "arg_nodes" and some values may be null.
	ust::vector</ ust::vector</ VariableNullablePtr /> /> args_second_order_nodes;

	LLVMValueRef s_ret= LLVMValueRef::Null; // Also promise for coroutines

	// Specific for coroutines data.
	LLVMBasicBlockRef coro_final_suspend_bb= LLVMBasicBlockRef::Null; // Used to jump from "return" operator.
	LLVMBasicBlockRef coro_suspend_bb= LLVMBasicBlockRef::Null; // Used as final destination for "yield" and "return".
	LLVMBasicBlockRef coro_cleanup_bb= LLVMBasicBlockRef::Null; // Used as final destination after suspention destruction blocks.

	VariableNullablePtr this_;
	ust::vector</bool/> initialized_this_fields; // Non-empty in constructors. element is true, if field is already initialized.
	bool whole_this_is_unavailable= false;

	bool has_non_constexpr_operations_inside= false; // While building code, may set to "true".

	LLVMBasicBlockRef destructor_end_block= LLVMBasicBlockRef::Null; // For destructors only - used for "Br" instead of "ret"

	ust::vector</LoopFrame/> loops_stack;
	bool is_in_unsafe_block= false;

	bool is_functionless_context= false; // True for global function context or for function context, used for args preevaluation or typeof operator.

	ust::vector</VariablesFrame/> variables_frames;
	ReferencesGraph references_graph;

	// Cache result of arguments pre-evaluation for selection of overloaded functions and operators.
	// This needed for reducing exponential expression evaluation complexity.
	ust::hash_map</ ust::shared_ptr_final</Synt::Expression/>, VariableTypeExtended /> args_preevaluation_cache;

	LLVMMetadataRef current_debug_info_scope= LLVMMetadataRef::Null;

	ust::shared_ptr_nullable_mut</ ReturnTypeDeductionContext /> return_type_deduction_context;
	ust::shared_ptr_nullable_mut</ ReferenceNotationDeductionContext /> reference_notation_deduction_context;
	ust::shared_ptr_nullable_mut</ LambdaPreprocessingContext /> lambda_preprocessing_context;
}

} // namespace U1
