import "/composite.u"
import "/CodeBuilderLib/keywords.uh"
import "tbaa_metadata_builder.uh"

namespace U1
{

fn TBAAMetadataBuilder::constructor( LLVMContextRef llvm_context, LLVMTargetDataRef data_layout, ust::box</IMangler/> mut mangler )
	( llvm_context_(llvm_context), mangler_(move(mangler)) )
{
	unsafe // Because of a lot of C functions calls.
	{
		auto tbaa_root= CreateMetadataNode( llvm_context_, ust::make_array( CreateMetadataString(llvm_context_, "__U_tbaa_root" ) ) );

		type_descriptors_.byte8_  = MakeTBAATypeDescriptor( llvm_context_, tbaa_root, KeywordToString( Keyword::byte8_ ) );
		type_descriptors_.byte16_ = MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte8_ , KeywordToString( Keyword::byte16_  ) );
		type_descriptors_.byte32_ = MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte16_, KeywordToString( Keyword::byte32_  ) );
		type_descriptors_.byte64_ = MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte32_, KeywordToString( Keyword::byte64_  ) );
		type_descriptors_.byte128_= MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte64_, KeywordToString( Keyword::byte128_ ) );

		type_descriptors_.void_= MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte8_, KeywordToString( Keyword::void_ ) );
		type_descriptors_.bool_= MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte8_, KeywordToString( Keyword::bool_ ) );

		type_descriptors_.i8_  = MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte8_  , KeywordToString( Keyword::i8_   ) );
		type_descriptors_.u8_  = MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte8_  , KeywordToString( Keyword::u8_   ) );
		type_descriptors_.i16_ = MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte16_ , KeywordToString( Keyword::i16_  ) );
		type_descriptors_.u16_ = MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte16_ , KeywordToString( Keyword::u16_  ) );
		type_descriptors_.i32_ = MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte32_ , KeywordToString( Keyword::i32_  ) );
		type_descriptors_.u32_ = MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte32_ , KeywordToString( Keyword::u32_  ) );
		type_descriptors_.i64_ = MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte64_ , KeywordToString( Keyword::i64_  ) );
		type_descriptors_.u64_ = MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte64_ , KeywordToString( Keyword::u64_  ) );
		type_descriptors_.i128_= MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte128_, KeywordToString( Keyword::i128_ ) );
		type_descriptors_.u128_= MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte128_, KeywordToString( Keyword::u128_ ) );

		auto pointer_size_byte_type_descriptor=
			( LLVMGetIntTypeWidth( LLVMIntPtrTypeInContext( llvm_context, data_layout ) ) == 32u
				? type_descriptors_.byte32_
				: type_descriptors_.byte64_ );

		type_descriptors_.ssize_type_=
			MakeTBAATypeDescriptor(
				llvm_context_,
				pointer_size_byte_type_descriptor,
				KeywordToString( Keyword::ssize_type_ ) );

		type_descriptors_.size_type_ =
			MakeTBAATypeDescriptor(
				llvm_context_,
				pointer_size_byte_type_descriptor,
				KeywordToString( Keyword::size_type_  ) );

		type_descriptors_.f32_= MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte32_, KeywordToString( Keyword::f32_ ) );
		type_descriptors_.f64_= MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte64_, KeywordToString( Keyword::f64_ ) );

		type_descriptors_.char8_ = MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte8_ , KeywordToString( Keyword::char8_  ) );
		type_descriptors_.char16_= MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte16_, KeywordToString( Keyword::char16_ ) );
		type_descriptors_.char32_= MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.byte32_, KeywordToString( Keyword::char32_ ) );

		type_descriptors_.ptr= MakeTBAATypeDescriptor( llvm_context_, pointer_size_byte_type_descriptor, "__U_any_pointer" );

		type_descriptors_.size_type_enum_base= pointer_size_byte_type_descriptor;
	}
}

fn TBAAMetadataBuilder::CreateAccessTag( mut this, Type& t ) : LLVMMetadataRef
{
	auto type_descriptor= GetTypeDescriptor(t);

	return unsafe(
		CreateMetadataNode(
			llvm_context_,
			ust::make_array(
				type_descriptor,
				type_descriptor,
				CreateI64ZeroMetadata( llvm_context_ ) ) ) );
}

fn TBAAMetadataBuilder::CreateReferenceAccessTag( mut this, Type& t ) : LLVMMetadataRef
{
	// Create access tags for references as for pointers.
	return CreateAccessTag( RawPointerType { .element_type= t } );
}

fn TBAAMetadataBuilder::CreateVirtualTablePointerAccessTag( mut this ) : LLVMMetadataRef
{
	// Use just base type for all pointers as access tag for virtual table pointers.
	// Do this in order to allow read virtual table pointers properly via any pointer/reference type.
	// This is mostly needed in standard library helpers for polymorph classes.
	auto type_descriptor= type_descriptors_.ptr;
	return unsafe(
		CreateMetadataNode(
			llvm_context_,
			ust::make_array(
				type_descriptor,
				type_descriptor,
				CreateI64ZeroMetadata( llvm_context_ ) ) ) );
}

fn TBAAMetadataBuilder::CreateVirtualTableFunctionPointerAccessTag( mut this ) : LLVMMetadataRef
{
	// Use generic pointer type for virtual table fetches. It's important, becase for simplicity reasons pointers in virtual table are almost untyped.
	auto type_descriptor= type_descriptors_.ptr;
	return unsafe(
		CreateMetadataNode(
			llvm_context_,
			ust::make_array(
				type_descriptor,
				type_descriptor,
				CreateI64ZeroMetadata( llvm_context_ ) ) ) );
}

fn TBAAMetadataBuilder::GetTypeDescriptor( mut this, Type& t ) : LLVMMetadataRef
{
	if_var( &cached_descriptor : types_descriptors_cache_.find(t) )
	{
		return cached_descriptor;
	}

	auto descriptor= CreateTypeDescriptor(t);
	types_descriptors_cache_.insert_new( t, descriptor );
	return descriptor;
}

fn TBAAMetadataBuilder::CreateTypeDescriptor( mut this, Type& t ) : LLVMMetadataRef
{
	var ust::string8 mut name= mangler_.deref().MangleType(t);
	// Remove trailing null char. We do not need it here.
	if( !name.empty() && name.back() == char8(0) )
	{
		name.drop_back();
	}

	if_var( &fundamental_type : t.GetFundamentalType() )
	{
		return GetTypeDescriptorForFundamentalType( fundamental_type.fundamental_type );
	}
	if_var( &enum_type : t.GetEnumType() )
	{
		return unsafe( MakeTBAATypeDescriptor( llvm_context_, GetEnumTypeBaseTypeDescriptor(enum_type), name ) );
	}
	if( !t.GetRawPointerType().empty() )
	{
		return unsafe( MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.ptr, name ) );
	}
	if( !t.GetFunctionPointerType().empty() )
	{
		return unsafe( MakeTBAATypeDescriptor( llvm_context_, type_descriptors_.ptr, name ) );
	}

	// TODO - support other types.
	return type_descriptors_.byte8_;
}

fn TBAAMetadataBuilder::GetTypeDescriptorForFundamentalType( mut this, U_FundamentalType t ) : LLVMMetadataRef
{
	switch(t)
	{
		U_FundamentalType::InvalidType -> { return type_descriptors_.byte8_; },
		U_FundamentalType::void_ -> { return type_descriptors_.void_; },
		U_FundamentalType::bool_ -> { return type_descriptors_.bool_; },
		U_FundamentalType::i8_   -> { return type_descriptors_.i8_  ; },
		U_FundamentalType::u8_   -> { return type_descriptors_.u8_  ; },
		U_FundamentalType::i16_  -> { return type_descriptors_.i16_ ; },
		U_FundamentalType::u16_  -> { return type_descriptors_.u16_ ; },
		U_FundamentalType::i32_  -> { return type_descriptors_.i32_ ; },
		U_FundamentalType::u32_  -> { return type_descriptors_.u32_ ; },
		U_FundamentalType::i64_  -> { return type_descriptors_.i64_ ; },
		U_FundamentalType::u64_  -> { return type_descriptors_.u64_ ; },
		U_FundamentalType::i128_ -> { return type_descriptors_.i128_; },
		U_FundamentalType::u128_ -> { return type_descriptors_.u128_; },
		U_FundamentalType::ssize_type_ -> { return type_descriptors_.ssize_type_; },
		U_FundamentalType::size_type_  -> { return type_descriptors_.size_type_ ; },
		U_FundamentalType::f32_ -> { return type_descriptors_.f32_; },
		U_FundamentalType::f64_ -> { return type_descriptors_.f64_; },
		U_FundamentalType::char8_  -> { return type_descriptors_.char8_ ; },
		U_FundamentalType::char16_ -> { return type_descriptors_.char16_; },
		U_FundamentalType::char32_ -> { return type_descriptors_.char32_; },
		U_FundamentalType::byte8_   -> { return type_descriptors_.byte8_  ; },
		U_FundamentalType::byte16_  -> { return type_descriptors_.byte16_ ; },
		U_FundamentalType::byte32_  -> { return type_descriptors_.byte32_ ; },
		U_FundamentalType::byte64_  -> { return type_descriptors_.byte64_ ; },
		U_FundamentalType::byte128_ -> { return type_descriptors_.byte128_; },
	}
}

fn TBAAMetadataBuilder::GetEnumTypeBaseTypeDescriptor( mut this, EnumTypePtr& enum_type ) : LLVMMetadataRef
{
	switch( enum_type.lock_imut().deref().underlying_type.fundamental_type )
	{
		U_FundamentalType::i8_   -> { return type_descriptors_.byte8_  ; },
		U_FundamentalType::u8_   -> { return type_descriptors_.byte8_  ; },
		U_FundamentalType::i16_  -> { return type_descriptors_.byte16_ ; },
		U_FundamentalType::u16_  -> { return type_descriptors_.byte16_ ; },
		U_FundamentalType::i32_  -> { return type_descriptors_.byte32_ ; },
		U_FundamentalType::u32_  -> { return type_descriptors_.byte32_ ; },
		U_FundamentalType::i64_  -> { return type_descriptors_.byte64_ ; },
		U_FundamentalType::u64_  -> { return type_descriptors_.byte64_ ; },
		U_FundamentalType::i128_ -> { return type_descriptors_.byte128_; },
		U_FundamentalType::u128_ -> { return type_descriptors_.byte128_; },
		U_FundamentalType::ssize_type_, U_FundamentalType::size_type_ -> { return type_descriptors_.size_type_enum_base; },
		U_FundamentalType::InvalidType,
		U_FundamentalType::void_,
		U_FundamentalType::bool_,
		U_FundamentalType::f32_,
		U_FundamentalType::f64_,
		U_FundamentalType::char8_ ,
		U_FundamentalType::char16_,
		U_FundamentalType::char32_,
		U_FundamentalType::byte8_  ,
		U_FundamentalType::byte16_ ,
		U_FundamentalType::byte32_ ,
		U_FundamentalType::byte64_ ,
		U_FundamentalType::byte128_ -> { halt; /* Wrong underlying type. */ }
	}
}

fn MakeTBAATypeDescriptor( LLVMContextRef llvm_context, LLVMMetadataRef base_descriptor, ust::string_view8 name ) unsafe : LLVMMetadataRef
{
	unsafe
	{
		auto zero_offset_metadata= CreateI64ZeroMetadata( llvm_context );

		return
			CreateMetadataNode(
				llvm_context,
				ust::make_array(
					CreateMetadataString( llvm_context, name ),
					base_descriptor,
					zero_offset_metadata ) );
	}
}

fn CreateI64ZeroMetadata( LLVMContextRef llvm_context ) unsafe : LLVMMetadataRef
{
	return unsafe( LLVMValueAsMetadata( LLVMConstInt( LLVMInt64TypeInContext( llvm_context ), 0u64, LLVMBool::False ) ) );
}

fn CreateMetadataString( LLVMContextRef llvm_context, ust::string_view8 s ) unsafe : LLVMMetadataRef
{
	return unsafe( LLVMMDStringInContext2( llvm_context, s.data(), s.size() ) );
}

fn CreateMetadataNode( LLVMContextRef llvm_context, ust::array_view_imut</LLVMMetadataRef/> elements ) unsafe : LLVMMetadataRef
{
	return unsafe( LLVMMDNodeInContext2( llvm_context, elements.data(), elements.size() ) );
}

} // namespace U1
