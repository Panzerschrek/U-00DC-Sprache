import "long_stable_hash_wrapper.uh"

// If contents of this file changed, source_file_contents_hash_wrapper.cpp must be changed too!

type UserHandle= size_type;

type U1_CalculateLongStableHashCallback= fn( UserHandle data, $(char8) hash_data, size_type hash_size ) unsafe call_conv( "C" );

fn nomangle U1_CalculateLongStableHash(
	$(char8) data,
	size_type size,
	U1_CalculateLongStableHashCallback callback,
	UserHandle callback_data ) unsafe call_conv( "C" );

namespace U1
{

fn CalculateLongStableHashCallbackFunc( UserHandle data, $(char8) hash_data, size_type hash_size ) unsafe call_conv( "C" )
{
	unsafe
	{
		auto result_ptr= cast_ref_unsafe</$(ust::string8)/>(data);
		var ust::string8 &mut result_ref= $>(result_ptr);
		result_ref= ust::string_view8( hash_data, hash_size );
	}
}

fn CalculateLongStableHash( ust::string_view8 source_file_contents ) : ust::string8
{
	unsafe
	{
		var ust::string8 mut result;
		var $(ust::string8) result_ptr= $<(result);
		auto result_handle= cast_ref_unsafe</UserHandle/>(result_ptr);

		U1_CalculateLongStableHash(
			source_file_contents.data(),
			source_file_contents.size(),
			CalculateLongStableHashCallbackFunc,
			result_handle );

		return result;
	}
}

} // namespace U1
