import "../../imports/llvm.uh"

// This file contains some helper functions for LLVM structures manipulations, implementing, using C++.
// If this file changed, "llvm_ext.cpp" must be changed too!

fn nomangle U1_ConstantTokenNone( LLVMContextRef C ) unsafe call_conv( "C" ) : LLVMValueRef;

fn nomangle U1_GetFunctionType(LLVMValueRef f) unsafe call_conv( "C" ) : LLVMTypeRef;

fn nomangle U1_BasicBlockHasPredecessors(LLVMBasicBlockRef basic_block) unsafe call_conv( "C" ) : bool;

fn nomangle nodiscard U1_CreateOrphanInBoundsGEP( LLVMTypeRef t, LLVMValueRef pointer, $(LLVMValueRef) indices, u32 num_indices ) unsafe call_conv( "C" ) : LLVMValueRef;
fn nomangle U1_InsertInstructionAfterAnother(LLVMValueRef src_instructuon, LLVMValueRef instruction_for_insert) unsafe call_conv( "C" );
fn nomangle U1_InsertInstructionAtBasicBlockStart( LLVMBasicBlockRef basic_block, LLVMValueRef instruction ) unsafe call_conv( "C" );

fn nomangle U1_FunctionAddDereferenceableAttr(LLVMValueRef function, u32 index, u64 bytes) unsafe call_conv( "C" );

fn nomangle U1_IsLegalUTF8String( $(char8) start, size_type length ) unsafe call_conv( "C" ) : bool;

fn nomangle U1_ConstDataArray(LLVMTypeRef t, $(byte8) data, size_type data_size, size_type element_count) unsafe call_conv( "C" ) : LLVMValueRef;

fn nomangle U1_TryToPerformReturnValueAllocationOptimization( LLVMValueRef function ) unsafe call_conv( "C" );

// Replace node[0] with node[1] in one call.
// node[0] is deleted.
fn nomangle U1_ReplaceMetadataNodes( $( tup[ LLVMMetadataRef, LLVMMetadataRef ] ) nodes_start, size_type num_nodes ) unsafe call_conv( "C" );
