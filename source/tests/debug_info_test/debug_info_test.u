import "inc.u"

fn FundamentalTypesTest()
{
	var i32 x= -666;
	var u32 y= 3000000000u;
	var f32 f= 3.1415926535f;
	var f64 d= 2.718281828;
	var bool true_value= true, false_value= false;
	var u64 value64= 9870000000000u64;
	var i128 loooong_int= i128(1.23e42);
	var char8 c= 'Q';
	var char16 cc= 'Ž'c16;
	var char32 ccc= 'Я'c32;
	var [ char8, 4 ] ca[ 'W', 'T', 'F', '\0' ];
	var void v0;
	var [ void, 16 ] v1= zero_init;
	var byte8 b0= zero_init, b1(1u8), b_minus_5(-5i8);
	var [ byte16, 3 ] b16_arr[ (7777u16), (-3012i16), (65534u16) ];
	return;
}

fn ArrayTypesTest()
{
	var [ i32, 3 ] i3= zero_init;
	var [ bool, 4 ] b4[ true, true, false, true ];
	var [ f32, 0 ] f0[];
	var[ [ i16, 13 ], 27 ] mut large_array= zero_init;
	large_array[25][3]= 6i16;
	return;
}

fn TupleTypesTest()
{
	var tup[] t0;
	var tup[ i32, f32 ] t1[ 5, 6.0f ];
	var tup[ i32, f32 ] t1_same[ -5, -6.0f ];
	var tup[ bool, bool, bool ] t2= zero_init;
	var tup[ i32, tup[ i16, u16 ], f64 ] t3[ 5, [ -256i16, 13u16 ], 65.32 ];
	return;
}

struct S0
{
	i32 x;
	f32 y;
}

struct S1
{
	i16 i;
	S0 s0;
	f64 d;
	[ f64, 8 ] arr= zero_init;
	f32 value_after_arr= 66.6f;
}

fn StructTypesTest()
{
	var S1 s1{ .i(5), .s0{ .x= -5, .y= -1e16f }, .d= 2.5 };
	return;
}

fn RawPointerTypeTest()
{
	auto mut x= 0;
	auto mut x_ptr= $<(x);
	unsafe
	{
		++x_ptr;
		--x_ptr;
		$>(x_ptr)= 66;
	}

	var $(f32) f_zero= zero_init;

	var S0 mut s{ .x= 65345, .y= 46346.747f };
	auto s_ptr= $<(s);
	unsafe{  $>(s_ptr).y= 0.0f;  }
}

struct StructWithRecursiveTypeDependency
{
	$(StructWithRecursiveTypeDependency) next;
}

fn RecursiveTypeDependencyTest()
{
	var StructWithRecursiveTypeDependency s{ .next= zero_init };
	return;
}

fn MakeS1() : S1
{
	var S1 s= zero_init;
	return s;
}

fn AutoVariablesTest()
{
	auto i = 1488;
	auto u= 228u;
	auto s= MakeS1();
	auto f= -1241525.5454f + s.s0.y;
	return;
}

fn ParametersTestImpl(
	i32 x,
	f32 y,
	S1 s1,
	f64& r0,
	S0& r1 )
{
	return;
}

fn ParametersTest()
{
	var S1 s1{ .i= zero_init, .d= 2.718281828, .s0{ .x= 25, .y= zero_init } };
	ParametersTestImpl( 55, 0.25f, s1, -33.66, s1.s0 );
}

struct StructWithRef
{
	void& @('a') v;
	i32 x= 0;
	S0& @('a') s0;
}

fn StructsWithReferencesTest()
{
	auto b= false;
	var S0 s0{ .x= 661215, .y= -6532.1f };
	unsafe
	{
		var StructWithRef struct_with_ref{ .v= cast_ref_unsafe</void/>(b), .x= -5555, .s0= s0 };
	}
	return;
}

namespace Polymorph
{

class A interface {}
class B polymorph
{
	i32 x= 25;
}

class C : B, A
{
	f32 y= 033.7f;
}

fn PolymorphClassTest()
{
	var C c;
	return;
}

} // namespace Polymorph

fn ToInt( f32 f ) : i32
{
	return i32(f);
}

fn FooRet() : f64
{
	return 0.0;
}

fn RefPass( i32& x ) : i32&
{
	return x;
}

fn FunctionPointersTest()
{
	var (fn()) p0= ParametersTest;
	var (fn(i32 a, f32 b, S1 c, f64& r0, S0& r1)) p1= ParametersTestImpl;
	var (fn(f32 a) : i32) p2= ToInt;
	var (fn(i32& a) : i32&) p3= RefPass;
	var (fn() : f64) p4= FooRet;
	return;
}

enum SomeEnum
{
	Red,
	Green,
	Blue,
	FiftyShadesOfGrey
}

fn EnumTypesTest()
{
	auto g= SomeEnum::Green;
	var [ SomeEnum, 4 ] arr[ SomeEnum::Blue, SomeEnum::Green, SomeEnum::FiftyShadesOfGrey, SomeEnum::Red ];
	return;
}

fn StepInto2(){}
fn StepInto1()
{
	StepInto2();
	StepInto2();
}

fn StepInto0()
{
	StepInto1();
	StepInto1();
	StepInto1();
}

struct StructWithDestructor
{
	fn destructor(){}
}

fn DestructorDebugLocationTest()
{
	var StructWithDestructor s;
}

template</type T/>
fn TemplateFunc(T x) : T
{
	return x * T(2);
}

template</type T/>
fn constexpr TemplateFuncConstexpr(T x) : T
{
	return x / T(2);
}

fn FunctionTemplatesTest()
{
	auto mut i= 72;
	auto mut f= 27.0f;
	TemplateFunc(i);
	TemplateFunc(f);
	TemplateFuncConstexpr(i);
	TemplateFuncConstexpr(f);
	return;
}

template</type T, size_type s/> struct ClassTemplate
{
	[ T, s ] val;
	fn constructor()
		( val= zero_init )
	{}
}

fn ClassTemplateTest()
{
	var ClassTemplate</u32, 4s/> s0;
	var ClassTemplate</f64, 16s/> s1;
}

fn ScopesTest()
{
	auto x= 1;
	{
		auto x= 2.0f;
		{
			auto x= MakeS1();
			{
				auto x= 4s;
				return;
			}
		}
	}
}

fn VariableChangeTest()
{
	auto mut x= 0;
	++x;
	x*= 3;
	x+= 55;
	x/= 2;
	x <<= 5u;
	x -= 22;
	return;
}

fn ReferencesTest()
{
	var i32 x= 55584;
	var i32& x_ref= x;

	var[ f32, 2 ] mut arr[ 6.5f, 7.5f ];
	auto &mut arr_ref= arr;
	return;
}

fn TupleForTest()
{
	var tup[ i32, f32, S0, [ bool, 3 ] ] mut t[ 7, -4.5f, { .x= 666, .y= 667.3f }, [ true, false, true ] ];
	for( el_copy : t )
	{
		StepInto2();
	}

	for( &el_ref : t )
	{
		StepInto2();
	}
}

fn WithOperatorTest()
{
	var S0 mut s { .x= -55, .y= 0.025f };
	with( s_copy : s )
	{
		StepInto2();
	}

	with( &s_ref : s )
	{
		StepInto2();
	}
}

fn generator SomeGenerator() : f32
{
	var S1 mut s1{ .i(5), .s0{ .x= -5, .y= -1e16f }, .d= 2.5 };
	yield 3.14f;
	s1.i= 66i16;
	yield 2.718281828f;
	s1.d= 0.0;
	var StructWithDestructor s;
	yield f32(s1.d);
}

fn GeneratorsTest()
{
	auto mut gen= SomeGenerator();
	while(true)
	{
		if_coro_advance( x : gen )
		{
			continue;
		}
		break;
	}
}

fn LambdasTest()
{
	var i32 mut x= 0;
	var f32 y= 475.3f;
	auto f =
		lambda[&x, y]( u32 arg )
		{
			x= i32(y) + i32(arg);
		};
	f(5u);
}

fn MixinsTest()
{
	auto mut res= MixinFunction(78);
	mixin( "++res; res-= 3;" );
	auto res_doubled= mixin( "res * 2" );
}

mixin( "fn MixinFunction( i32 x ) : i32 { return x * x + x; }" );

fn AllocaTestImpl( size_type s )
{
	alloca u32 arr[ s ];
	return;
}

fn AllocaTest()
{
	AllocaTestImpl( 20s );
	AllocaTestImpl( 16s * 1024s );
}

fn DecomposeDeclarationTest()
{
	{
		var [ i32, 3 ] mut arr[ 66, 77, 88 ];
		auto [ x, y, z ]= move(arr);
		var tup[ f32, u32, bool ] mut t[ 0.45f, 6677u, false ];
		auto [ a, mut b, c ]= move(t);
		b= 0u;
	}
	{
		var void some_void;
		var S0 s0{ .x= 661215, .y= -6532.1f };
		var StructWithRef mut struct_with_ref{ .v= some_void, .x= -5555, .s0= s0 };

		auto { x, s0_ref : s0, some_void_copy : v } = move(struct_with_ref);
		return;
	}
}

fn nomangle main() call_conv( "C" ) : i32
{
	FundamentalTypesTest();
	ArrayTypesTest();
	TupleTypesTest();
	StructTypesTest();
	RawPointerTypeTest();
	RecursiveTypeDependencyTest();
	AutoVariablesTest();
	ParametersTest();
	StructsWithReferencesTest();
	Polymorph::PolymorphClassTest();
	FunctionPointersTest();
	EnumTypesTest();
	StepInto0();
	DestructorDebugLocationTest();
	FunctionTemplatesTest();
	ClassTemplateTest();
	ImportedFunc();
	ScopesTest();
	VariableChangeTest();
	ReferencesTest();
	TupleForTest();
	WithOperatorTest();
	GeneratorsTest();
	LambdasTest();
	MixinsTest();
	AllocaTest();
	DecomposeDeclarationTest();
	return 0;
}
