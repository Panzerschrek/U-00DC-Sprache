import "cpp_linkage.uh"

// Extern C++ function
fn CallCPP( i32 x ) call_conv( "C" );

// Function, exported to C++ module
fn Do( i32 x ) call_conv( "C" ) : f64
{
	CallCPP( x );
	return 1.251;
}

fn NameSpace::Nested() call_conv( "C" )
{
}

fn TakeS( NameSpace::S &imut s ) call_conv( "C" )
{
	CallCPP( i32( typeinfo</typeof(s)/>.size_of ) ); // hack to make "s" used.
}

fn U32ToStr( u32 mut x, [ char8, 64 ] &mut out_str ) call_conv( "C" )
{
	auto constexpr zero_char= '0';
	auto constexpr end_null= '\0';
	if( x == 0u )
	{
		out_str[0u]= zero_char;
		out_str[1u]= end_null;
		return;
	}
	var u32 mut dst= 0u;
	var u32 mut div= 1000000000u;

	while( div > x )
	{
		div/= 10u;
	}

	while( div > 0u )
	{
		auto digit= x / div;
		out_str[dst]= char8( digit + u32(zero_char) );
		++dst;
		x-= digit * div;
		div/= 10u;
	}
	out_str[dst]= end_null;
}

fn CondHalt( bool cond ) call_conv( "C" )
{
	halt if( cond );
}

fn nomangle NoMangleFunctionCPPSide() call_conv( "C" ) : i32;

fn nomangle NoMangleFunction() call_conv( "C" ) : i32
{
	return NoMangleFunctionCPPSide();
}
