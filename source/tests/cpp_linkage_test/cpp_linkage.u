// Extern C++ function
fn CallCPP( i32 x );

// Function, exported to C++ module
fn Do( i32 x ) : f64
{
	CallCPP( x );
	return 1.251;
}

namespace NameSpace
{
	fn Nested()
	{
	}

	struct S{}
}

fn TakeS( NameSpace::S &imut s )
{
}

struct TheClass
{
	fn StaticMethod();
	fn StaticMethod2( i32 x );
}

fn TheClass::StaticMethod()
{
	StaticMethod2( 666 );
}

fn U32ToStr( u32 mut x, [ char8, 64 ] &mut out_str )
{
	auto constexpr zero_char= "0"[0u];
	auto constexpr end_null= 0c8;
	if( x == 0u )
	{
		out_str[0u]= zero_char;
		out_str[1u]= end_null;
		return;
	}
	var u32 mut dst= 0u;
	var u32 mut div= 1000000000u;

	while( div > x )
	{
		div/= 10u;
	}

	while( div > 0u )
	{
		auto digit= x / div;
		out_str[dst]= char8( digit + u32(zero_char) );
		++dst;
		x-= digit * div;
		div/= 10u;
	}
	out_str[dst]= end_null;
}

fn CondHalt( bool cond )
{
	halt if( cond );
}

fn nomangle NoMangleFunctionCPPSide() : i32;

fn nomangle NoMangleFunction() : i32
{
	return NoMangleFunctionCPPSide();
}
