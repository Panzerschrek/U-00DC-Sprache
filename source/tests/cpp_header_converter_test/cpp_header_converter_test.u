import "/c_converted.u"

fn SomeLocalFunc( f32 x ){}


template</ type A />
struct is_same_type_impl
{
	// Use type templates overloading for type equality comparison.
	template</ type B /> struct same</ B />
	{
		auto constexpr value= false;
	}

	template</ /> struct same</ A />
	{
		auto constexpr value= true;
	}
}

template</ type A, type B />
fn constexpr types_are_same() : bool
{
	return is_same_type_impl</A/>::same</B/>::value;
}

template</ size_type size0, size_type size1 />
fn constexpr string_equals( [ char8, size0 ]& s0, [ char8, size1 ]& s1 ) : bool
{
	if( size0 != size1 ) { return false; }
	var size_type mut i(0);
	while( i < size0 )
	{
		if( s0[i] != s1[i] ) { return false; }
		++i;
	}
	return true;
}

fn U_Main() : i32
{
	var i32 one= ONE_CONSTANT;
	static_assert( ONE_CONSTANT == 1 );

	var f64 pi_d= PI_CONSTANT;
	var f32 pi_f= PI_CONSTANT_F;

	var u32 unsigned_constant= UNSIGNED_CONSTANT;
	static_assert( UNSIGNED_CONSTANT == 12345u );

	var i32 hex_constant= HEX_CONSTNT;
	static_assert( HEX_CONSTNT == 0xFF );

	var f64 f64_constants= TWO_CONSTANT_DOUBLE;
	static_assert( TWO_CONSTANT_DOUBLE == 2.0 );

	var f64 small_f64= SMALL_CONSTANT, large_f64= LARGE_CONSTANT;

	static_assert( string_equals( STRING_CONSTANT_ASCII, "WTF?009a\u0000" ) );
	static_assert( string_equals( STRING_CONSTANT_UTF8_IMPLICIT,"Чё?\u0000" ) );
	static_assert( string_equals( STRING_CONSTANT_WITH_SPECIAL_SYMBOLS, "Ü \u0013 one \t two \n quote ' double \" slash \\ \u0000" ) );
	static_assert( CHAR_CONSTANT == "Z"c8 );

	unsafe
	{
		var i32 mut x= 0;
		Function_ZeroArgs();
		Function_ArgVal(x);
		Function_ArgPtr(x);
		Function_ArgConstPtr(x);
		var i32 r0= Function_RetVal();
		var i32& mut r1= Function_RetPtr();
		var i32& imut r2= Function_RetConstPtr();
		Function_UnnamedArgs( 0, 0.0f, 0.0 );
		DuplicatedProto(0);
	}
	{
		static_assert( types_are_same</ CPP_char8, char8 />() );
		static_assert( types_are_same</ CPP_i8 ,  i8 />() );
		static_assert( types_are_same</ CPP_u8 ,  u8 />() );
		static_assert( types_are_same</ CPP_i16, i16 />() );
		static_assert( types_are_same</ CPP_u16, u16 />() );
		static_assert( types_are_same</ CPP_i32, i32 />() );
		static_assert( types_are_same</ CPP_u32, u32 />() );
		static_assert( types_are_same</ CPP_i64, i64 />() );
		static_assert( types_are_same</ CPP_u64, u64 />() );
		static_assert( types_are_same</ CPP_i128, i128 />() );
		static_assert( types_are_same</ CPP_u128, u128 />() );
		static_assert( types_are_same</ CPP_f32, f32 />() );
		static_assert( types_are_same</ CPP_f64, f64 />() );
		static_assert( types_are_same</ ArrayType15, [ i32, 15 ] />() );
		static_assert( types_are_same</ MultidimentionalArrayType44, [ [ f32, 4 ], 4 ] />() );
	}
	{
		var i32 mut a= 0, imut b= 0;
		var RegularStruct s{ .x= 0, .y= 0.0f, .ptr_field= a, .const_ptr_field= b, .function_ptr_filed= SomeLocalFunc };
		unsafe{ s.function_ptr_filed( 3.14f ); }
	}
	{
		var TypedefedStruct mut s{ .data= zero_init };
		s.data[0u]= "f"c8;
	}
	{
		var StructWithAnonimousRecordsInside mut s
		{
			.anon_struct{ .anon_struct_content= 0 },
			.anon_union= zero_init,
			.anon_struct_as_array= zero_init,
		};

		s.anon_struct_as_array[2u].anon_struct_as_array_content= 66;
	}

	static_assert( i32(SequentialEnum::Red) == 0 );
	static_assert( i32(SequentialEnum::Green) == 1 );
	static_assert( i32(SequentialEnum::Blue) == 2 );

	static_assert( NonSequentialEnum_namespace::Zero == 0 );
	static_assert( NonSequentialEnum_namespace::One == 1 );
	static_assert( NonSequentialEnum_namespace::Ten == 10 );
	static_assert( NonSequentialEnum_namespace::MinusTwo == -2 );
	static_assert( NonSequentialEnum_namespace::Large32bit == 5000000 );
	static_assert( NonSequentialEnum_namespace::LargeNegative == -142586 );

	var NonSequentialEnum ersatz_vnum_value= NonSequentialEnum_namespace::Zero;

	return 0;
}
