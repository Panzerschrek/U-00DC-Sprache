fn nomangle main() call_conv( "C" ) : i32
{
	Pass_bool_Test0( false );
	Pass_bool_Test1( true );
	Pass_i8_Test0( 27i8 );
	Pass_i8_Test1( -58i8 );
	Pass_i8_Test2( 64i8, 31i8, 78i8, 120i8, -36i8, 67i8, 13i8, 58i8, 0i8, 45i8, 99i8, 105i8, i8(-128), 127i8, 33i8, -88i8 );
	Pass_u8_Test0( 117u8 );
	Pass_u8_Test1( 134u8 );
	Pass_u8_Test2( u8(249) );
	Pass_i16_Test0( 27346i16 );
	Pass_i16_Test1( -15343i16 );
	Pass_u16_Test0( 17u16 );
	Pass_u16_Test1( 15642u16 );
	Pass_u16_Test2( 30651u16 );
	Pass_u16_Test3( 52188u16 );
	Pass_u16_Test4( 7655u16, 32768u16, 6582u16, 49u16, 0u16, 256u16, 9821u16, 65535u16, 25843u16, 58441u16, 864u16, 8962u16, 123u16, 645u16, 32767u16, 33u16 );
	Pass_i32_Test0( 274383 );
	Pass_i32_Test1( -7456 );
	Pass_i32_Test2( 0x78ABCDEF );
	Pass_i32_Test3( -674348993 );
	Pass_i32_Test4( 6531, -75247554, 456424, 8565523, 0, 0x7FFFFFFF, 54, -i32(0x80000000), 643, 7621375, 7567863, -24782, 786234786, 12308562, -8624557, 867245 );
	Pass_u32_Test0( 78u );
	Pass_u32_Test1( 45677u );
	Pass_u32_Test2( 6633477u );
	Pass_u32_Test3( 0xFEDCBA98u );
	Pass_i64_Test0( 636746i64 );
	Pass_i64_Test1( -36i64 );
	Pass_i64_Test2( -6433763852258913i64 );
	Pass_i64_Test3( 7434744889515923245i64 );
	Pass_u64_Test0( 7612u64 );
	Pass_u64_Test1( 2147521472u64 );
	Pass_u64_Test2( 7445889504678477554u64 );
	Pass_u64_Test3( 18246784073809531617u64 );
	Pass_u64_Test4( 36774676u64, 78u64, 478543737834754785u64, 0u64, 21u64, 78542136u64, 8847838u64, 47547247472367861u64, 7623758235u64, 88524u64, 76521u64, 0xFF00112233445566u64, 77852u64, 651374u64, 86u64, 3741356u64 );
	Pass_i128_Test0( i128( ( ( 0x0123456789ABCDEFu128) << 64u ) | 0xFEDCBA9876543210u128 ) );
	Pass_u128_Test0( ( ( 0xFEDCBA9876543210u128) << 64u ) | 0x0123456789ABCDEFu128 );
	Pass_char8_Test0( 'Q' );
	Pass_char8_Test1( '!' );
	Pass_char8_Test2( ' ' );
	Pass_char8_Test3( char8( 240 ) );
	Pass_char16_Test0( 'Ğ–'c16 );
	Pass_char16_Test1( 'ê™¤'c16 );
	Pass_char32_Test0( 'ğŸ˜€'c32 );
	Pass_f32_Test0( 0.0f );
	Pass_f32_Test1( 0.125f );
	Pass_f32_Test2( 6743.5f );
	Pass_f32_Test3( -7689543378437.0f );
	Pass_f32_Test4( 1.0f / 0.0f );
	Pass_f32_Test5( 0.0f / 0.0f );
	Pass_f32_Test6( 1786.5f, -643.4f, 754.0f, 353347.0f, 3000000.0f, -4454.25f, 0.0f, 66434.0f, 3643.3f, 367341.5f, 67436.125f, 378436.0f, 42.75f, -7542.2f, 6564.0f, 7854300000000.0f );
	Pass_f64_Test0( 0.0 );
	Pass_f64_Test1( 0.0625 );
	Pass_f64_Test2( 173.25 );
	Pass_f64_Test3( -569907695478437.0 );
	Pass_f64_Test4( 1.0 / 0.0 );
	Pass_f64_Test5( 0.0 / 0.0 );
	Pass_f64_Test6( 364341.5, 1786.5, -643.4, 353347.0, 70000000.0, -4454.25, 7854320000000.0, 0.0, 66434.0, 3643.3, 67436.125, 754.0, 378436.0, -42.75, -6552.4, 6564.0 );
	{
		var [ u8, 1 ] arg[ 0xB4u8 ];
		Pass_u8_x1_Test0( arg );
	}
	{
		var [ u8, 2 ] arg[ 0xABu8, 0x7Cu8 ];
		Pass_u8_x2_Test0( arg );
	}
	{
		var [ u8, 3 ] arg[ 0x16u8, 0xF7u8, 0x75u8 ];
		Pass_u8_x3_Test0( arg );
	}
	{
		var [ u8, 4 ] arg[ 0x01u8, 0x23u8, 0x45u8, 0x67u8 ];
		Pass_u8_x4_Test0( arg );
	}
	{
		var [ u8, 5 ] arg[ 0x89u8, 0xABu8, 0xCDu8, 0xEFu8, 0x76u8 ];
		Pass_u8_x5_Test0( arg );
	}
	{
		var [ u8, 6 ] arg[ 0x11u8, 0x22u8, 0x33u8, 0x44u8, 0x55u8, 0x66u8 ];
		Pass_u8_x6_Test0( arg );
	}
	{
		var [ u8, 7 ] arg[ 0x77u8, 0x88u8, 0x99u8, 0xAAu8, 0xBBu8, 0xCCu8, 0xDDu8 ];
		Pass_u8_x7_Test0( arg );
	}
	{
		var [ u8, 8 ] arg[ 0xF0u8, 0xE1u8, 0xD2u8, 0xC3u8, 0xB4u8, 0xA5u8, 0x96u8, 0x87u8 ];
		Pass_u8_x8_Test0( arg );
	}
	{
		var [ u8, 9 ] arg[ 0x01u8, 0x12u8, 0x23u8, 0x34u8, 0x45u8, 0x56u8, 0x67u8, 0x78u8, 0x89u8 ];
		Pass_u8_x9_Test0( arg );
	}
	{
		var [ u8, 10 ] arg[ 0x9Au8, 0xABu8, 0xBCu8, 0xCDu8, 0xDEu8, 0xEFu8, 0xF0u8, 0x01u8, 0x12u8, 0x23u8 ];
		Pass_u8_x10_Test0( arg );
	}
	{
		var [ u8, 11 ] arg[ 0xF0u8, 0x1Eu8, 0xD2u8, 0x3Cu8, 0xB4u8, 0x5Au8, 0x96u8, 0x78u8, 0x11u8, 0x22u8, 0x33u8 ];
		Pass_u8_x11_Test0( arg );
	}
	{
		var [ u8, 12 ] arg[ 0xF7u8, 0x8Bu8, 0xE6u8, 0x72u8, 0x85u8, 0x00u8, 0x3Cu8, 0xFEu8, 0xD5u8, 0x91u8, 0x4Eu8, 0x67u8 ];
		Pass_u8_x12_Test0( arg );
	}
	{
		var [ u8, 13 ] mut arg= zero_init;
		for( auto mut i= 0u; i < 13u; ++i )
		{
			arg[i]= u8( i * i + i * 7u );
		}
		Pass_u8_x13_Test0( arg );
	}
	{
		var [ u8, 14 ] mut arg= zero_init;
		for( auto mut i= 0u; i < 14u; ++i )
		{
			arg[i]= u8( i * i - i * 5u + 3u );
		}
		Pass_u8_x14_Test0( arg );
	}
	{
		var [ u8, 15 ] mut arg= zero_init;
		for( auto mut i= 0u; i < 15u; ++i )
		{
			arg[i]= u8( i * i + i * 3u - 7u );
		}
		Pass_u8_x15_Test0( arg );
	}
	{
		var [ u8, 16 ] mut arg= zero_init;
		for( auto mut i= 0u; i < 16u; ++i )
		{
			arg[i]= u8( 3u * i * i + i * 7u - 2u );
		}
		Pass_u8_x16_Test0( arg );
	}
	{
		var [ u8, 17 ] mut arg= zero_init;
		for( auto mut i= 0u; i < 17u; ++i )
		{
			arg[i]= u8( i * i + i * 13u - 3567u );
		}
		Pass_u8_x17_Test0( arg );
	}
	{
		var [ u8, 29 ] mut arg= zero_init;
		for( auto mut i= 0u; i < 29u; ++i )
		{
			arg[i]= u8( ( i * i ) ^ ( i + 13u ) );
		}
		Pass_u8_x29_Test0( arg );
	}
	{
		var [ u8, 371 ] mut arg= zero_init;
		for( auto mut i= 0u; i < 371u; ++i )
		{
			arg[i]= u8( i * 3u - i * i * 6u + 564u );
		}
		Pass_u8_x371_Test0( arg );
	}
	{
		var [ i16, 1 ] arg[ -27816i16 ];
		Pass_i16_x1_Test0( arg );
	}
	{
		var [ i16, 2 ] arg[ 1754i16, -6534i16 ];
		Pass_i16_x2_Test0( arg );
	}
	{
		var [ i16, 3 ] arg[ -1234i16, 30431i16, 561i16 ];
		Pass_i16_x3_Test0( arg );
	}
	{
		var [ i16, 4 ] arg[ 29554i16, -63i16, 2452i16, -22543i16 ];
		Pass_i16_x4_Test0( arg );
	}
	{
		var [ i16, 5 ] arg[ -3431i16, 9655i16, 15667i16, 46i16, 19734i16 ];
		Pass_i16_x5_Test0( arg );
	}
	{
		var [ i16, 6 ] arg[ 3451i16, 29655i16, 93i16, -5667i16, 19734i16, -4323i16 ];
		Pass_i16_x6_Test0( arg );
	}
	{
		var [ i16, 7 ] arg[ 3351i16, 2955i16, 5393i16, -5667i16, -4323i16, 19234i16, -3373i16 ];
		Pass_i16_x7_Test0( arg );
	}
	{
		var [ i16, 8 ] arg[ -3373i16, 3351i16, -5953i16, 15353i16, 5667i16, 4323i16, -29214i16, 5342i16 ];
		Pass_i16_x8_Test0( arg );
	}
	{
		var [ i16, 9 ] arg[ 7322i16, -3373i16, 3351i16, -5953i16, 5667i16, -29214i16, 5342i16, 25353i16, -6343i16 ];
		Pass_i16_x9_Test0( arg );
	}
	{
		var [ i16, 15 ] mut arg= zero_init;
		for( auto mut i= 0; i < 15; ++i )
		{
			arg[ size_type(i) ]= i16( i * i * 7 - i * 37 + 3 );
		}
		Pass_i16_x15_Test0( arg );
	}
	{
		var [ i16, 83 ] mut arg= zero_init;
		for( auto mut i= 0; i < 83; ++i )
		{
			arg[ size_type(i) ]= i16( i * i * 5 - i * 43 + 11 );
		}
		Pass_i16_x83_Test0( arg );
	}
	{
		var [ u32, 1 ] arg[ 0xFBA633ADu ];
		Pass_u32_x1_Test0( arg );
	}
	{
		var [ u32, 2 ] arg[ 0x5356A4D7u, 0x05AD74CBu ];
		Pass_u32_x2_Test0( arg );
	}
	{
		var [ u32, 3 ] arg[ 0x15A67FCBu, 0x5D56A437u, 0xAB4C8F12u ];
		Pass_u32_x3_Test0( arg );
	}
	{
		var [ u32, 4 ] arg[ 0x23A68FCAu, 0x1E5AA732u, 0xC34D8F12u, 0xF354AB3Eu ];
		Pass_u32_x4_Test0( arg );
	}
	{
		var [ u32, 5 ] arg[ 0x5E5AE732u, 0x33A68FCAu, 0xE34D8F12u, 0xD354AB3Eu, 0x03AD63C3u ];
		Pass_u32_x5_Test0( arg );
	}
	{
		var [ u32, 6 ] arg[ 0x34A68FCEu, 0x5E53E732u, 0xE34D8A12u, 0x03ADE3C3u, 0xD354CB3Eu, 0x42D4E6C8u ];
		Pass_u32_x6_Test0( arg );
	}
	{
		var [ u32, 7 ] arg[ 0x14A68FCEu, 0x5F53E732u, 0x42D4E6F8u, 0xE36D8A12u, 0x63ADF3C3u, 0x7354CE3Eu, 0x63E7F7C5u ];
		Pass_u32_x7_Test0( arg );
	}
	{
		var [ u32, 8 ] arg[ 0xE3E7F731u, 0xE4A686CEu, 0xD2D4E638u, 0xF36D8A62u, 0x63ADF4C3u, 0x7E54CE3Eu, 0xDF53E732u, 0xC3E47C15u ];
		Pass_u32_x8_Test0( arg );
	}
	{
		var [ u32, 9 ] arg[ 0xE3E1F731u, 0xE4A686CEu, 0x5E7CD38Fu, 0xD2D48638u, 0xF36D8A62u, 0x63ADF5C3u, 0x7E54CE3Eu, 0xDF51E732u, 0xE3E47C15u ];
		Pass_u32_x9_Test0( arg );
	}
	{
		var [ u32, 17 ] mut arg= zero_init;
		for( auto mut i= 0u; i < 17u; ++i )
		{
			arg[ i ]= u32( i * i * i * 37u + i * i * 52u + i * 12u + 36747u );
		}
		Pass_u32_x17_Test0( arg );
	}
	{
		var [ u64, 1 ] arg[ 0xFBA633ADE4A686CEu ];
		Pass_u64_x1_Test0( arg );
	}
	{
		var [ u64, 2 ] arg[ 0xEBA631ADE4968FC3u64, 0x5E7CD38FDF53E732u64 ];
		Pass_u64_x2_Test0( arg );
	}
	{
		var [ u64, 3 ] arg[ 0x5E72D38FDF53E73Eu64, 0xEBA631ACE4968FC4u64, 0xC3E47C1534A68FCEu64 ];
		Pass_u64_x3_Test0( arg );
	}
	{
		var [ u64, 4 ] arg[ 0xE3E7F731AB4C8F12u64, 0x1E72D38FDF52E73Eu64, 0xEBA631FCE4968FC4u64, 0xC3E4741534A68FCEu64 ];
		Pass_u64_x4_Test0( arg );
	}
	{
		var [ u64, 5 ] arg[ 0x13E7F7313B4C8F12u64, 0x1E72D38FDC52E79Eu64, 0x7353CE3ED2D48638u64, 0xFBA631FCE1968FC4u64, 0xC3E1741534A68F7Eu64 ];
		Pass_u64_x5_Test0( arg );
	}
	{
		var [ u64, 11 ] mut arg= zero_init;
		for( auto mut i= 0u64; i < 11u64; ++i )
		{
			arg[i]= i * i * i * 337547u64 + i * i * i * 563454548u64 + 34565224787u64;
		}
		Pass_u64_x11_Test0( arg );
	}
	{
		var [ u128, 1 ] arg[ ( ( u128( 0xEBA631ADE4968FC3u ) << 64u ) | 0x5E7CD38FDF53E732u128 ) ];
		Pass_u128_x1_Test0( arg );
	}
	{
		var [ u128, 2 ] arg[
			( ( u128( 0xEEA631ADE4968FC3u ) << 64u ) | 0x5E7CD3CFDF53E732u128 ),
			( ( u128( 0x7353CE3ED2D48638u ) << 64u ) | 0xC3E4741534A68FCEu128 ) ];
		Pass_u128_x2_Test0( arg );
	}
	{
		var [ u128, 3 ] arg[
			( ( u128( 0x1EA63AADE4968FC3u ) << 64u ) | 0x5E7CDECFDF53E738u128 ),
			( ( u128( 0x7353CE3ED2D48138u ) << 64u ) | 0xC354741534A68FFEu128 ),
			( ( u128( 0x7353CE3ED2D48638u ) << 64u ) | 0x13E7F7313B4C8F12u128 ) ];
		Pass_u128_x3_Test0( arg );
	}
	{
		var [ f32, 1 ] arg[ -7878.25f ];
		Pass_f32_x1_Test0( arg );
	}
	{
		var [ f32, 2 ] arg[ 7.5f, 0.0625f ];
		Pass_f32_x2_Test0( arg );
	}
	{
		var [ f32, 3 ] arg[ 72.15f, 0.0f, -0.125f ];
		Pass_f32_x3_Test0( arg );
	}
	{
		var [ f32, 4 ] arg[ 3712.2f, 663300.0f, -336.25f, 250000000.0f ];
		Pass_f32_x4_Test0( arg );
	}
	{
		var [ f32, 5 ] arg[ -536.25f, 4711.4f, 66330230.0f, 270000000.0f, -5333566.0f ];
		Pass_f32_x5_Test0( arg );
	}
	{
		var [ f32, 6 ] arg[ -4333563.0f, -536.25f, 4712.8f, 26330231.0f, 130000000.0f, 0.01f ];
		Pass_f32_x6_Test0( arg );
	}
	{
		var [ f32, 7 ] arg[ 3712.3f, -1536.25f, 2633031.0f, -4323565.0f, 13005000.0f, 0.02f, -6434.75f ];
		Pass_f32_x7_Test0( arg );
	}
	{
		var [ f32, 8 ] arg[ 3742.5f, 13005010.0f, -1566.25f, 1643031.0f, -432515.5f, 0.04f, -634.75f, 164363.0f ];
		Pass_f32_x8_Test0( arg );
	}
	{
		var [ f32, 9 ] arg[ 162363.0f, 3742.7f, -1563.25f, 1644031.0f, -437515.5f, 0.08f, 13005210.0f, -534.75f, 345423.0f ];
		Pass_f32_x9_Test0( arg );
	}
	{
		var [ f32, 15 ] mut arg= zero_init;
		for( auto mut i= 0u; i < 15u; ++i )
		{
			arg[i]= f32(i) * f32(i) * 13.5f + 153.25f;
		}
		Pass_f32_x15_Test0( arg );
	}
	{
		var [ f32, 47 ] mut arg= zero_init;
		for( auto mut i= 0u; i < 47u; ++i )
		{
			arg[i]= f32(i) * f32(i) * 12.75f + 253.5f;
		}
		Pass_f32_x47_Test0( arg );
	}
	{
		var [ f64, 1 ] arg[ -7878.25 ];
		Pass_f64_x1_Test0( arg );
	}
	{
		var [ f64, 2 ] arg[ 7.5, 0.0625 ];
		Pass_f64_x2_Test0( arg );
	}
	{
		var [ f64, 3 ] arg[ 72.15, 0.0, -0.125 ];
		Pass_f64_x3_Test0( arg );
	}
	{
		var [ f64, 4 ] arg[ 3712.2, 663300.0, -336.25, 250000000.0 ];
		Pass_f64_x4_Test0( arg );
	}
	{
		var [ f64, 5 ] arg[ -536.25, 4711.4, 66330230.0, 270000000.0, -5333566.0 ];
		Pass_f64_x5_Test0( arg );
	}
	{
		var [ f64, 6 ] arg[ -4333563.0, -536.25, 4712.8, 26330231.0, 130000000.0, 0.01 ];
		Pass_f64_x6_Test0( arg );
	}
	{
		var [ f64, 7 ] arg[ 3712.3, -1536.25, 2633031.0, -4323565.0, 13005000.0, 0.02, -6434.75 ];
		Pass_f64_x7_Test0( arg );
	}
	{
		var [ f64, 8 ] arg[ 3742.5, 13005010.0, -1566.25, 1643031.0, -432515.5, 0.04, -634.75, 164363.0 ];
		Pass_f64_x8_Test0( arg );
	}
	{
		var [ f64, 9 ] arg[ 162363.0, 3742.7, -1563.25, 1644031.0, -437515.5, 0.08, 13005210.0, -534.75, 345423.0 ];
		Pass_f64_x9_Test0( arg );
	}
	{
		var [ f64, 15 ] mut arg= zero_init;
		for( auto mut i= 0u; i < 15u; ++i )
		{
			arg[i]= f64(i) * f64(i) * 13.5 + 153.25;
		}
		Pass_f64_x15_Test0( arg );
	}
	{
		var [ f64, 47 ] mut arg= zero_init;
		for( auto mut i= 0u; i < 47u; ++i )
		{
			arg[i]= f64(i) * f64(i) * 12.75 + 253.5;
		}
		Pass_f64_x47_Test0( arg );
	}
	Pass_char8_x1_Test0( "H" );
	Pass_char8_x2_Test0( "-8" );
	Pass_char8_x3_Test0( "Kek" );
	Pass_char8_x4_Test0( "SPQR" );
	Pass_char8_x5_Test0( "ApplE" );
	Pass_char8_x6_Test0( "56 to " );
	Pass_char8_x7_Test0( "@#--ABe" );
	Pass_char8_x8_Test0( "S.P.Q.R." );
	Pass_char8_x9_Test0( "Ğ–Ğ¾Ğ¿Ğ°!" );
	Pass_char8_x10_Test0( "Black Mesa" );
	Pass_char8_x11_Test0( "qwertyuiop[" );
	Pass_char8_x12_Test0( "][poiuytrewq" );
	Pass_char8_x13_Test0( "Computerliebe" );
	Pass_char8_x14_Test0( "11 + 22 = some" );
	Pass_char8_x15_Test0( "ABCDEFGHIJKLMNO" );
	Pass_char8_x16_Test0( "Er ist wieder da" );
	Pass_char8_x17_Test0( "XY = 33 + 44 - 55" );
	Pass_char8_x32_Test0( "0123456789abcdefFEDCBA9876543210" );
	Pass_char8_x39_Test0( "Ficket euch, ihr beleidigt meine Augen!" );
	{
		var tup[ i8, u8 ] arg[ -76i8, 214u8 ];
		Pass_tup_i8_u8_Test0( arg );
	}
	{
		var tup[ i8, u8 ] arg[ 127i8, 13u8 ];
		Pass_tup_i8_u8_Test1( arg );
	}
	{
		var tup[ i8, i16 ] arg[ -72i8, 31000i16 ];
		Pass_tup_i8_i16_Test0( arg );
	}
	{
		var tup[ i8, i16 ] arg[ 105i8, -27823i16 ];
		Pass_tup_i8_i16_Test1( arg );
	}
	{
		var tup[ i8, u32 ] arg[ 98i8, 0xFA56DE4Fu ];
		Pass_tup_i8_u32_Test0( arg );
	}
	{
		var tup[ i8, u32 ] arg[ -123i8, 0x3AC6DE1Fu ];
		Pass_tup_i8_u32_Test1( arg );
	}
	{
		var tup[ i8, i64 ] arg[ 72i8, 6336747347783754868 ];
		Pass_tup_i8_i64_Test0( arg );
	}
	{
		var tup[ i8, i64 ] arg[ -13i8, -642476347823222 ];
		Pass_tup_i8_i64_Test1( arg );
	}
	{
		var tup[ i8, u128 ] arg[ 71i8, ( ( 0x0123456789ABCDEFu128 << 64u ) | 0xFEDCBA9876543210u128 ) ];
		Pass_tup_i8_u128_Test0( arg );
	}
	{
		var tup[ i8, u128 ] arg[ -88i8, ( ( 0xFEDCBA9876543210u128 << 64u ) | 0x0123456789ABCDEFu128 ) ];
		Pass_tup_i8_u128_Test1( arg );
	}
	{
		var tup[ i8, f32 ] arg[ 78i8, 6763.5f ];
		Pass_tup_i8_f32_Test0( arg );
	}
	{
		var tup[ i8, f32 ] arg[ -124i8, -6346470.0f ];
		Pass_tup_i8_f32_Test1( arg );
	}
	{
		var tup[ i8, f64 ] arg[ 53i8, -67163.25 ];
		Pass_tup_i8_f64_Test0( arg );
	}
	{
		var tup[ i8, f64 ] arg[ -97i8, 251.0 ];
		Pass_tup_i8_f64_Test1( arg );
	}
	{
		var tup[ u16, i8 ] arg[ 1245u16, 114i8 ];
		Pass_tup_u16_i8_Test0( arg );
	}
	{
		var tup[ u16, i8 ] arg[ 48437u16, -13i8 ];
		Pass_tup_u16_i8_Test1( arg );
	}
	{
		var tup[ u16, u16 ] arg[ 43311u16, 31000u16 ];
		Pass_tup_u16_u16_Test0( arg );
	}
	{
		var tup[ u16, u16 ] arg[ 37u16, 57823u16 ];
		Pass_tup_u16_u16_Test1( arg );
	}
	{
		var tup[ u16, i32 ] arg[ 1298u16, -533167754 ];
		Pass_tup_u16_i32_Test0( arg );
	}
	{
		var tup[ u16, i32 ] arg[ 65530u16, 336637444 ];
		Pass_tup_u16_i32_Test1( arg );
	}
	{
		var tup[ u16, u64 ] arg[ 257u16, 0x08192A3B4C5D6E7Fu ];
		Pass_tup_u16_u64_Test0( arg );
	}
	{
		var tup[ u16, u64 ] arg[ 56316u16, 0xF7E6D5C4B3A29180u ];
		Pass_tup_u16_u64_Test1( arg );
	}
	{
		var tup[ u16, i128 ] arg[ 712u16, ( ( 0x0123456789ABCDEFi128 << 64u ) | 0x7EDCBA9876543210i128 ) ];
		Pass_tup_u16_i128_Test0( arg );
	}
	{
		var tup[ u16, i128 ] arg[ 8812u16, ( ( 0x1EDCBA9876543210i128 << 64u ) | 0x0123456789ABCDEFi128 ) ];
		Pass_tup_u16_i128_Test1( arg );
	}
	{
		var tup[ u16, f32 ] arg[ 2467u16, 6263.5f ];
		Pass_tup_u16_f32_Test0( arg );
	}
	{
		var tup[ u16, f32 ] arg[ 9850u16, -6356470.0f ];
		Pass_tup_u16_f32_Test1( arg );
	}
	{
		var tup[ u16, f64 ] arg[ 3126u16, -37163.125 ];
		Pass_tup_u16_f64_Test0( arg );
	}
	{
		var tup[ u16, f64 ] arg[ 65535u16, 253.0 ];
		Pass_tup_u16_f64_Test1( arg );
	}
	{
		var tup[ i32, u8 ] arg[ -3347237, 214u8 ];
		Pass_tup_i32_u8_Test0( arg );
	}
	{
		var tup[ i32, u8 ] arg[ 9553344, 13u8 ];
		Pass_tup_i32_u8_Test1( arg );
	}
	{
		var tup[ i32, i16 ] arg[ -346314, 31000i16 ];
		Pass_tup_i32_i16_Test0( arg );
	}
	{
		var tup[ i32, i16 ] arg[ 78656858, -27823i16 ];
		Pass_tup_i32_i16_Test1( arg );
	}
	{
		var tup[ i32, u32 ] arg[ 7542475, 0xFA56DE4Fu ];
		Pass_tup_i32_u32_Test0( arg );
	}
	{
		var tup[ i32, u32 ] arg[ -36131647, 0x3AC6DE1Fu ];
		Pass_tup_i32_u32_Test1( arg );
	}
	{
		var tup[ i32, i64 ] arg[ 847823478, 6336747347783754868 ];
		Pass_tup_i32_i64_Test0( arg );
	}
	{
		var tup[ i32, i64 ] arg[ -854647, -642476347823222 ];
		Pass_tup_i32_i64_Test1( arg );
	}
	{
		var tup[ i32, u128 ] arg[ -643647, ( ( 0x0123456789ABCDEFu128 << 64u ) | 0xFEDCBA9876543210u128 ) ];
		Pass_tup_i32_u128_Test0( arg );
	}
	{
		var tup[ i32, u128 ] arg[ 856247, ( ( 0xFEDCBA9876543210u128 << 64u ) | 0x0123456789ABCDEFu128 ) ];
		Pass_tup_i32_u128_Test1( arg );
	}
	{
		var tup[ i32, f32 ] arg[ 7542347, 6763.5f ];
		Pass_tup_i32_f32_Test0( arg );
	}
	{
		var tup[ i32, f32 ] arg[ -334642, -6346470.0f ];
		Pass_tup_i32_f32_Test1( arg );
	}
	{
		var tup[ i32, f64 ] arg[ 6413647, -67163.25 ];
		Pass_tup_i32_f64_Test0( arg );
	}
	{
		var tup[ i32, f64 ] arg[ -5674137, 251.0 ];
		Pass_tup_i32_f64_Test1( arg );
	}
	{
		var tup[ u64, i8 ] arg[ 0xFEDCBA9876543210u, 114i8 ];
		Pass_tup_u64_i8_Test0( arg );
	}
	{
		var tup[ u64, i8 ] arg[ 0xFED7BA9876543E10u, -13i8 ];
		Pass_tup_u64_i8_Test1( arg );
	}
	{
		var tup[ u64, u16 ] arg[ 0x3EDCBA987654321Cu, 31000u16 ];
		Pass_tup_u64_u16_Test0( arg );
	}
	{
		var tup[ u64, u16 ] arg[ 0x3EDCBAE87654721Cu, 57823u16 ];
		Pass_tup_u64_u16_Test1( arg );
	}
	{
		var tup[ u64, i32 ] arg[ 0x9EDCBAEA7654721Cu, -533167754 ];
		Pass_tup_u64_i32_Test0( arg );
	}
	{
		var tup[ u64, i32 ] arg[ 0x91DCBAEA765472ECu, 336637444 ];
		Pass_tup_u64_i32_Test1( arg );
	}
	{
		var tup[ u64, u64 ] arg[ 0x91DC6AEA765477ECu, 0x08192A3B4C5D6E7Fu ];
		Pass_tup_u64_u64_Test0( arg );
	}
	{
		var tup[ u64, u64 ] arg[ 0xD1DC6AEA7E5477ECu, 0xF7E6D5C4B3A29180u ];
		Pass_tup_u64_u64_Test1( arg );
	}
	{
		var tup[ u64, i128 ] arg[ 0xD1D16AEA7E54778Cu, ( ( 0x0123456789ABCDEFi128 << 64u ) | 0x7EDCBA9876543210i128 ) ];
		Pass_tup_u64_i128_Test0( arg );
	}
	{
		var tup[ u64, i128 ] arg[ 0x11D16AEA7E54278Cu, ( ( 0x1EDCBA9876543210i128 << 64u ) | 0x0123456789ABCDEFi128 ) ];
		Pass_tup_u64_i128_Test1( arg );
	}
	{
		var tup[ u64, f32 ] arg[ 0x1ED16AEA7E54278Cu, 6263.5f ];
		Pass_tup_u64_f32_Test0( arg );
	}
	{
		var tup[ u64, f32 ] arg[ 0x1ED1AAEA7E54279Cu, -6356470.0f ];
		Pass_tup_u64_f32_Test1( arg );
	}
	{
		var tup[ u64, f64 ] arg[ 0xCED164EA7E54278Cu, -37163.125 ];
		Pass_tup_u64_f64_Test0( arg );
	}
	{
		var tup[ u64, f64 ] arg[ 0xCE1164EA7354278Cu, 253.0 ];
		Pass_tup_u64_f64_Test1( arg );
	}
	{
		var tup[ f32, u8 ] arg[ -3347237.0f, 214u8 ];
		Pass_tup_f32_u8_Test0( arg );
	}
	{
		var tup[ f32, u8 ] arg[ 3643.25f, 13u8 ];
		Pass_tup_f32_u8_Test1( arg );
	}
	{
		var tup[ f32, i16 ] arg[ -346314.0f, 31000i16 ];
		Pass_tup_f32_i16_Test0( arg );
	}
	{
		var tup[ f32, i16 ] arg[ 43440.1f, -27823i16 ];
		Pass_tup_f32_i16_Test1( arg );
	}
	{
		var tup[ f32, u32 ] arg[ 5336.0f, 0xFA56DE4Fu ];
		Pass_tup_f32_u32_Test0( arg );
	}
	{
		var tup[ f32, u32 ] arg[ -3346477.25f, 0x3AC6DE1Fu ];
		Pass_tup_f32_u32_Test1( arg );
	}
	{
		var tup[ f32, i64 ] arg[ 5366.5f, 6336747347783754868 ];
		Pass_tup_f32_i64_Test0( arg );
	}
	{
		var tup[ f32, i64 ] arg[ -0.0625f, -642476347823222 ];
		Pass_tup_f32_i64_Test1( arg );
	}
	{
		var tup[ f32, u128 ] arg[ -3366.75f, ( ( 0x0123456789ABCDEFu128 << 64u ) | 0xFEDCBA9876543210u128 ) ];
		Pass_tup_f32_u128_Test0( arg );
	}
	{
		var tup[ f32, u128 ] arg[ 0.125f, ( ( 0xFEDCBA9876543210u128 << 64u ) | 0x0123456789ABCDEFu128 ) ];
		Pass_tup_f32_u128_Test1( arg );
	}
	{
		var tup[ f32, f32 ] arg[ 444666.0f, 6763.5f ];
		Pass_tup_f32_f32_Test0( arg );
	}
	{
		var tup[ f32, f32 ] arg[ -15215.2f, -6346470.0f ];
		Pass_tup_f32_f32_Test1( arg );
	}
	{
		var tup[ f32, f64 ] arg[ 634663660000.0f, -67163.25 ];
		Pass_tup_f32_f64_Test0( arg );
	}
	{
		var tup[ f32, f64 ] arg[ -333636.5f, 251.0 ];
		Pass_tup_f32_f64_Test1( arg );
	}
	{
		var tup[ f64, i8 ] arg[ 44.25, 114i8 ];
		Pass_tup_f64_i8_Test0( arg );
	}
	{
		var tup[ f64, i8 ] arg[ -3615.2, -13i8 ];
		Pass_tup_f64_i8_Test1( arg );
	}
	{
		var tup[ f64, u16 ] arg[ 66547.0, 31000u16 ];
		Pass_tup_f64_u16_Test0( arg );
	}
	{
		var tup[ f64, u16 ] arg[ 0.02, 57823u16 ];
		Pass_tup_f64_u16_Test1( arg );
	}
	{
		var tup[ f64, i32 ] arg[ 54647.25, -533167754 ];
		Pass_tup_f64_i32_Test0( arg );
	}
	{
		var tup[ f64, i32 ] arg[ -0.5, 336637444 ];
		Pass_tup_f64_i32_Test1( arg );
	}
	{
		var tup[ f64, u64 ] arg[ 447.2, 0x08192A3B4C5D6E7Fu ];
		Pass_tup_f64_u64_Test0( arg );
	}
	{
		var tup[ f64, u64 ] arg[ 7372483800000.0, 0xF7E6D5C4B3A29180u ];
		Pass_tup_f64_u64_Test1( arg );
	}
	{
		var tup[ f64, i128 ] arg[ -5362370.5, ( ( 0x0123456789ABCDEFi128 << 64u ) | 0x7EDCBA9876543210i128 ) ];
		Pass_tup_f64_i128_Test0( arg );
	}
	{
		var tup[ f64, i128 ] arg[ -37485856855542.0, ( ( 0x1EDCBA9876543210i128 << 64u ) | 0x0123456789ABCDEFi128 ) ];
		Pass_tup_f64_i128_Test1( arg );
	}
	{
		var tup[ f64, f32 ] arg[ 2632647.0, 6263.5f ];
		Pass_tup_f64_f32_Test0( arg );
	}
	{
		var tup[ f64, f32 ] arg[ 11.125, -6356470.0f ];
		Pass_tup_f64_f32_Test1( arg );
	}
	{
		var tup[ f64, f64 ] arg[ -1.75, -37163.125 ];
		Pass_tup_f64_f64_Test0( arg );
	}
	{
		var tup[ f64, f64 ] arg[ 0.0, 253.0 ];
		Pass_tup_f64_f64_Test1( arg );
	}
	{
		var tup[ u32, u16, u8 ] arg[ 0x01234567u32, 0x89ABu16, 0xCDu8 ];
		Pass_tup_u32_u16_u8_Test0( arg );
	}
	{
		var tup[ u32, u16, u16 ] arg[ 0x01234567u32, 0x89ABu16, 0xCDEFu16 ];
		Pass_tup_u32_u16_u16_Test0( arg );
	}
	{
		var tup[ u8, u16, u32 ] arg[ 0x01u8, 0x2345u16, 0x6789ABCDu32 ];
		Pass_tup_u8_u16_u32_Test0( arg );
	}
	{
		var tup[ u16, u16, u32 ] arg[ 0x0123u16, 0x4567u16, 0x89ABCDEFu32 ];
		Pass_tup_u16_u16_u32_Test0( arg );
	}
	{
		var tup[ u64, u32, u16, u8 ] arg[ 0xFEDCBA9876543210u, 0x01234567u32, 0x89ABu16, 0xCDu8 ];
		Pass_tup_u64_u32_u16_u8_Test0( arg );
	}
	{
		var tup[ u64, u32, u16, u16 ] arg[ 0xFEDCBA9876543210u, 0x01234567u32, 0x89ABu16, 0xCDEFu16 ];
		Pass_tup_u64_u32_u16_u16_Test0( arg );
	}
	{
		var tup[ u8, u16, u32, u64 ] arg[ 0x01u8, 0x2345u16, 0x6789ABCDu32, 0xFEDCBA9876543210u ];
		Pass_tup_u8_u16_u32_u64_Test0( arg );
	}
	{
		var tup[ u16, u16, u32, u64 ] arg[ 0x0123u16, 0x4567u16, 0x89ABCDEFu32, 0xFEDCBA9876543210u ];
		Pass_tup_u16_u16_u32_u64_Test0( arg );
	}
	{
		var tup[ u8, u16, u8 ] arg[ 0xFEu8, 0xDCBAu16, 0x98u8 ];
		Pass_tup_u8_u16_u8_Test0( arg );
	}
	{
		var tup[ u8, u32, u8 ] arg[ 0xFEu8, 0xDCBA9876u32, 0x54u8 ];
		Pass_tup_u8_u32_u8_Test0( arg );
	}
	{
		var tup[ u8, u64, u8 ] arg[ 0xABu8, 0x0123456789ABCDEFu64, 0x12u8 ];
		Pass_tup_u8_u64_u8_Test0( arg );
	}
	{
		var tup[ u16, u32, u16 ] arg[ 0x0123u16, 0x456789ABu32, 0xCDEFu16 ];
		Pass_tup_u16_u32_u16_Test0( arg );
	}
	{
		var tup[ u16, u64, u16 ] arg[ 0xFEDCu16, 0x17283A4B5C6D7E8Fu64, 0x9876u16 ];
		Pass_tup_u16_u64_u16_Test0( arg );
	}
	{
		var tup[ u32, u64, u32 ] arg[ 0x01234567u32, 0x17283A4B5C6D7E8Fu64, 0x89ABCEDFu32 ];
		Pass_tup_u32_u64_u32_Test0( arg );
	}

	return 0;
}

fn nomangle Pass_bool_Test0( bool x ) call_conv( "C" );
fn nomangle Pass_bool_Test1( bool x ) call_conv( "C" );
fn nomangle Pass_i8_Test0( i8 x ) call_conv( "C" );
fn nomangle Pass_i8_Test1( i8 x ) call_conv( "C" );
fn nomangle Pass_i8_Test2( i8 x0, i8 x1, i8 x2, i8 x3, i8 x4, i8 x5, i8 x6, i8 x7, i8 x8, i8 x9, i8 xa, i8 xb, i8 xc, i8 xd, i8 xe, i8 xf ) call_conv( "C" );
fn nomangle Pass_u8_Test0( u8 x ) call_conv( "C" );
fn nomangle Pass_u8_Test1( u8 x ) call_conv( "C" );
fn nomangle Pass_u8_Test2( u8 x ) call_conv( "C" );
fn nomangle Pass_i16_Test0( i16 x ) call_conv( "C" );
fn nomangle Pass_i16_Test1( i16 x ) call_conv( "C" );
fn nomangle Pass_u16_Test0( u16 x ) call_conv( "C" );
fn nomangle Pass_u16_Test1( u16 x ) call_conv( "C" );
fn nomangle Pass_u16_Test2( u16 x ) call_conv( "C" );
fn nomangle Pass_u16_Test3( u16 x ) call_conv( "C" );
fn nomangle Pass_u16_Test4( u16 x0, u16 x1, u16 x2, u16 x3, u16 x4, u16 x5, u16 x6, u16 x7, u16 x8, u16 x9, u16 xa, u16 xb, u16 xc, u16 xd, u16 xe, u16 xf ) call_conv( "C" );
fn nomangle Pass_i32_Test0( i32 x ) call_conv( "C" );
fn nomangle Pass_i32_Test1( i32 x ) call_conv( "C" );
fn nomangle Pass_i32_Test2( i32 x ) call_conv( "C" );
fn nomangle Pass_i32_Test3( i32 x ) call_conv( "C" );
fn nomangle Pass_i32_Test4( i32 x0, i32 x1, i32 x2, i32 x3, i32 x4, i32 x5, i32 x6, i32 x7, i32 x8, i32 x9, i32 xa, i32 xb, i32 xc, i32 xd, i32 xe, i32 xf ) call_conv( "C" );
fn nomangle Pass_u32_Test0( u32 x ) call_conv( "C" );
fn nomangle Pass_u32_Test1( u32 x ) call_conv( "C" );
fn nomangle Pass_u32_Test2( u32 x ) call_conv( "C" );
fn nomangle Pass_u32_Test3( u32 x ) call_conv( "C" );
fn nomangle Pass_i64_Test0( i64 x ) call_conv( "C" );
fn nomangle Pass_i64_Test1( i64 x ) call_conv( "C" );
fn nomangle Pass_i64_Test2( i64 x ) call_conv( "C" );
fn nomangle Pass_i64_Test3( i64 x ) call_conv( "C" );
fn nomangle Pass_u64_Test0( u64 x ) call_conv( "C" );
fn nomangle Pass_u64_Test1( u64 x ) call_conv( "C" );
fn nomangle Pass_u64_Test2( u64 x ) call_conv( "C" );
fn nomangle Pass_u64_Test3( u64 x ) call_conv( "C" );
fn nomangle Pass_u64_Test4( u64 x0, u64 x1, u64 x2, u64 x3, u64 x4, u64 x5, u64 x6, u64 x7, u64 x8, u64 x9, u64 xa, u64 xb, u64 xc, u64 xd, u64 xe, u64 xf ) call_conv( "C" );
fn nomangle Pass_i128_Test0( i128 x ) call_conv( "C" );
fn nomangle Pass_u128_Test0( u128 x ) call_conv( "C" );
fn nomangle Pass_char8_Test0( char8 x ) call_conv( "C" );
fn nomangle Pass_char8_Test1( char8 x ) call_conv( "C" );
fn nomangle Pass_char8_Test2( char8 x ) call_conv( "C" );
fn nomangle Pass_char8_Test3( char8 x ) call_conv( "C" );
fn nomangle Pass_char16_Test0( char16 x ) call_conv( "C" );
fn nomangle Pass_char16_Test1( char16 x ) call_conv( "C" );
fn nomangle Pass_char32_Test0( char32 x ) call_conv( "C" );
fn nomangle Pass_f32_Test0( f32 x ) call_conv( "C" );
fn nomangle Pass_f32_Test1( f32 x ) call_conv( "C" );
fn nomangle Pass_f32_Test2( f32 x ) call_conv( "C" );
fn nomangle Pass_f32_Test3( f32 x ) call_conv( "C" );
fn nomangle Pass_f32_Test4( f32 x ) call_conv( "C" );
fn nomangle Pass_f32_Test5( f32 x ) call_conv( "C" );
fn nomangle Pass_f32_Test6( f32 x0, f32 x1, f32 x2, f32 x3, f32 x4, f32 x5, f32 x6, f32 x7, f32 x8, f32 x9, f32 xa, f32 xb, f32 xc, f32 xd, f32 xe, f32 xf ) call_conv( "C" );
fn nomangle Pass_f64_Test0( f64 x ) call_conv( "C" );
fn nomangle Pass_f64_Test1( f64 x ) call_conv( "C" );
fn nomangle Pass_f64_Test2( f64 x ) call_conv( "C" );
fn nomangle Pass_f64_Test3( f64 x ) call_conv( "C" );
fn nomangle Pass_f64_Test4( f64 x ) call_conv( "C" );
fn nomangle Pass_f64_Test5( f64 x ) call_conv( "C" );
fn nomangle Pass_f64_Test6( f64 x0, f64 x1, f64 x2, f64 x3, f64 x4, f64 x5, f64 x6, f64 x7, f64 x8, f64 x9, f64 xa, f64 xb, f64 xc, f64 xd, f64 xe, f64 xf ) call_conv( "C" );
fn nomangle Pass_u8_x1_Test0( [ u8, 1 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x2_Test0( [ u8, 2 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x3_Test0( [ u8, 3 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x4_Test0( [ u8, 4 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x5_Test0( [ u8, 5 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x6_Test0( [ u8, 6 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x7_Test0( [ u8, 7 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x8_Test0( [ u8, 8 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x9_Test0( [ u8, 9 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x10_Test0( [ u8, 10 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x11_Test0( [ u8, 11 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x12_Test0( [ u8, 12 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x13_Test0( [ u8, 13 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x14_Test0( [ u8, 14 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x15_Test0( [ u8, 15 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x16_Test0( [ u8, 16 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x17_Test0( [ u8, 17 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x29_Test0( [ u8, 29 ] x ) call_conv( "C" );
fn nomangle Pass_u8_x371_Test0( [ u8, 371 ] x ) call_conv( "C" );
fn nomangle Pass_i16_x1_Test0( [ i16, 1 ] x ) call_conv( "C" );
fn nomangle Pass_i16_x2_Test0( [ i16, 2 ] x ) call_conv( "C" );
fn nomangle Pass_i16_x3_Test0( [ i16, 3 ] x ) call_conv( "C" );
fn nomangle Pass_i16_x4_Test0( [ i16, 4 ] x ) call_conv( "C" );
fn nomangle Pass_i16_x5_Test0( [ i16, 5 ] x ) call_conv( "C" );
fn nomangle Pass_i16_x6_Test0( [ i16, 6 ] x ) call_conv( "C" );
fn nomangle Pass_i16_x7_Test0( [ i16, 7 ] x ) call_conv( "C" );
fn nomangle Pass_i16_x8_Test0( [ i16, 8 ] x ) call_conv( "C" );
fn nomangle Pass_i16_x9_Test0( [ i16, 9 ] x ) call_conv( "C" );
fn nomangle Pass_i16_x15_Test0( [ i16, 15 ] x ) call_conv( "C" );
fn nomangle Pass_i16_x83_Test0( [ i16, 83 ] x ) call_conv( "C" );
fn nomangle Pass_u32_x1_Test0( [ u32, 1 ] x ) call_conv( "C" );
fn nomangle Pass_u32_x2_Test0( [ u32, 2 ] x ) call_conv( "C" );
fn nomangle Pass_u32_x3_Test0( [ u32, 3 ] x ) call_conv( "C" );
fn nomangle Pass_u32_x4_Test0( [ u32, 4 ] x ) call_conv( "C" );
fn nomangle Pass_u32_x5_Test0( [ u32, 5 ] x ) call_conv( "C" );
fn nomangle Pass_u32_x6_Test0( [ u32, 6 ] x ) call_conv( "C" );
fn nomangle Pass_u32_x7_Test0( [ u32, 7 ] x ) call_conv( "C" );
fn nomangle Pass_u32_x8_Test0( [ u32, 8 ] x ) call_conv( "C" );
fn nomangle Pass_u32_x9_Test0( [ u32, 9 ] x ) call_conv( "C" );
fn nomangle Pass_u32_x17_Test0( [ u32, 17 ] x ) call_conv( "C" );
fn nomangle Pass_u64_x1_Test0( [ u64, 1 ] x ) call_conv( "C" );
fn nomangle Pass_u64_x2_Test0( [ u64, 2 ] x ) call_conv( "C" );
fn nomangle Pass_u64_x3_Test0( [ u64, 3 ] x ) call_conv( "C" );
fn nomangle Pass_u64_x4_Test0( [ u64, 4 ] x ) call_conv( "C" );
fn nomangle Pass_u64_x5_Test0( [ u64, 5 ] x ) call_conv( "C" );
fn nomangle Pass_u64_x11_Test0( [ u64, 11 ] x ) call_conv( "C" );
fn nomangle Pass_u128_x1_Test0( [ u128, 1 ] x ) call_conv( "C" );
fn nomangle Pass_u128_x2_Test0( [ u128, 2 ] x ) call_conv( "C" );
fn nomangle Pass_u128_x3_Test0( [ u128, 3 ] x ) call_conv( "C" );
fn nomangle Pass_f32_x1_Test0( [ f32, 1 ] x ) call_conv( "C" );
fn nomangle Pass_f32_x2_Test0( [ f32, 2 ] x ) call_conv( "C" );
fn nomangle Pass_f32_x3_Test0( [ f32, 3 ] x ) call_conv( "C" );
fn nomangle Pass_f32_x4_Test0( [ f32, 4 ] x ) call_conv( "C" );
fn nomangle Pass_f32_x5_Test0( [ f32, 5 ] x ) call_conv( "C" );
fn nomangle Pass_f32_x6_Test0( [ f32, 6 ] x ) call_conv( "C" );
fn nomangle Pass_f32_x7_Test0( [ f32, 7 ] x ) call_conv( "C" );
fn nomangle Pass_f32_x8_Test0( [ f32, 8 ] x ) call_conv( "C" );
fn nomangle Pass_f32_x9_Test0( [ f32, 9 ] x ) call_conv( "C" );
fn nomangle Pass_f32_x15_Test0( [ f32, 15 ] x ) call_conv( "C" );
fn nomangle Pass_f32_x47_Test0( [ f32, 47 ] x ) call_conv( "C" );
fn nomangle Pass_f64_x1_Test0( [ f64, 1 ] x ) call_conv( "C" );
fn nomangle Pass_f64_x2_Test0( [ f64, 2 ] x ) call_conv( "C" );
fn nomangle Pass_f64_x3_Test0( [ f64, 3 ] x ) call_conv( "C" );
fn nomangle Pass_f64_x4_Test0( [ f64, 4 ] x ) call_conv( "C" );
fn nomangle Pass_f64_x5_Test0( [ f64, 5 ] x ) call_conv( "C" );
fn nomangle Pass_f64_x6_Test0( [ f64, 6 ] x ) call_conv( "C" );
fn nomangle Pass_f64_x7_Test0( [ f64, 7 ] x ) call_conv( "C" );
fn nomangle Pass_f64_x8_Test0( [ f64, 8 ] x ) call_conv( "C" );
fn nomangle Pass_f64_x9_Test0( [ f64, 9 ] x ) call_conv( "C" );
fn nomangle Pass_f64_x15_Test0( [ f64, 15 ] x ) call_conv( "C" );
fn nomangle Pass_f64_x47_Test0( [ f64, 47 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x1_Test0( [ char8, 1 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x2_Test0( [ char8, 2 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x3_Test0( [ char8, 3 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x4_Test0( [ char8, 4 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x5_Test0( [ char8, 5 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x6_Test0( [ char8, 6 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x7_Test0( [ char8, 7 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x8_Test0( [ char8, 8 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x9_Test0( [ char8, 9 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x10_Test0( [ char8, 10 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x11_Test0( [ char8, 11 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x12_Test0( [ char8, 12 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x13_Test0( [ char8, 13 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x14_Test0( [ char8, 14 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x15_Test0( [ char8, 15 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x16_Test0( [ char8, 16 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x17_Test0( [ char8, 17 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x32_Test0( [ char8, 32 ] x ) call_conv( "C" );
fn nomangle Pass_char8_x39_Test0( [ char8, 39 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_u8_Test0( tup [ i8, u8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_u8_Test1( tup [ i8, u8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_i16_Test0( tup [ i8, i16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_i16_Test1( tup [ i8, i16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_u32_Test0( tup [ i8, u32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_u32_Test1( tup [ i8, u32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_i64_Test0( tup [ i8, i64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_i64_Test1( tup [ i8, i64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_u128_Test0( tup [ i8, u128 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_u128_Test1( tup [ i8, u128 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_f32_Test0( tup [ i8, f32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_f32_Test1( tup [ i8, f32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_f64_Test0( tup [ i8, f64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i8_f64_Test1( tup [ i8, f64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_i8_Test0( tup [ u16, i8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_i8_Test1( tup [ u16, i8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_u16_Test0( tup [ u16, u16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_u16_Test1( tup [ u16, u16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_i32_Test0( tup [ u16, i32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_i32_Test1( tup [ u16, i32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_u64_Test0( tup [ u16, u64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_u64_Test1( tup [ u16, u64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_i128_Test0( tup [ u16, i128 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_i128_Test1( tup [ u16, i128 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_f32_Test0( tup [ u16, f32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_f32_Test1( tup [ u16, f32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_f64_Test0( tup [ u16, f64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_f64_Test1( tup [ u16, f64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_u8_Test0( tup [ i32, u8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_u8_Test1( tup [ i32, u8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_i16_Test0( tup [ i32, i16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_i16_Test1( tup [ i32, i16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_u32_Test0( tup [ i32, u32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_u32_Test1( tup [ i32, u32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_i64_Test0( tup [ i32, i64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_i64_Test1( tup [ i32, i64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_u128_Test0( tup [ i32, u128 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_u128_Test1( tup [ i32, u128 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_f32_Test0( tup [ i32, f32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_f32_Test1( tup [ i32, f32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_f64_Test0( tup [ i32, f64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_i32_f64_Test1( tup [ i32, f64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_i8_Test0( tup [ u64, i8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_i8_Test1( tup [ u64, i8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_u16_Test0( tup [ u64, u16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_u16_Test1( tup [ u64, u16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_i32_Test0( tup [ u64, i32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_i32_Test1( tup [ u64, i32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_u64_Test0( tup [ u64, u64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_u64_Test1( tup [ u64, u64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_i128_Test0( tup [ u64, i128 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_i128_Test1( tup [ u64, i128 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_f32_Test0( tup [ u64, f32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_f32_Test1( tup [ u64, f32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_f64_Test0( tup [ u64, f64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_f64_Test1( tup [ u64, f64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_u8_Test0( tup [ f32, u8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_u8_Test1( tup [ f32, u8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_i16_Test0( tup [ f32, i16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_i16_Test1( tup [ f32, i16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_u32_Test0( tup [ f32, u32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_u32_Test1( tup [ f32, u32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_i64_Test0( tup [ f32, i64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_i64_Test1( tup [ f32, i64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_u128_Test0( tup [ f32, u128 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_u128_Test1( tup [ f32, u128 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_f32_Test0( tup [ f32, f32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_f32_Test1( tup [ f32, f32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_f64_Test0( tup [ f32, f64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f32_f64_Test1( tup [ f32, f64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_i8_Test0( tup [ f64, i8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_i8_Test1( tup [ f64, i8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_u16_Test0( tup [ f64, u16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_u16_Test1( tup [ f64, u16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_i32_Test0( tup [ f64, i32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_i32_Test1( tup [ f64, i32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_u64_Test0( tup [ f64, u64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_u64_Test1( tup [ f64, u64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_i128_Test0( tup [ f64, i128 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_i128_Test1( tup [ f64, i128 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_f32_Test0( tup [ f64, f32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_f32_Test1( tup [ f64, f32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_f64_Test0( tup [ f64, f64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_f64_f64_Test1( tup [ f64, f64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u32_u16_u8_Test0( tup [ u32, u16, u8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u32_u16_u16_Test0( tup [ u32, u16, u16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u8_u16_u32_Test0( tup [ u8, u16, u32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_u16_u32_Test0( tup [ u16, u16, u32 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_u32_u16_u8_Test0( tup [ u64, u32, u16, u8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u64_u32_u16_u16_Test0( tup [ u64, u32, u16, u16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u8_u16_u32_u64_Test0( tup [ u8, u16, u32, u64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_u16_u32_u64_Test0( tup [ u16, u16, u32, u64 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u8_u16_u8_Test0( tup [ u8, u16, u8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u8_u32_u8_Test0( tup [ u8, u32, u8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u8_u64_u8_Test0( tup [ u8, u64, u8 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_u32_u16_Test0( tup [ u16, u32, u16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u16_u64_u16_Test0( tup [ u16, u64, u16 ] x ) call_conv( "C" );
fn nomangle Pass_tup_u32_u64_u32_Test0( tup [ u32, u64, u32 ] x ) call_conv( "C" );
