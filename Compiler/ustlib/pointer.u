import "memory.u"

namespace ust
{

// Raw pointer classes.

template</ type T />
class raw_ptr_mut
{
public:
	type this_type= raw_ptr_mut</T/>;

	fn constructor( this_type &imut other )= default;
	op=( mut this, this_type &imut other )= default;

	// Default constructor - set to zero
	fn constructor() ( val_= size_type(0) ) {}
	// Construct from reference
	fn constructor( T &mut ref ) ( val_= ref_to_int(ref) ) {}
	// Construct from reference to array
	template</ size_type array_size />
	fn constructor( [ T, array_size ] &mut ref ) ( val_= ref_to_int(ref) ) {}

	fn is_null( this ) : bool  { return val_ == size_type(0); }

	// Dereference and indexing.

	fn get_ref( this ) unsafe : T &mut
	{
		unsafe{  return cast_mut( cast_ref_unsafe</ T />( int_to_ref(val_) ) );  }
	}

	template</ size_type array_size />
	fn as_array( this ) unsafe : [ T, array_size ] &mut
	{
		unsafe{  return cast_ref_unsafe</ [ T, array_size ] />( get_ref() );  }
	}

	op[]( this, size_type s ) unsafe : T&mut
	{
		auto p= val_ + c_element_size_ * s;
		unsafe{  return cast_mut( cast_ref_unsafe</ T />( int_to_ref(p) ) );  }
	}

	// Compare.
	op< ( this, this_type other ) : bool  { return this.val_ <  other.val_; }
	op<=( this, this_type other ) : bool  { return this.val_ <= other.val_; }
	op> ( this, this_type other ) : bool  { return this.val_ >  other.val_; }
	op>=( this, this_type other ) : bool  { return this.val_ >= other.val_; }
	op==( this, this_type other ) : bool  { return this.val_ == other.val_; }
	op!=( this, this_type other ) : bool  { return this.val_ != other.val_; }

	// Pointer to int operations
	op++( mut this )  { val_+= c_element_size_; }
	op--( mut this )  { val_-= c_element_size_; }
	op+=( mut this, size_type s )  { val_+= c_element_size_ * s; }
	op-=( mut this, size_type s )  { val_-= c_element_size_ * s; }

	op+( this, size_type s ) : this_type
	{
		var this_type mut result= this;
		result+= s;
		return result;
	}
	op+( size_type s, this_type self ) : this_type
	{
		return self + s;
	}
	op-( this, size_type s ) : this_type
	{
		var this_type mut result= this;
		result-= s;
		return result;
	}

	op-( this_type a, this_type b ) : ptr_diff_type
	{
		// size_of is constant, division by constant will be optimized and replaced with multiplication.
		return ptr_diff_type( a.val_ - b.val_ ) / ptr_diff_type( c_element_size_ );
	}

private:
	auto constexpr c_element_size_= typeinfo</T/>.size_of;

private:
	size_type val_;
}

} // namespace ust
