//##fail_test
import "../ustlib/vector.u"

struct RI
{
	i32&imut r;
	fn constructor( this'a', i32&'b imut in_r ) ' a <- imut b ' ( r= in_r ) {}
}

struct RM
{
	i32&mut r;
	fn constructor( this'a', i32&'b mut in_r ) ' a <- mut b ' ( r= in_r ) {}
}

fn U_Main() : i32
{
	{ // "push_back" does reference-pollution.
		var i32 mut x= 0;
		var ust::vector</RM/> mut r;

		r.push_back( RM(x) );
		var i32 y= x; //##expect_error AccessingVariableThatHaveMutableReference
	}
	{ // "push_back" does reference-pollution.
		var i32 mut x= 0;
		var ust::vector</RI/> mut r;

		r.push_back( RI(x) );
		++x; //##expect_error ReferenceProtectionError
	}
	{ // "front" returns correct inner reference.
		var i32 mut x= 0;
		var ust::vector</RM/> mut r;

		r.push_back( RM(x) );
		auto &mut second_ref= r.front().r; //##expect_error ReferenceProtectionError
	}
	return 0;
}
