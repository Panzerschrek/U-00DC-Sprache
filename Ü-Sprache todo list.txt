Here are some language features for future development of the language itself and its
compiler. Features are (sometimes) grouped and sorted by priority inside each group.
Delete the features from the list as soon as they are implemented.

General:
*) build-in "for" for array types.
*) Disassembly operator - declare variables with initializer as members of value of composite type.
*) More float types ( 16 bit, 128 bit )
*) More integer types ( 256 bit, 512 bit )
*) Constructor initializer for constexpr structs
*) Custom field/class attributes, accessible via typeinfo (for metaprogramming)
*) More advanced macros - more context, elements, stringification, string manipulations
*) Simpler syntax for char-types literals (like 'q' in C++)
*) switch-style operator for expression context
*) thread-local variables
*) A way to construct temporary variable with sequence initializer or other initializer kinds,
	(in expression context)
*) "nodiscard" for types and/or functions
*) Function to function pointer assignment with multiple possible functions
*) Provide calling convention in typeinfo for function types
*) Calling convention as arbitrary constant expression (possibility to generate it in compilation time)
*) Multidimensional [] operator - for accessing elements of multidimensional arrays or as overloaded operator
*) Allow unsafe code and raw pointers in constexpr functions and perform additional safety checks during constexpr
	execution in order to check no UB or non-determinism is possible, like uninitialized memory usage, pointer
	comparison across allocation boundaries, etc.
*) Allow "auto-constexpr" for any function/method with body known
*) A way to hide some names in common (imported) files - for implementation details
*) A way to disable structs, type aliases, static asserts, other stuff in namespaces
*) Investigate possibility of conditional imports
*) Functions with named parameters and ability to specify arguments in any order at call side usinig such names
*) Create for each function a string variable constant like "__PRETTY_FUNCTION__" in order to fetch function
	name inside it
*) Allow default constructors for interfaces
*) Allow zero-sized fields for interfaces (to create inner reference tags, for example)

References:
*) Support second order inner references for coroutine types
*) Separate reference checking for array elements while accessing via constexpr index

Templates:
*) Default template arguments for short type template form
*) enable_if for type templates
*) Allow template value arguments of some struct types
*) Variable templates

Lambdas:
*) Coroutine lambdas (async, generators)
*) Lambas (or something similar) which create a coroutine object (async function, generator) directly
*) Conversion of lambdas with zero captures into function pointers
*) Simplified lambdas syntax for lambdas consisting of single return statement
*) Template lambdas

Standart library:
*) Improve/fix unordered_map
*) Support types with references inside in some containers (variant, result, unordered_map)
*) Make clear separation between standard library and some intrinsics built-in into the compiler
*) switch-like macro for variant
*) Associative containers - map, set, string_map
*) More algorithms
*) More iterator class methods - like "enumerate" and others
*) Vector drain iterator
*) Reverse iterators for random_access_range, unordered_map, etc.
*) shared_ptr - store single pointer for non-polymorph types
*) Time library - get time functions, timers
*) File library
*) Console input/output library
*) String formatting library
*) Executor for async functions, possible multithreaded
*) More type traits
*) More math functions
*) "result"-like container for reference results
*) Try to optimize random_access_range - use start + end pointers instead of start + size.
	This may improve iteration efficiency.
*) Reference-counting immutable string class
*) Small string optimization
*) Support recursive types with usage of "vector" without need to use additional indirection (via "box")
*) String/vector-like containers with limited number of elements (32-bit or 16-bit sizes)
*) Compact vector-like container - with size/capacity stored in allocated memory block
*) Priority heap support
*) Binary search routines
*) Detachable thread

Compiler:
*) Fix possible overflows in numeric literals
*) Investigate optimization possibility - avoid mangling private functions
*) Add option to define some constants in prelude (like preprocessor defenitions in C++).
*) Fix possible overflows in SrcLoc and/or try to optimize its size (use only 4 bytes)
*) Speed-up references graph code
*) Avoid recursion in VariantLinkedList destructor - it causes stack overflow for long lists
*) Find a way to detect recursive mixins in blocks, type names, expressions
*) Imporve TBAA - use struct path-based TBAA.
*) Pass/return by-value composite values containing more than one scalar inside.
	Use some approach, dependent on target architecture, to determine, if type is suitable for passing in registers,
	or it would be better to pass it in memory.
*) Add possibility to execute internal LLD directly, bypassing compiler logic itself
*) Add possibility to execute an external linker (ld, ld.gold, ld.lld, link.exe, etc.)
*) More options for internal linker
*) More internal linkers spupport - MinGW, MachO, wasm
*) Faster calling convention for non-cross-language functions.
*) Fix possible UB in float->int conversion.
*) Virtual call for final function optimization
*) Do not crash in some cases of code with errors
*) Prevent execution of constexpr functions with errors
*) Inline assembly/module level assembly support
*) Precompiled modules
*) More calling conventions (including platform-dependent)
*) Generate errors about unused function templates
*) Built-in compiler optimization hints ("assume", "likely", "unlikely", etc.)
*) Alloca declaration - allow to specify heap fallback size limit -
	even zero (always use heap) or infinity (always use stack)

Interpreter:
*) Support entry point with args and add possibility to provide such args (argc, argv?)
*) Add possibility to optimize code
*) Support math functions

Compiler1:
*) Support 128-bit types in switch operator

QtCreator plugin:
*) Language server features support

Language server:
*) Fix crashes occuring sometimes during editing (possible because of broken code)
*) Reduce memory usage - avoid building unnecessary code, clear unused internal data structures, make mangled names shorter, etc.
*) Occurences search improvement - search not only in document and its imports, but in other opened and non-opened documents
*) Go to definition - pick definition of function, defined in other document (that is not imported directly)
*) Declarations search
*) Document symbols - provide proper ranges (for namespaces, classes, etc), provide exact selection ranges
*) A way to provide configuration (import directories, other compilation options)
*) SignatureHelp - filter suggested functions based on already provided arguments
*) SignatureHelp - return ranges of arguments and active range
*) Improve "go to definition" for templates - fix some cases where templates processing doesn't work
*) Go to definition for non-value names - loop labels, etc.
*) Go to definition for macros
*) Complete file names in "import"
*) Backup completion for non-compiled documents
*) Filter-out some symbol kinds in completion, depending on context
*) Sort completed items using some kind of prioroty
*) Links between errors for template/macro errors
*) More unit-tests
*) Create TargetMachine to obtain proper data layout

CPP Header converter:
*) White list of converted symbols
*) Black list of converted symbols
*) Ignore some headers or split result into several files
*) Avoid creating too large files (more than 65535 lines)
*) Handle structs with empty contents (they should have size 1 according to C rules)
*) Support negative constants in defines
*) Add more satisfying defines conversion - where defined value is a constant expression
*) Handle some subset of C++ headers

Ü Build system:
*) Improve build directories creation code - create all directories within given path, handle cases when a directory
	already exists, handle case where a non-directory object (like a file) with given name exists
*) Build graph - support for a command execution of an abitrary function, not only external executable
*) Ü library target type (bitcode library)
*) Dependencies between targets
*) Shared library target type
*) C static library target type
*) Allow linking against an external static C library
*) Allow linking against an external shared library
*) Custom target type
*) Run link-time optimization for native targets (executables, shared libraries, C static libraries)
*) Support generated sources
*) Support generated headers
*) Cross-compilation support
*) Multiple packages support
*) Fix JSON floats serialization
*) Simplify structs to/from json conversion by using template code with typeinfo and mixins usage
*) Prevent imports ouside allowed import directories
*) Prevent name comflicts in imports (where multiple files exist for the given import path)
*) Reuse build script shared library among different build confugurations and target triples (build only one copy)
*) Clean command - to delete build files
*) Command line option for building only specified build targets
*) A command to build a single-file program with no dependencies
*) A command to create an empty project (create build script stub)
*) Multithreaded targets building - to utilize all CPU cores and thus speed-up the build
*) Build the build system itself using the build system (create second build copy)
*) Build Compiler2 and (possible) Compiler1 using the build system
*) Investigate necessity/possibility of a centralized packages repository

Documentation:
*) Other languages (not only russian and english)
*) Describe more language details
*) Describe undefined behavior
