Here are some language features for future development of the language itself and its
compiler. Features are grouped and sorted by priority inside each group.
Delete the features from the list as soon as they are implemented.

General:
*) Dereference operator - for pointer-like classes
*) Continious initializer for arrays
*) Different calling conventions (for API calls, for example)
*) build-in "for" for array tupes.
*) switch-case
*) "Disassembly operator" - declare variables with initializer as members of
	value of structure type.
*) Function to function pointer assignment
*) == and != methods generation
*) Functions references info in "typeinfo".
*) More float types (16 bit, 128 bit )
*) Constructor initializer for constexpr structs
*) Function pointers inside constexpr functions
*) Reference result of constexpr function evaluation

References:
*) Tags for struct/class references
*) Separate references checking for struct members - add possibility to have two
	mutable references for two different members of one struct value.

Templates:
*) Default template arguments for short type template form
*) enable_if for templates
*) Variadic templates
*) Function templates with template-dependent reference and mutability modifiers
	for arguments. Conditional move for such arguments.
*) Equality comparison for type and function templates with same name
*) Function pointers as template variable-parameters

Standart library:
*) Associative containers - map, set, unordered_set, string_map
*) Time library - get time functions, timers
*) File library
*) More type traits
*) More math functions

Compiler:
*) Safety, returning references and references pollution in function types
	mangling
*) Template functions mangling with all template parameters
*) move-assignment without hacks.
*) Standartized entry point, such "main" in some languages
*) Virtual call for final function optimization
*) Return value optimization
*) Debug info
*) Precompiled modules

QtCreator plugin:
*) Symbol table construction for document
*) "go to defenition" possibility
*) Indentation in editor
*) More advanced program model updating

CPP Header converter:
* fix "typedef struct X{} X;"
