Here are some language features for future development of the language itself and its
compiler. Features are grouped and sorted by priority inside each group.
Delete the features from the list as soon as they are implemented.

General:
*) Dereference operator - for pointer-like classes.
*) Raw pointers (for C interaction).
*) Continious initializer for arrays
*) Less requirements of complete types (helps for recursive types)
*) Different calling conventions (for API calls, for example)
*) Forbid inner reference kind changing in inheritance.
*) Forbid "shared" tag changin in inheritance.
*) Enable arrays as aparameters/return values, enable expression initialization and copy assignment for arrays.
*) build-in "for" for array types.
*) type for raw data representation (like "char" in C++, which may alias with every type).
*) switch-case
*) "Disassembly operator" - declare variables with initializer as members of
	value of structure type.
*) Function to function pointer assignment
*) == and != methods generation
*) Functions references info in "typeinfo".
*) More float types ( 16 bit, 128 bit )
*) Constructor initializer for constexpr structs
*) Function pointers inside constexpr functions
*) Reference result of constexpr function evaluation

References:
*) Fix problem with calling of function with passing of imut reference to container with size of this container.
*) Tags for struct/class references
*) Separate references checking for struct members - add possibility to have two
	mutable references for two different members of one struct value.

Templates:
*) Default template arguments for short type template form
*) Template function body generation only if function is selected for call
*) enable_if for templates
*) Variadic templates
*) Function templates with template-dependent reference and mutability modifiers
	for arguments. Conditional move for such arguments.
*) Equality comparison for type and function templates with same name

Standart library:
*) Associative containers - map, set, unordered_set, string_map
*) Forbid non-thread-safe shared pointers in thread-safe shared pointers
*) Algorithms (sorting, etc.).
*) Time library - get time functions, timers
*) File library
*) More type traits
*) More math functions

Compiler:
*) Fix "while" block references, reference merging
*) Fix break/continue in range-for
*) move-assignment without hacks.
*) Use TBAA from LLVM.
*) Virtual call for final function optimization
*) Do not crash in some cases of code with errors
*) Return value optimization
*) Precompiled modules
*) Faster compilation model - without emitting thousands of template functions in each object file
*) Rework of "Value" class

QtCreator plugin:
*) Syntax errors highlighting
*) Symbol table construction for document
*) "go to defenition" possibility
*) Indentation in editor
*) More advanced program model updating

CPP Header converter:
*) fix "typedef struct X{} X;"

Documentation:
*) Macros
*) More, then one language
