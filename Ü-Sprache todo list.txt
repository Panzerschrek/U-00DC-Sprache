Here placed language features for future development of language itself and
compiler. Features grouped and sorted by priority inside each group.
When feature was implemented, delete it from list.

Common:
*) sizeof operator
*) raw_pointer
*) Unsafe
*) Continious initializer for arrays
*) Uninitialized initializer
*) Function pointers
*) array_view, array view take operator
*) "string literals\n"
*) Disabled by-default copying for classes. Possibility to force generating
	copying methods.
*) Possibility to disable some methods generation.
*) Type conversions
*) Dereference operator - for pointer-like classes
*) Early temp variables destruction
*) "shared" tag for shared_ptr and it propagation to structures with shared
	pointers inside
*) Multithreading support
*) "Disassembly operator" - declare variables with initializer as members of
	value of structure type.

References:
*) Tags for struct/class references
*) Filler tag for inner references (usable for templates)
*) Reference-checking for template types
*) Separate references checking for struct members - add possibility to have two
	mutable references for two different members of one struct value.

Templates:
*) Default template arguments for short type template form
*) Type templates overloading
*) enable_if for templates
*) Variadic templates
*) Function templates with template-dependent reference and mutability modifiers
	for arguments.
*) Equality comparison for function templates with same name

Standart library:
*) vector
*) unique_ptr
*) optional
*) shared_ptr
*) thread class
*) thread-safe shared_ptr

Compiler:
*) Fix exponential complexity for expressions evaluation
*) Standartized entry point, such "main" in some languages
*) Virtual table optimization - store child class virtual table pointer in
	parent class.
*) Virtual call for final function optimization
*) Precompiled modules
*) Compiler uses a lot of shared pointers. Check for memory leaks.
