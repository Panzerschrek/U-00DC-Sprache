Here placed language features for future development of language itself and
compiler. Features grouped and sorted by priority inside each group.
When feature was implemented, delete it from list.

Common:
*) raw_pointer
*) Conditional functions, something, like "enable_if"
*) Constructor initializer for constexpr structs
*) Continious initializer for arrays
*) array_view, array view take operator
*) "string literals\n"
*) Type conversions
*) Dereference operator - for pointer-like classes
*) Early temp variables destruction
*) "shared" tag for shared_ptr and it propagation to structures with shared
	pointers inside
*) Multithreading support
*) "Disassembly operator" - declare variables with initializer as members of
	value of structure type.
*) "for" operator - for ranges
*) Function to function pointer assignment
*) == and != methods generation
*) Full information about classes and function pointers in "typeinfo" operator.
*) 128-bit integers
*) 128-bit float
*) Function pointers inside constexpr functions
*) Returning references in constexpr functions


References:
*) Tags for struct/class references
*) Separate references checking for struct members - add possibility to have two
	mutable references for two different members of one struct value.

Templates:
*) Default template arguments for short type template form
*) enable_if for templates
*) Variadic templates
*) Function templates with template-dependent reference and mutability modifiers
	for arguments. Conditional move for such arguments.
*) Equality comparison for type and function templates with same name
*) Function pointers as template variable-parameters

Standart library:
*) base functions for containers - memory allocation, reference casting, etc.
*) vector
*) unique_ptr
*) optional
*) shared_ptr
*) thread class
*) thread-safe shared_ptr

Compiler:
*) move-assignment without hacks.
*) Standartized entry point, such "main" in some languages
*) Virtual table optimization - store child class virtual table pointer in
	parent class.
*) Virtual call for final function optimization
*) Return value optimization
*) Precompiled modules
*) Compiler uses a lot of shared pointers. Check for memory leaks.
