Here are some language features for future development of the language itself and its
compiler. Features are grouped and sorted by priority inside each group.
Delete the features from the list as soon as they are implemented.

General:
*) build-in "for" for array types.
*) "Disassembly operator" - declare variables with initializer as members of value of structure type.
*) Function to function pointer assignment
*) Functions references info in "typeinfo".
*) More float types ( 16 bit, 128 bit )
*) Constructor initializer for constexpr structs
*) Lambdas.
*) Async functions.
*) Continious initializer for arrays
*) Auto-move in "return" for local variable
*) More advanced macros - more context, elements, string manipulations
*) switch-style operator for expression context
*) thread-local variables
*) "nodiscard" for types (and/or) functions

References:
*) Multiple inner reference tags for some types
*) Separate reference checking for array elements while accessing via constexpr index

Templates:
*) Default template arguments for short type template form
*) Template function body generation only if function is selected for call
*) enable_if for templates
*) Variadic templates
*) Function templates with template-dependent reference and mutability modifiers for arguments. Conditional move for
	such arguments.

Standart library:
*) Associative containers - map, set, string_map
*) More algorithms
*) Iterators library with transformations/operations (map, filter, reduce, etc.)
*) Time library - get time functions, timers
*) File library
*) Console input/output library
*) Print fail message in asserts
*) Formatting library
*) More type traits
*) More math functions

Compiler:
*) Add option to define some constants in prelude (like preprocessor defenitions in C++).
*) Imporve TBAA - use struct path-based TBAA.
*) Pass/return by-value composite values containing more than one scalar inside.
	Use some approach, dependent on target architecture, to determine, if type is suitable for passing in registers,
	or it would be better to pass it in memory.
*) Faster calling convention for non-cross-language functions.
*) Fix possible UB in float->int conversion.
*) Virtual call for final function optimization
*) Do not crash in some cases of code with errors
*) Prevent execution of constexpr functions with errors
*) Inline assembly/module level assembly support
*) Precompiled modules
*) More calling conventions (including platform-dependent)
*) Generate errors about unused function templates

Interpreter:
*)Support entry point with args and add possibility to provide such args (argc, argv?)
*) Add possibility to optimize code
*) Support math functions

Compiler1:
*) Support 128-bit types in switch operator

QtCreator plugin:
*) Syntax errors highlighting
*) Symbol table construction for document
*) "go to defenition" possibility
*) More advanced program model updating

*) Plugins for other IDEs
*) Language server?

CPP Header converter:
*) White list of converted symbols
*) Black list of converted symbols
*) Ignore some headers or split result into several files

Documentation:
*) More, then one language
