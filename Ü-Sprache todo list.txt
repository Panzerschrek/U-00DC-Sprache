Here are some language features for future development of the language itself and its
compiler. Features are (sometimes) grouped and sorted by priority inside each group.
Delete the features from the list as soon as they are implemented.

General:
*) build-in "for" for array types.
*) Disassembly operator - declare variables with initializer as members of value of composite type.
*) More float types ( 16 bit, 128 bit )
*) More integer types ( 256 bit, 512 bit )
*) Constructor initializer for constexpr structs
*) Allow using blocks in expression context - to have possibility to return, break from a loop, continue, use "with"
	statement, etc
*) Custom field/class attributes, accessible via typeinfo (for metaprogramming)
*) More advanced macros - more context, elements, stringification, string manipulations
*) Simpler syntax for char-types literals (like 'q' in C++)
*) "nodiscard" for functions
*) Consider making "nodiscard" flag presence configurable - based on a constant expression
*) switch-style operator for expression context
*) thread-local variables, including accessing external thread-local variables
*) A way to construct temporary variable with sequence initializer or other initializer kinds,
	(in expression context)
*) Function to function pointer assignment with multiple possible functions
*) Provide calling convention in typeinfo for function types
*) Calling convention as arbitrary constant expression (possibility to generate it in compilation time)
*) Multidimensional [] operator - for accessing elements of multidimensional arrays or as overloaded operator
*) Allow unsafe code and raw pointers in constexpr functions and perform additional safety checks during constexpr
	execution in order to check no UB or non-determinism is possible, like uninitialized memory usage, pointer
	comparison across allocation boundaries, etc.
*) Allow "auto-constexpr" for any function/method with body known
*) A way to hide some names in common (imported) files - for implementation details
*) A way to disable structs, type aliases, static asserts, other stuff in namespaces
*) Investigate possibility of conditional imports
*) Functions with named parameters and ability to specify arguments in any order at call side usinig such names
*) Create for each function a string variable constant like "__PRETTY_FUNCTION__" in order to fetch function
	name inside it
*) Allow default constructors for interfaces
*) Allow zero-sized fields for interfaces (to create inner reference tags, for example)
*) Add a possibility to call external C functions with variadic number of arguments
*) Generate order compare operators (<=>) where it can be done easily (for arrays, tuples, structs with single field).
	Support operator <=> generation for ustlib types (if can do so).
*) Alias for a namespace

References:
*) Support second order inner references for coroutine types
*) Separate reference checking for array elements while accessing via constexpr index

Templates:
*) Default template arguments for short type template form
*) enable_if for type templates
*) Allow template value arguments of some struct types
*) Variable templates

Lambdas:
*) Coroutine lambdas (async, generators)
*) Lambas (or something similar) which create a coroutine object (async function, generator) directly
*) Conversion of lambdas with zero captures into function pointers
*) Simplified lambdas syntax for lambdas consisting of single return statement
*) Template lambdas

Standart library:
*) Move directories-related code into a separate imported file
*) Support opening files with appending
*) Support retrieving modification time for files
*) Directory iteratior
*) Function for files copying
*) Buffered reader/writer wrappers for files
*) "flush" method for writeable files
*) "read_at"/"write_at" methods for files (as more effective alternative to "seek" + "read"/"write")
*) Function for creation of the whole directories path
*) Function for recursive directory removal
*) Function for symlinks resolving
*) Function to get current directory
*) More file error kinds
*) Helper methods for reading/writing file contents into/from string/vector of bytes
*) Examples for file-related functionality
*) Function for system time retrieval (using clock identical to file timestamps)
*) Improve/fix unordered_map - fix tombstones fill-up after removing many elements, add equality-compare method
*) Support types with references inside in some containers (variant, result, unordered_map)
*) Make clear separation between standard library and some intrinsics built-in into the compiler
*) switch-like macro for variant
*) Associative containers - map, set, string_map
*) More algorithms
*) More iterator class methods - like "enumerate" and others
*) Vector drain iterator
*) Functions for conversion of floating-point numbers into string
*) Reverse iterators for random_access_range, unordered_map, etc.
*) shared_ptr - store single pointer for non-polymorph types
*) Time library - get time functions, timers
*) Console input/output library
*) String formatting library
*) Executor for async functions, possible multithreaded
*) More type traits
*) More math functions
*) "result"-like container for reference results
*) Try to optimize random_access_range - use start + end pointers instead of start + size.
	This may improve iteration efficiency.
*) Reference-counting immutable string class
*) Small string optimization
*) Support recursive types with usage of "vector" without need to use additional indirection (via "box")
*) String/vector-like containers with limited number of elements (32-bit or 16-bit sizes)
*) Compact vector-like container - with size/capacity stored in allocated memory block
*) Priority heap support
*) Binary search routines
*) Detachable thread

Compiler:
*) Fix possible overflows in numeric literals
*) Ensure floating-point numbers parsing produces correct result
*) Investigate optimization possibility - avoid mangling private functions
*) Add option to define some constants in prelude (like preprocessor defenitions in C++).
*) Fix possible overflows in SrcLoc and/or try to optimize its size (use only 4 bytes)
*) Speed-up references graph code
*) Avoid recursion in VariantLinkedList destructor - it causes stack overflow for long lists
*) Find a way to detect recursive mixins in blocks, type names, expressions
*) Print full mixin text on error within mixin
*) Imporve TBAA - use struct path-based TBAA.
*) Pass/return by-value composite values containing more than one scalar inside.
	Use some approach, dependent on target architecture, to determine, if type is suitable for passing in registers,
	or it would be better to pass it in memory.
*) Add possibility to execute internal LLD directly, bypassing compiler logic itself
*) Add possibility to execute an external linker (ld, ld.gold, ld.lld, link.exe, etc.)
*) More options for internal linker
*) More internal linkers spupport - MachO, wasm
*) Faster calling convention for non-cross-language functions.
*) Fix possible UB in float->int conversion.
*) Virtual call for final function optimization
*) Do not crash in some cases of code with errors
*) Prevent execution of constexpr functions with errors
*) Inline assembly/module level assembly support
*) Precompiled modules
*) More calling conventions (including platform-dependent)
*) Generate errors about unused function templates
*) Built-in compiler optimization hints ("assume", "likely", "unlikely", etc.)
*) Alloca declaration - allow to specify heap fallback size limit -
	even zero (always use heap) or infinity (always use stack)

Interpreter:
*) Support entry point with args and add possibility to provide such args (argc, argv?)
*) Add possibility to optimize code
*) Support math functions

Compiler1:
*) Support 128-bit types in switch operator
*) Avoid storing common compiler files (keywords list, errors list) inside compiler1 source directory

QtCreator plugin:
*) Language server features support

Language server:
*) Expand macros even if matching fails - in order for code completion to work while writing code using a macro
*) Fix crashes occuring sometimes during editing (possible because of broken code)
*) Fix possible crashes due to accessing source graph instance stored withing CodeBuilder class instance while
	performing completion or signature help. It's wrong, since new syntax elements are constructed for completion or
	signature help and accessing source graph based on source location from new syntax elements is incorrect.
*) Reduce memory usage - avoid building unnecessary code, clear unused internal data structures, make mangled names shorter, etc.
*) Occurences search improvement - search not only in document and its imports, but in other opened and non-opened
	documents. Maybe obtain list of workspace files from build system and scan them.
*) Go to definition - pick definition of function, defined in other document (that is not imported directly)
*) Declarations search
*) Document symbols - provide proper ranges (for namespaces, classes, etc), provide exact selection ranges
*) SignatureHelp - filter suggested functions based on already provided arguments
*) SignatureHelp - return ranges of arguments and active range
*) Improve "go to definition" for templates - fix some cases where templates processing doesn't work
*) Go to definition for non-value names - loop labels, etc.
*) Go to definition for macros
*) Complete file names in "import"
*) Backup completion for non-compiled documents
*) Filter-out some symbol kinds in completion, depending on context
*) Sort completed items using some kind of prioroty
*) Links between errors for template/macro errors
*) More unit-tests
*) Create TargetMachine to obtain proper data layout
*) Support different compilation options (target triple, optimization level, debug flag, etc.) for different documents -
	obtain this information from the build system
*) Detect changes in workspace info files and reload them properly
*) If necessary run build system executable in some temp directory to obtain workspace information

CPP Header converter:
*) White list of converted symbols
*) Black list of converted symbols
*) Ignore some headers or split result into several files
*) Avoid creating too large files (more than 65535 lines)
*) Handle structs with empty contents (they should have size 1 according to C rules)
*) Handle "wchar_t" type specially, not as regular integer
*) Support negative constants in defines
*) Add more satisfying defines conversion - where defined value is a constant expression
*) Handle some subset of C++ headers
*) Simplify common use case with "typedef struct" - use typedef name directly instead of creating an anonymous struct
	and type alias for it

Ü Build system:
*) Use file/directory functions from "ustlib"
*) Fix JSON floats serialization
*) Simplify structs to/from JSON conversion by using template code with typeinfo and mixins usage
*) Fix possible global mutable variables and type id tables duplication because of private linking of a library into
	more than one other build targets, which end up in the same result executable or shared library
*) Add possibility to mark a library build target as "force public" and thus make it public dependency even for build
	targets which depends on it privately. This should ensure exactly one version of this library is linked into result
	executable or shared library.
*) Prevent at least some name conflicts in imports (where multiple files exist for the given import path)
*) Clean command - to delete build files
*) Command line option for building only specified build targets (at least for the root package)
*) Support specifying working directory for custom build steps
*) Support dependency files for custom build steps
*) Ensure output files of custom build steps are located within package build directory or at least within root build
	directory
*) Support non-absolute program paths for custom build steps - where these programs may be resolved via "$PATH"
*) Try to detect dependency loops involving custom build steps before executing the build
*) Save build graph atomically
*) Rebuild build script shared library if compiler executable is changed
*) Granular build graph nodes saving - in order to ensure no build artifacts are reused if command line is changed
*) Speed-up build scripts compilation/loading and package information obtaining by running this in parallel for many
	packages (if possible)
*) Allow to specify diretories for build targets sources - with all files within given directory considered to be
	source files
*) Handle interruption signals (like Ctrl+C) and abort build properly
*) Dependency versions unification improvements - make it faster (reduce algorithms complexity)
*) Dependency versions unification improvements - try to find a better strategy of unification, not just one-by-one
	unification of all build targets of global versioned packages arranged in alphabetical order
*) Add an option to force-override dependencies on a given global package with dependencies on specific version of this
	package
*) Remove from workspace build targets which aren't used directly or indirectly by build targets of the root package -
	to avoid building unused build targets of dependencies and unified-out build targets (where they were replaced with
	a newer version).
*) Support overriding "rpath" for executables
*) Centralized packages repository

Documentation:
*) Other languages (not only russian and english)
*) Describe more language details
*) Documentation for interpreter
*) Describe undefined behavior
*) Document files/directories functionality of the standard library
