Here are some possible language features for future development of the language itself and its compiler.
Features are split into groups - for some major language parts and components.
Delete a feature from the list as soon as it's implemented.

General:
*) build-in "for" for array types.
*) More float types ( 16 bit, 128 bit )
*) More integer types ( 256 bit, 512 bit )
*) Constructor initializer for constexpr structs
*) Allow using blocks in expression context - to have possibility to return, break from a loop, continue, use "with"
	statement, etc
*) Custom field/class attributes, accessible via typeinfo (for metaprogramming)
*) More advanced macros - more context, elements, stringification, string manipulations
*) switch-style operator for expression context
*) A way to construct temporary variable with sequence initializer or other initializer kinds,
	(in expression context)
*) Function to function pointer assignment with multiple possible functions
*) Static assert message as arbitrary constrant expression (possibility to generate it in compilation time)
*) Multidimensional [] operator - for accessing elements of multidimensional arrays or as overloaded operator
*) Allow unsafe code and raw pointers in constexpr functions and perform additional safety checks during constexpr
	execution in order to check no UB or non-determinism is possible, like uninitialized memory usage, pointer
	comparison across allocation boundaries, etc.
*) Allow "auto-constexpr" for any function/method with body known
*) A way to hide some names in common (imported) files - for implementation details
*) A way to disable structs, type aliases, static asserts, other stuff in namespaces - similar to "enable_if"
*) Investigate possibility of conditional imports
*) Functions with named parameters and ability to specify arguments in any order at call side usinig such names
*) Create for each function a string variable constant like "__PRETTY_FUNCTION__" in order to fetch function
	name inside it
*) Allow default constructors for interfaces
*) Allow zero-sized fields for interfaces (to create inner reference tags, for example)
*) Add a possibility to call external C functions with variadic number of arguments
*) Generate order compare operators (<=>) where it can be done easily (for arrays, tuples, structs with single field).
	Support operator <=> generation for ustlib types (if can do so).
*) Alias for a namespace
*) Investigate possibility to use "return" inside one of branches of ternary operator (?:)
*) Inverstigate possibility to add "with" operator (or something similar) in expression context
*) Allow "nodiscard" flag for async functions to affect result of a call via "await"
*) Consider making "nodiscard" flag presence configurable - based on a constant expression
*) Operators to get current file/line/column - in order to use them in macros, like in "assert"
*) Support unit-testing - add function-like unit tests global objects, which are compiled if special compiler flag
	is provided, support building and running such unit-tests in the build system
*) Allow variables decomposition in constructions "with" and "if_coro_advance"
*) Provide more information in typeinfo about member function templates for structs/classes, like calling convention or
	mutability/reference modifiers for params and return values
*) Allow accessing type templates of a class using "." operator for a class instance
*) Support target-specific types like "long double", "__m64", "__m64" and intrinsics for these types.

References:
*) Support second order inner references for coroutine types
*) Separate reference checking for array elements while accessing via constexpr index
*) Support reference pollution involving second order inner references

Templates:
*) Default template arguments for short type template form
*) enable_if for type templates
*) Allow template value arguments of some struct types
*) Variable templates

Lambdas:
*) Coroutine lambdas (async, generators)
*) Lambas (or something similar) which create a coroutine object (async function, generator) directly
*) Conversion of lambdas with zero captures into function pointers
*) Simplified lambdas syntax for lambdas consisting of single return statement
*) Template lambdas

Standart library:
*) Optimize template functions and classes in order to minimize number of things being compiling and thus speed-up
	compilation of user programs using ustlib.
*) Support types with references inside in some containers (variant, result, hash_map)
*) Make clear separation between standard library and some intrinsics built-in into the compiler
*) switch-like macro for variant
*) Associative (ordered) containers - map, set, string_map
*) More algorithms
*) More iterator class methods - like "enumerate" and others
*) Vector drain iterator
*) Functions for conversion of floating-point numbers into string
*) Functions for floating-point numbers parsing
*) Support 128-bit integer types stringification/parsing
*) Reverse iterators for hash_map and hash_set. They are mostly useless, but should exist for completeness.
*) Time library - request monotonic time, perform time difference calculations, perform conversions from/to calendar
	time, perform conversions to human-readable format
*) String formatting library
*) Support casting "shared_ptr_final</A/>" to "shared_ptr_final</B/>" if A and B are polymorph related types
*) Formatted console output functions
*) Executor for async functions, possible multithreaded
*) More type traits
*) More math functions
*) "result"-like container for reference results
*) Optimize size of the "result" container for storing an enum-like error and "void" succes type
*) Support opening files with appending
*) Fix "rename_file_or_directory_if_not_exists" implementation for Unix - perform operation atomically
*) Fix "get_metadata_for_path" implementation for Windows - follow symbolic links
*) Fix non-ASCII input on Windows (in CMD consoles)
*) More file kinds - fifo, block device, etc.
*) More file error kinds
*) Memory-mapped files
*) "read_at"/"write_at" methods for files (as more effective alternative to "seek" + "read"/"write")
*) Buffered reader/writer wrappers for files
*) Examples for file-related functionality
*) Optimize filesystem functions - avoid unnecessary string conversions (utf16 <-> utf8), null-terminator adding
*) Support symlinks operations - create symlink, read symlink, handle symlinks
*) More filesystem path manipulation functions
*) Try to optimize random_access_range - use start + end pointers instead of start + size.
	This may improve iteration efficiency.
*) Reference-counting immutable string class
*) Small string optimization
*) Support recursive types with usage of "vector" without need to use additional indirection (via "box")
*) String/vector-like containers with limited number of elements (32-bit or 16-bit sizes)
*) Compact vector-like container - with size/capacity stored in allocated memory block
*) Optimize sorting - use faster algorithm for small number of elements, select median element wisely
*) Detachable thread
*) More binary search functions - index of last element less than given (or equal to it), index of given element,
	range partition
*) Adapter-container for binary heap (min_heap/max_heap)

Compiler:
*) Ensure floating-point numbers parsing produces correct result
*) Support parsing 128-bit integers
*) Prevent infinite or near-infinite templates instantiation, possibly via a hard limit for total number of template
	instantiations. This may prevent stack overflow in some cases.
*) Limit number of lex/synt errors printed - to avoid printing too many of them
*) Generate a parsing error if line count/line length limits are reached
*) Investigate optimization possibility - avoid mangling private functions
*) Fix possible overflows in SrcLoc and/or try to optimize its size (use only 4 bytes)
*) Speed-up references graph code - try using faster hash-map implementation
*) Avoid recursion in VariantLinkedList destructor - it causes stack overflow for long lists
*) Find a way to detect recursive mixins in blocks, type names, expressions
*) Print full mixin text on error within mixin
*) Imporve TBAA - use struct path-based TBAA.
*) Use TBAA metadata for load/store instructions, used for some composite arguments and return values.
*) Use target-specific calling-convention knowledge (available registers) to determine the most effective way of
	parameters passing and result returning in functions with default calling convention. Perform calculation based on
	all parameter types and return type.
*) Add possibility to execute internal LLD directly, bypassing compiler logic itself
*) Add possibility to execute an external linker (ld, ld.gold, ld.lld, link.exe, etc.)
*) More options for internal linker
*) Support WASM linker
*) Fix possible UB in float->int conversion.
*) Virtual call for final function optimization
*) Do not crash in some cases of code with errors
*) Prevent execution of constexpr functions with errors
*) Inline assembly/module level assembly support
*) More calling conventions (including platform-dependent)
*) Generate errors about unused function templates
*) Built-in compiler optimization hints ("assume", "likely", "unlikely", etc.)
*) Alloca declaration - allow to specify heap fallback size limit -
	even zero (always use heap) or infinity (always use stack)

Interpreter:
*) Sdd possibility to provide proper argc/argv (not only stubs for them)
*) Add possibility to optimize code
*) Fix working on 32-bit Windows
*) Fix working on 32-bit GNU/Linux
*) Fix working on AArch64 OS X
*) Support math functions

Compiler1:
*) Support 128-bit types in switch operator
*) Create VFS and load source files from Ü code (using ustlib filesystem functionality), instead of using VFS from C++

QtCreator plugin:
*) Language server features support

Visual Studio extension:
*) Test Visual Studio Ü extension with newer Visual Studio versions, like 2022
*) Support building Ü projects via "Build" menu using Ü build system
*) Add editor behavior tuning via "language-configuration.json" file
*) Stop language server process if necessary
*) Add possibility to restart language server process if settings are changed

Language server:
*) Fix crashes occuring sometimes during editing (possible because of broken code)
*) Fix possible crashes due to accessing source graph instance stored within CodeBuilder class instance while
	performing completion or signature help. It's wrong, since new syntax elements are constructed for completion or
	signature help and accessing source graph based on source location from new syntax elements is incorrect.
*) Reduce memory usage - avoid building unnecessary code, clear unused internal data structures, make mangled names shorter, etc.
*) Occurences search improvement - search not only in document and its imports, but in other opened and non-opened
	documents. Maybe obtain list of workspace files from build system and scan them.
*) Go to definition - pick definition of function, defined in other document (that is not imported directly)
*) Declarations search
*) Document symbols - provide proper ranges (for namespaces, classes, etc), provide exact selection ranges
*) SignatureHelp - filter suggested functions based on already provided arguments
*) SignatureHelp - return ranges of arguments and active range
*) Improve "go to definition" for templates - fix some cases where templates processing doesn't work
*) Go to definition for non-value names - loop labels, macro names, etc.
*) Go to definition for macros
*) Complete file names in "import"
*) Backup completion for non-compiled documents
*) Filter-out some symbol kinds in completion, depending on context
*) Sort completed items using some kind of prioroty
*) Links between errors for template/macro errors
*) More unit-tests
*) Create TargetMachine to obtain proper data layout
*) Support different compilation options (target triple, optimization level, debug flag, etc.) for different documents -
	obtain this information from the build system
*) Detect changes in workspace info files and reload them properly
*) If necessary run build system executable in some temp directory to obtain workspace information

CPP Header converter:
*) White list of converted symbols
*) Black list of converted symbols
*) Ignore some headers or split result into several files
*) Avoid creating too large files (more than 65535 lines)
*) Handle "wchar_t" type specially, not as regular integer
*) Support negative constants in defines
*) Add more satisfying defines conversion - where defined value is a constant expression
*) Handle some subset of C++ headers
*) Simplify common use case with "typedef struct" - use typedef name directly instead of creating an anonymous struct
	and type alias for it

Ü Build system:
*) Support building "ustlib" into a shared library (dll/so)
*) Fix JSON floats serialization
*) Simplify structs to/from JSON conversion by using template code with typeinfo and mixins usage
*) Add possibility to mark a library build target as "force public" and thus make it public dependency even for build
	targets which depend on it privately. This should ensure that exactly one version of this library is linked into
	result executable or shared library.
*) Prevent at least some name conflicts in imports (where multiple files exist for the given import path)
*) Clean command - to delete build files
*) Command line option for building only specified build targets (at least for the root package)
*) Support specifying working directory for custom build steps
*) Support dependency files for custom build steps
*) Ensure output files of custom build steps are located within package build directory or at least within root build
	directory
*) Try to detect dependency loops involving custom build steps before executing the build
*) Save build graph atomically
*) Rebuild build script shared libraries and ustlib for them if compiler executable is changed
*) Granular build graph nodes saving - in order to ensure no build artifacts are reused if command line is changed
*) Speed-up build scripts compilation/loading and package information obtaining by running this in parallel for many
	packages (if possible)
*) Allow to specify diretories for build targets sources - with all files within given directory considered to be
	source files
*) Handle interruption signals (like Ctrl+C) and abort build properly
*) Dependency versions unification improvements - make it faster (reduce algorithms complexity)
*) Dependency versions unification improvements - try to find a better strategy of unification, not just one-by-one
	unification of all build targets of global versioned packages arranged in alphabetical order
*) Add an option to force-override dependencies on a given global package with dependencies on specific version of this
	package
*) Remove from workspace build targets which aren't used directly or indirectly by build targets of the root package -
	to avoid building unused build targets of dependencies and unified-out build targets (where they were replaced with
	a newer version).
*) Support overriding "rpath" for executables
*) Add an option to specify target CPU for host build targets
*) Add an option to specify exact CPU flags and floating point behavior
*) Centralized packages repository

Documentation:
*) Other languages (not only russian and english)
*) Describe more language details
*) Documentation for interpreter
*) Documentation for CPP Header converter
*) Describe undefined behavior

Targets:
*) Support targeting Android
*) Support targeting iOS
*) Support targeting GNU/Linux with x32 ABI
*) Support older versions of OS X (prior to 15.0)
*) Fix broken standard library functionality on OS X (semaphores, some file operations)
*) Support hosting/targeting OS X on x86_64 CPUs
*) Support hosting/targeting Windows on AArch64 CPUs
*) Support targeting WASM
