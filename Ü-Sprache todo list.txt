Here are some language features for future development of the language itself and its
compiler. Features are grouped and sorted by priority inside each group.
Delete the features from the list as soon as they are implemented.

General:
*) build-in "for" for array types.
*) Disassembly operator - declare variables with initializer as members of value of composite type.
*) More float types ( 16 bit, 128 bit )
*) Constructor initializer for constexpr structs
*) Custom field/class attributes, accessible via typeinfo (for metaprogramming)
*) More advanced macros - more context, elements, string manipulations
*) switch-style operator for expression context
*) thread-local variables
*) A way to construct temporary variable with sequence initializer or other initializer kinds,
	(in expression context)
*) "nodiscard" for types (and/or) functions
*) Function to function pointer assignment with multiple possible functions
*) Provide calling convention in typeinfo for function types
*) Variable templates
*) Mixins in type name context
*) Mixins in expression context

References:
*) Separate reference checking for array elements while accessing via constexpr index
*) Support reference fields of types with references inside

Templates:
*) Default template arguments for short type template form
*) enable_if for type templates

Lambdas:
*) Coroutine lambdas (async, generators)
*) Lambas (or something similar) which create a coroutine object (async function, generator) directly
*) Conversion of lambdas with zero captures into function pointers

Standart library:
*) Compilation speed-up - avoid generating some helper classes/functions
*) Improve/fix unordered_map
*) Support types with references inside in some containers (variant, result, unordered_map)
*) switch-like macro for variant
*) Associative containers - map, set, string_map
*) More algorithms
*) More iterator class methods - "zip", "enumerate" and other
*) Vector drain iterator
*) Reverse iterators for random_access_range, unordered_map, etc.
*) Time library - get time functions, timers
*) File library
*) Console input/output library
*) Formatting library
*) More type traits
*) More math functions

Compiler:
*) Investigate optimization possibility - avoid mangling private functions
*) Add option to define some constants in prelude (like preprocessor defenitions in C++).
*) Speed-up references graph code
*) Imporve TBAA - use struct path-based TBAA.
*) Pass/return by-value composite values containing more than one scalar inside.
	Use some approach, dependent on target architecture, to determine, if type is suitable for passing in registers,
	or it would be better to pass it in memory.
*) Add possibility to execute internal LLD directly, bypassing compiler logic itself
*) More options for internal linker
*) More internal linkers spupport - MinGW, MachO, wasm
*) Faster calling convention for non-cross-language functions.
*) Fix possible UB in float->int conversion.
*) Virtual call for final function optimization
*) Do not crash in some cases of code with errors
*) Prevent execution of constexpr functions with errors
*) Inline assembly/module level assembly support
*) Precompiled modules
*) More calling conventions (including platform-dependent)
*) Generate errors about unused function templates

Interpreter:
*) Support entry point with args and add possibility to provide such args (argc, argv?)
*) Add possibility to optimize code
*) Support math functions

Compiler1:
*) Support 128-bit types in switch operator

QtCreator plugin:
*) Language server features support

Language server:
*) Fix crashes occuring sometimes during editing (possible because of broken code)
*) Reduce memory usage - avoid building unnecessary code, clear unused internal data structures, make mangled names shorter, etc.
*) Occurences search improvement - search not only in document and its imports, but in other opened and non-opened documents
*) Go to definition - pick definition of function, defined in other document (that is not imported directly)
*) Declarations search
*) Document symbols - provide proper ranges (for namespaces, classes, etc), provide exact selection ranges
*) A way to provide configuration (import directories, other compilation options)
*) SignatureHelp - filter suggested functions based on already provided arguments
*) SignatureHelp - return ranges of arguments and active range
*) Avoid infinite calculations in constexpr functions executiong during compilation in the LanguageServer
*) Improve "go to definition" for templates - fix some cases where templates processing doesn't work
*) Go to definition for non-value names - loop labels, reference tags, etc.
*) Go to definition for macros
*) Complete file names in "import"
*) Backup completion for non-compiled documents
*) Filter-out some symbol kinds in completion, depending on context
*) Sort completed items using some kind of prioroty
*) Links between errors for template/macro errors
*) More unit-tests
*) Create TargetMachine to obtain proper data layout

CPP Header converter:
*) White list of converted symbols
*) Black list of converted symbols
*) Ignore some headers or split result into several files

Documentation:
*) Other languages (not only russian and english)
*) Describe more language details
