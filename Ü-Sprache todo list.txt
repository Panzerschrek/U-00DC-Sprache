Here are some language features for future development of the language itself and its
compiler. Features are grouped and sorted by priority inside each group.
Delete the features from the list as soon as they are implemented.

General:
*) Dereference operator - for pointer-like classes.
*) Continious initializer for arrays
*) Explicit definition of cross-language called functions (FFI). Something like "extern C" and "extern system" in Rust.
*) Different calling conventions (for API calls, for example)
*) Anonymous (module-local) symbols - functions, classes, variables.
*) <, <=, >, >= for enums.
*) Forbid inner reference kind changing in inheritance.
*) Forbid "shared" tag changing in inheritance.
*) build-in "for" for array types.
*) type for raw data representation (like "char" in C++, which may alias with every type).
*) Accessing overloaded operators directly, take pointers to overloaded operators.
*) switch-case
*) "Disassembly operator" - declare variables with initializer as members of
	value of structure type.
*) Function to function pointer assignment
*) == and != methods generation
*) Functions references info in "typeinfo".
*) More float types ( 16 bit, 128 bit )
*) Constructor initializer for constexpr structs
*) Lambdas.
*) Function pointers inside constexpr functions
*) Reference result of constexpr function evaluation
*) More advanced macros - more context, elements, string manipulations
*) Some code customization mechanism (like preprocessor directives and ifdef/endif in C++).

References:
*) Tags for struct/class references
*) Separate references checking for struct members - add possibility to have two
	mutable references for two different members of one struct value.

Templates:
*) Default template arguments for short type template form
*) Template function body generation only if function is selected for call
*) enable_if for templates
*) Variadic templates
*) Function templates with template-dependent reference and mutability modifiers
	for arguments. Conditional move for such arguments.

Standart library:
*) Associative containers - map, set, string_map
*) Forbid dangerous calls of "get_ref" method of nullable containers (box, shared_ptr, final_ptr, optional_ref). Allow "get_ref" only for non-nullable containers.
*) Forbid non-thread-safe shared pointers in thread-safe shared pointers
*) "memory_copy" with alignment
*) More algorithms
*) Time library - get time functions, timers
*) File library
*) More type traits
*) More math functions

Compiler:
*) Use TBAA from LLVM.
*) Faster calling convention for non-cross-language functions.
*) MSVC mangling.
*) Virtual call for final function optimization
*) Do not crash in some cases of code with errors
*) Prevent execution of constexpr functions with errors
*) Return value optimization
*) Precompiled modules
*) Rework of "Value" class

Compiler1:

QtCreator plugin:
*) Syntax errors highlighting
*) Symbol table construction for document
*) "go to defenition" possibility
*) Indentation in editor
*) More advanced program model updating

*) Plugins for other IDEs

CPP Header converter:
*) fix "typedef enum { A, B, C } X;"

Documentation:
*) Macros
*) More, then one language
